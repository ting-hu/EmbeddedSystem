
Mastermind Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010910  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002124  08010af0  08010af0  00020af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c14  08012c14  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08012c14  08012c14  00022c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c1c  08012c1c  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c1c  08012c1c  00022c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c20  08012c20  00022c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08012c24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a8  20000104  08012d28  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056ac  08012d28  000356ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041912  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071ee  00000000  00000000  00071a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003098  00000000  00000000  00078c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da8  00000000  00000000  0007bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c143  00000000  00000000  0007ea78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b6a4  00000000  00000000  0008abbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd8b5  00000000  00000000  000b625f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3b14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d208  00000000  00000000  001b3b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000104 	.word	0x20000104
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010ad8 	.word	0x08010ad8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000108 	.word	0x20000108
 800021c:	08010ad8 	.word	0x08010ad8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  for (int i = 0; i <10; i++ )
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e014      	b.n	8000566 <main+0x36>
  {
	  for (int j = 0; j < 4; j++)
 800053c:	2300      	movs	r3, #0
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	e00b      	b.n	800055a <main+0x2a>
	  {
		  newColorMap[i][j] = LCD_COLOR_WHITE;
 8000542:	492f      	ldr	r1, [pc, #188]	; (8000600 <main+0xd0>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	009a      	lsls	r2, r3, #2
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	4413      	add	r3, r2
 800054c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000550:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for (int j = 0; j < 4; j++)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b03      	cmp	r3, #3
 800055e:	ddf0      	ble.n	8000542 <main+0x12>
  for (int i = 0; i <10; i++ )
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b09      	cmp	r3, #9
 800056a:	dde7      	ble.n	800053c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f003 f928 	bl	80037c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f856 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fb68 	bl	8000c48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000578:	f000 f906 	bl	8000788 <MX_ADC1_Init>
  MX_DAC_Init();
 800057c:	f000 f956 	bl	800082c <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000580:	f000 f97e 	bl	8000880 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000584:	f000 f9b4 	bl	80008f0 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000588:	f000 fa1c 	bl	80009c4 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800058c:	f000 fc8c 	bl	8000ea8 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000590:	f000 fa7c 	bl	8000a8c <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000594:	f000 faa8 	bl	8000ae8 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000598:	f000 fad2 	bl	8000b40 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800059c:	f000 fb00 	bl	8000ba0 <MX_UART10_Init>
  MX_USART6_UART_Init();
 80005a0:	f000 fb28 	bl	8000bf4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80005a4:	f000 fa44 	bl	8000a30 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a8:	f000 f8da 	bl	8000760 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // LCD Setup
   BSP_LCD_Init();
 80005ac:	f002 fcbf 	bl	8002f2e <BSP_LCD_Init>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005b4:	f002 fd7a 	bl	80030ac <BSP_LCD_Clear>

   BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f002 fb02 	bl	8002bc4 <BSP_PB_Init>

   BSP_LCD_SetFont(&Font24);
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0xd4>)
 80005c2:	f002 fd63 	bl	800308c <BSP_LCD_SetFont>

   BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80005c6:	f24a 1045 	movw	r0, #41285	; 0xa145
 80005ca:	f002 fd3f 	bl	800304c <BSP_LCD_SetTextColor>
   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005d2:	f002 fd4b 	bl	800306c <BSP_LCD_SetBackColor>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d6:	f00c ff3b 	bl	800d450 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of drawScreen */
  drawScreenHandle = osThreadNew(DrawScreenTask, NULL, &drawScreen_attributes);
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <main+0xd8>)
 80005dc:	2100      	movs	r1, #0
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <main+0xdc>)
 80005e0:	f00c ffa0 	bl	800d524 <osThreadNew>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <main+0xe0>)
 80005e8:	601a      	str	r2, [r3, #0]

  /* creation of gameControl */
  gameControlHandle = osThreadNew(GameControlTask, NULL, &gameControl_attributes);
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0xe4>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0xe8>)
 80005f0:	f00c ff98 	bl	800d524 <osThreadNew>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0xec>)
 80005f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fa:	f00c ff5d 	bl	800d4b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0xce>
 8000600:	20004d44 	.word	0x20004d44
 8000604:	20000064 	.word	0x20000064
 8000608:	08010b48 	.word	0x08010b48
 800060c:	0800100d 	.word	0x0800100d
 8000610:	20004e68 	.word	0x20004e68
 8000614:	08010b6c 	.word	0x08010b6c
 8000618:	08001171 	.word	0x08001171
 800061c:	20004eb4 	.word	0x20004eb4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0aa      	sub	sp, #168	; 0xa8
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f010 f95b 	bl	80108ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2258      	movs	r2, #88	; 0x58
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f010 f94c 	bl	80108ea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b40      	ldr	r3, [pc, #256]	; (8000758 <SystemClock_Config+0x138>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <SystemClock_Config+0x138>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <SystemClock_Config+0x138>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b3a      	ldr	r3, [pc, #232]	; (800075c <SystemClock_Config+0x13c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a39      	ldr	r2, [pc, #228]	; (800075c <SystemClock_Config+0x13c>)
 8000678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <SystemClock_Config+0x13c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800068a:	2303      	movs	r3, #3
 800068c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000692:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006ae:	230f      	movs	r3, #15
 80006b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006b4:	2390      	movs	r3, #144	; 0x90
 80006b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006c0:	2305      	movs	r3, #5
 80006c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006d0:	4618      	mov	r0, r3
 80006d2:	f007 fa79 	bl	8007bc8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 fefc 	bl	80014d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fc8a 	bl	8007014 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000706:	f000 fee7 	bl	80014d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800070a:	f240 1371 	movw	r3, #369	; 0x171
 800070e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000714:	230c      	movs	r3, #12
 8000716:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800072c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800072e:	2300      	movs	r3, #0
 8000730:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	4618      	mov	r0, r3
 8000740:	f006 fe66 	bl	8007410 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800074a:	f000 fec5 	bl	80014d8 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	37a8      	adds	r7, #168	; 0xa8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2017      	movs	r0, #23
 800076a:	f003 fbb7 	bl	8003edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800076e:	2017      	movs	r0, #23
 8000770:	f003 fbd0 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2028      	movs	r0, #40	; 0x28
 800077a:	f003 fbaf 	bl	8003edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077e:	2028      	movs	r0, #40	; 0x28
 8000780:	f003 fbc8 	bl	8003f14 <HAL_NVIC_EnableIRQ>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_ADC1_Init+0x98>)
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <MX_ADC1_Init+0x9c>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_ADC1_Init+0x98>)
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_ADC1_Init+0xa0>)
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_ADC1_Init+0x98>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_ADC1_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_ADC1_Init+0x98>)
 80007e8:	f003 f84e 	bl	8003888 <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 fe71 	bl	80014d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_ADC1_Init+0x98>)
 8000808:	f003 f882 	bl	8003910 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000812:	f000 fe61 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20004c9c 	.word	0x20004c9c
 8000824:	40012000 	.word	0x40012000
 8000828:	0f000001 	.word	0x0f000001

0800082c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_DAC_Init+0x4c>)
 800083c:	4a0f      	ldr	r2, [pc, #60]	; (800087c <MX_DAC_Init+0x50>)
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_DAC_Init+0x4c>)
 8000842:	f003 fb75 	bl	8003f30 <HAL_DAC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800084c:	f000 fe44 	bl	80014d8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_DAC_Init+0x4c>)
 8000860:	f003 fbdc 	bl	800401c <HAL_DAC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800086a:	f000 fe35 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20004ce4 	.word	0x20004ce4
 800087c:	40007400 	.word	0x40007400

08000880 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	; (80008ec <MX_DFSDM1_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 800088c:	2201      	movs	r2, #1
 800088e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008d4:	f003 fbfa 	bl	80040cc <HAL_DFSDM_ChannelInit>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008de:	f000 fdfb 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20004ac0 	.word	0x20004ac0
 80008ec:	40016020 	.word	0x40016020

080008f0 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 80008f6:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <MX_DFSDM2_Init+0xc8>)
 80008f8:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000908:	2202      	movs	r2, #2
 800090a:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000920:	2202      	movs	r2, #2
 8000922:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000932:	2201      	movs	r2, #1
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_DFSDM2_Init+0xc4>)
 8000944:	f003 fbc2 	bl	80040cc <HAL_DFSDM_ChannelInit>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800094e:	f000 fdc3 	bl	80014d8 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000954:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <MX_DFSDM2_Init+0xd0>)
 8000956:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 800095a:	2201      	movs	r2, #1
 800095c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000966:	2202      	movs	r2, #2
 8000968:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 800097e:	2202      	movs	r2, #2
 8000980:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000990:	2201      	movs	r2, #1
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_DFSDM2_Init+0xcc>)
 80009a2:	f003 fb93 	bl	80040cc <HAL_DFSDM_ChannelInit>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80009ac:	f000 fd94 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20004c64 	.word	0x20004c64
 80009b8:	40016420 	.word	0x40016420
 80009bc:	20004b9c 	.word	0x20004b9c
 80009c0:	400164e0 	.word	0x400164e0

080009c4 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_FMPI2C1_Init+0x64>)
 80009cc:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_FMPI2C1_Init+0x68>)
 80009d2:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 8000a00:	f003 fcb8 	bl	8004374 <HAL_FMPI2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 fd65 	bl	80014d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_FMPI2C1_Init+0x60>)
 8000a12:	f003 fd3e 	bl	8004492 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 fd5c 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20004cf8 	.word	0x20004cf8
 8000a28:	40006000 	.word	0x40006000
 8000a2c:	00303d5b 	.word	0x00303d5b

08000a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <MX_I2C2_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_I2C2_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C2_Init+0x50>)
 8000a6e:	f005 fc33 	bl	80062d8 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 fd2e 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20004af8 	.word	0x20004af8
 8000a84:	40005800 	.word	0x40005800
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MX_I2S2_Init+0x58>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000ab4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_I2S2_Init+0x54>)
 8000ace:	f005 fd3b 	bl	8006548 <HAL_I2S_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ad8:	f000 fcfe 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20004eb8 	.word	0x20004eb8
 8000ae4:	40003800 	.word	0x40003800

08000ae8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_QUADSPI_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_QUADSPI_Init+0x50>)
 8000b24:	f006 f9b4 	bl	8006e90 <HAL_QSPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 fcd3 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004f00 	.word	0x20004f00
 8000b3c:	a0001000 	.word	0xa0001000

08000b40 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_SDIO_SD_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b70:	f007 fa6c 	bl	800804c <HAL_SD_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b7a:	f000 fcad 	bl	80014d8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_SDIO_SD_Init+0x58>)
 8000b84:	f007 fc96 	bl	80084b4 <HAL_SD_ConfigWideBusOperation>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 fca3 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004de4 	.word	0x20004de4
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_UART10_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_UART10_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_UART10_Init+0x4c>)
 8000bd8:	f008 fa26 	bl	8009028 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 fc79 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20004bd4 	.word	0x20004bd4
 8000bf0:	40011c00 	.word	0x40011c00

08000bf4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART6_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART6_UART_Init+0x4c>)
 8000c2c:	f008 f9fc 	bl	8009028 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 fc4f 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20004e6c 	.word	0x20004e6c
 8000c44:	40011400 	.word	0x40011400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	4b89      	ldr	r3, [pc, #548]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a88      	ldr	r2, [pc, #544]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	4b82      	ldr	r3, [pc, #520]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a81      	ldr	r2, [pc, #516]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a7a      	ldr	r2, [pc, #488]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000ca0:	f043 0320 	orr.w	r3, r3, #32
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b74      	ldr	r3, [pc, #464]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a73      	ldr	r2, [pc, #460]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a6c      	ldr	r2, [pc, #432]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b66      	ldr	r3, [pc, #408]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a65      	ldr	r2, [pc, #404]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a5e      	ldr	r2, [pc, #376]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a57      	ldr	r2, [pc, #348]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2138      	movs	r1, #56	; 0x38
 8000d42:	4852      	ldr	r0, [pc, #328]	; (8000e8c <MX_GPIO_Init+0x244>)
 8000d44:	f003 fd9a 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4850      	ldr	r0, [pc, #320]	; (8000e90 <MX_GPIO_Init+0x248>)
 8000d4e:	f003 fd95 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d58:	484e      	ldr	r0, [pc, #312]	; (8000e94 <MX_GPIO_Init+0x24c>)
 8000d5a:	f003 fd8f 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	484c      	ldr	r0, [pc, #304]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000d66:	f003 fd89 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d6a:	2338      	movs	r3, #56	; 0x38
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4842      	ldr	r0, [pc, #264]	; (8000e8c <MX_GPIO_Init+0x244>)
 8000d82:	f003 fbd1 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000d86:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <MX_GPIO_Init+0x254>)
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4841      	ldr	r0, [pc, #260]	; (8000ea0 <MX_GPIO_Init+0x258>)
 8000d9c:	f003 fbc4 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000da0:	2302      	movs	r3, #2
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <MX_GPIO_Init+0x254>)
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4837      	ldr	r0, [pc, #220]	; (8000e90 <MX_GPIO_Init+0x248>)
 8000db4:	f003 fbb8 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000db8:	f248 0301 	movw	r3, #32769	; 0x8001
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <MX_GPIO_Init+0x254>)
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4835      	ldr	r0, [pc, #212]	; (8000ea4 <MX_GPIO_Init+0x25c>)
 8000dce:	f003 fbab 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x248>)
 8000dea:	f003 fb9d 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000dee:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x254>)
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4824      	ldr	r0, [pc, #144]	; (8000e94 <MX_GPIO_Init+0x24c>)
 8000e04:	f003 fb90 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000e08:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0x24c>)
 8000e22:	f003 fb81 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4816      	ldr	r0, [pc, #88]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000e40:	f003 fb72 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_GPIO_Init+0x254>)
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000e5a:	f003 fb65 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e5e:	2330      	movs	r3, #48	; 0x30
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_GPIO_Init+0x24c>)
 8000e7a:	f003 fb55 	bl	8004528 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3738      	adds	r7, #56	; 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	10110000 	.word	0x10110000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ec2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ec6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ec8:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <MX_FSMC_Init+0x158>)
 8000eca:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <MX_FSMC_Init+0x15c>)
 8000ecc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ed4:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <MX_FSMC_Init+0x158>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ee0:	4b47      	ldr	r3, [pc, #284]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <MX_FSMC_Init+0x158>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <MX_FSMC_Init+0x158>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ef8:	4b41      	ldr	r3, [pc, #260]	; (8001000 <MX_FSMC_Init+0x158>)
 8000efa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f06:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f36:	230f      	movs	r3, #15
 8000f38:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f3e:	2311      	movs	r3, #17
 8000f40:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482c      	ldr	r0, [pc, #176]	; (8001000 <MX_FSMC_Init+0x158>)
 8000f4e:	f007 fde9 	bl	8008b24 <HAL_SRAM_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000f58:	f000 fabe 	bl	80014d8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f5e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f62:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <MX_FSMC_Init+0x15c>)
 8000f68:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f7e:	2210      	movs	r2, #16
 8000f80:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_FSMC_Init+0x160>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_FSMC_Init+0x160>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fda:	2311      	movs	r3, #17
 8000fdc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_FSMC_Init+0x160>)
 8000fea:	f007 fd9b 	bl	8008b24 <HAL_SRAM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8000ff4:	f000 fa70 	bl	80014d8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20004c14 	.word	0x20004c14
 8001004:	a0000104 	.word	0xa0000104
 8001008:	20004d94 	.word	0x20004d94

0800100c <DrawScreenTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DrawScreenTask */
void DrawScreenTask(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001014:	f00f f922 	bl	801025c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (drawScreen)
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <DrawScreenTask+0x13c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0fb      	beq.n	8001018 <DrawScreenTask+0xc>
	  {
		  if (clearScreen)
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <DrawScreenTask+0x140>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <DrawScreenTask+0x22>
	      {

	      	clearScreen = false;
 8001028:	4b48      	ldr	r3, [pc, #288]	; (800114c <DrawScreenTask+0x140>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]

	      }

	      if (screenNum == 1)
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <DrawScreenTask+0x144>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	f000 8083 	beq.w	800113e <DrawScreenTask+0x132>
	      {

	      }
	      else if (screenNum == 2)
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <DrawScreenTask+0x144>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d17e      	bne.n	800113e <DrawScreenTask+0x132>
	      {
	    	  for (int i = 0; i <10; i++ )
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e061      	b.n	800110a <DrawScreenTask+0xfe>
	    	  {
	    		  for (int j = 0; j < 4; j++)
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e058      	b.n	80010fe <DrawScreenTask+0xf2>
	    		  {
	    			  if (currentColorMap[i][j] != newColorMap[i][j])
 800104c:	4941      	ldr	r1, [pc, #260]	; (8001154 <DrawScreenTask+0x148>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009a      	lsls	r2, r3, #2
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <DrawScreenTask+0x14c>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	0099      	lsls	r1, r3, #2
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	440b      	add	r3, r1
 8001064:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001068:	429a      	cmp	r2, r3
 800106a:	d045      	beq.n	80010f8 <DrawScreenTask+0xec>
	    			  {
	    				  BSP_LCD_SetTextColor(newColorMap[i][j]);
 800106c:	493a      	ldr	r1, [pc, #232]	; (8001158 <DrawScreenTask+0x14c>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800107a:	4618      	mov	r0, r3
 800107c:	f001 ffe6 	bl	800304c <BSP_LCD_SetTextColor>
	    				  BSP_LCD_FillCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 8001080:	4936      	ldr	r1, [pc, #216]	; (800115c <DrawScreenTask+0x150>)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	009a      	lsls	r2, r3, #2
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108e:	b298      	uxth	r0, r3
 8001090:	4933      	ldr	r1, [pc, #204]	; (8001160 <DrawScreenTask+0x154>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	009a      	lsls	r2, r3, #2
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2208      	movs	r2, #8
 80010a2:	b292      	uxth	r2, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 fa05 	bl	80034b4 <BSP_LCD_FillCircle>
	    				  currentColorMap[i][j] = newColorMap[i][j];
 80010aa:	492b      	ldr	r1, [pc, #172]	; (8001158 <DrawScreenTask+0x14c>)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	009a      	lsls	r2, r3, #2
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80010b8:	4926      	ldr	r1, [pc, #152]	; (8001154 <DrawScreenTask+0x148>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	4602      	mov	r2, r0
 80010c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	    				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f001 ffbf 	bl	800304c <BSP_LCD_SetTextColor>
	    				  BSP_LCD_DrawCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 80010ce:	4923      	ldr	r1, [pc, #140]	; (800115c <DrawScreenTask+0x150>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	009a      	lsls	r2, r3, #2
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4413      	add	r3, r2
 80010d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010dc:	b298      	uxth	r0, r3
 80010de:	4920      	ldr	r1, [pc, #128]	; (8001160 <DrawScreenTask+0x154>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	009a      	lsls	r2, r3, #2
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	2208      	movs	r2, #8
 80010f0:	b292      	uxth	r2, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f002 f922 	bl	800333c <BSP_LCD_DrawCircle>
	    		  for (int j = 0; j < 4; j++)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b03      	cmp	r3, #3
 8001102:	dda3      	ble.n	800104c <DrawScreenTask+0x40>
	    	  for (int i = 0; i <10; i++ )
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b09      	cmp	r3, #9
 800110e:	dd9a      	ble.n	8001046 <DrawScreenTask+0x3a>
	    			  }
	    		  }
	    	  }

	    	  if (drawClue)
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <DrawScreenTask+0x158>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <DrawScreenTask+0x132>
	    	  {
	    		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001118:	2000      	movs	r0, #0
 800111a:	f001 ff97 	bl	800304c <BSP_LCD_SetTextColor>
	    		  BSP_LCD_DisplayStringAt(90, yPositionMap[gameRound-1][0], clue, LEFT_MODE);
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <DrawScreenTask+0x15c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <DrawScreenTask+0x154>)
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b299      	uxth	r1, r3
 800112e:	2303      	movs	r3, #3
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <DrawScreenTask+0x160>)
 8001132:	205a      	movs	r0, #90	; 0x5a
 8001134:	f002 f81a 	bl	800316c <BSP_LCD_DisplayStringAt>
	    		  drawClue = false;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <DrawScreenTask+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	      else if (screenNum == 3)
	      {

	      }

	      drawScreen = false;
 800113e:	4b02      	ldr	r3, [pc, #8]	; (8001148 <DrawScreenTask+0x13c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	  if (drawScreen)
 8001144:	e768      	b.n	8001018 <DrawScreenTask+0xc>
 8001146:	bf00      	nop
 8001148:	2000001b 	.word	0x2000001b
 800114c:	2000001a 	.word	0x2000001a
 8001150:	2000001c 	.word	0x2000001c
 8001154:	20004b4c 	.word	0x20004b4c
 8001158:	20004d44 	.word	0x20004d44
 800115c:	08010b90 	.word	0x08010b90
 8001160:	08010c30 	.word	0x08010c30
 8001164:	20000154 	.word	0x20000154
 8001168:	20000124 	.word	0x20000124
 800116c:	20000140 	.word	0x20000140

08001170 <GameControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GameControlTask */
void GameControlTask(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GameControlTask */
  /* Infinite loop */
  for(;;)
  {
	  if (screenNum == 1)
 8001178:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <GameControlTask+0x27c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d0fb      	beq.n	8001178 <GameControlTask+0x8>
	  {

	  }
	  else if (screenNum == 2)
 8001180:	4b9a      	ldr	r3, [pc, #616]	; (80013ec <GameControlTask+0x27c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d1f7      	bne.n	8001178 <GameControlTask+0x8>
	  {
		  if(generateSolution)
 8001188:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <GameControlTask+0x280>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02c      	beq.n	80011ea <GameControlTask+0x7a>
		  {
			 for(int i = 0; i < 4; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e020      	b.n	80011d8 <GameControlTask+0x68>
			 {
				 // Range will be 0 -> 5
				 int index = rand() % 6;
 8001196:	f00f fc59 	bl	8010a4c <rand>
 800119a:	4602      	mov	r2, r0
 800119c:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <GameControlTask+0x284>)
 800119e:	fb83 3102 	smull	r3, r1, r3, r2
 80011a2:	17d3      	asrs	r3, r2, #31
 80011a4:	1ac9      	subs	r1, r1, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	60bb      	str	r3, [r7, #8]
				 //solution[i] = colorOptions[index];
				 solution[0] = LCD_COLOR_RED;
 80011b2:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <GameControlTask+0x288>)
 80011b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011b8:	801a      	strh	r2, [r3, #0]
				 solution[1] = LCD_COLOR_RED;
 80011ba:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <GameControlTask+0x288>)
 80011bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011c0:	805a      	strh	r2, [r3, #2]
				 solution[2] = LCD_COLOR_GREEN;
 80011c2:	4b8d      	ldr	r3, [pc, #564]	; (80013f8 <GameControlTask+0x288>)
 80011c4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011c8:	809a      	strh	r2, [r3, #4]
				 solution[3] = LCD_COLOR_GREEN;
 80011ca:	4b8b      	ldr	r3, [pc, #556]	; (80013f8 <GameControlTask+0x288>)
 80011cc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011d0:	80da      	strh	r2, [r3, #6]
			 for(int i = 0; i < 4; i++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	dddb      	ble.n	8001196 <GameControlTask+0x26>
			 }

			 generateSolution = false;
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <GameControlTask+0x280>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
			 drawScreen = true;
 80011e4:	4b85      	ldr	r3, [pc, #532]	; (80013fc <GameControlTask+0x28c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
		  }

		  if(checkSolution)
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <GameControlTask+0x290>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80d0 	beq.w	8001394 <GameControlTask+0x224>
		  {
			  // Make sure we aren't out of bounds
			  if(gameRound - 1 < 10)
 80011f4:	4b83      	ldr	r3, [pc, #524]	; (8001404 <GameControlTask+0x294>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	f300 80c7 	bgt.w	800138e <GameControlTask+0x21e>
			  {
				  for(int col = 0; col < 4; col++)
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	e020      	b.n	8001248 <GameControlTask+0xd8>
				  {
					  if(currentColorMap[gameRound - 1][col] == solution[col])
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <GameControlTask+0x294>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	497e      	ldr	r1, [pc, #504]	; (8001408 <GameControlTask+0x298>)
 800120e:	009a      	lsls	r2, r3, #2
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	4413      	add	r3, r2
 8001214:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001218:	4977      	ldr	r1, [pc, #476]	; (80013f8 <GameControlTask+0x288>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001220:	429a      	cmp	r2, r3
 8001222:	d10e      	bne.n	8001242 <GameControlTask+0xd2>
					  {
						  correctGuesses++;
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <GameControlTask+0x29c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a78      	ldr	r2, [pc, #480]	; (800140c <GameControlTask+0x29c>)
 800122c:	6013      	str	r3, [r2, #0]
						  positionUsedSolution[col] = true;
 800122e:	4a78      	ldr	r2, [pc, #480]	; (8001410 <GameControlTask+0x2a0>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4413      	add	r3, r2
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
						  positionUsedGuess[col] = true;
 8001238:	4a76      	ldr	r2, [pc, #472]	; (8001414 <GameControlTask+0x2a4>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4413      	add	r3, r2
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
				  for(int col = 0; col < 4; col++)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b03      	cmp	r3, #3
 800124c:	dddb      	ble.n	8001206 <GameControlTask+0x96>
					  }

				  }

				  if (correctGuesses == 4)
 800124e:	4b6f      	ldr	r3, [pc, #444]	; (800140c <GameControlTask+0x29c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b04      	cmp	r3, #4
 8001254:	d103      	bne.n	800125e <GameControlTask+0xee>
				  {
					  screenNum = 3;
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <GameControlTask+0x27c>)
 8001258:	2203      	movs	r2, #3
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e043      	b.n	80012e6 <GameControlTask+0x176>
				  }
				  else
				  {
					  for(int col = 0; col < 4; col++){
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e03d      	b.n	80012e0 <GameControlTask+0x170>
						  if (!positionUsedGuess[col])
 8001264:	4a6b      	ldr	r2, [pc, #428]	; (8001414 <GameControlTask+0x2a4>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d031      	beq.n	80012da <GameControlTask+0x16a>
						  {
							  for (int solutionCol = 0; solutionCol < 4; solutionCol++)
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	e02b      	b.n	80012d4 <GameControlTask+0x164>
							  {
								  if (currentColorMap[gameRound - 1][col] == solution[solutionCol])
 800127c:	4b61      	ldr	r3, [pc, #388]	; (8001404 <GameControlTask+0x294>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4961      	ldr	r1, [pc, #388]	; (8001408 <GameControlTask+0x298>)
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4413      	add	r3, r2
 800128a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800128e:	495a      	ldr	r1, [pc, #360]	; (80013f8 <GameControlTask+0x288>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	429a      	cmp	r2, r3
 8001298:	d119      	bne.n	80012ce <GameControlTask+0x15e>
								  {
									  if (!positionUsedSolution[solutionCol])
 800129a:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <GameControlTask+0x2a0>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d010      	beq.n	80012ce <GameControlTask+0x15e>
									  {
										  wrongPositions++;
 80012ac:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <GameControlTask+0x2a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a59      	ldr	r2, [pc, #356]	; (8001418 <GameControlTask+0x2a8>)
 80012b4:	6013      	str	r3, [r2, #0]
										  positionUsedSolution[solutionCol] = true;
 80012b6:	4a56      	ldr	r2, [pc, #344]	; (8001410 <GameControlTask+0x2a0>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4413      	add	r3, r2
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
										  positionUsedGuess[col] = true;
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <GameControlTask+0x2a4>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4413      	add	r3, r2
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
										  solutionCol = 4;
 80012ca:	2304      	movs	r3, #4
 80012cc:	613b      	str	r3, [r7, #16]
							  for (int solutionCol = 0; solutionCol < 4; solutionCol++)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3301      	adds	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	ddd0      	ble.n	800127c <GameControlTask+0x10c>
					  for(int col = 0; col < 4; col++){
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	ddbe      	ble.n	8001264 <GameControlTask+0xf4>
							  }
						  }
					  }
				  }

				  strcpy(clue, "");
 80012e6:	4b4d      	ldr	r3, [pc, #308]	; (800141c <GameControlTask+0x2ac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

				  for(int i = 0; i < 4; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e044      	b.n	800137c <GameControlTask+0x20c>
				  {
					  positionUsedSolution[i] = false;
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <GameControlTask+0x2a0>)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
					  positionUsedGuess[i] = false;
 80012fc:	4a45      	ldr	r2, [pc, #276]	; (8001414 <GameControlTask+0x2a4>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

					  if (correctGuesses != 0)
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <GameControlTask+0x29c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d011      	beq.n	8001332 <GameControlTask+0x1c2>
					  {
						  strcat(clue, "!   ");
 800130e:	4843      	ldr	r0, [pc, #268]	; (800141c <GameControlTask+0x2ac>)
 8001310:	f7fe ff86 	bl	8000220 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <GameControlTask+0x2ac>)
 800131a:	4413      	add	r3, r2
 800131c:	4a40      	ldr	r2, [pc, #256]	; (8001420 <GameControlTask+0x2b0>)
 800131e:	6810      	ldr	r0, [r2, #0]
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	7912      	ldrb	r2, [r2, #4]
 8001324:	711a      	strb	r2, [r3, #4]
						  correctGuesses--;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <GameControlTask+0x29c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a37      	ldr	r2, [pc, #220]	; (800140c <GameControlTask+0x29c>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e021      	b.n	8001376 <GameControlTask+0x206>
					  }
					  else if (wrongPositions != 0)
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <GameControlTask+0x2a8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d011      	beq.n	800135e <GameControlTask+0x1ee>
					  {
						  strcat(clue, "?   ");
 800133a:	4838      	ldr	r0, [pc, #224]	; (800141c <GameControlTask+0x2ac>)
 800133c:	f7fe ff70 	bl	8000220 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <GameControlTask+0x2ac>)
 8001346:	4413      	add	r3, r2
 8001348:	4a36      	ldr	r2, [pc, #216]	; (8001424 <GameControlTask+0x2b4>)
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	7912      	ldrb	r2, [r2, #4]
 8001350:	711a      	strb	r2, [r3, #4]
						  wrongPositions--;
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <GameControlTask+0x2a8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <GameControlTask+0x2a8>)
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e00b      	b.n	8001376 <GameControlTask+0x206>
					  }
					  else
					  {
						  strcat(clue, "-   ");
 800135e:	482f      	ldr	r0, [pc, #188]	; (800141c <GameControlTask+0x2ac>)
 8001360:	f7fe ff5e 	bl	8000220 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <GameControlTask+0x2ac>)
 800136a:	4413      	add	r3, r2
 800136c:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <GameControlTask+0x2b8>)
 800136e:	6810      	ldr	r0, [r2, #0]
 8001370:	6018      	str	r0, [r3, #0]
 8001372:	7912      	ldrb	r2, [r2, #4]
 8001374:	711a      	strb	r2, [r3, #4]
				  for(int i = 0; i < 4; i++)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b03      	cmp	r3, #3
 8001380:	ddb7      	ble.n	80012f2 <GameControlTask+0x182>
					  }
				  }
				  drawScreen = true;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <GameControlTask+0x28c>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
				  drawClue = true;
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <GameControlTask+0x2bc>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
			  }

			  checkSolution = false;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <GameControlTask+0x290>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		  }

		  if (chosenButton != -1 && handlingPress)
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <GameControlTask+0x2c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d06d      	beq.n	800147a <GameControlTask+0x30a>
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <GameControlTask+0x2c4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d069      	beq.n	800147a <GameControlTask+0x30a>
		  {
			  if(chosenButton == 6)
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <GameControlTask+0x2c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d148      	bne.n	8001440 <GameControlTask+0x2d0>
			  {
				  if (chosenColor != LCD_COLOR_WHITE)
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <GameControlTask+0x2c8>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d058      	beq.n	800146c <GameControlTask+0x2fc>
				  {
					  currentCol++;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <GameControlTask+0x2cc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a1e      	ldr	r2, [pc, #120]	; (800143c <GameControlTask+0x2cc>)
 80013c2:	6013      	str	r3, [r2, #0]
					  if (currentCol == 4)
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <GameControlTask+0x2cc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d10a      	bne.n	80013e2 <GameControlTask+0x272>
					  {
						  currentCol = 0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <GameControlTask+0x2cc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
						  gameRound++;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <GameControlTask+0x294>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <GameControlTask+0x294>)
 80013da:	6013      	str	r3, [r2, #0]

						  checkSolution = true;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <GameControlTask+0x290>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
					  }
					  chosenColor = LCD_COLOR_WHITE;
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <GameControlTask+0x2c8>)
 80013e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	e03f      	b.n	800146c <GameControlTask+0x2fc>
 80013ec:	2000001c 	.word	0x2000001c
 80013f0:	2000000c 	.word	0x2000000c
 80013f4:	2aaaaaab 	.word	0x2aaaaaab
 80013f8:	20004eac 	.word	0x20004eac
 80013fc:	2000001b 	.word	0x2000001b
 8001400:	20000120 	.word	0x20000120
 8001404:	20000124 	.word	0x20000124
 8001408:	20004b4c 	.word	0x20004b4c
 800140c:	20000130 	.word	0x20000130
 8001410:	20000138 	.word	0x20000138
 8001414:	2000013c 	.word	0x2000013c
 8001418:	20000134 	.word	0x20000134
 800141c:	20000140 	.word	0x20000140
 8001420:	08010b08 	.word	0x08010b08
 8001424:	08010b10 	.word	0x08010b10
 8001428:	08010b18 	.word	0x08010b18
 800142c:	20000154 	.word	0x20000154
 8001430:	20000014 	.word	0x20000014
 8001434:	2000012d 	.word	0x2000012d
 8001438:	20000018 	.word	0x20000018
 800143c:	20000128 	.word	0x20000128
				  }
			  }
			  else
			  {
				  chosenColor = colorOptions[chosenButton];
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <GameControlTask+0x31c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <GameControlTask+0x320>)
 8001446:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <GameControlTask+0x324>)
 800144c:	801a      	strh	r2, [r3, #0]

				  newColorMap[gameRound][currentCol] = chosenColor;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <GameControlTask+0x328>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <GameControlTask+0x32c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	490f      	ldr	r1, [pc, #60]	; (8001494 <GameControlTask+0x324>)
 8001458:	8808      	ldrh	r0, [r1, #0]
 800145a:	4911      	ldr	r1, [pc, #68]	; (80014a0 <GameControlTask+0x330>)
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4413      	add	r3, r2
 8001460:	4602      	mov	r2, r0
 8001462:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

				  drawScreen = true;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <GameControlTask+0x334>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
			  }

			  handlingPress = false;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <GameControlTask+0x338>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
			  chosenButton = -1;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <GameControlTask+0x31c>)
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	601a      	str	r2, [r3, #0]
		  }


		  if (gameover)
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <GameControlTask+0x33c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f43f ae7a 	beq.w	8001178 <GameControlTask+0x8>
		  {
			  screenNum = 3;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <GameControlTask+0x340>)
 8001486:	2203      	movs	r2, #3
 8001488:	601a      	str	r2, [r3, #0]
	  if (screenNum == 1)
 800148a:	e675      	b.n	8001178 <GameControlTask+0x8>
 800148c:	20000014 	.word	0x20000014
 8001490:	20000000 	.word	0x20000000
 8001494:	20000018 	.word	0x20000018
 8001498:	20000124 	.word	0x20000124
 800149c:	20000128 	.word	0x20000128
 80014a0:	20004d44 	.word	0x20004d44
 80014a4:	2000001b 	.word	0x2000001b
 80014a8:	2000012d 	.word	0x2000012d
 80014ac:	2000012c 	.word	0x2000012c
 80014b0:	2000001c 	.word	0x2000001c

080014b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014c6:	f002 f99d 	bl	8003804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40001000 	.word	0x40001000

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a31      	ldr	r2, [pc, #196]	; (800161c <HAL_ADC_MspInit+0xe4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d15b      	bne.n	8001612 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_ADC_MspInit+0xe8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80015ca:	2311      	movs	r3, #17
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_ADC_MspInit+0xec>)
 80015de:	f002 ffa3 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80015e2:	2326      	movs	r3, #38	; 0x26
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <HAL_ADC_MspInit+0xf0>)
 80015f6:	f002 ff97 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <HAL_ADC_MspInit+0xf4>)
 800160e:	f002 ff8b 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012000 	.word	0x40012000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_DAC_MspInit+0x8c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12f      	bne.n	80016b2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 800165c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_DAC_MspInit+0x90>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800168a:	2310      	movs	r3, #16
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_DAC_MspInit+0x94>)
 800169e:	f002 ff43 	bl	8004528 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2036      	movs	r0, #54	; 0x36
 80016a8:	f002 fc18 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ac:	2036      	movs	r0, #54	; 0x36
 80016ae:	f002 fc31 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40007400 	.word	0x40007400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00e      	beq.n	8001708 <HAL_DFSDM_ChannelMspInit+0x40>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a76      	ldr	r2, [pc, #472]	; (80018c8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d009      	beq.n	8001708 <HAL_DFSDM_ChannelMspInit+0x40>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a74      	ldr	r2, [pc, #464]	; (80018cc <HAL_DFSDM_ChannelMspInit+0x204>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_DFSDM_ChannelMspInit+0x40>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a73      	ldr	r2, [pc, #460]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d154      	bne.n	80017b2 <HAL_DFSDM_ChannelMspInit+0xea>
 8001708:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d150      	bne.n	80017b2 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4a6f      	ldr	r2, [pc, #444]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	6453      	str	r3, [r2, #68]	; 0x44
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a68      	ldr	r2, [pc, #416]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a61      	ldr	r2, [pc, #388]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001776:	2306      	movs	r3, #6
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4856      	ldr	r0, [pc, #344]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x214>)
 8001782:	f002 fed1 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001786:	2340      	movs	r3, #64	; 0x40
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001796:	2306      	movs	r3, #6
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	484f      	ldr	r0, [pc, #316]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x218>)
 80017a2:	f002 fec1 	bl	8004528 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80017ae:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80017b0:	e084      	b.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d07f      	beq.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d07a      	beq.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <HAL_DFSDM_ChannelMspInit+0x204>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d075      	beq.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x208>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d070      	beq.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d16c      	bne.n	80018bc <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a3b      	ldr	r2, [pc, #236]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80017ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a34      	ldr	r2, [pc, #208]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001862:	2307      	movs	r3, #7
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	481b      	ldr	r0, [pc, #108]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x214>)
 800186e:	f002 fe5b 	bl	8004528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001882:	2303      	movs	r3, #3
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x218>)
 800188e:	f002 fe4b 	bl	8004528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80018a2:	2306      	movs	r3, #6
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <HAL_DFSDM_ChannelMspInit+0x220>)
 80018ae:	f002 fe3b 	bl	8004528 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	3738      	adds	r7, #56	; 0x38
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40016000 	.word	0x40016000
 80018c8:	40016020 	.word	0x40016020
 80018cc:	40016040 	.word	0x40016040
 80018d0:	40016060 	.word	0x40016060
 80018d4:	20000158 	.word	0x20000158
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	2000015c 	.word	0x2000015c
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_FMPI2C_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12b      	bne.n	8001966 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001932:	2301      	movs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800193a:	2304      	movs	r3, #4
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_FMPI2C_MspInit+0x8c>)
 8001946:	f002 fdef 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 8001954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_FMPI2C_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40006000 	.word	0x40006000
 8001974:	40023800 	.word	0x40023800
 8001978:	40020800 	.word	0x40020800

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_I2C_MspInit+0x84>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d12c      	bne.n	80019f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019cc:	2304      	movs	r3, #4
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <HAL_I2C_MspInit+0x8c>)
 80019d8:	f002 fda6 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ea:	6413      	str	r3, [r2, #64]	; 0x40
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_I2C_MspInit+0x88>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005800 	.word	0x40005800
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020400 	.word	0x40020400

08001a0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_I2S_MspInit+0x15c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 8097 	bne.w	8001b5e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a40:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a45      	ldr	r2, [pc, #276]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_I2S_MspInit+0x160>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001abc:	2304      	movs	r3, #4
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001acc:	2306      	movs	r3, #6
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4826      	ldr	r0, [pc, #152]	; (8001b70 <HAL_I2S_MspInit+0x164>)
 8001ad8:	f002 fd26 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001adc:	2308      	movs	r3, #8
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	481e      	ldr	r0, [pc, #120]	; (8001b70 <HAL_I2S_MspInit+0x164>)
 8001af8:	f002 fd16 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001afc:	2308      	movs	r3, #8
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4817      	ldr	r0, [pc, #92]	; (8001b74 <HAL_I2S_MspInit+0x168>)
 8001b18:	f002 fd06 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4810      	ldr	r0, [pc, #64]	; (8001b78 <HAL_I2S_MspInit+0x16c>)
 8001b38:	f002 fcf6 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <HAL_I2S_MspInit+0x170>)
 8001b5a:	f002 fce5 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	; 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_QSPI_MspInit+0x178>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	f040 80a6 	bne.w	8001cf0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	4b54      	ldr	r3, [pc, #336]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	4a53      	ldr	r2, [pc, #332]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	6393      	str	r3, [r2, #56]	; 0x38
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
 8001bbe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001be6:	f043 0320 	orr.w	r3, r3, #32
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_QSPI_MspInit+0x17c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4826      	ldr	r0, [pc, #152]	; (8001d00 <HAL_QSPI_MspInit+0x180>)
 8001c68:	f002 fc5e 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001c6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c7e:	230a      	movs	r3, #10
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	481e      	ldr	r0, [pc, #120]	; (8001d04 <HAL_QSPI_MspInit+0x184>)
 8001c8a:	f002 fc4d 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4817      	ldr	r0, [pc, #92]	; (8001d08 <HAL_QSPI_MspInit+0x188>)
 8001caa:	f002 fc3d 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001cc0:	2309      	movs	r3, #9
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4810      	ldr	r0, [pc, #64]	; (8001d0c <HAL_QSPI_MspInit+0x18c>)
 8001ccc:	f002 fc2c 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_QSPI_MspInit+0x190>)
 8001cec:	f002 fc1c 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3738      	adds	r7, #56	; 0x38
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	a0001000 	.word	0xa0001000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40021400 	.word	0x40021400
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021800 	.word	0x40021800

08001d14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_SD_MspInit+0xc0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d14a      	bne.n	8001dcc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_SD_MspInit+0xc4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <HAL_SD_MspInit+0xc8>)
 8001da6:	f002 fbbf 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001daa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001dae:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <HAL_SD_MspInit+0xcc>)
 8001dc8:	f002 fbae 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020800 	.word	0x40020800

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a33      	ldr	r2, [pc, #204]	; (8001ed0 <HAL_UART_MspInit+0xec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12d      	bne.n	8001e62 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001e50:	230b      	movs	r3, #11
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e5c:	f002 fb64 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e60:	e031      	b.n	8001ec6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_UART_MspInit+0xf8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d12c      	bne.n	8001ec6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001ea4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001ec2:	f002 fb31 	bl	8004528 <HAL_GPIO_Init>
}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	; 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40011c00 	.word	0x40011c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40011400 	.word	0x40011400

08001ee0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_FSMC_MspInit+0xc8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d151      	bne.n	8001fa0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_FSMC_MspInit+0xc8>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_FSMC_MspInit+0xcc>)
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_FSMC_MspInit+0xcc>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6393      	str	r3, [r2, #56]	; 0x38
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_FSMC_MspInit+0xcc>)
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001f1e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001f22:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f30:	230c      	movs	r3, #12
 8001f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	481d      	ldr	r0, [pc, #116]	; (8001fb0 <HAL_FSMC_MspInit+0xd0>)
 8001f3a:	f002 faf5 	bl	8004528 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001f3e:	f240 433f 	movw	r3, #1087	; 0x43f
 8001f42:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f50:	230c      	movs	r3, #12
 8001f52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <HAL_FSMC_MspInit+0xd4>)
 8001f5a:	f002 fae5 	bl	8004528 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001f5e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f62:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f70:	230c      	movs	r3, #12
 8001f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <HAL_FSMC_MspInit+0xd8>)
 8001f7a:	f002 fad5 	bl	8004528 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001f7e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001f82:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f90:	230c      	movs	r3, #12
 8001f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <HAL_FSMC_MspInit+0xdc>)
 8001f9a:	f002 fac5 	bl	8004528 <HAL_GPIO_Init>
 8001f9e:	e000      	b.n	8001fa2 <HAL_FSMC_MspInit+0xc2>
    return;
 8001fa0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000160 	.word	0x20000160
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40020c00 	.word	0x40020c00

08001fc0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001fc8:	f7ff ff8a 	bl	8001ee0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	2036      	movs	r0, #54	; 0x36
 8001fea:	f001 ff77 	bl	8003edc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fee:	2036      	movs	r0, #54	; 0x36
 8001ff0:	f001 ff90 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_InitTick+0xa0>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_InitTick+0xa0>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_InitTick+0xa0>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002010:	f107 0210 	add.w	r2, r7, #16
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f005 f9c6 	bl	80073ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002020:	f005 f99c 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 8002024:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_InitTick+0xa4>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	3b01      	subs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_InitTick+0xa8>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_InitTick+0xac>)
 8002038:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_InitTick+0xa8>)
 800203c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002040:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_InitTick+0xa8>)
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_InitTick+0xa8>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_InitTick+0xa8>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_InitTick+0xa8>)
 8002056:	f006 fda9 	bl	8008bac <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002060:	4806      	ldr	r0, [pc, #24]	; (800207c <HAL_InitTick+0xa8>)
 8002062:	f006 fdd8 	bl	8008c16 <HAL_TIM_Base_Start_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3730      	adds	r7, #48	; 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	431bde83 	.word	0x431bde83
 800207c:	20004f4c 	.word	0x20004f4c
 8002080:	40001000 	.word	0x40001000

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <MemManage_Handler+0x4>

0800209e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <UsageFault_Handler+0x4>

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020bc:	2040      	movs	r0, #64	; 0x40
 80020be:	f002 fbf7 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020c2:	2080      	movs	r0, #128	; 0x80
 80020c4:	f002 fbf4 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020cc:	f002 fbf0 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  if (!handlingPress)
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <EXTI9_5_IRQHandler+0x98>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <EXTI9_5_IRQHandler+0x94>
  {

	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) && checkButton1)
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	481c      	ldr	r0, [pc, #112]	; (8002154 <EXTI9_5_IRQHandler+0x9c>)
 80020e2:	f002 fbb3 	bl	800484c <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <EXTI9_5_IRQHandler+0x4a>
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <EXTI9_5_IRQHandler+0xa0>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <EXTI9_5_IRQHandler+0x4a>
	  {
		  chosenButton = 0;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <EXTI9_5_IRQHandler+0xa4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <EXTI9_5_IRQHandler+0x98>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e024      	b.n	800214c <EXTI9_5_IRQHandler+0x94>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) && checkButton2)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	4813      	ldr	r0, [pc, #76]	; (8002154 <EXTI9_5_IRQHandler+0x9c>)
 8002106:	f002 fba1 	bl	800484c <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <EXTI9_5_IRQHandler+0x6e>
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <EXTI9_5_IRQHandler+0xa8>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <EXTI9_5_IRQHandler+0x6e>
	  {
		  chosenButton = 1;
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <EXTI9_5_IRQHandler+0xa4>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <EXTI9_5_IRQHandler+0x98>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e012      	b.n	800214c <EXTI9_5_IRQHandler+0x94>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) && checkButton5)
 8002126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <EXTI9_5_IRQHandler+0xac>)
 800212c:	f002 fb8e 	bl	800484c <HAL_GPIO_ReadPin>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <EXTI9_5_IRQHandler+0x94>
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <EXTI9_5_IRQHandler+0xb0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <EXTI9_5_IRQHandler+0x94>
	  {
		  chosenButton = 4;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <EXTI9_5_IRQHandler+0xa4>)
 8002140:	2204      	movs	r2, #4
 8002142:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <EXTI9_5_IRQHandler+0x98>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
	  }
  }

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800214a:	e7ff      	b.n	800214c <EXTI9_5_IRQHandler+0x94>
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000012d 	.word	0x2000012d
 8002154:	40021400 	.word	0x40021400
 8002158:	2000000d 	.word	0x2000000d
 800215c:	20000014 	.word	0x20000014
 8002160:	2000000e 	.word	0x2000000e
 8002164:	40020400 	.word	0x40020400
 8002168:	20000011 	.word	0x20000011

0800216c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002170:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002174:	f002 fb9c 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002178:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800217c:	f002 fb98 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002184:	f002 fb94 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002188:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800218c:	f002 fb90 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if (!handlingPress)
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <EXTI15_10_IRQHandler+0xd0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f083 0301 	eor.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d04b      	beq.n	8002236 <EXTI15_10_IRQHandler+0xca>
  {

	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) && checkButton4)
 800219e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a2:	4827      	ldr	r0, [pc, #156]	; (8002240 <EXTI15_10_IRQHandler+0xd4>)
 80021a4:	f002 fb52 	bl	800484c <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <EXTI15_10_IRQHandler+0x58>
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <EXTI15_10_IRQHandler+0xd8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <EXTI15_10_IRQHandler+0x58>
	  {
		  chosenButton = 3;
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <EXTI15_10_IRQHandler+0xdc>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <EXTI15_10_IRQHandler+0xd0>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e038      	b.n	8002236 <EXTI15_10_IRQHandler+0xca>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && checkButton7)
 80021c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c8:	4820      	ldr	r0, [pc, #128]	; (800224c <EXTI15_10_IRQHandler+0xe0>)
 80021ca:	f002 fb3f 	bl	800484c <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <EXTI15_10_IRQHandler+0x7e>
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <EXTI15_10_IRQHandler+0xe4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <EXTI15_10_IRQHandler+0x7e>
	  {
		  chosenButton = 6;
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <EXTI15_10_IRQHandler+0xdc>)
 80021de:	2206      	movs	r2, #6
 80021e0:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <EXTI15_10_IRQHandler+0xd0>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e025      	b.n	8002236 <EXTI15_10_IRQHandler+0xca>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13) && checkButton3)
 80021ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ee:	4819      	ldr	r0, [pc, #100]	; (8002254 <EXTI15_10_IRQHandler+0xe8>)
 80021f0:	f002 fb2c 	bl	800484c <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <EXTI15_10_IRQHandler+0xa4>
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <EXTI15_10_IRQHandler+0xec>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <EXTI15_10_IRQHandler+0xa4>
	  {
		  chosenButton = 2;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <EXTI15_10_IRQHandler+0xdc>)
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <EXTI15_10_IRQHandler+0xd0>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e012      	b.n	8002236 <EXTI15_10_IRQHandler+0xca>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) && checkButton6)
 8002210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002214:	4811      	ldr	r0, [pc, #68]	; (800225c <EXTI15_10_IRQHandler+0xf0>)
 8002216:	f002 fb19 	bl	800484c <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <EXTI15_10_IRQHandler+0xca>
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <EXTI15_10_IRQHandler+0xf4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <EXTI15_10_IRQHandler+0xca>
	  {
		  chosenButton = 5;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <EXTI15_10_IRQHandler+0xdc>)
 800222a:	2205      	movs	r2, #5
 800222c:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 800222e:	4b03      	ldr	r3, [pc, #12]	; (800223c <EXTI15_10_IRQHandler+0xd0>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
	  }
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002234:	e7ff      	b.n	8002236 <EXTI15_10_IRQHandler+0xca>
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000012d 	.word	0x2000012d
 8002240:	40021400 	.word	0x40021400
 8002244:	20000010 	.word	0x20000010
 8002248:	20000014 	.word	0x20000014
 800224c:	40020400 	.word	0x40020400
 8002250:	20000013 	.word	0x20000013
 8002254:	40021800 	.word	0x40021800
 8002258:	2000000f 	.word	0x2000000f
 800225c:	40020000 	.word	0x40020000
 8002260:	20000012 	.word	0x20000012

08002264 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <TIM6_DAC_IRQHandler+0x14>)
 800226a:	f001 fe83 	bl	8003f74 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <TIM6_DAC_IRQHandler+0x18>)
 8002270:	f006 fcf5 	bl	8008c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20004ce4 	.word	0x20004ce4
 800227c:	20004f4c 	.word	0x20004f4c

08002280 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <OTG_FS_IRQHandler+0x10>)
 8002286:	f002 fdc5 	bl	8004e14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200053e4 	.word	0x200053e4

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f00e facc 	bl	8010860 <__errno>
 80022c8:	4602      	mov	r2, r0
 80022ca:	230c      	movs	r3, #12
 80022cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20050000 	.word	0x20050000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000164 	.word	0x20000164
 80022fc:	200056b0 	.word	0x200056b0

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <SystemInit+0x28>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a07      	ldr	r2, [pc, #28]	; (8002328 <SystemInit+0x28>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SystemInit+0x28>)
 8002316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800231a:	609a      	str	r2, [r3, #8]
#endif
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002332:	e003      	b.n	800233c <LoopCopyDataInit>

08002334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233a:	3104      	adds	r1, #4

0800233c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002344:	d3f6      	bcc.n	8002334 <CopyDataInit>
  ldr  r2, =_sbss
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002348:	e002      	b.n	8002350 <LoopFillZerobss>

0800234a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800234a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800234c:	f842 3b04 	str.w	r3, [r2], #4

08002350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002354:	d3f9      	bcc.n	800234a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002356:	f7ff ffd3 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235a:	f00e fa87 	bl	801086c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7fe f8e7 	bl	8000530 <main>
  bx  lr    
 8002362:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002364:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002368:	08012c24 	.word	0x08012c24
  ldr  r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002370:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8002374:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8002378:	200056ac 	.word	0x200056ac

0800237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC_IRQHandler>

0800237e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002384:	f000 fd6e 	bl	8002e64 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2010      	movs	r0, #16
 800238e:	f000 f9e4 	bl	800275a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002392:	200a      	movs	r0, #10
 8002394:	f000 fd8d 	bl	8002eb2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2001      	movs	r0, #1
 800239e:	f000 f9dc 	bl	800275a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80023a2:	20c8      	movs	r0, #200	; 0xc8
 80023a4:	f000 fd85 	bl	8002eb2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2011      	movs	r0, #17
 80023ae:	f000 f9d4 	bl	800275a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80023b2:	2078      	movs	r0, #120	; 0x78
 80023b4:	f000 fd7d 	bl	8002eb2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80023b8:	2300      	movs	r3, #0
 80023ba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80023bc:	463b      	mov	r3, r7
 80023be:	2201      	movs	r2, #1
 80023c0:	4619      	mov	r1, r3
 80023c2:	2036      	movs	r0, #54	; 0x36
 80023c4:	f000 f9c9 	bl	800275a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80023c8:	2305      	movs	r3, #5
 80023ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80023cc:	463b      	mov	r3, r7
 80023ce:	2201      	movs	r2, #1
 80023d0:	4619      	mov	r1, r3
 80023d2:	203a      	movs	r0, #58	; 0x3a
 80023d4:	f000 f9c1 	bl	800275a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2021      	movs	r0, #33	; 0x21
 80023de:	f000 f9bc 	bl	800275a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80023ee:	23ef      	movs	r3, #239	; 0xef
 80023f0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80023f2:	463b      	mov	r3, r7
 80023f4:	2204      	movs	r2, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	202a      	movs	r0, #42	; 0x2a
 80023fa:	f000 f9ae 	bl	800275a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800240a:	23ef      	movs	r3, #239	; 0xef
 800240c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800240e:	463b      	mov	r3, r7
 8002410:	2204      	movs	r2, #4
 8002412:	4619      	mov	r1, r3
 8002414:	202b      	movs	r0, #43	; 0x2b
 8002416:	f000 f9a0 	bl	800275a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800241a:	230c      	movs	r3, #12
 800241c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800241e:	230c      	movs	r3, #12
 8002420:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002426:	2333      	movs	r3, #51	; 0x33
 8002428:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800242a:	2333      	movs	r3, #51	; 0x33
 800242c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800242e:	463b      	mov	r3, r7
 8002430:	2205      	movs	r2, #5
 8002432:	4619      	mov	r1, r3
 8002434:	20b2      	movs	r0, #178	; 0xb2
 8002436:	f000 f990 	bl	800275a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800243a:	2335      	movs	r3, #53	; 0x35
 800243c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800243e:	463b      	mov	r3, r7
 8002440:	2201      	movs	r2, #1
 8002442:	4619      	mov	r1, r3
 8002444:	20b7      	movs	r0, #183	; 0xb7
 8002446:	f000 f988 	bl	800275a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800244a:	231f      	movs	r3, #31
 800244c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800244e:	463b      	mov	r3, r7
 8002450:	2201      	movs	r2, #1
 8002452:	4619      	mov	r1, r3
 8002454:	20bb      	movs	r0, #187	; 0xbb
 8002456:	f000 f980 	bl	800275a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800245a:	232c      	movs	r3, #44	; 0x2c
 800245c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800245e:	463b      	mov	r3, r7
 8002460:	2201      	movs	r2, #1
 8002462:	4619      	mov	r1, r3
 8002464:	20c0      	movs	r0, #192	; 0xc0
 8002466:	f000 f978 	bl	800275a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800246a:	2301      	movs	r3, #1
 800246c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800246e:	23c3      	movs	r3, #195	; 0xc3
 8002470:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002472:	463b      	mov	r3, r7
 8002474:	2202      	movs	r2, #2
 8002476:	4619      	mov	r1, r3
 8002478:	20c2      	movs	r0, #194	; 0xc2
 800247a:	f000 f96e 	bl	800275a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800247e:	2320      	movs	r3, #32
 8002480:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002482:	463b      	mov	r3, r7
 8002484:	2201      	movs	r2, #1
 8002486:	4619      	mov	r1, r3
 8002488:	20c4      	movs	r0, #196	; 0xc4
 800248a:	f000 f966 	bl	800275a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800248e:	230f      	movs	r3, #15
 8002490:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002492:	463b      	mov	r3, r7
 8002494:	2201      	movs	r2, #1
 8002496:	4619      	mov	r1, r3
 8002498:	20c6      	movs	r0, #198	; 0xc6
 800249a:	f000 f95e 	bl	800275a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80024a2:	23a1      	movs	r3, #161	; 0xa1
 80024a4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80024a6:	463b      	mov	r3, r7
 80024a8:	2201      	movs	r2, #1
 80024aa:	4619      	mov	r1, r3
 80024ac:	20d0      	movs	r0, #208	; 0xd0
 80024ae:	f000 f954 	bl	800275a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80024b2:	23d0      	movs	r3, #208	; 0xd0
 80024b4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80024b6:	2308      	movs	r3, #8
 80024b8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80024ba:	2311      	movs	r3, #17
 80024bc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80024be:	2308      	movs	r3, #8
 80024c0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80024c2:	230c      	movs	r3, #12
 80024c4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80024c6:	2315      	movs	r3, #21
 80024c8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80024ca:	2339      	movs	r3, #57	; 0x39
 80024cc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80024ce:	2333      	movs	r3, #51	; 0x33
 80024d0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80024d2:	2350      	movs	r3, #80	; 0x50
 80024d4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80024d6:	2336      	movs	r3, #54	; 0x36
 80024d8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80024da:	2313      	movs	r3, #19
 80024dc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80024de:	2314      	movs	r3, #20
 80024e0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80024e2:	2329      	movs	r3, #41	; 0x29
 80024e4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80024e6:	232d      	movs	r3, #45	; 0x2d
 80024e8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80024ea:	463b      	mov	r3, r7
 80024ec:	220e      	movs	r2, #14
 80024ee:	4619      	mov	r1, r3
 80024f0:	20e0      	movs	r0, #224	; 0xe0
 80024f2:	f000 f932 	bl	800275a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80024f6:	23d0      	movs	r3, #208	; 0xd0
 80024f8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80024fa:	2308      	movs	r3, #8
 80024fc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80024fe:	2310      	movs	r3, #16
 8002500:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002502:	2308      	movs	r3, #8
 8002504:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002506:	2306      	movs	r3, #6
 8002508:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800250a:	2306      	movs	r3, #6
 800250c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800250e:	2339      	movs	r3, #57	; 0x39
 8002510:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002512:	2344      	movs	r3, #68	; 0x44
 8002514:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002516:	2351      	movs	r3, #81	; 0x51
 8002518:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800251a:	230b      	movs	r3, #11
 800251c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800251e:	2316      	movs	r3, #22
 8002520:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002522:	2314      	movs	r3, #20
 8002524:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002526:	232f      	movs	r3, #47	; 0x2f
 8002528:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800252a:	2331      	movs	r3, #49	; 0x31
 800252c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800252e:	463b      	mov	r3, r7
 8002530:	220e      	movs	r2, #14
 8002532:	4619      	mov	r1, r3
 8002534:	20e1      	movs	r0, #225	; 0xe1
 8002536:	f000 f910 	bl	800275a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800253a:	f000 f847 	bl	80025cc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800253e:	2300      	movs	r3, #0
 8002540:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002542:	463b      	mov	r3, r7
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	2035      	movs	r0, #53	; 0x35
 800254a:	f000 f906 	bl	800275a <ST7789H2_WriteReg>

}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002564:	2300      	movs	r3, #0
 8002566:	723b      	strb	r3, [r7, #8]
 8002568:	e025      	b.n	80025b6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d120      	bne.n	80025b2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002570:	2300      	movs	r3, #0
 8002572:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002574:	2300      	movs	r3, #0
 8002576:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002578:	2301      	movs	r3, #1
 800257a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800257c:	23f0      	movs	r3, #240	; 0xf0
 800257e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002580:	2300      	movs	r3, #0
 8002582:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002584:	2300      	movs	r3, #0
 8002586:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	2206      	movs	r2, #6
 800258e:	4619      	mov	r1, r3
 8002590:	2033      	movs	r0, #51	; 0x33
 8002592:	f000 f8e2 	bl	800275a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800259a:	2350      	movs	r3, #80	; 0x50
 800259c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	2202      	movs	r2, #2
 80025a4:	4619      	mov	r1, r3
 80025a6:	2037      	movs	r0, #55	; 0x37
 80025a8:	f000 f8d7 	bl	800275a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80025ac:	23c0      	movs	r3, #192	; 0xc0
 80025ae:	723b      	strb	r3, [r7, #8]
 80025b0:	e001      	b.n	80025b6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80025b2:	2360      	movs	r3, #96	; 0x60
 80025b4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2201      	movs	r2, #1
 80025bc:	4619      	mov	r1, r3
 80025be:	2036      	movs	r0, #54	; 0x36
 80025c0:	f000 f8cb 	bl	800275a <ST7789H2_WriteReg>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2029      	movs	r0, #41	; 0x29
 80025d6:	f000 f8c0 	bl	800275a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2011      	movs	r0, #17
 80025e0:	f000 f8bb 	bl	800275a <ST7789H2_WriteReg>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80025ee:	23fe      	movs	r3, #254	; 0xfe
 80025f0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2201      	movs	r2, #1
 80025f6:	4619      	mov	r1, r3
 80025f8:	20bd      	movs	r0, #189	; 0xbd
 80025fa:	f000 f8ae 	bl	800275a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2010      	movs	r0, #16
 8002604:	f000 f8a9 	bl	800275a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002608:	200a      	movs	r0, #10
 800260a:	f000 fc52 	bl	8002eb2 <LCD_IO_Delay>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800261a:	23f0      	movs	r3, #240	; 0xf0
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800262a:	23f0      	movs	r3, #240	; 0xf0
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800263a:	f000 fc13 	bl	8002e64 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800263e:	2004      	movs	r0, #4
 8002640:	f000 f8ad 	bl	800279e <ST7789H2_ReadReg>
 8002644:	4603      	mov	r3, r0
 8002646:	b29b      	uxth	r3, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}

0800264c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	460a      	mov	r2, r1
 8002656:	80fb      	strh	r3, [r7, #6]
 8002658:	4613      	mov	r3, r2
 800265a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 800265c:	2300      	movs	r3, #0
 800265e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3b11      	subs	r3, #17
 8002670:	b2db      	uxtb	r3, r3
 8002672:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	2204      	movs	r2, #4
 800267a:	4619      	mov	r1, r3
 800267c:	202a      	movs	r0, #42	; 0x2a
 800267e:	f000 f86c 	bl	800275a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800268c:	2300      	movs	r3, #0
 800268e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3b11      	subs	r3, #17
 8002696:	b2db      	uxtb	r3, r3
 8002698:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	2204      	movs	r2, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	202b      	movs	r0, #43	; 0x2b
 80026a4:	f000 f859 	bl	800275a <ST7789H2_WriteReg>
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	460b      	mov	r3, r1
 80026bc:	80bb      	strh	r3, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80026c2:	88ba      	ldrh	r2, [r7, #4]
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ffbf 	bl	800264c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	f000 f841 	bl	800275a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fbc8 	bl	8002e70 <LCD_IO_WriteData>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	80fb      	strh	r3, [r7, #6]
 80026f4:	4613      	mov	r3, r2
 80026f6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80026f8:	88ba      	ldrh	r2, [r7, #4]
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ffa4 	bl	800264c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002704:	88ba      	ldrh	r2, [r7, #4]
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f9bd 	bl	8002a8a <ST7789H2_ReadPixel_rgb888>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	733a      	strb	r2, [r7, #12]
 8002716:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800271a:	737a      	strb	r2, [r7, #13]
 800271c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002720:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002722:	7b3b      	ldrb	r3, [r7, #12]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	b29b      	uxth	r3, r3
 8002738:	02db      	lsls	r3, r3, #11
 800273a:	b29a      	uxth	r2, r3
 800273c:	7dbb      	ldrb	r3, [r7, #22]
 800273e:	b29b      	uxth	r3, r3
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	b29b      	uxth	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	b29a      	uxth	r2, r3
 8002748:	7d7b      	ldrb	r3, [r7, #21]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4413      	add	r3, r2
 800274e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002750:	8a7b      	ldrh	r3, [r7, #18]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	6039      	str	r1, [r7, #0]
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	4613      	mov	r3, r2
 8002768:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fb8c 	bl	8002e8a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e00a      	b.n	800278e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fb74 	bl	8002e70 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3f0      	bcc.n	8002778 <ST7789H2_WriteReg+0x1e>
  }
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fb6d 	bl	8002e8a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80027b0:	f000 fb78 	bl	8002ea4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80027b4:	f000 fb76 	bl	8002ea4 <LCD_IO_ReadData>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b2db      	uxtb	r3, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027c4:	b490      	push	{r4, r7}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	80fb      	strh	r3, [r7, #6]
 80027d6:	4603      	mov	r3, r0
 80027d8:	80bb      	strh	r3, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]
 80027de:	4613      	mov	r3, r2
 80027e0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2bef      	cmp	r3, #239	; 0xef
 80027e6:	d803      	bhi.n	80027f0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <ST7789H2_SetDisplayWindow+0x94>)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	8013      	strh	r3, [r2, #0]
 80027ee:	e002      	b.n	80027f6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <ST7789H2_SetDisplayWindow+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	2bef      	cmp	r3, #239	; 0xef
 80027fa:	d803      	bhi.n	8002804 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <ST7789H2_SetDisplayWindow+0x98>)
 80027fe:	88bb      	ldrh	r3, [r7, #4]
 8002800:	8013      	strh	r3, [r2, #0]
 8002802:	e002      	b.n	800280a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <ST7789H2_SetDisplayWindow+0x98>)
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	4413      	add	r3, r2
 8002810:	2bf0      	cmp	r3, #240	; 0xf0
 8002812:	dc08      	bgt.n	8002826 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4413      	add	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <ST7789H2_SetDisplayWindow+0x9c>)
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	e002      	b.n	800282c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <ST7789H2_SetDisplayWindow+0x9c>)
 8002828:	22ef      	movs	r2, #239	; 0xef
 800282a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800282c:	883a      	ldrh	r2, [r7, #0]
 800282e:	88bb      	ldrh	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	2bf0      	cmp	r3, #240	; 0xf0
 8002834:	dc08      	bgt.n	8002848 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002836:	883a      	ldrh	r2, [r7, #0]
 8002838:	88bb      	ldrh	r3, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <ST7789H2_SetDisplayWindow+0xa0>)
 8002844:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002846:	e002      	b.n	800284e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <ST7789H2_SetDisplayWindow+0xa0>)
 800284a:	22ef      	movs	r2, #239	; 0xef
 800284c:	801a      	strh	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bc90      	pop	{r4, r7}
 8002856:	4770      	bx	lr
 8002858:	20000168 	.word	0x20000168
 800285c:	2000016a 	.word	0x2000016a
 8002860:	2000005c 	.word	0x2000005c
 8002864:	2000005e 	.word	0x2000005e

08002868 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	4604      	mov	r4, r0
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4623      	mov	r3, r4
 8002878:	80fb      	strh	r3, [r7, #6]
 800287a:	4603      	mov	r3, r0
 800287c:	80bb      	strh	r3, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	807b      	strh	r3, [r7, #2]
 8002882:	4613      	mov	r3, r2
 8002884:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	88bb      	ldrh	r3, [r7, #4]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fedb 	bl	800264c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	202c      	movs	r0, #44	; 0x2c
 800289c:	f7ff ff5d 	bl	800275a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	81fb      	strh	r3, [r7, #14]
 80028a4:	e006      	b.n	80028b4 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fae1 	bl	8002e70 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80028ae:	89fb      	ldrh	r3, [r7, #14]
 80028b0:	3301      	adds	r3, #1
 80028b2:	81fb      	strh	r3, [r7, #14]
 80028b4:	89fa      	ldrh	r2, [r7, #14]
 80028b6:	883b      	ldrh	r3, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3f4      	bcc.n	80028a6 <ST7789H2_DrawHLine+0x3e>
  }  
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}

080028c4 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	4603      	mov	r3, r0
 80028d8:	80bb      	strh	r3, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
 80028de:	4613      	mov	r3, r2
 80028e0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fead 	bl	800264c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	f7ff ff2f 	bl	800275a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	81fb      	strh	r3, [r7, #14]
 8002900:	e00b      	b.n	800291a <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	4413      	add	r3, r2
 8002908:	b299      	uxth	r1, r3
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	88bb      	ldrh	r3, [r7, #4]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fece 	bl	80026b0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	3301      	adds	r3, #1
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	89fa      	ldrh	r2, [r7, #14]
 800291c:	883b      	ldrh	r3, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3ef      	bcc.n	8002902 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
	...

0800292c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	603a      	str	r2, [r7, #0]
 8002936:	80fb      	strh	r3, [r7, #6]
 8002938:	460b      	mov	r3, r1
 800293a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <ST7789H2_DrawBitmap+0xdc>)
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <ST7789H2_DrawBitmap+0xe0>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <ST7789H2_DrawBitmap+0xe4>)
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <ST7789H2_DrawBitmap+0xe8>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	3301      	adds	r3, #1
 8002966:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3304      	adds	r3, #4
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	461a      	mov	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	330a      	adds	r3, #10
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4413      	add	r3, r2
 80029b0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80029b2:	88ba      	ldrh	r2, [r7, #4]
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e01d      	b.n	80029f8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fe3f 	bl	800264c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b299      	uxth	r1, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	89fa      	ldrh	r2, [r7, #14]
 80029e6:	88f8      	ldrh	r0, [r7, #6]
 80029e8:	f000 f898 	bl	8002b1c <ST7789H2_DrawRGBHLine>
    nb_line++;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	88bb      	ldrh	r3, [r7, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8dd      	bhi.n	80029bc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	2000005c 	.word	0x2000005c
 8002a0c:	20000168 	.word	0x20000168
 8002a10:	2000005e 	.word	0x2000005e
 8002a14:	2000016a 	.word	0x2000016a

08002a18 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4604      	mov	r4, r0
 8002a20:	4608      	mov	r0, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	80fb      	strh	r3, [r7, #6]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80bb      	strh	r3, [r7, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	807b      	strh	r3, [r7, #2]
 8002a32:	4613      	mov	r3, r2
 8002a34:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e019      	b.n	8002a74 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fdff 	bl	800264c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	b299      	uxth	r1, r3
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	4413      	add	r3, r2
 8002a60:	887a      	ldrh	r2, [r7, #2]
 8002a62:	88f8      	ldrh	r0, [r7, #6]
 8002a64:	f000 f85a 	bl	8002b1c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	88ba      	ldrh	r2, [r7, #4]
 8002a76:	883b      	ldrh	r3, [r7, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d3de      	bcc.n	8002a40 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	460a      	mov	r2, r1
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002a9a:	88ba      	ldrh	r2, [r7, #4]
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fdd3 	bl	800264c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	202e      	movs	r0, #46	; 0x2e
 8002aac:	f7ff fe55 	bl	800275a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002ab0:	f000 f9f8 	bl	8002ea4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002ab4:	f000 f9f6 	bl	8002ea4 <LCD_IO_ReadData>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002abc:	f000 f9f2 	bl	8002ea4 <LCD_IO_ReadData>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002ac4:	8afb      	ldrh	r3, [r7, #22]
 8002ac6:	121b      	asrs	r3, r3, #8
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002ade:	8abb      	ldrh	r3, [r7, #20]
 8002ae0:	121b      	asrs	r3, r3, #8
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f023 0303 	bic.w	r3, r3, #3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	f107 020c 	add.w	r2, r7, #12
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4611      	mov	r1, r2
 8002af8:	8019      	strh	r1, [r3, #0]
 8002afa:	3302      	adds	r3, #2
 8002afc:	0c12      	lsrs	r2, r2, #16
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	7c3a      	ldrb	r2, [r7, #16]
 8002b04:	f362 0307 	bfi	r3, r2, #0, #8
 8002b08:	7c7a      	ldrb	r2, [r7, #17]
 8002b0a:	f362 230f 	bfi	r3, r2, #8, #8
 8002b0e:	7cba      	ldrb	r2, [r7, #18]
 8002b10:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	4603      	mov	r3, r0
 8002b26:	81fb      	strh	r3, [r7, #14]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	81bb      	strh	r3, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	f7ff fe0c 	bl	800275a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	e02a      	b.n	8002b9e <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <ST7789H2_DrawRGBHLine+0x98>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d321      	bcc.n	8002b98 <ST7789H2_DrawRGBHLine+0x7c>
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <ST7789H2_DrawRGBHLine+0x9c>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	89ba      	ldrh	r2, [r7, #12]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d31c      	bcc.n	8002b98 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <ST7789H2_DrawRGBHLine+0xa0>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d816      	bhi.n	8002b98 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <ST7789H2_DrawRGBHLine+0xa4>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	89ba      	ldrh	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d811      	bhi.n	8002b98 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002b74:	897a      	ldrh	r2, [r7, #10]
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	4413      	add	r3, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f96f 	bl	8002e70 <LCD_IO_WriteData>
      }      
      i++;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	897a      	ldrh	r2, [r7, #10]
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d3cd      	bcc.n	8002b48 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000168 	.word	0x20000168
 8002bb8:	2000016a 	.word	0x2000016a
 8002bbc:	2000005c 	.word	0x2000005c
 8002bc0:	2000005e 	.word	0x2000005e

08002bc4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460a      	mov	r2, r1
 8002bce:	71fb      	strb	r3, [r7, #7]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <BSP_PB_Init+0xa0>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <BSP_PB_Init+0xa0>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6313      	str	r3, [r2, #48]	; 0x30
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <BSP_PB_Init+0xa0>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d111      	bne.n	8002c1a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <BSP_PB_Init+0xa4>)
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fc87 	bl	8004528 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d11d      	bne.n	8002c5c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002c24:	2302      	movs	r3, #2
 8002c26:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <BSP_PB_Init+0xa8>)
 8002c2e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <BSP_PB_Init+0xa4>)
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	f107 020c 	add.w	r2, r7, #12
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 fc72 	bl	8004528 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002c44:	2306      	movs	r3, #6
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f945 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002c52:	2306      	movs	r3, #6
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 f95c 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	20000060 	.word	0x20000060
 8002c6c:	10110000 	.word	0x10110000

08002c70 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6393      	str	r3, [r2, #56]	; 0x38
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cb8:	f043 0310 	orr.w	r3, r3, #16
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <FMC_BANK3_MspInit+0xf4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002d0e:	230c      	movs	r3, #12
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d12:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002d16:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4812      	ldr	r0, [pc, #72]	; (8002d68 <FMC_BANK3_MspInit+0xf8>)
 8002d20:	f001 fc02 	bl	8004528 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002d24:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d28:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480e      	ldr	r0, [pc, #56]	; (8002d6c <FMC_BANK3_MspInit+0xfc>)
 8002d32:	f001 fbf9 	bl	8004528 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d36:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002d3a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	480b      	ldr	r0, [pc, #44]	; (8002d70 <FMC_BANK3_MspInit+0x100>)
 8002d44:	f001 fbf0 	bl	8004528 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d48:	f240 433f 	movw	r3, #1087	; 0x43f
 8002d4c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	4807      	ldr	r0, [pc, #28]	; (8002d74 <FMC_BANK3_MspInit+0x104>)
 8002d56:	f001 fbe7 	bl	8004528 <HAL_GPIO_Init>
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40021400 	.word	0x40021400
 8002d74:	40021800 	.word	0x40021800

08002d78 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b09c      	sub	sp, #112	; 0x70
 8002d7c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002d7e:	f7ff ff77 	bl	8002c70 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002d82:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002d86:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <FMC_BANK3_Init+0x8c>)
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002d94:	2304      	movs	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002da8:	2304      	movs	r3, #4
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002db4:	2310      	movs	r3, #16
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dd6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de4:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002dea:	2300      	movs	r3, #0
 8002dec:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002dee:	1d3a      	adds	r2, r7, #4
 8002df0:	1d39      	adds	r1, r7, #4
 8002df2:	f107 0320 	add.w	r3, r7, #32
 8002df6:	4618      	mov	r0, r3
 8002df8:	f005 fe94 	bl	8008b24 <HAL_SRAM_Init>
}
 8002dfc:	bf00      	nop
 8002dfe:	3770      	adds	r7, #112	; 0x70
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	a0000104 	.word	0xa0000104

08002e08 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002e12:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e1a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002e34:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002e52:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002e56:	885b      	ldrh	r3, [r3, #2]
 8002e58:	b29b      	uxth	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002e68:	f7ff ff86 	bl	8002d78 <FMC_BANK3_Init>
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ffc3 	bl	8002e08 <FMC_BANK3_WriteData>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ffc7 	bl	8002e2a <FMC_BANK3_WriteReg>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002ea8:	f7ff ffd1 	bl	8002e4e <FMC_BANK3_ReadData>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fcc2 	bl	8003844 <HAL_Delay>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002ed0:	f000 f80e 	bl	8002ef0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002ee4:	f000 f80b 	bl	8002efe <BSP_AUDIO_OUT_Error_CallBack>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002f14:	f000 f804 	bl	8002f20 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f32:	2001      	movs	r0, #1
 8002f34:	f000 f804 	bl	8002f40 <BSP_LCD_InitEx>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <BSP_LCD_InitEx+0xc0>)
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <BSP_LCD_InitEx+0xc0>)
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <BSP_LCD_InitEx+0xc4>)
 8002f58:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <BSP_LCD_InitEx+0xc0>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002f60:	f000 fb3a 	bl	80035d8 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002f64:	2201      	movs	r2, #1
 8002f66:	2120      	movs	r1, #32
 8002f68:	4827      	ldr	r0, [pc, #156]	; (8003008 <BSP_LCD_InitEx+0xc8>)
 8002f6a:	f001 fc87 	bl	800487c <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f74:	4825      	ldr	r0, [pc, #148]	; (800300c <BSP_LCD_InitEx+0xcc>)
 8002f76:	f001 fc81 	bl	800487c <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002f7a:	2005      	movs	r0, #5
 8002f7c:	f000 fc62 	bl	8003844 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002f80:	2201      	movs	r2, #1
 8002f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f86:	4821      	ldr	r0, [pc, #132]	; (800300c <BSP_LCD_InitEx+0xcc>)
 8002f88:	f001 fc78 	bl	800487c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f000 fc59 	bl	8003844 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002f92:	2200      	movs	r2, #0
 8002f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f98:	481c      	ldr	r0, [pc, #112]	; (800300c <BSP_LCD_InitEx+0xcc>)
 8002f9a:	f001 fc6f 	bl	800487c <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002f9e:	2014      	movs	r0, #20
 8002fa0:	f000 fc50 	bl	8003844 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002faa:	4818      	ldr	r0, [pc, #96]	; (800300c <BSP_LCD_InitEx+0xcc>)
 8002fac:	f001 fc66 	bl	800487c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002fb0:	200a      	movs	r0, #10
 8002fb2:	f000 fc47 	bl	8003844 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <BSP_LCD_InitEx+0xd0>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4798      	blx	r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b85      	cmp	r3, #133	; 0x85
 8002fc0:	d118      	bne.n	8002ff4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <BSP_LCD_InitEx+0xd4>)
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <BSP_LCD_InitEx+0xd0>)
 8002fc6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <BSP_LCD_InitEx+0xd4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff fabd 	bl	8002556 <ST7789H2_SetOrientation>
 8002fdc:	e005      	b.n	8002fea <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d102      	bne.n	8002fea <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f7ff fab6 	bl	8002556 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002fea:	480b      	ldr	r0, [pc, #44]	; (8003018 <BSP_LCD_InitEx+0xd8>)
 8002fec:	f000 f84e 	bl	800308c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20004f8c 	.word	0x20004f8c
 8003004:	20000064 	.word	0x20000064
 8003008:	40021000 	.word	0x40021000
 800300c:	40020400 	.word	0x40020400
 8003010:	20000024 	.word	0x20000024
 8003014:	2000016c 	.word	0x2000016c
 8003018:	2000006c 	.word	0x2000006c

0800301c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <BSP_LCD_GetXSize+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	4798      	blx	r3
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000016c 	.word	0x2000016c

08003034 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <BSP_LCD_GetYSize+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4798      	blx	r3
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000016c 	.word	0x2000016c

0800304c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <BSP_LCD_SetTextColor+0x1c>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	20004f8c 	.word	0x20004f8c

0800306c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <BSP_LCD_SetBackColor+0x1c>)
 800307a:	6053      	str	r3, [r2, #4]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20004f8c 	.word	0x20004f8c

0800308c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <BSP_LCD_SetFont+0x1c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6093      	str	r3, [r2, #8]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20004f8c 	.word	0x20004f8c

080030ac <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <BSP_LCD_Clear+0x68>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <BSP_LCD_Clear+0x68>)
 80030c8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80030ca:	f7ff ffb3 	bl	8003034 <BSP_LCD_GetYSize>
 80030ce:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e00d      	b.n	80030f2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	b29c      	uxth	r4, r3
 80030da:	f7ff ff9f 	bl	800301c <BSP_LCD_GetXSize>
 80030de:	4603      	mov	r3, r0
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	4621      	mov	r1, r4
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f8ee 	bl	80032c8 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3ed      	bcc.n	80030d6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80030fa:	4a06      	ldr	r2, [pc, #24]	; (8003114 <BSP_LCD_Clear+0x68>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <BSP_LCD_Clear+0x68>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ffa0 	bl	800304c <BSP_LCD_SetTextColor>
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	20004f8c 	.word	0x20004f8c

08003118 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
 8003122:	460b      	mov	r3, r1
 8003124:	80bb      	strh	r3, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <BSP_LCD_DisplayChar+0x50>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <BSP_LCD_DisplayChar+0x50>)
 8003136:	6889      	ldr	r1, [r1, #8]
 8003138:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800313a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <BSP_LCD_DisplayChar+0x50>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	889b      	ldrh	r3, [r3, #4]
 8003144:	3307      	adds	r3, #7
 8003146:	2b00      	cmp	r3, #0
 8003148:	da00      	bge.n	800314c <BSP_LCD_DisplayChar+0x34>
 800314a:	3307      	adds	r3, #7
 800314c:	10db      	asrs	r3, r3, #3
 800314e:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003152:	441a      	add	r2, r3
 8003154:	88b9      	ldrh	r1, [r7, #4]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fa99 	bl	8003690 <DrawChar>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20004f8c 	.word	0x20004f8c

0800316c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60ba      	str	r2, [r7, #8]
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	81fb      	strh	r3, [r7, #14]
 800317a:	460b      	mov	r3, r1
 800317c:	81bb      	strh	r3, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003182:	2301      	movs	r3, #1
 8003184:	83fb      	strh	r3, [r7, #30]
 8003186:	2300      	movs	r3, #0
 8003188:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003196:	e002      	b.n	800319e <BSP_LCD_DisplayStringAt+0x32>
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	3301      	adds	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	617a      	str	r2, [r7, #20]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f6      	bne.n	8003198 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80031aa:	f7ff ff37 	bl	800301c <BSP_LCD_GetXSize>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	889b      	ldrh	r3, [r3, #4]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d014      	beq.n	80031ec <BSP_LCD_DisplayStringAt+0x80>
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d00f      	beq.n	80031e6 <BSP_LCD_DisplayStringAt+0x7a>
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d11e      	bne.n	8003208 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	4a2e      	ldr	r2, [pc, #184]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 80031d2:	6892      	ldr	r2, [r2, #8]
 80031d4:	8892      	ldrh	r2, [r2, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	4413      	add	r3, r2
 80031e2:	83fb      	strh	r3, [r7, #30]
      break;
 80031e4:	e013      	b.n	800320e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80031e6:	89fb      	ldrh	r3, [r7, #14]
 80031e8:	83fb      	strh	r3, [r7, #30]
      break;
 80031ea:	e010      	b.n	800320e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	fb12 f303 	smulbb	r3, r2, r3
 80031fe:	b29a      	uxth	r2, r3
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	83fb      	strh	r3, [r7, #30]
      break;
 8003206:	e002      	b.n	800320e <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	83fb      	strh	r3, [r7, #30]
      break;
 800320c:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800320e:	8bfb      	ldrh	r3, [r7, #30]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <BSP_LCD_DisplayStringAt+0xb0>
 8003214:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003218:	2b00      	cmp	r3, #0
 800321a:	da15      	bge.n	8003248 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 800321c:	2301      	movs	r3, #1
 800321e:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003220:	e012      	b.n	8003248 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	89b9      	ldrh	r1, [r7, #12]
 8003228:	8bfb      	ldrh	r3, [r7, #30]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff74 	bl	8003118 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	889a      	ldrh	r2, [r3, #4]
 8003236:	8bfb      	ldrh	r3, [r7, #30]
 8003238:	4413      	add	r3, r2
 800323a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3301      	adds	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
    i++;
 8003242:	8bbb      	ldrh	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2dc      	uxtb	r4, r3
 8003256:	f7ff fee1 	bl	800301c <BSP_LCD_GetXSize>
 800325a:	4601      	mov	r1, r0
 800325c:	8bbb      	ldrh	r3, [r7, #28]
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	8892      	ldrh	r2, [r2, #4]
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	1acb      	subs	r3, r1, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <BSP_LCD_DisplayStringAt+0x120>)
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	8892      	ldrh	r2, [r2, #4]
 8003272:	4293      	cmp	r3, r2
 8003274:	bf2c      	ite	cs
 8003276:	2301      	movcs	r3, #1
 8003278:	2300      	movcc	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4023      	ands	r3, r4
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ce      	bne.n	8003222 <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8003284:	bf00      	nop
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd90      	pop	{r4, r7, pc}
 800328c:	20004f8c 	.word	0x20004f8c

08003290 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
 800329a:	460b      	mov	r3, r1
 800329c:	80bb      	strh	r3, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <BSP_LCD_DrawPixel+0x34>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <BSP_LCD_DrawPixel+0x34>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	88b9      	ldrh	r1, [r7, #4]
 80032b6:	88f8      	ldrh	r0, [r7, #6]
 80032b8:	4798      	blx	r3
  }
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000016c 	.word	0x2000016c

080032c8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
 80032d2:	460b      	mov	r3, r1
 80032d4:	80bb      	strh	r3, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <BSP_LCD_DrawHLine+0x6c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <BSP_LCD_DrawHLine+0x6c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a1c      	ldr	r4, [r3, #32]
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <BSP_LCD_DrawHLine+0x70>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b298      	uxth	r0, r3
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	88ba      	ldrh	r2, [r7, #4]
 80032f8:	88f9      	ldrh	r1, [r7, #6]
 80032fa:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80032fc:	e015      	b.n	800332a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e00e      	b.n	8003322 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	b29a      	uxth	r2, r3
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	4413      	add	r3, r2
 800330c:	b298      	uxth	r0, r3
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <BSP_LCD_DrawHLine+0x70>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29a      	uxth	r2, r3
 8003314:	88bb      	ldrh	r3, [r7, #4]
 8003316:	4619      	mov	r1, r3
 8003318:	f7ff ffba 	bl	8003290 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	429a      	cmp	r2, r3
 8003328:	d3ec      	bcc.n	8003304 <BSP_LCD_DrawHLine+0x3c>
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	2000016c 	.word	0x2000016c
 8003338:	20004f8c 	.word	0x20004f8c

0800333c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
 8003346:	460b      	mov	r3, r1
 8003348:	80bb      	strh	r3, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	f1c3 0303 	rsb	r3, r3, #3
 8003356:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003360:	e09a      	b.n	8003498 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	b29a      	uxth	r2, r3
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4413      	add	r3, r2
 800336a:	b298      	uxth	r0, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	b29b      	uxth	r3, r3
 8003370:	88ba      	ldrh	r2, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	b299      	uxth	r1, r3
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	f7ff ff87 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	b29b      	uxth	r3, r3
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	b298      	uxth	r0, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	b29b      	uxth	r3, r3
 8003390:	88ba      	ldrh	r2, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	b299      	uxth	r1, r3
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	f7ff ff77 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4413      	add	r3, r2
 80033aa:	b298      	uxth	r0, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	88ba      	ldrh	r2, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	b299      	uxth	r1, r3
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	f7ff ff67 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b298      	uxth	r0, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	88ba      	ldrh	r2, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	b299      	uxth	r1, r3
 80033d6:	4b35      	ldr	r3, [pc, #212]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	f7ff ff57 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4413      	add	r3, r2
 80033ea:	b298      	uxth	r0, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	88bb      	ldrh	r3, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	b299      	uxth	r1, r3
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	f7ff ff47 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	b29b      	uxth	r3, r3
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	b298      	uxth	r0, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	b29a      	uxth	r2, r3
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	b299      	uxth	r1, r3
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	f7ff ff37 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	b29a      	uxth	r2, r3
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4413      	add	r3, r2
 800342a:	b298      	uxth	r0, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b29a      	uxth	r2, r3
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	b299      	uxth	r1, r3
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	f7ff ff27 	bl	8003290 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	b29b      	uxth	r3, r3
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	b298      	uxth	r0, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b29a      	uxth	r2, r3
 8003450:	88bb      	ldrh	r3, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	b299      	uxth	r1, r3
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <BSP_LCD_DrawCircle+0x170>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	f7ff ff17 	bl	8003290 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003462:	4813      	ldr	r0, [pc, #76]	; (80034b0 <BSP_LCD_DrawCircle+0x174>)
 8003464:	f7ff fe12 	bl	800308c <BSP_LCD_SetFont>

    if (decision < 0)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	da06      	bge.n	800347c <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4413      	add	r3, r2
 8003476:	3306      	adds	r3, #6
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e00a      	b.n	8003492 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4413      	add	r3, r2
 8003488:	330a      	adds	r3, #10
 800348a:	617b      	str	r3, [r7, #20]
      current_y--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	f67f af60 	bls.w	8003362 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20004f8c 	.word	0x20004f8c
 80034b0:	2000006c 	.word	0x2000006c

080034b4 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
 80034be:	460b      	mov	r3, r1
 80034c0:	80bb      	strh	r3, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f1c3 0303 	rsb	r3, r3, #3
 80034ce:	617b      	str	r3, [r7, #20]

  current_x = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80034d8:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <BSP_LCD_FillCircle+0x120>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fdb4 	bl	800304c <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 80034e4:	e061      	b.n	80035aa <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d021      	beq.n	8003530 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	b298      	uxth	r0, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	88bb      	ldrh	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	b299      	uxth	r1, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	b29b      	uxth	r3, r3
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	f7ff fedd 	bl	80032c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	b29b      	uxth	r3, r3
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	b298      	uxth	r0, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	b29b      	uxth	r3, r3
 800351c:	88ba      	ldrh	r2, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	b299      	uxth	r1, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b29b      	uxth	r3, r3
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	f7ff fecc 	bl	80032c8 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d021      	beq.n	800357a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	b29b      	uxth	r3, r3
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b298      	uxth	r0, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	b29b      	uxth	r3, r3
 8003544:	88ba      	ldrh	r2, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b299      	uxth	r1, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	b29b      	uxth	r3, r3
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff feb8 	bl	80032c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	b29b      	uxth	r3, r3
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	b298      	uxth	r0, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	b29a      	uxth	r2, r3
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	b299      	uxth	r1, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	b29b      	uxth	r3, r3
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fea7 	bl	80032c8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	da06      	bge.n	800358e <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4413      	add	r3, r2
 8003588:	3306      	adds	r3, #6
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e00a      	b.n	80035a4 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	009a      	lsls	r2, r3, #2
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4413      	add	r3, r2
 800359a:	330a      	adds	r3, #10
 800359c:	617b      	str	r3, [r7, #20]
      current_y--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3301      	adds	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d999      	bls.n	80034e6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <BSP_LCD_FillCircle+0x120>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fd47 	bl	800304c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	88b9      	ldrh	r1, [r7, #4]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff feb9 	bl	800333c <BSP_LCD_DrawCircle>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20004f8c 	.word	0x20004f8c

080035d8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <BSP_LCD_MspInit+0xac>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a27      	ldr	r2, [pc, #156]	; (8003684 <BSP_LCD_MspInit+0xac>)
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b25      	ldr	r3, [pc, #148]	; (8003684 <BSP_LCD_MspInit+0xac>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <BSP_LCD_MspInit+0xac>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a20      	ldr	r2, [pc, #128]	; (8003684 <BSP_LCD_MspInit+0xac>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <BSP_LCD_MspInit+0xac>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <BSP_LCD_MspInit+0xac>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <BSP_LCD_MspInit+0xac>)
 8003620:	f043 0310 	orr.w	r3, r3, #16
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <BSP_LCD_MspInit+0xac>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8003632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003636:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800363c:	2302      	movs	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003640:	2301      	movs	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4619      	mov	r1, r3
 800364a:	480f      	ldr	r0, [pc, #60]	; (8003688 <BSP_LCD_MspInit+0xb0>)
 800364c:	f000 ff6c 	bl	8004528 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003654:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	4619      	mov	r1, r3
 8003660:	4809      	ldr	r0, [pc, #36]	; (8003688 <BSP_LCD_MspInit+0xb0>)
 8003662:	f000 ff61 	bl	8004528 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003666:	2320      	movs	r3, #32
 8003668:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800366a:	2301      	movs	r3, #1
 800366c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	4619      	mov	r1, r3
 8003674:	4805      	ldr	r0, [pc, #20]	; (800368c <BSP_LCD_MspInit+0xb4>)
 8003676:	f000 ff57 	bl	8004528 <HAL_GPIO_Init>
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40020400 	.word	0x40020400
 800368c:	40021000 	.word	0x40021000

08003690 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	603a      	str	r2, [r7, #0]
 800369a:	80fb      	strh	r3, [r7, #6]
 800369c:	460b      	mov	r3, r1
 800369e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <DrawChar+0x12c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	88db      	ldrh	r3, [r3, #6]
 80036ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <DrawChar+0x12c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	889b      	ldrh	r3, [r3, #4]
 80036b6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80036b8:	8a3b      	ldrh	r3, [r7, #16]
 80036ba:	3307      	adds	r3, #7
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da00      	bge.n	80036c2 <DrawChar+0x32>
 80036c0:	3307      	adds	r3, #7
 80036c2:	10db      	asrs	r3, r3, #3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	8a3b      	ldrh	r3, [r7, #16]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e069      	b.n	80037ac <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036d8:	8a3b      	ldrh	r3, [r7, #16]
 80036da:	3307      	adds	r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da00      	bge.n	80036e2 <DrawChar+0x52>
 80036e0:	3307      	adds	r3, #7
 80036e2:	10db      	asrs	r3, r3, #3
 80036e4:	461a      	mov	r2, r3
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fb03 f302 	mul.w	r3, r3, r2
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80036f2:	8a3b      	ldrh	r3, [r7, #16]
 80036f4:	3307      	adds	r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da00      	bge.n	80036fc <DrawChar+0x6c>
 80036fa:	3307      	adds	r3, #7
 80036fc:	10db      	asrs	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <DrawChar+0x78>
 8003702:	2b02      	cmp	r3, #2
 8003704:	d004      	beq.n	8003710 <DrawChar+0x80>
 8003706:	e00c      	b.n	8003722 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
      break;    
 800370e:	e016      	b.n	800373e <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	3201      	adds	r2, #1
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
      break;
 8003720:	e00d      	b.n	800373e <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	3301      	adds	r3, #1
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	4313      	orrs	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	3202      	adds	r2, #2
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
      break;
 800373c:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e029      	b.n	8003798 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003744:	8a3a      	ldrh	r2, [r7, #16]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	4413      	add	r3, r2
 800374e:	3b01      	subs	r3, #1
 8003750:	2201      	movs	r2, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	461a      	mov	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	b29a      	uxth	r2, r3
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	4413      	add	r3, r2
 8003768:	b298      	uxth	r0, r3
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <DrawChar+0x12c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	88bb      	ldrh	r3, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	f7ff fd8c 	bl	8003290 <BSP_LCD_DrawPixel>
 8003778:	e00b      	b.n	8003792 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	b29a      	uxth	r2, r3
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	4413      	add	r3, r2
 8003782:	b298      	uxth	r0, r3
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <DrawChar+0x12c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	b29a      	uxth	r2, r3
 800378a:	88bb      	ldrh	r3, [r7, #4]
 800378c:	4619      	mov	r1, r3
 800378e:	f7ff fd7f 	bl	8003290 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3301      	adds	r3, #1
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	8a3b      	ldrh	r3, [r7, #16]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	d3d1      	bcc.n	8003744 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80037a0:	88bb      	ldrh	r3, [r7, #4]
 80037a2:	3301      	adds	r3, #1
 80037a4:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	8a7b      	ldrh	r3, [r7, #18]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d391      	bcc.n	80036d8 <DrawChar+0x48>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20004f8c 	.word	0x20004f8c

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_Init+0x40>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_Init+0x40>)
 80037d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_Init+0x40>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 fb6c 	bl	8003ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fe fbf0 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7fd fe78 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000078 	.word	0x20000078
 8003828:	20004f98 	.word	0x20004f98

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20004f98 	.word	0x20004f98

08003844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7ff ffee 	bl	800382c <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d005      	beq.n	800386a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_Delay+0x40>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800386a:	bf00      	nop
 800386c:	f7ff ffde 	bl	800382c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d8f7      	bhi.n	800386c <HAL_Delay+0x28>
  {
  }
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000078 	.word	0x20000078

08003888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e033      	b.n	8003906 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fe46 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ce:	f023 0302 	bic.w	r3, r3, #2
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f94a 	bl	8003b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
 80038f6:	e001      	b.n	80038fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1c>
 8003928:	2302      	movs	r3, #2
 800392a:	e113      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x244>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b09      	cmp	r3, #9
 800393a:	d925      	bls.n	8003988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68d9      	ldr	r1, [r3, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	3b1e      	subs	r3, #30
 8003952:	2207      	movs	r2, #7
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43da      	mvns	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	400a      	ands	r2, r1
 8003960:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68d9      	ldr	r1, [r3, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	4603      	mov	r3, r0
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4403      	add	r3, r0
 800397a:	3b1e      	subs	r3, #30
 800397c:	409a      	lsls	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e022      	b.n	80039ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6919      	ldr	r1, [r3, #16]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	2207      	movs	r2, #7
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6919      	ldr	r1, [r3, #16]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4618      	mov	r0, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4403      	add	r3, r0
 80039c4:	409a      	lsls	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d824      	bhi.n	8003a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b05      	subs	r3, #5
 80039e8:	221f      	movs	r2, #31
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	400a      	ands	r2, r1
 80039f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b05      	subs	r3, #5
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a1e:	e04c      	b.n	8003aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d824      	bhi.n	8003a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	3b23      	subs	r3, #35	; 0x23
 8003a3a:	221f      	movs	r2, #31
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43da      	mvns	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	400a      	ands	r2, r1
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3b23      	subs	r3, #35	; 0x23
 8003a64:	fa00 f203 	lsl.w	r2, r0, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	e023      	b.n	8003aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b41      	subs	r3, #65	; 0x41
 8003a84:	221f      	movs	r2, #31
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	400a      	ands	r2, r1
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b41      	subs	r3, #65	; 0x41
 8003aae:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_ADC_ConfigChannel+0x250>)
 8003abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_ADC_ConfigChannel+0x254>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d8>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b12      	cmp	r3, #18
 8003ace:	d10b      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_ADC_ConfigChannel+0x254>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d12b      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_ADC_ConfigChannel+0x258>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x1f4>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b11      	cmp	r3, #17
 8003b02:	d122      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_ADC_ConfigChannel+0x258>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_ADC_ConfigChannel+0x25c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_ADC_ConfigChannel+0x260>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9a      	lsrs	r2, r3, #18
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40012300 	.word	0x40012300
 8003b64:	40012000 	.word	0x40012000
 8003b68:	10000012 	.word	0x10000012
 8003b6c:	20000020 	.word	0x20000020
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b7c:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <ADC_Init+0x1f0>)
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <ADC_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e00f      	b.n	8003c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0202 	bic.w	r2, r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e1b      	ldrb	r3, [r3, #24]
 8003c8c:	005a      	lsls	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	035a      	lsls	r2, r3, #13
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e007      	b.n	8003ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	051a      	lsls	r2, r3, #20
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d2a:	025a      	lsls	r2, r3, #9
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	029a      	lsls	r2, r3, #10
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012300 	.word	0x40012300
 8003d68:	0f000001 	.word	0x0f000001

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff4c 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eee:	f7ff ff61 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f7ff ffb1 	bl	8003e60 <NVIC_EncodePriority>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff80 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f0c:	bf00      	nop
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff54 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e014      	b.n	8003f6c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	791b      	ldrb	r3, [r3, #4]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fb6c 	bl	8001630 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d118      	bne.n	8003fbe <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fb6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f825 	bl	8004008 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fcc:	d118      	bne.n	8004000 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f043 0202 	orr.w	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003ff8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f85b 	bl	80040b6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	795b      	ldrb	r3, [r3, #5]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DAC_ConfigChannel+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e036      	b.n	80040aa <HAL_DAC_ConfigChannel+0x8e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2202      	movs	r2, #2
 8004046:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004050:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4013      	ands	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	22c0      	movs	r2, #192	; 0xc0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0cf      	b.n	800427e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a69      	ldr	r2, [pc, #420]	; (8004288 <HAL_DFSDM_ChannelInit+0x1bc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DFSDM_ChannelInit+0x3a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a67      	ldr	r2, [pc, #412]	; (800428c <HAL_DFSDM_ChannelInit+0x1c0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DFSDM_ChannelInit+0x3a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a66      	ldr	r2, [pc, #408]	; (8004290 <HAL_DFSDM_ChannelInit+0x1c4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DFSDM_ChannelInit+0x3a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a64      	ldr	r2, [pc, #400]	; (8004294 <HAL_DFSDM_ChannelInit+0x1c8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d106      	bne.n	8004114 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004106:	4b64      	ldr	r3, [pc, #400]	; (8004298 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004108:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800410a:	4b64      	ldr	r3, [pc, #400]	; (800429c <HAL_DFSDM_ChannelInit+0x1d0>)
 800410c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800410e:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e005      	b.n	8004120 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_DFSDM_ChannelInit+0x1d4>)
 8004116:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004118:	4b62      	ldr	r3, [pc, #392]	; (80042a4 <HAL_DFSDM_ChannelInit+0x1d8>)
 800411a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800411c:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_DFSDM_ChannelInit+0x1dc>)
 800411e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f8c1 	bl	80042ac <DFSDM_GetChannelFromInstance>
 800412a:	4603      	mov	r3, r0
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0a0      	b.n	800427e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fd fac3 	bl	80016c8 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d125      	bne.n	80041a0 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	431a      	orrs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	791b      	ldrb	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	3b01      	subs	r3, #1
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80041ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80041be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80041c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 020f 	bic.w	r2, r2, #15
 80041dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004204:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800425c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f81e 	bl	80042ac <DFSDM_GetChannelFromInstance>
 8004270:	4603      	mov	r3, r0
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40016000 	.word	0x40016000
 800428c:	40016020 	.word	0x40016020
 8004290:	40016040 	.word	0x40016040
 8004294:	40016060 	.word	0x40016060
 8004298:	20000170 	.word	0x20000170
 800429c:	20000174 	.word	0x20000174
 80042a0:	20000184 	.word	0x20000184
 80042a4:	20000188 	.word	0x20000188
 80042a8:	40016400 	.word	0x40016400

080042ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a24      	ldr	r2, [pc, #144]	; (8004348 <DFSDM_GetChannelFromInstance+0x9c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <DFSDM_GetChannelFromInstance+0x18>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <DFSDM_GetChannelFromInstance+0xa0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d102      	bne.n	80042ca <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e037      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <DFSDM_GetChannelFromInstance+0xa4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <DFSDM_GetChannelFromInstance+0x2e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <DFSDM_GetChannelFromInstance+0xa8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d102      	bne.n	80042e0 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80042da:	2301      	movs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e02c      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <DFSDM_GetChannelFromInstance+0xac>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <DFSDM_GetChannelFromInstance+0x44>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <DFSDM_GetChannelFromInstance+0xb0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d102      	bne.n	80042f6 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80042f0:	2302      	movs	r3, #2
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e021      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <DFSDM_GetChannelFromInstance+0xb4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <DFSDM_GetChannelFromInstance+0x5a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <DFSDM_GetChannelFromInstance+0xb8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d102      	bne.n	800430c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004306:	2303      	movs	r3, #3
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e016      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <DFSDM_GetChannelFromInstance+0xbc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d102      	bne.n	800431a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004314:	2304      	movs	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e00f      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <DFSDM_GetChannelFromInstance+0xc0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d102      	bne.n	8004328 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004322:	2305      	movs	r3, #5
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e008      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <DFSDM_GetChannelFromInstance+0xc4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d102      	bne.n	8004336 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004330:	2306      	movs	r3, #6
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e001      	b.n	800433a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8004336:	2307      	movs	r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800433a:	68fb      	ldr	r3, [r7, #12]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40016000 	.word	0x40016000
 800434c:	40016400 	.word	0x40016400
 8004350:	40016020 	.word	0x40016020
 8004354:	40016420 	.word	0x40016420
 8004358:	40016040 	.word	0x40016040
 800435c:	40016440 	.word	0x40016440
 8004360:	40016060 	.word	0x40016060
 8004364:	40016460 	.word	0x40016460
 8004368:	40016480 	.word	0x40016480
 800436c:	400164a0 	.word	0x400164a0
 8004370:	400164c0 	.word	0x400164c0

08004374 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e081      	b.n	800448a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd faa6 	bl	80018ec <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e006      	b.n	80043fc <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d104      	bne.n	800440e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004430:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	ea42 0103 	orr.w	r1, r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d138      	bne.n	800451a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e032      	b.n	800451c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	; 0x24
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e165      	b.n	8004810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004544:	2201      	movs	r2, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	f040 8154 	bne.w	800480a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d00b      	beq.n	8004582 <HAL_GPIO_Init+0x5a>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004576:	2b11      	cmp	r3, #17
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b12      	cmp	r3, #18
 8004580:	d130      	bne.n	80045e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b8:	2201      	movs	r2, #1
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 0201 	and.w	r2, r3, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0xfc>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b12      	cmp	r3, #18
 8004622:	d123      	bne.n	800466c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	220f      	movs	r2, #15
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	08da      	lsrs	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3208      	adds	r2, #8
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	2203      	movs	r2, #3
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0203 	and.w	r2, r3, #3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80ae 	beq.w	800480a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	4b5c      	ldr	r3, [pc, #368]	; (8004824 <HAL_GPIO_Init+0x2fc>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	4a5b      	ldr	r2, [pc, #364]	; (8004824 <HAL_GPIO_Init+0x2fc>)
 80046b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046bc:	6453      	str	r3, [r2, #68]	; 0x44
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_GPIO_Init+0x2fc>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ca:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_GPIO_Init+0x300>)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	3302      	adds	r3, #2
 80046d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	220f      	movs	r2, #15
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4e      	ldr	r2, [pc, #312]	; (800482c <HAL_GPIO_Init+0x304>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d025      	beq.n	8004742 <HAL_GPIO_Init+0x21a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4d      	ldr	r2, [pc, #308]	; (8004830 <HAL_GPIO_Init+0x308>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <HAL_GPIO_Init+0x216>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4c      	ldr	r2, [pc, #304]	; (8004834 <HAL_GPIO_Init+0x30c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_Init+0x212>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4b      	ldr	r2, [pc, #300]	; (8004838 <HAL_GPIO_Init+0x310>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_Init+0x20e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4a      	ldr	r2, [pc, #296]	; (800483c <HAL_GPIO_Init+0x314>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_Init+0x20a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a49      	ldr	r2, [pc, #292]	; (8004840 <HAL_GPIO_Init+0x318>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x206>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a48      	ldr	r2, [pc, #288]	; (8004844 <HAL_GPIO_Init+0x31c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_Init+0x202>
 8004726:	2306      	movs	r3, #6
 8004728:	e00c      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 800472a:	2307      	movs	r3, #7
 800472c:	e00a      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 800472e:	2305      	movs	r3, #5
 8004730:	e008      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 8004732:	2304      	movs	r3, #4
 8004734:	e006      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 8004736:	2303      	movs	r3, #3
 8004738:	e004      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 800473a:	2302      	movs	r3, #2
 800473c:	e002      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <HAL_GPIO_Init+0x21c>
 8004742:	2300      	movs	r3, #0
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	f002 0203 	and.w	r2, r2, #3
 800474a:	0092      	lsls	r2, r2, #2
 800474c:	4093      	lsls	r3, r2
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004754:	4934      	ldr	r1, [pc, #208]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	089b      	lsrs	r3, r3, #2
 800475a:	3302      	adds	r3, #2
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004762:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_GPIO_Init+0x320>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004786:	4a30      	ldr	r2, [pc, #192]	; (8004848 <HAL_GPIO_Init+0x320>)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800478c:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <HAL_GPIO_Init+0x320>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <HAL_GPIO_Init+0x320>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <HAL_GPIO_Init+0x320>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_GPIO_Init+0x320>)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_GPIO_Init+0x320>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004804:	4a10      	ldr	r2, [pc, #64]	; (8004848 <HAL_GPIO_Init+0x320>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3301      	adds	r3, #1
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b0f      	cmp	r3, #15
 8004814:	f67f ae96 	bls.w	8004544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004818:	bf00      	nop
 800481a:	3724      	adds	r7, #36	; 0x24
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40023800 	.word	0x40023800
 8004828:	40013800 	.word	0x40013800
 800482c:	40020000 	.word	0x40020000
 8004830:	40020400 	.word	0x40020400
 8004834:	40020800 	.word	0x40020800
 8004838:	40020c00 	.word	0x40020c00
 800483c:	40021000 	.word	0x40021000
 8004840:	40021400 	.word	0x40021400
 8004844:	40021800 	.word	0x40021800
 8004848:	40013c00 	.word	0x40013c00

0800484c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	887b      	ldrh	r3, [r7, #2]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e001      	b.n	800486e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
 8004888:	4613      	mov	r3, r2
 800488a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800488c:	787b      	ldrb	r3, [r7, #1]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004898:	e003      	b.n	80048a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	041a      	lsls	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	619a      	str	r2, [r3, #24]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048c6:	4a05      	ldr	r2, [pc, #20]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f806 	bl	80048e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40013c00 	.word	0x40013c00

080048e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f8:	b08f      	sub	sp, #60	; 0x3c
 80048fa:	af0a      	add	r7, sp, #40	; 0x28
 80048fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e054      	b.n	80049b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f00b fcee 	bl	8010304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2203      	movs	r2, #3
 800492c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f005 fd52 	bl	800a3f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	687e      	ldr	r6, [r7, #4]
 8004954:	466d      	mov	r5, sp
 8004956:	f106 0410 	add.w	r4, r6, #16
 800495a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800495c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004966:	e885 0003 	stmia.w	r5, {r0, r1}
 800496a:	1d33      	adds	r3, r6, #4
 800496c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800496e:	6838      	ldr	r0, [r7, #0]
 8004970:	f005 fccc 	bl	800a30c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f005 fd49 	bl	800a412 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	687e      	ldr	r6, [r7, #4]
 8004988:	466d      	mov	r5, sp
 800498a:	f106 0410 	add.w	r4, r6, #16
 800498e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800499a:	e885 0003 	stmia.w	r5, {r0, r1}
 800499e:	1d33      	adds	r3, r6, #4
 80049a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a2:	6838      	ldr	r0, [r7, #0]
 80049a4:	f005 fe5c 	bl	800a660 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80049ba:	b590      	push	{r4, r7, lr}
 80049bc:	b089      	sub	sp, #36	; 0x24
 80049be:	af04      	add	r7, sp, #16
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	4608      	mov	r0, r1
 80049c4:	4611      	mov	r1, r2
 80049c6:	461a      	mov	r2, r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	70fb      	strb	r3, [r7, #3]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70bb      	strb	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_HCD_HC_Init+0x28>
 80049de:	2302      	movs	r3, #2
 80049e0:	e07f      	b.n	8004ae2 <HAL_HCD_HC_Init+0x128>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	333d      	adds	r3, #61	; 0x3d
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3338      	adds	r3, #56	; 0x38
 8004a0e:	787a      	ldrb	r2, [r7, #1]
 8004a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	3340      	adds	r3, #64	; 0x40
 8004a22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a24:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	3339      	adds	r3, #57	; 0x39
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	333f      	adds	r3, #63	; 0x3f
 8004a4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	78bb      	ldrb	r3, [r7, #2]
 8004a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a58:	b2d8      	uxtb	r0, r3
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	440b      	add	r3, r1
 8004a66:	333a      	adds	r3, #58	; 0x3a
 8004a68:	4602      	mov	r2, r0
 8004a6a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da0a      	bge.n	8004a8a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	333b      	adds	r3, #59	; 0x3b
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e009      	b.n	8004a9e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	333b      	adds	r3, #59	; 0x3b
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	440b      	add	r3, r1
 8004aac:	333c      	adds	r3, #60	; 0x3c
 8004aae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ab2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	787c      	ldrb	r4, [r7, #1]
 8004aba:	78ba      	ldrb	r2, [r7, #2]
 8004abc:	78f9      	ldrb	r1, [r7, #3]
 8004abe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4623      	mov	r3, r4
 8004ad0:	f005 ff42 	bl	800a958 <USB_HC_Init>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}

08004aea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_HCD_HC_Halt+0x1e>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e00f      	b.n	8004b28 <HAL_HCD_HC_Halt+0x3e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f006 f97e 	bl	800ae1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	70fb      	strb	r3, [r7, #3]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70bb      	strb	r3, [r7, #2]
 8004b46:	4613      	mov	r3, r2
 8004b48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	333b      	adds	r3, #59	; 0x3b
 8004b5a:	78ba      	ldrb	r2, [r7, #2]
 8004b5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	333f      	adds	r3, #63	; 0x3f
 8004b6e:	787a      	ldrb	r2, [r7, #1]
 8004b70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b72:	7c3b      	ldrb	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d114      	bne.n	8004ba2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	3342      	adds	r3, #66	; 0x42
 8004b88:	2203      	movs	r2, #3
 8004b8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	440b      	add	r3, r1
 8004b9a:	333d      	adds	r3, #61	; 0x3d
 8004b9c:	7f3a      	ldrb	r2, [r7, #28]
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e009      	b.n	8004bb6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	3342      	adds	r3, #66	; 0x42
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	f200 80d6 	bhi.w	8004d6a <HAL_HCD_HC_SubmitRequest+0x23a>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004d55 	.word	0x08004d55
 8004bcc:	08004c41 	.word	0x08004c41
 8004bd0:	08004ccb 	.word	0x08004ccb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004bd4:	7c3b      	ldrb	r3, [r7, #16]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 80c9 	bne.w	8004d6e <HAL_HCD_HC_SubmitRequest+0x23e>
 8004bdc:	78bb      	ldrb	r3, [r7, #2]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80c5 	bne.w	8004d6e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004be4:	8b3b      	ldrh	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3351      	adds	r3, #81	; 0x51
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3351      	adds	r3, #81	; 0x51
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	3342      	adds	r3, #66	; 0x42
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c28:	e0a1      	b.n	8004d6e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	3342      	adds	r3, #66	; 0x42
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e096      	b.n	8004d6e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c40:	78bb      	ldrb	r3, [r7, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d120      	bne.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	440b      	add	r3, r1
 8004c54:	3351      	adds	r3, #81	; 0x51
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	440b      	add	r3, r1
 8004c6a:	3342      	adds	r3, #66	; 0x42
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c70:	e07e      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	3342      	adds	r3, #66	; 0x42
 8004c82:	2202      	movs	r2, #2
 8004c84:	701a      	strb	r2, [r3, #0]
      break;
 8004c86:	e073      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	3350      	adds	r3, #80	; 0x50
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	3342      	adds	r3, #66	; 0x42
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e05d      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3342      	adds	r3, #66	; 0x42
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
      break;
 8004cc8:	e052      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004cca:	78bb      	ldrb	r3, [r7, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d120      	bne.n	8004d12 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	3351      	adds	r3, #81	; 0x51
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3342      	adds	r3, #66	; 0x42
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cfa:	e039      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3342      	adds	r3, #66	; 0x42
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	701a      	strb	r2, [r3, #0]
      break;
 8004d10:	e02e      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	440b      	add	r3, r1
 8004d20:	3350      	adds	r3, #80	; 0x50
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	3342      	adds	r3, #66	; 0x42
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
      break;
 8004d3c:	e018      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3342      	adds	r3, #66	; 0x42
 8004d4e:	2202      	movs	r2, #2
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	e00d      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	3342      	adds	r3, #66	; 0x42
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
      break;
 8004d68:	e002      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004d6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3344      	adds	r3, #68	; 0x44
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	8b39      	ldrh	r1, [r7, #24]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4403      	add	r3, r0
 8004d94:	3348      	adds	r3, #72	; 0x48
 8004d96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	335c      	adds	r3, #92	; 0x5c
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	440b      	add	r3, r1
 8004dba:	334c      	adds	r3, #76	; 0x4c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	3339      	adds	r3, #57	; 0x39
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	335d      	adds	r3, #93	; 0x5d
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	3338      	adds	r3, #56	; 0x38
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	18d1      	adds	r1, r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	f005 feb2 	bl	800ab6c <USB_HC_StartXfer>
 8004e08:	4603      	mov	r3, r0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop

08004e14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f005 fbd5 	bl	800a5da <USB_GetMode>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	f040 80ef 	bne.w	8005016 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fbb9 	bl	800a5b4 <USB_ReadInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80e5 	beq.w	8005014 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f005 fbb0 	bl	800a5b4 <USB_ReadInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5e:	d104      	bne.n	8004e6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f005 fba0 	bl	800a5b4 <USB_ReadInterrupts>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d104      	bne.n	8004e8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f005 fb90 	bl	800a5b4 <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9e:	d104      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f005 fb80 	bl	800a5b4 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d103      	bne.n	8004ec6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f005 fb72 	bl	800a5b4 <USB_ReadInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eda:	d115      	bne.n	8004f08 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ee4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f00b fa82 	bl	8010400 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 fc62 	bl	800a7cc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 fb51 	bl	800a5b4 <USB_ReadInterrupts>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f1c:	d102      	bne.n	8004f24 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 f966 	bl	80061f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f005 fb43 	bl	800a5b4 <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d106      	bne.n	8004f46 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f00b fa45 	bl	80103c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2208      	movs	r2, #8
 8004f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f005 fb32 	bl	800a5b4 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5a:	d138      	bne.n	8004fce <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f005 ff49 	bl	800adf8 <USB_HC_ReadInterrupt>
 8004f66:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e025      	b.n	8004fba <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d018      	beq.n	8004fb4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d106      	bne.n	8004fa8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8cf 	bl	8005144 <HCD_HC_IN_IRQHandler>
 8004fa6:	e005      	b.n	8004fb4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fcfd 	bl	80059ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3d4      	bcc.n	8004f6e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f005 faee 	bl	800a5b4 <USB_ReadInterrupts>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d101      	bne.n	8004fe6 <HAL_HCD_IRQHandler+0x1d2>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_HCD_IRQHandler+0x1d4>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d014      	beq.n	8005016 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0210 	bic.w	r2, r2, #16
 8004ffa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 f84b 	bl	8006098 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0210 	orr.w	r2, r2, #16
 8005010:	619a      	str	r2, [r3, #24]
 8005012:	e000      	b.n	8005016 <HAL_HCD_IRQHandler+0x202>
      return;
 8005014:	bf00      	nop
    }
  }
}
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_HCD_Start+0x16>
 800502e:	2302      	movs	r3, #2
 8005030:	e013      	b.n	800505a <HAL_HCD_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f005 f9c5 	bl	800a3ce <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f005 fc22 	bl	800a894 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_HCD_Stop+0x16>
 8005074:	2302      	movs	r3, #2
 8005076:	e00d      	b.n	8005094 <HAL_HCD_Stop+0x32>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f006 f803 	bl	800b090 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 fbc9 	bl	800a840 <USB_ResetPort>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	335c      	adds	r3, #92	; 0x5c
 80050d4:	781b      	ldrb	r3, [r3, #0]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	334c      	adds	r3, #76	; 0x4c
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f005 fc0b 	bl	800a934 <USB_GetCurrentFrame>
 800511e:	4603      	mov	r3, r0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f005 fbe6 	bl	800a906 <USB_GetHostSpeed>
 800513a:	4603      	mov	r3, r0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d119      	bne.n	80051a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	2304      	movs	r3, #4
 8005184:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	60d3      	str	r3, [r2, #12]
 80051a6:	e0ce      	b.n	8005346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d12c      	bne.n	800521a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	440b      	add	r3, r1
 80051e2:	335d      	adds	r3, #93	; 0x5d
 80051e4:	2207      	movs	r2, #7
 80051e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005202:	f043 0302 	orr.w	r3, r3, #2
 8005206:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f005 fe01 	bl	800ae1a <USB_HC_Halt>
 8005218:	e095      	b.n	8005346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d109      	bne.n	8005244 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2320      	movs	r3, #32
 8005240:	6093      	str	r3, [r2, #8]
 8005242:	e080      	b.n	8005346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d134      	bne.n	80052c4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	440a      	add	r2, r1
 8005270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	440b      	add	r3, r1
 8005288:	335d      	adds	r3, #93	; 0x5d
 800528a:	2205      	movs	r2, #5
 800528c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4413      	add	r3, r2
 8005296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529a:	461a      	mov	r2, r3
 800529c:	2310      	movs	r3, #16
 800529e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	461a      	mov	r2, r3
 80052ae:	2308      	movs	r3, #8
 80052b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f005 fdac 	bl	800ae1a <USB_HC_Halt>
 80052c2:	e040      	b.n	8005346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052da:	d134      	bne.n	8005346 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f005 fd87 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	461a      	mov	r2, r3
 800531a:	2310      	movs	r3, #16
 800531c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	335d      	adds	r3, #93	; 0x5d
 800532e:	2208      	movs	r2, #8
 8005330:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533e:	461a      	mov	r2, r3
 8005340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005344:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535c:	d122      	bne.n	80053a4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f005 fd46 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	461a      	mov	r2, r3
 800539c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80053a2:	e300      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	f040 80fd 	bne.w	80055b6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	440b      	add	r3, r1
 80053d2:	3348      	adds	r3, #72	; 0x48
 80053d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	0159      	lsls	r1, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	440b      	add	r3, r1
 80053de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80053e8:	1ad1      	subs	r1, r2, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4403      	add	r3, r0
 80053f8:	334c      	adds	r3, #76	; 0x4c
 80053fa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	335d      	adds	r3, #93	; 0x5d
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	3358      	adds	r3, #88	; 0x58
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	2301      	movs	r3, #1
 8005434:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	333f      	adds	r3, #63	; 0x3f
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	333f      	adds	r3, #63	; 0x3f
 800545c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800545e:	2b02      	cmp	r3, #2
 8005460:	d121      	bne.n	80054a6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f005 fcc4 	bl	800ae1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	461a      	mov	r2, r3
 80054a0:	2310      	movs	r3, #16
 80054a2:	6093      	str	r3, [r2, #8]
 80054a4:	e070      	b.n	8005588 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	333f      	adds	r3, #63	; 0x3f
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d12a      	bne.n	8005512 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	335c      	adds	r3, #92	; 0x5c
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	b2d8      	uxtb	r0, r3
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	335c      	adds	r3, #92	; 0x5c
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4601      	mov	r1, r0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f00a ff86 	bl	801041c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005510:	e03a      	b.n	8005588 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	333f      	adds	r3, #63	; 0x3f
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d12f      	bne.n	8005588 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	335c      	adds	r3, #92	; 0x5c
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	3350      	adds	r3, #80	; 0x50
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f083 0301 	eor.w	r3, r3, #1
 8005552:	b2d8      	uxtb	r0, r3
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	440b      	add	r3, r1
 8005562:	3350      	adds	r3, #80	; 0x50
 8005564:	4602      	mov	r2, r0
 8005566:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	b2d8      	uxtb	r0, r3
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	440b      	add	r3, r1
 800557a:	335c      	adds	r3, #92	; 0x5c
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	4601      	mov	r1, r0
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f00a ff4a 	bl	801041c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	440b      	add	r3, r1
 8005596:	3350      	adds	r3, #80	; 0x50
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f083 0301 	eor.w	r3, r3, #1
 800559e:	b2d8      	uxtb	r0, r3
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	440b      	add	r3, r1
 80055ae:	3350      	adds	r3, #80	; 0x50
 80055b0:	4602      	mov	r2, r0
 80055b2:	701a      	strb	r2, [r3, #0]
}
 80055b4:	e1f7      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	f040 811a 	bne.w	8005802 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e8:	f023 0302 	bic.w	r3, r3, #2
 80055ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	335d      	adds	r3, #93	; 0x5d
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d10a      	bne.n	800561a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	335c      	adds	r3, #92	; 0x5c
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e0d9      	b.n	80057ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	440b      	add	r3, r1
 8005628:	335d      	adds	r3, #93	; 0x5d
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b05      	cmp	r3, #5
 800562e:	d10a      	bne.n	8005646 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	440b      	add	r3, r1
 800563e:	335c      	adds	r3, #92	; 0x5c
 8005640:	2205      	movs	r2, #5
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e0c3      	b.n	80057ce <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	440b      	add	r3, r1
 8005654:	335d      	adds	r3, #93	; 0x5d
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d00a      	beq.n	8005672 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	440b      	add	r3, r1
 800566a:	335d      	adds	r3, #93	; 0x5d
 800566c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800566e:	2b08      	cmp	r3, #8
 8005670:	d156      	bne.n	8005720 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3358      	adds	r3, #88	; 0x58
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4403      	add	r3, r0
 8005694:	3358      	adds	r3, #88	; 0x58
 8005696:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3358      	adds	r3, #88	; 0x58
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d914      	bls.n	80056d8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	3358      	adds	r3, #88	; 0x58
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	335c      	adds	r3, #92	; 0x5c
 80056d2:	2204      	movs	r2, #4
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e009      	b.n	80056ec <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	335c      	adds	r3, #92	; 0x5c
 80056e8:	2202      	movs	r2, #2
 80056ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005702:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800570a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	461a      	mov	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e056      	b.n	80057ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	335d      	adds	r3, #93	; 0x5d
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d123      	bne.n	800577e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	335c      	adds	r3, #92	; 0x5c
 8005746:	2202      	movs	r2, #2
 8005748:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005760:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005768:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e027      	b.n	80057ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	335d      	adds	r3, #93	; 0x5d
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b07      	cmp	r3, #7
 8005792:	d11c      	bne.n	80057ce <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3358      	adds	r3, #88	; 0x58
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4403      	add	r3, r0
 80057b6:	3358      	adds	r3, #88	; 0x58
 80057b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	335c      	adds	r3, #92	; 0x5c
 80057ca:	2204      	movs	r2, #4
 80057cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057da:	461a      	mov	r2, r3
 80057dc:	2302      	movs	r3, #2
 80057de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	b2d8      	uxtb	r0, r3
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	335c      	adds	r3, #92	; 0x5c
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	4601      	mov	r1, r0
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00a fe0e 	bl	801041c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005800:	e0d1      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d13e      	bne.n	8005896 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	440a      	add	r2, r1
 800582e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005832:	f043 0302 	orr.w	r3, r3, #2
 8005836:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	440b      	add	r3, r1
 8005846:	3358      	adds	r3, #88	; 0x58
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4403      	add	r3, r0
 800585a:	3358      	adds	r3, #88	; 0x58
 800585c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	335d      	adds	r3, #93	; 0x5d
 800586e:	2206      	movs	r2, #6
 8005870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f005 facc 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	461a      	mov	r2, r3
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	6093      	str	r3, [r2, #8]
}
 8005894:	e087      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d17c      	bne.n	80059a6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	333f      	adds	r3, #63	; 0x3f
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d122      	bne.n	8005908 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	3358      	adds	r3, #88	; 0x58
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f005 fa8a 	bl	800ae1a <USB_HC_Halt>
 8005906:	e045      	b.n	8005994 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	333f      	adds	r3, #63	; 0x3f
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	333f      	adds	r3, #63	; 0x3f
 800592e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005930:	2b02      	cmp	r3, #2
 8005932:	d12f      	bne.n	8005994 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	440b      	add	r3, r1
 8005942:	3358      	adds	r3, #88	; 0x58
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d121      	bne.n	8005994 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	440b      	add	r3, r1
 800595e:	335d      	adds	r3, #93	; 0x5d
 8005960:	2203      	movs	r2, #3
 8005962:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	440a      	add	r2, r1
 800597a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597e:	f043 0302 	orr.w	r3, r3, #2
 8005982:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f005 fa43 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	461a      	mov	r2, r3
 80059a2:	2310      	movs	r3, #16
 80059a4:	6093      	str	r3, [r2, #8]
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d119      	bne.n	8005a12 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	461a      	mov	r2, r3
 80059ec:	2304      	movs	r3, #4
 80059ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0a:	f043 0302 	orr.w	r3, r3, #2
 8005a0e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005a10:	e33e      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d141      	bne.n	8005aac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	461a      	mov	r2, r3
 8005a36:	2320      	movs	r3, #32
 8005a38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	440b      	add	r3, r1
 8005a48:	333d      	adds	r3, #61	; 0x3d
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	f040 831f 	bne.w	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	333d      	adds	r3, #61	; 0x3d
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	440b      	add	r3, r1
 8005a74:	335c      	adds	r3, #92	; 0x5c
 8005a76:	2202      	movs	r2, #2
 8005a78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f005 f9b8 	bl	800ae1a <USB_HC_Halt>
}
 8005aaa:	e2f1      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d13f      	bne.n	8005b42 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	335d      	adds	r3, #93	; 0x5d
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	333d      	adds	r3, #61	; 0x3d
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	3358      	adds	r3, #88	; 0x58
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b18:	f043 0302 	orr.w	r3, r3, #2
 8005b1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f005 f976 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	6093      	str	r3, [r2, #8]
}
 8005b40:	e2a6      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b58:	d122      	bne.n	8005ba0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f005 f948 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	461a      	mov	r2, r3
 8005b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b9c:	6093      	str	r3, [r2, #8]
}
 8005b9e:	e277      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d135      	bne.n	8005c22 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3358      	adds	r3, #88	; 0x58
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f005 f910 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	2301      	movs	r3, #1
 8005c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	335d      	adds	r3, #93	; 0x5d
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
}
 8005c20:	e236      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d12b      	bne.n	8005c90 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	2308      	movs	r3, #8
 8005c48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 f8d0 	bl	800ae1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	440b      	add	r3, r1
 8005c88:	335d      	adds	r3, #93	; 0x5d
 8005c8a:	2205      	movs	r2, #5
 8005c8c:	701a      	strb	r2, [r3, #0]
}
 8005c8e:	e1ff      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d155      	bne.n	8005d52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3358      	adds	r3, #88	; 0x58
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	335d      	adds	r3, #93	; 0x5d
 8005cca:	2203      	movs	r2, #3
 8005ccc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	333d      	adds	r3, #61	; 0x3d
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d114      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	333c      	adds	r3, #60	; 0x3c
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	440b      	add	r3, r1
 8005d08:	333d      	adds	r3, #61	; 0x3d
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f005 f86e 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	6093      	str	r3, [r2, #8]
}
 8005d50:	e19e      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d12b      	bne.n	8005dc0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d82:	f043 0302 	orr.w	r3, r3, #2
 8005d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	4611      	mov	r1, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f005 f841 	bl	800ae1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	440b      	add	r3, r1
 8005da6:	335d      	adds	r3, #93	; 0x5d
 8005da8:	2206      	movs	r2, #6
 8005daa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	6093      	str	r3, [r2, #8]
}
 8005dbe:	e167      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	d135      	bne.n	8005e44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f005 f809 	bl	800ae1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	461a      	mov	r2, r3
 8005e16:	2310      	movs	r3, #16
 8005e18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	461a      	mov	r2, r3
 8005e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	335d      	adds	r3, #93	; 0x5d
 8005e3e:	2208      	movs	r2, #8
 8005e40:	701a      	strb	r2, [r3, #0]
}
 8005e42:	e125      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	f040 811a 	bne.w	8006090 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e76:	f023 0302 	bic.w	r3, r3, #2
 8005e7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	335d      	adds	r3, #93	; 0x5d
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d137      	bne.n	8005f02 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	335c      	adds	r3, #92	; 0x5c
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	333f      	adds	r3, #63	; 0x3f
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d00b      	beq.n	8005ed4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	440b      	add	r3, r1
 8005eca:	333f      	adds	r3, #63	; 0x3f
 8005ecc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	f040 80c5 	bne.w	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3351      	adds	r3, #81	; 0x51
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f083 0301 	eor.w	r3, r3, #1
 8005eea:	b2d8      	uxtb	r0, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	440b      	add	r3, r1
 8005efa:	3351      	adds	r3, #81	; 0x51
 8005efc:	4602      	mov	r2, r0
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e0ad      	b.n	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	440b      	add	r3, r1
 8005f10:	335d      	adds	r3, #93	; 0x5d
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d10a      	bne.n	8005f2e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	335c      	adds	r3, #92	; 0x5c
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e097      	b.n	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	440b      	add	r3, r1
 8005f3c:	335d      	adds	r3, #93	; 0x5d
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d10a      	bne.n	8005f5a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	440b      	add	r3, r1
 8005f52:	335c      	adds	r3, #92	; 0x5c
 8005f54:	2202      	movs	r2, #2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e081      	b.n	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	440b      	add	r3, r1
 8005f68:	335d      	adds	r3, #93	; 0x5d
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d10a      	bne.n	8005f86 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	440b      	add	r3, r1
 8005f7e:	335c      	adds	r3, #92	; 0x5c
 8005f80:	2205      	movs	r2, #5
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e06b      	b.n	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	440b      	add	r3, r1
 8005f94:	335d      	adds	r3, #93	; 0x5d
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d00a      	beq.n	8005fb2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	440b      	add	r3, r1
 8005faa:	335d      	adds	r3, #93	; 0x5d
 8005fac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d155      	bne.n	800605e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3358      	adds	r3, #88	; 0x58
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4403      	add	r3, r0
 8005fd4:	3358      	adds	r3, #88	; 0x58
 8005fd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	440b      	add	r3, r1
 8005fe6:	3358      	adds	r3, #88	; 0x58
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d914      	bls.n	8006018 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3358      	adds	r3, #88	; 0x58
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	335c      	adds	r3, #92	; 0x5c
 8006012:	2204      	movs	r2, #4
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e009      	b.n	800602c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	440b      	add	r3, r1
 8006026:	335c      	adds	r3, #92	; 0x5c
 8006028:	2202      	movs	r2, #2
 800602a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006042:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800604a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	461a      	mov	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	461a      	mov	r2, r3
 800606c:	2302      	movs	r3, #2
 800606e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	b2d8      	uxtb	r0, r3
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	440b      	add	r3, r1
 8006082:	335c      	adds	r3, #92	; 0x5c
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	4601      	mov	r1, r0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f00a f9c6 	bl	801041c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006090:	bf00      	nop
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	0c5b      	lsrs	r3, r3, #17
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d003      	beq.n	80060dc <HCD_RXQLVL_IRQHandler+0x44>
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	f000 8082 	beq.w	80061de <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80060da:	e083      	b.n	80061e4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07f      	beq.n	80061e2 <HCD_RXQLVL_IRQHandler+0x14a>
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	440b      	add	r3, r1
 80060f0:	3344      	adds	r3, #68	; 0x44
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d074      	beq.n	80061e2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	440b      	add	r3, r1
 800610a:	3344      	adds	r3, #68	; 0x44
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	b292      	uxth	r2, r2
 8006112:	4619      	mov	r1, r3
 8006114:	f004 fa25 	bl	800a562 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	3344      	adds	r3, #68	; 0x44
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	18d1      	adds	r1, r2, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4403      	add	r3, r0
 800613c:	3344      	adds	r3, #68	; 0x44
 800613e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	440b      	add	r3, r1
 800614e:	334c      	adds	r3, #76	; 0x4c
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	18d1      	adds	r1, r2, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4403      	add	r3, r0
 8006164:	334c      	adds	r3, #76	; 0x4c
 8006166:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <HCD_RXQLVL_IRQHandler+0x154>)
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d031      	beq.n	80061e2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006194:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800619c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	461a      	mov	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	3350      	adds	r3, #80	; 0x50
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f083 0301 	eor.w	r3, r3, #1
 80061c6:	b2d8      	uxtb	r0, r3
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	440b      	add	r3, r1
 80061d6:	3350      	adds	r3, #80	; 0x50
 80061d8:	4602      	mov	r2, r0
 80061da:	701a      	strb	r2, [r3, #0]
      break;
 80061dc:	e001      	b.n	80061e2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80061e2:	bf00      	nop
  }
}
 80061e4:	bf00      	nop
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	1ff80000 	.word	0x1ff80000

080061f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800621c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d10b      	bne.n	8006240 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f00a f8d6 	bl	80103e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f043 0302 	orr.w	r3, r3, #2
 800623e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d132      	bne.n	80062b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b04      	cmp	r3, #4
 800625a:	d126      	bne.n	80062aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d113      	bne.n	800628c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800626a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800626e:	d106      	bne.n	800627e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2102      	movs	r1, #2
 8006276:	4618      	mov	r0, r3
 8006278:	f004 faa8 	bl	800a7cc <USB_InitFSLSPClkSel>
 800627c:	e011      	b.n	80062a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f004 faa1 	bl	800a7cc <USB_InitFSLSPClkSel>
 800628a:	e00a      	b.n	80062a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d106      	bne.n	80062a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	461a      	mov	r2, r3
 800629c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80062a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f00a f8cc 	bl	8010440 <HAL_HCD_PortEnabled_Callback>
 80062a8:	e002      	b.n	80062b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f00a f8d6 	bl	801045c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d103      	bne.n	80062c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6013      	str	r3, [r2, #0]
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e11f      	b.n	800652a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fb3c 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800633a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800633c:	f001 f80e 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 8006340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4a7b      	ldr	r2, [pc, #492]	; (8006534 <HAL_I2C_Init+0x25c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d807      	bhi.n	800635c <HAL_I2C_Init+0x84>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a7a      	ldr	r2, [pc, #488]	; (8006538 <HAL_I2C_Init+0x260>)
 8006350:	4293      	cmp	r3, r2
 8006352:	bf94      	ite	ls
 8006354:	2301      	movls	r3, #1
 8006356:	2300      	movhi	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e006      	b.n	800636a <HAL_I2C_Init+0x92>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a77      	ldr	r2, [pc, #476]	; (800653c <HAL_I2C_Init+0x264>)
 8006360:	4293      	cmp	r3, r2
 8006362:	bf94      	ite	ls
 8006364:	2301      	movls	r3, #1
 8006366:	2300      	movhi	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e0db      	b.n	800652a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a72      	ldr	r2, [pc, #456]	; (8006540 <HAL_I2C_Init+0x268>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	0c9b      	lsrs	r3, r3, #18
 800637c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a64      	ldr	r2, [pc, #400]	; (8006534 <HAL_I2C_Init+0x25c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d802      	bhi.n	80063ac <HAL_I2C_Init+0xd4>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3301      	adds	r3, #1
 80063aa:	e009      	b.n	80063c0 <HAL_I2C_Init+0xe8>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_I2C_Init+0x26c>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	099b      	lsrs	r3, r3, #6
 80063be:	3301      	adds	r3, #1
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4956      	ldr	r1, [pc, #344]	; (8006534 <HAL_I2C_Init+0x25c>)
 80063dc:	428b      	cmp	r3, r1
 80063de:	d80d      	bhi.n	80063fc <HAL_I2C_Init+0x124>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1e59      	subs	r1, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ee:	3301      	adds	r3, #1
 80063f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	bf38      	it	cc
 80063f8:	2304      	movcc	r3, #4
 80063fa:	e04f      	b.n	800649c <HAL_I2C_Init+0x1c4>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d111      	bne.n	8006428 <HAL_I2C_Init+0x150>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	1e58      	subs	r0, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6859      	ldr	r1, [r3, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	440b      	add	r3, r1
 8006412:	fbb0 f3f3 	udiv	r3, r0, r3
 8006416:	3301      	adds	r3, #1
 8006418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e012      	b.n	800644e <HAL_I2C_Init+0x176>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1e58      	subs	r0, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	0099      	lsls	r1, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	fbb0 f3f3 	udiv	r3, r0, r3
 800643e:	3301      	adds	r3, #1
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Init+0x17e>
 8006452:	2301      	movs	r3, #1
 8006454:	e022      	b.n	800649c <HAL_I2C_Init+0x1c4>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10e      	bne.n	800647c <HAL_I2C_Init+0x1a4>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1e58      	subs	r0, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	440b      	add	r3, r1
 800646c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006470:	3301      	adds	r3, #1
 8006472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	e00f      	b.n	800649c <HAL_I2C_Init+0x1c4>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1e58      	subs	r0, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6859      	ldr	r1, [r3, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	0099      	lsls	r1, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006492:	3301      	adds	r3, #1
 8006494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6911      	ldr	r1, [r2, #16]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68d2      	ldr	r2, [r2, #12]
 80064d6:	4311      	orrs	r1, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	430b      	orrs	r3, r1
 80064de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	000186a0 	.word	0x000186a0
 8006538:	001e847f 	.word	0x001e847f
 800653c:	003d08ff 	.word	0x003d08ff
 8006540:	431bde83 	.word	0x431bde83
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e154      	b.n	8006804 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a98      	ldr	r2, [pc, #608]	; (80067d4 <HAL_I2S_Init+0x28c>)
 8006572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fb fa49 	bl	8001a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006590:	f023 030f 	bic.w	r3, r3, #15
 8006594:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2202      	movs	r2, #2
 800659c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d06f      	beq.n	8006686 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80065ae:	2310      	movs	r3, #16
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e001      	b.n	80065b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80065b4:	2320      	movs	r3, #32
 80065b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d802      	bhi.n	80065c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a83      	ldr	r2, [pc, #524]	; (80067d8 <HAL_I2S_Init+0x290>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_I2S_Init+0x92>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a81      	ldr	r2, [pc, #516]	; (80067dc <HAL_I2S_Init+0x294>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d104      	bne.n	80065e4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80065da:	2001      	movs	r0, #1
 80065dc:	f001 f9a4 	bl	8007928 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	e003      	b.n	80065ec <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80065e4:	2002      	movs	r0, #2
 80065e6:	f001 f99f 	bl	8007928 <HAL_RCCEx_GetPeriphCLKFreq>
 80065ea:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d125      	bne.n	8006642 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	fbb2 f2f3 	udiv	r2, r2, r3
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	fbb2 f3f3 	udiv	r3, r2, r3
 800661a:	3305      	adds	r3, #5
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e01f      	b.n	8006660 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	fbb2 f2f3 	udiv	r2, r2, r3
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	3305      	adds	r3, #5
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	e00e      	b.n	8006660 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fbb2 f2f3 	udiv	r2, r2, r3
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	3305      	adds	r3, #5
 800665e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4a5f      	ldr	r2, [pc, #380]	; (80067e0 <HAL_I2S_Init+0x298>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	08db      	lsrs	r3, r3, #3
 800666a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e003      	b.n	800668e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006686:	2302      	movs	r3, #2
 8006688:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d902      	bls.n	800669a <HAL_I2S_Init+0x152>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d907      	bls.n	80066aa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0210 	orr.w	r2, r3, #16
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e0ac      	b.n	8006804 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	ea42 0103 	orr.w	r1, r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80066c8:	f023 030f 	bic.w	r3, r3, #15
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6851      	ldr	r1, [r2, #4]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6892      	ldr	r2, [r2, #8]
 80066d4:	4311      	orrs	r1, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6992      	ldr	r2, [r2, #24]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ec:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b30      	cmp	r3, #48	; 0x30
 80066f4:	d003      	beq.n	80066fe <HAL_I2S_Init+0x1b6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2bb0      	cmp	r3, #176	; 0xb0
 80066fc:	d107      	bne.n	800670e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800670c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d16e      	bne.n	80067f4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a32      	ldr	r2, [pc, #200]	; (80067e4 <HAL_I2S_Init+0x29c>)
 800671a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2d      	ldr	r2, [pc, #180]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_I2S_Init+0x1e2>
 8006726:	4b30      	ldr	r3, [pc, #192]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 8006728:	e001      	b.n	800672e <HAL_I2S_Init+0x1e6>
 800672a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	4928      	ldr	r1, [pc, #160]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006736:	428a      	cmp	r2, r1
 8006738:	d101      	bne.n	800673e <HAL_I2S_Init+0x1f6>
 800673a:	4a2b      	ldr	r2, [pc, #172]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 800673c:	e001      	b.n	8006742 <HAL_I2S_Init+0x1fa>
 800673e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006742:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006746:	f023 030f 	bic.w	r3, r3, #15
 800674a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <HAL_I2S_Init+0x212>
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 8006758:	e001      	b.n	800675e <HAL_I2S_Init+0x216>
 800675a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800675e:	2202      	movs	r2, #2
 8006760:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d101      	bne.n	8006770 <HAL_I2S_Init+0x228>
 800676c:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 800676e:	e001      	b.n	8006774 <HAL_I2S_Init+0x22c>
 8006770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d003      	beq.n	800678a <HAL_I2S_Init+0x242>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800678a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	e001      	b.n	8006796 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	b299      	uxth	r1, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80067ac:	4303      	orrs	r3, r0
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	430b      	orrs	r3, r1
 80067b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80067b4:	4313      	orrs	r3, r2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	897b      	ldrh	r3, [r7, #10]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067c2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a03      	ldr	r2, [pc, #12]	; (80067d8 <HAL_I2S_Init+0x290>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10e      	bne.n	80067ec <HAL_I2S_Init+0x2a4>
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 80067d0:	e00e      	b.n	80067f0 <HAL_I2S_Init+0x2a8>
 80067d2:	bf00      	nop
 80067d4:	080068c7 	.word	0x080068c7
 80067d8:	40003800 	.word	0x40003800
 80067dc:	40003c00 	.word	0x40003c00
 80067e0:	cccccccd 	.word	0xcccccccd
 80067e4:	080069dd 	.word	0x080069dd
 80067e8:	40003400 	.word	0x40003400
 80067ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f0:	897a      	ldrh	r2, [r7, #10]
 80067f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10e      	bne.n	8006860 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006850:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc fb34 	bl	8002ec8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	b292      	uxth	r2, r2
 800687c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10e      	bne.n	80068be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fc fb27 	bl	8002f0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d13a      	bne.n	8006958 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d109      	bne.n	8006900 <I2S_IRQHandler+0x3a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d102      	bne.n	8006900 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffb4 	bl	8006868 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d126      	bne.n	8006958 <I2S_IRQHandler+0x92>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b20      	cmp	r3, #32
 8006916:	d11f      	bne.n	8006958 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006926:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f043 0202 	orr.w	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fc fac2 	bl	8002edc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b03      	cmp	r3, #3
 8006962:	d136      	bne.n	80069d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d109      	bne.n	8006982 <I2S_IRQHandler+0xbc>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	d102      	bne.n	8006982 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ff45 	bl	800680c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d122      	bne.n	80069d2 <I2S_IRQHandler+0x10c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d11b      	bne.n	80069d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	f043 0204 	orr.w	r2, r3, #4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fc fa85 	bl	8002edc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069d2:	bf00      	nop
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4aa2      	ldr	r2, [pc, #648]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80069f6:	4ba2      	ldr	r3, [pc, #648]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069f8:	e001      	b.n	80069fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80069fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a9b      	ldr	r2, [pc, #620]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006a14:	4b9a      	ldr	r3, [pc, #616]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a16:	e001      	b.n	8006a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a28:	d004      	beq.n	8006a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 8099 	bne.w	8006b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d107      	bne.n	8006a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f925 	bl	8006c98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d107      	bne.n	8006a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9c8 	bl	8006df8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d13a      	bne.n	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d035      	beq.n	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a7e      	ldr	r2, [pc, #504]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d101      	bne.n	8006a8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006a86:	4b7e      	ldr	r3, [pc, #504]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a88:	e001      	b.n	8006a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4979      	ldr	r1, [pc, #484]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a96:	428b      	cmp	r3, r1
 8006a98:	d101      	bne.n	8006a9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006a9a:	4b79      	ldr	r3, [pc, #484]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a9c:	e001      	b.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006aa6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ab6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	f043 0202 	orr.w	r2, r3, #2
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fc f9fa 	bl	8002edc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	f040 80be 	bne.w	8006c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80b8 	beq.w	8006c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a59      	ldr	r2, [pc, #356]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006b1a:	4b59      	ldr	r3, [pc, #356]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b1c:	e001      	b.n	8006b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4954      	ldr	r1, [pc, #336]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b2a:	428b      	cmp	r3, r1
 8006b2c:	d101      	bne.n	8006b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006b2e:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b30:	e001      	b.n	8006b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	f043 0204 	orr.w	r2, r3, #4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc f9bc 	bl	8002edc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b64:	e084      	b.n	8006c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d107      	bne.n	8006b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8be 	bl	8006cfc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8fd 	bl	8006d94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d12f      	bne.n	8006c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02a      	beq.n	8006c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bbc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2e      	ldr	r2, [pc, #184]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d101      	bne.n	8006bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006bc8:	4b2d      	ldr	r3, [pc, #180]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bca:	e001      	b.n	8006bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4929      	ldr	r1, [pc, #164]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	d101      	bne.n	8006be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006bdc:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bde:	e001      	b.n	8006be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	f043 0202 	orr.w	r2, r3, #2
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fc f96c 	bl	8002edc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d131      	bne.n	8006c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02c      	beq.n	8006c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c24:	e001      	b.n	8006c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4912      	ldr	r1, [pc, #72]	; (8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c32:	428b      	cmp	r3, r1
 8006c34:	d101      	bne.n	8006c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c38:	e001      	b.n	8006c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c52:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c60:	f043 0204 	orr.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fc f937 	bl	8002edc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c6e:	e000      	b.n	8006c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c70:	bf00      	nop
}
 8006c72:	bf00      	nop
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40003800 	.word	0x40003800
 8006c80:	40003400 	.word	0x40003400

08006c84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	1c99      	adds	r1, r3, #2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6251      	str	r1, [r2, #36]	; 0x24
 8006caa:	881a      	ldrh	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d113      	bne.n	8006cf2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d106      	bne.n	8006cf2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ffc9 	bl	8006c84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	1c99      	adds	r1, r3, #2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6251      	str	r1, [r2, #36]	; 0x24
 8006d0e:	8819      	ldrh	r1, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <I2SEx_TxISR_I2SExt+0x90>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <I2SEx_TxISR_I2SExt+0x22>
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <I2SEx_TxISR_I2SExt+0x94>)
 8006d1c:	e001      	b.n	8006d22 <I2SEx_TxISR_I2SExt+0x26>
 8006d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d22:	460a      	mov	r2, r1
 8006d24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d121      	bne.n	8006d82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <I2SEx_TxISR_I2SExt+0x90>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <I2SEx_TxISR_I2SExt+0x50>
 8006d48:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <I2SEx_TxISR_I2SExt+0x94>)
 8006d4a:	e001      	b.n	8006d50 <I2SEx_TxISR_I2SExt+0x54>
 8006d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	490d      	ldr	r1, [pc, #52]	; (8006d8c <I2SEx_TxISR_I2SExt+0x90>)
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	d101      	bne.n	8006d60 <I2SEx_TxISR_I2SExt+0x64>
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <I2SEx_TxISR_I2SExt+0x94>)
 8006d5e:	e001      	b.n	8006d64 <I2SEx_TxISR_I2SExt+0x68>
 8006d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff81 	bl	8006c84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40003800 	.word	0x40003800
 8006d90:	40003400 	.word	0x40003400

08006d94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68d8      	ldr	r0, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	1c99      	adds	r1, r3, #2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006dac:	b282      	uxth	r2, r0
 8006dae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d113      	bne.n	8006df0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006dd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff ff4a 	bl	8006c84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <I2SEx_RxISR_I2SExt+0x90>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <I2SEx_RxISR_I2SExt+0x16>
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <I2SEx_RxISR_I2SExt+0x94>)
 8006e0c:	e001      	b.n	8006e12 <I2SEx_RxISR_I2SExt+0x1a>
 8006e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e12:	68d8      	ldr	r0, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	1c99      	adds	r1, r3, #2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006e1e:	b282      	uxth	r2, r0
 8006e20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d121      	bne.n	8006e7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <I2SEx_RxISR_I2SExt+0x90>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d101      	bne.n	8006e48 <I2SEx_RxISR_I2SExt+0x50>
 8006e44:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <I2SEx_RxISR_I2SExt+0x94>)
 8006e46:	e001      	b.n	8006e4c <I2SEx_RxISR_I2SExt+0x54>
 8006e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	490d      	ldr	r1, [pc, #52]	; (8006e88 <I2SEx_RxISR_I2SExt+0x90>)
 8006e54:	428b      	cmp	r3, r1
 8006e56:	d101      	bne.n	8006e5c <I2SEx_RxISR_I2SExt+0x64>
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <I2SEx_RxISR_I2SExt+0x94>)
 8006e5a:	e001      	b.n	8006e60 <I2SEx_RxISR_I2SExt+0x68>
 8006e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ff03 	bl	8006c84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40003800 	.word	0x40003800
 8006e8c:	40003400 	.word	0x40003400

08006e90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e98:	f7fc fcc8 	bl	800382c <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e069      	b.n	8006f7c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa fe5f 	bl	8001b80 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ec2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f85e 	bl	8006f88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	021a      	lsls	r2, r3, #8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2120      	movs	r1, #32
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f856 	bl	8006fa4 <QSPI_WaitFlagStateUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d137      	bne.n	8006f72 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f0c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6852      	ldr	r2, [r2, #4]
 8006f14:	0611      	lsls	r1, r2, #24
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68d2      	ldr	r2, [r2, #12]
 8006f1a:	4311      	orrs	r1, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	69d2      	ldr	r2, [r2, #28]
 8006f20:	4311      	orrs	r1, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6a12      	ldr	r2, [r2, #32]
 8006f26:	4311      	orrs	r1, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <HAL_QSPI_Init+0xf4>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6912      	ldr	r2, [r2, #16]
 8006f3e:	0411      	lsls	r1, r2, #16
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6952      	ldr	r2, [r2, #20]
 8006f44:	4311      	orrs	r1, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6992      	ldr	r2, [r2, #24]
 8006f4a:	4311      	orrs	r1, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	ffe0f8fe 	.word	0xffe0f8fe

08006f88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fb4:	e01a      	b.n	8006fec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d016      	beq.n	8006fec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbe:	f7fc fc35 	bl	800382c <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e00e      	b.n	800700a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1d6      	bne.n	8006fb6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0cc      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007028:	4b68      	ldr	r3, [pc, #416]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90c      	bls.n	8007050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b65      	ldr	r3, [pc, #404]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b63      	ldr	r3, [pc, #396]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0b8      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d020      	beq.n	800709e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007068:	4b59      	ldr	r3, [pc, #356]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a58      	ldr	r2, [pc, #352]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007080:	4b53      	ldr	r3, [pc, #332]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4a52      	ldr	r2, [pc, #328]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800708a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708c:	4b50      	ldr	r3, [pc, #320]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	494d      	ldr	r1, [pc, #308]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	4313      	orrs	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d044      	beq.n	8007134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d119      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e07f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d003      	beq.n	80070d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d107      	bne.n	80070e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d2:	4b3f      	ldr	r3, [pc, #252]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e06f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e2:	4b3b      	ldr	r3, [pc, #236]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e067      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0203 	bic.w	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4934      	ldr	r1, [pc, #208]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	4313      	orrs	r3, r2
 8007102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007104:	f7fc fb92 	bl	800382c <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	e00a      	b.n	8007122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710c:	f7fc fb8e 	bl	800382c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e04f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	4b2b      	ldr	r3, [pc, #172]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 020c 	and.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d1eb      	bne.n	800710c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007134:	4b25      	ldr	r3, [pc, #148]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d20c      	bcs.n	800715c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007142:	4b22      	ldr	r3, [pc, #136]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e032      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007168:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4916      	ldr	r1, [pc, #88]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	490e      	ldr	r1, [pc, #56]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800719a:	f000 f821 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 800719e:	4601      	mov	r1, r0
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <HAL_RCC_ClockConfig+0x1c0>)
 80071ac:	5cd3      	ldrb	r3, [r2, r3]
 80071ae:	fa21 f303 	lsr.w	r3, r1, r3
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <HAL_RCC_ClockConfig+0x1c4>)
 80071b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x1c8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fa ff0a 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40023c00 	.word	0x40023c00
 80071d0:	40023800 	.word	0x40023800
 80071d4:	08010cd0 	.word	0x08010cd0
 80071d8:	20000020 	.word	0x20000020
 80071dc:	20000074 	.word	0x20000074

080071e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	2300      	movs	r3, #0
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f6:	4b50      	ldr	r3, [pc, #320]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d007      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x32>
 8007202:	2b08      	cmp	r3, #8
 8007204:	d008      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x38>
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 808d 	bne.w	8007326 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b4b      	ldr	r3, [pc, #300]	; (800733c <HAL_RCC_GetSysClockFreq+0x15c>)
 800720e:	60bb      	str	r3, [r7, #8]
       break;
 8007210:	e08c      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007212:	4b4b      	ldr	r3, [pc, #300]	; (8007340 <HAL_RCC_GetSysClockFreq+0x160>)
 8007214:	60bb      	str	r3, [r7, #8]
      break;
 8007216:	e089      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007218:	4b47      	ldr	r3, [pc, #284]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007222:	4b45      	ldr	r3, [pc, #276]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d023      	beq.n	8007276 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722e:	4b42      	ldr	r3, [pc, #264]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	f04f 0400 	mov.w	r4, #0
 8007238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	ea03 0501 	and.w	r5, r3, r1
 8007244:	ea04 0602 	and.w	r6, r4, r2
 8007248:	4a3d      	ldr	r2, [pc, #244]	; (8007340 <HAL_RCC_GetSysClockFreq+0x160>)
 800724a:	fb02 f106 	mul.w	r1, r2, r6
 800724e:	2200      	movs	r2, #0
 8007250:	fb02 f205 	mul.w	r2, r2, r5
 8007254:	440a      	add	r2, r1
 8007256:	493a      	ldr	r1, [pc, #232]	; (8007340 <HAL_RCC_GetSysClockFreq+0x160>)
 8007258:	fba5 0101 	umull	r0, r1, r5, r1
 800725c:	1853      	adds	r3, r2, r1
 800725e:	4619      	mov	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f04f 0400 	mov.w	r4, #0
 8007266:	461a      	mov	r2, r3
 8007268:	4623      	mov	r3, r4
 800726a:	f7f8 ffe1 	bl	8000230 <__aeabi_uldivmod>
 800726e:	4603      	mov	r3, r0
 8007270:	460c      	mov	r4, r1
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e049      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007276:	4b30      	ldr	r3, [pc, #192]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	099b      	lsrs	r3, r3, #6
 800727c:	f04f 0400 	mov.w	r4, #0
 8007280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	ea03 0501 	and.w	r5, r3, r1
 800728c:	ea04 0602 	and.w	r6, r4, r2
 8007290:	4629      	mov	r1, r5
 8007292:	4632      	mov	r2, r6
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	f04f 0400 	mov.w	r4, #0
 800729c:	0154      	lsls	r4, r2, #5
 800729e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072a2:	014b      	lsls	r3, r1, #5
 80072a4:	4619      	mov	r1, r3
 80072a6:	4622      	mov	r2, r4
 80072a8:	1b49      	subs	r1, r1, r5
 80072aa:	eb62 0206 	sbc.w	r2, r2, r6
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	f04f 0400 	mov.w	r4, #0
 80072b6:	0194      	lsls	r4, r2, #6
 80072b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072bc:	018b      	lsls	r3, r1, #6
 80072be:	1a5b      	subs	r3, r3, r1
 80072c0:	eb64 0402 	sbc.w	r4, r4, r2
 80072c4:	f04f 0100 	mov.w	r1, #0
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	00e2      	lsls	r2, r4, #3
 80072ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072d2:	00d9      	lsls	r1, r3, #3
 80072d4:	460b      	mov	r3, r1
 80072d6:	4614      	mov	r4, r2
 80072d8:	195b      	adds	r3, r3, r5
 80072da:	eb44 0406 	adc.w	r4, r4, r6
 80072de:	f04f 0100 	mov.w	r1, #0
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	02a2      	lsls	r2, r4, #10
 80072e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80072ec:	0299      	lsls	r1, r3, #10
 80072ee:	460b      	mov	r3, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	4621      	mov	r1, r4
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f04f 0400 	mov.w	r4, #0
 80072fc:	461a      	mov	r2, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	f7f8 ff96 	bl	8000230 <__aeabi_uldivmod>
 8007304:	4603      	mov	r3, r0
 8007306:	460c      	mov	r4, r1
 8007308:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800730a:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <HAL_RCC_GetSysClockFreq+0x158>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	3301      	adds	r3, #1
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	60bb      	str	r3, [r7, #8]
      break;
 8007324:	e002      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007328:	60bb      	str	r3, [r7, #8]
      break;
 800732a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800732c:	68bb      	ldr	r3, [r7, #8]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800
 800733c:	00f42400 	.word	0x00f42400
 8007340:	017d7840 	.word	0x017d7840

08007344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007348:	4b03      	ldr	r3, [pc, #12]	; (8007358 <HAL_RCC_GetHCLKFreq+0x14>)
 800734a:	681b      	ldr	r3, [r3, #0]
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000020 	.word	0x20000020

0800735c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007360:	f7ff fff0 	bl	8007344 <HAL_RCC_GetHCLKFreq>
 8007364:	4601      	mov	r1, r0
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0a9b      	lsrs	r3, r3, #10
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4a03      	ldr	r2, [pc, #12]	; (8007380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007372:	5cd3      	ldrb	r3, [r2, r3]
 8007374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40023800 	.word	0x40023800
 8007380:	08010ce0 	.word	0x08010ce0

08007384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007388:	f7ff ffdc 	bl	8007344 <HAL_RCC_GetHCLKFreq>
 800738c:	4601      	mov	r1, r0
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	0b5b      	lsrs	r3, r3, #13
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4a03      	ldr	r2, [pc, #12]	; (80073a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800739a:	5cd3      	ldrb	r3, [r2, r3]
 800739c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40023800 	.word	0x40023800
 80073a8:	08010ce0 	.word	0x08010ce0

080073ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	220f      	movs	r2, #15
 80073ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073bc:	4b12      	ldr	r3, [pc, #72]	; (8007408 <HAL_RCC_GetClockConfig+0x5c>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 0203 	and.w	r2, r3, #3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <HAL_RCC_GetClockConfig+0x5c>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <HAL_RCC_GetClockConfig+0x5c>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <HAL_RCC_GetClockConfig+0x5c>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <HAL_RCC_GetClockConfig+0x60>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40023800 	.word	0x40023800
 800740c:	40023c00 	.word	0x40023c00

08007410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007434:	4b7a      	ldr	r3, [pc, #488]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800743a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	4977      	ldr	r1, [pc, #476]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007462:	4b6f      	ldr	r3, [pc, #444]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007468:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	496b      	ldr	r1, [pc, #428]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007480:	2301      	movs	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d022      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007490:	4b63      	ldr	r3, [pc, #396]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749e:	4960      	ldr	r1, [pc, #384]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ba:	d10c      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80074bc:	4b58      	ldr	r3, [pc, #352]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	4954      	ldr	r1, [pc, #336]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d022      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80074e2:	4b4f      	ldr	r3, [pc, #316]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f0:	494b      	ldr	r1, [pc, #300]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007500:	2301      	movs	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800750c:	d10c      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800750e:	4b44      	ldr	r3, [pc, #272]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	3b01      	subs	r3, #1
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	493f      	ldr	r1, [pc, #252]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 808a 	beq.w	800764a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	4b39      	ldr	r3, [pc, #228]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	4a38      	ldr	r2, [pc, #224]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007544:	6413      	str	r3, [r2, #64]	; 0x40
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007552:	4b34      	ldr	r3, [pc, #208]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a33      	ldr	r2, [pc, #204]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800755e:	f7fc f965 	bl	800382c <HAL_GetTick>
 8007562:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007564:	e008      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007566:	f7fc f961 	bl	800382c <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e1d1      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007578:	4b2a      	ldr	r3, [pc, #168]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007584:	4b26      	ldr	r3, [pc, #152]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02f      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d028      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075a2:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075aa:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075ac:	4b1e      	ldr	r3, [pc, #120]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075b2:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075b8:	4a19      	ldr	r2, [pc, #100]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075be:	4b18      	ldr	r3, [pc, #96]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d114      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075ca:	f7fc f92f 	bl	800382c <HAL_GetTick>
 80075ce:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d0:	e00a      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075d2:	f7fc f92b 	bl	800382c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e199      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0ee      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007600:	d114      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007602:	4b07      	ldr	r3, [pc, #28]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007616:	4902      	ldr	r1, [pc, #8]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007618:	4313      	orrs	r3, r2
 800761a:	608b      	str	r3, [r1, #8]
 800761c:	e00c      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000
 8007628:	42470e40 	.word	0x42470e40
 800762c:	4b89      	ldr	r3, [pc, #548]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4a88      	ldr	r2, [pc, #544]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007636:	6093      	str	r3, [r2, #8]
 8007638:	4b86      	ldr	r3, [pc, #536]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800763a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007644:	4983      	ldr	r1, [pc, #524]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007646:	4313      	orrs	r3, r2
 8007648:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800765c:	4b7e      	ldr	r3, [pc, #504]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800765e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800766c:	4b79      	ldr	r3, [pc, #484]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800766e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	4976      	ldr	r1, [pc, #472]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d011      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800768e:	4b71      	ldr	r3, [pc, #452]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007694:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769c:	496d      	ldr	r1, [pc, #436]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ac:	d101      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80076ae:	2301      	movs	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80076be:	4b65      	ldr	r3, [pc, #404]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	4961      	ldr	r1, [pc, #388]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d004      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	f040 80c6 	bne.w	8007870 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076e4:	4b5d      	ldr	r3, [pc, #372]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ea:	f7fc f89f 	bl	800382c <HAL_GetTick>
 80076ee:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076f0:	e008      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076f2:	f7fc f89b 	bl	800382c <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e10b      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007704:	4b53      	ldr	r3, [pc, #332]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f0      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007710:	4a53      	ldr	r2, [pc, #332]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d019      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d00e      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800775e:	2b00      	cmp	r3, #0
 8007760:	d019      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d115      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007772:	d110      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	019b      	lsls	r3, r3, #6
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	061b      	lsls	r3, r3, #24
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	071b      	lsls	r3, r3, #28
 800778e:	4931      	ldr	r1, [pc, #196]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d026      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d122      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077be:	4b25      	ldr	r3, [pc, #148]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c4:	0e1b      	lsrs	r3, r3, #24
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	019b      	lsls	r3, r3, #6
 80077d6:	431a      	orrs	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	061b      	lsls	r3, r3, #24
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	071b      	lsls	r3, r3, #28
 80077e4:	491b      	ldr	r1, [pc, #108]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80077ec:	4b19      	ldr	r3, [pc, #100]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80077ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f2:	f023 021f 	bic.w	r2, r3, #31
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4915      	ldr	r1, [pc, #84]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	019b      	lsls	r3, r3, #6
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	071b      	lsls	r3, r3, #28
 800782a:	490a      	ldr	r1, [pc, #40]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007838:	f7fb fff8 	bl	800382c <HAL_GetTick>
 800783c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800783e:	e011      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007840:	f7fb fff4 	bl	800382c <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d90a      	bls.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e064      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007852:	bf00      	nop
 8007854:	40023800 	.word	0x40023800
 8007858:	424711e0 	.word	0x424711e0
 800785c:	42470068 	.word	0x42470068
 8007860:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007864:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0e7      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800787c:	4b29      	ldr	r3, [pc, #164]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	4926      	ldr	r1, [pc, #152]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800789e:	4b21      	ldr	r3, [pc, #132]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	491d      	ldr	r1, [pc, #116]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80078c0:	4b18      	ldr	r3, [pc, #96]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	4915      	ldr	r1, [pc, #84]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80078e2:	4b10      	ldr	r3, [pc, #64]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	490c      	ldr	r1, [pc, #48]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007912:	4904      	ldr	r1, [pc, #16]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800

08007928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d003      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8007946:	2b02      	cmp	r3, #2
 8007948:	f000 8098 	beq.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800794c:	e12d      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800794e:	4b9a      	ldr	r3, [pc, #616]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007954:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007958:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007960:	d00c      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007966:	d802      	bhi.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800796c:	e082      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800796e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007972:	d047      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007974:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007978:	d06f      	beq.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800797a:	e07b      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800797c:	4b8f      	ldr	r3, [pc, #572]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800797e:	617b      	str	r3, [r7, #20]
          break;
 8007980:	e07b      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007982:	4b8d      	ldr	r3, [pc, #564]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007990:	d109      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007992:	4b89      	ldr	r3, [pc, #548]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800799c:	4a87      	ldr	r2, [pc, #540]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800799e:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	e019      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80079a6:	4b84      	ldr	r3, [pc, #528]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b2:	d109      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80079b4:	4b80      	ldr	r3, [pc, #512]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80079b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079be:	4a80      	ldr	r2, [pc, #512]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	e008      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80079c8:	4b7b      	ldr	r3, [pc, #492]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80079ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d2:	4a7c      	ldr	r2, [pc, #496]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80079da:	4b77      	ldr	r3, [pc, #476]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80079dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e0:	099b      	lsrs	r3, r3, #6
 80079e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	fb02 f303 	mul.w	r3, r2, r3
 80079ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80079ee:	4b72      	ldr	r3, [pc, #456]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f4:	0f1b      	lsrs	r3, r3, #28
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]
          break;
 8007a02:	e03a      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a04:	4b6c      	ldr	r3, [pc, #432]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a10:	d108      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a12:	4b69      	ldr	r3, [pc, #420]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1a:	4a69      	ldr	r2, [pc, #420]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e007      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a24:	4b64      	ldr	r3, [pc, #400]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a2c:	4a65      	ldr	r2, [pc, #404]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007a34:	4b60      	ldr	r3, [pc, #384]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	099b      	lsrs	r3, r3, #6
 8007a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007a46:	4b5c      	ldr	r3, [pc, #368]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	617b      	str	r3, [r7, #20]
          break;
 8007a58:	e00f      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a5a:	4b57      	ldr	r3, [pc, #348]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007a68:	4b55      	ldr	r3, [pc, #340]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a6a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007a6c:	e005      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007a6e:	4b55      	ldr	r3, [pc, #340]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a70:	617b      	str	r3, [r7, #20]
          break;
 8007a72:	e002      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]
          break;
 8007a78:	bf00      	nop
        }
      }
      break;
 8007a7a:	e096      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a82:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007a86:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a8e:	d00c      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a94:	d802      	bhi.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007a9a:	e082      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa0:	d047      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007aa2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007aa6:	d06f      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007aa8:	e07b      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007aaa:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007aac:	617b      	str	r3, [r7, #20]
          break;
 8007aae:	e07b      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007ab0:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007abe:	d109      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007ac0:	4b3d      	ldr	r3, [pc, #244]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aca:	4a3c      	ldr	r2, [pc, #240]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	e019      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ad4:	4b38      	ldr	r3, [pc, #224]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae0:	d109      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007ae2:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aec:	4a34      	ldr	r2, [pc, #208]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007af6:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b00:	4a30      	ldr	r2, [pc, #192]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0e:	099b      	lsrs	r3, r3, #6
 8007b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007b1c:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	0f1b      	lsrs	r3, r3, #28
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	617b      	str	r3, [r7, #20]
          break;
 8007b30:	e03a      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b3e:	d108      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b48:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	e007      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b52:	4b19      	ldr	r3, [pc, #100]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b5a:	4a1a      	ldr	r2, [pc, #104]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	fb02 f303 	mul.w	r3, r2, r3
 8007b72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007b74:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	0f1b      	lsrs	r3, r3, #28
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]
          break;
 8007b86:	e00f      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b94:	d102      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b98:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007b9a:	e005      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b9e:	617b      	str	r3, [r7, #20]
          break;
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
          break;
 8007ba6:	bf00      	nop
        }
      }
      break;
 8007ba8:	bf00      	nop
    }
  }
  return frequency;
 8007baa:	697b      	ldr	r3, [r7, #20]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	00bb8000 	.word	0x00bb8000
 8007bc0:	017d7840 	.word	0x017d7840
 8007bc4:	00f42400 	.word	0x00f42400

08007bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d075      	beq.n	8007ccc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007be0:	4ba2      	ldr	r3, [pc, #648]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 030c 	and.w	r3, r3, #12
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d00c      	beq.n	8007c06 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bec:	4b9f      	ldr	r3, [pc, #636]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d112      	bne.n	8007c1e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bf8:	4b9c      	ldr	r3, [pc, #624]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c04:	d10b      	bne.n	8007c1e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c06:	4b99      	ldr	r3, [pc, #612]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d05b      	beq.n	8007cca <HAL_RCC_OscConfig+0x102>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d157      	bne.n	8007cca <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e20b      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c26:	d106      	bne.n	8007c36 <HAL_RCC_OscConfig+0x6e>
 8007c28:	4b90      	ldr	r3, [pc, #576]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a8f      	ldr	r2, [pc, #572]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e01d      	b.n	8007c72 <HAL_RCC_OscConfig+0xaa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c3e:	d10c      	bne.n	8007c5a <HAL_RCC_OscConfig+0x92>
 8007c40:	4b8a      	ldr	r3, [pc, #552]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a89      	ldr	r2, [pc, #548]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	4b87      	ldr	r3, [pc, #540]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a86      	ldr	r2, [pc, #536]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e00b      	b.n	8007c72 <HAL_RCC_OscConfig+0xaa>
 8007c5a:	4b84      	ldr	r3, [pc, #528]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a83      	ldr	r2, [pc, #524]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	4b81      	ldr	r3, [pc, #516]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a80      	ldr	r2, [pc, #512]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d013      	beq.n	8007ca2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7a:	f7fb fdd7 	bl	800382c <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c82:	f7fb fdd3 	bl	800382c <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b64      	cmp	r3, #100	; 0x64
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e1d0      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c94:	4b75      	ldr	r3, [pc, #468]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCC_OscConfig+0xba>
 8007ca0:	e014      	b.n	8007ccc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca2:	f7fb fdc3 	bl	800382c <HAL_GetTick>
 8007ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007caa:	f7fb fdbf 	bl	800382c <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e1bc      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cbc:	4b6b      	ldr	r3, [pc, #428]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f0      	bne.n	8007caa <HAL_RCC_OscConfig+0xe2>
 8007cc8:	e000      	b.n	8007ccc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d063      	beq.n	8007da0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cd8:	4b64      	ldr	r3, [pc, #400]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f003 030c 	and.w	r3, r3, #12
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ce4:	4b61      	ldr	r3, [pc, #388]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d11c      	bne.n	8007d2a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cf0:	4b5e      	ldr	r3, [pc, #376]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d116      	bne.n	8007d2a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cfc:	4b5b      	ldr	r3, [pc, #364]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_RCC_OscConfig+0x14c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d001      	beq.n	8007d14 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e190      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d14:	4b55      	ldr	r3, [pc, #340]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4952      	ldr	r1, [pc, #328]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d28:	e03a      	b.n	8007da0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d020      	beq.n	8007d74 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d32:	4b4f      	ldr	r3, [pc, #316]	; (8007e70 <HAL_RCC_OscConfig+0x2a8>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d38:	f7fb fd78 	bl	800382c <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d40:	f7fb fd74 	bl	800382c <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e171      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d52:	4b46      	ldr	r3, [pc, #280]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0f0      	beq.n	8007d40 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d5e:	4b43      	ldr	r3, [pc, #268]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	493f      	ldr	r1, [pc, #252]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]
 8007d72:	e015      	b.n	8007da0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d74:	4b3e      	ldr	r3, [pc, #248]	; (8007e70 <HAL_RCC_OscConfig+0x2a8>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7a:	f7fb fd57 	bl	800382c <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d82:	f7fb fd53 	bl	800382c <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e150      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d94:	4b35      	ldr	r3, [pc, #212]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d030      	beq.n	8007e0e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d016      	beq.n	8007de2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db4:	4b2f      	ldr	r3, [pc, #188]	; (8007e74 <HAL_RCC_OscConfig+0x2ac>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dba:	f7fb fd37 	bl	800382c <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc2:	f7fb fd33 	bl	800382c <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e130      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dd4:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x1fa>
 8007de0:	e015      	b.n	8007e0e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de2:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de8:	f7fb fd20 	bl	800382c <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df0:	f7fb fd1c 	bl	800382c <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e119      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e02:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 809f 	beq.w	8007f5a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10f      	bne.n	8007e4c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <HAL_RCC_OscConfig+0x2a4>)
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <HAL_RCC_OscConfig+0x2b0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d120      	bne.n	8007e9a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <HAL_RCC_OscConfig+0x2b0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a06      	ldr	r2, [pc, #24]	; (8007e78 <HAL_RCC_OscConfig+0x2b0>)
 8007e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e64:	f7fb fce2 	bl	800382c <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e6a:	e010      	b.n	8007e8e <HAL_RCC_OscConfig+0x2c6>
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	42470000 	.word	0x42470000
 8007e74:	42470e80 	.word	0x42470e80
 8007e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e7c:	f7fb fcd6 	bl	800382c <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e0d3      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e8e:	4b6c      	ldr	r3, [pc, #432]	; (8008040 <HAL_RCC_OscConfig+0x478>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x2e8>
 8007ea2:	4b68      	ldr	r3, [pc, #416]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	4a67      	ldr	r2, [pc, #412]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ea8:	f043 0301 	orr.w	r3, r3, #1
 8007eac:	6713      	str	r3, [r2, #112]	; 0x70
 8007eae:	e01c      	b.n	8007eea <HAL_RCC_OscConfig+0x322>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b05      	cmp	r3, #5
 8007eb6:	d10c      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x30a>
 8007eb8:	4b62      	ldr	r3, [pc, #392]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebc:	4a61      	ldr	r2, [pc, #388]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ebe:	f043 0304 	orr.w	r3, r3, #4
 8007ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec4:	4b5f      	ldr	r3, [pc, #380]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec8:	4a5e      	ldr	r2, [pc, #376]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed0:	e00b      	b.n	8007eea <HAL_RCC_OscConfig+0x322>
 8007ed2:	4b5c      	ldr	r3, [pc, #368]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	4a5b      	ldr	r2, [pc, #364]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ede:	4b59      	ldr	r3, [pc, #356]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee2:	4a58      	ldr	r2, [pc, #352]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ee4:	f023 0304 	bic.w	r3, r3, #4
 8007ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d015      	beq.n	8007f1e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef2:	f7fb fc9b 	bl	800382c <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef8:	e00a      	b.n	8007f10 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007efa:	f7fb fc97 	bl	800382c <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e092      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f10:	4b4c      	ldr	r3, [pc, #304]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0ee      	beq.n	8007efa <HAL_RCC_OscConfig+0x332>
 8007f1c:	e014      	b.n	8007f48 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f1e:	f7fb fc85 	bl	800382c <HAL_GetTick>
 8007f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f24:	e00a      	b.n	8007f3c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f26:	f7fb fc81 	bl	800382c <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e07c      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f3c:	4b41      	ldr	r3, [pc, #260]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1ee      	bne.n	8007f26 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d105      	bne.n	8007f5a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	4a3c      	ldr	r2, [pc, #240]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d068      	beq.n	8008034 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f62:	4b38      	ldr	r3, [pc, #224]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d060      	beq.n	8008030 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d145      	bne.n	8008002 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f76:	4b34      	ldr	r3, [pc, #208]	; (8008048 <HAL_RCC_OscConfig+0x480>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fb fc56 	bl	800382c <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f84:	f7fb fc52 	bl	800382c <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e04f      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f96:	4b2b      	ldr	r3, [pc, #172]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69da      	ldr	r2, [r3, #28]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	019b      	lsls	r3, r3, #6
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	085b      	lsrs	r3, r3, #1
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	071b      	lsls	r3, r3, #28
 8007fce:	491d      	ldr	r1, [pc, #116]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <HAL_RCC_OscConfig+0x480>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fda:	f7fb fc27 	bl	800382c <HAL_GetTick>
 8007fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fe2:	f7fb fc23 	bl	800382c <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d901      	bls.n	8007ff4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e020      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff4:	4b13      	ldr	r3, [pc, #76]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0f0      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x41a>
 8008000:	e018      	b.n	8008034 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <HAL_RCC_OscConfig+0x480>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008008:	f7fb fc10 	bl	800382c <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008010:	f7fb fc0c 	bl	800382c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e009      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008022:	4b08      	ldr	r3, [pc, #32]	; (8008044 <HAL_RCC_OscConfig+0x47c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f0      	bne.n	8008010 <HAL_RCC_OscConfig+0x448>
 800802e:	e001      	b.n	8008034 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40007000 	.word	0x40007000
 8008044:	40023800 	.word	0x40023800
 8008048:	42470060 	.word	0x42470060

0800804c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e022      	b.n	80080a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7f9 fe4f 	bl	8001d14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2203      	movs	r2, #3
 800807a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f814 	bl	80080ac <HAL_SD_InitCard>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e00a      	b.n	80080a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080ac:	b5b0      	push	{r4, r5, r7, lr}
 80080ae:	b08e      	sub	sp, #56	; 0x38
 80080b0:	af04      	add	r7, sp, #16
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80080c8:	2376      	movs	r3, #118	; 0x76
 80080ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681d      	ldr	r5, [r3, #0]
 80080d0:	466c      	mov	r4, sp
 80080d2:	f107 0314 	add.w	r3, r7, #20
 80080d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080de:	f107 0308 	add.w	r3, r7, #8
 80080e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080e4:	4628      	mov	r0, r5
 80080e6:	f001 fc89 	bl	80099fc <SDIO_Init>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e031      	b.n	8008160 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80080fc:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <HAL_SD_InitCard+0xbc>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fcb0 	bl	8009a6c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800810c:	4b16      	ldr	r3, [pc, #88]	; (8008168 <HAL_SD_InitCard+0xbc>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb18 	bl	8008748 <SD_PowerON>
 8008118:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e013      	b.n	8008160 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa37 	bl	80085ac <SD_InitCard>
 800813e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	; 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bdb0      	pop	{r4, r5, r7, pc}
 8008168:	422580a0 	.word	0x422580a0

0800816c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817a:	0f9b      	lsrs	r3, r3, #30
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008186:	0e9b      	lsrs	r3, r3, #26
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081cc:	0d1b      	lsrs	r3, r3, #20
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ea:	0bdb      	lsrs	r3, r3, #15
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081fc:	0b9b      	lsrs	r3, r3, #14
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800820e:	0b5b      	lsrs	r3, r3, #13
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008220:	0b1b      	lsrs	r3, r3, #12
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2200      	movs	r2, #0
 8008232:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008238:	2b00      	cmp	r3, #0
 800823a:	d163      	bne.n	8008304 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008240:	009a      	lsls	r2, r3, #2
 8008242:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008246:	4013      	ands	r3, r2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800824c:	0f92      	lsrs	r2, r2, #30
 800824e:	431a      	orrs	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008258:	0edb      	lsrs	r3, r3, #27
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	b2da      	uxtb	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	0e1b      	lsrs	r3, r3, #24
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	0d5b      	lsrs	r3, r3, #21
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f003 0307 	and.w	r3, r3, #7
 8008284:	b2da      	uxtb	r2, r3
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828e:	0c9b      	lsrs	r3, r3, #18
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	b2da      	uxtb	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a0:	0bdb      	lsrs	r3, r3, #15
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	7e1b      	ldrb	r3, [r3, #24]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	3302      	adds	r3, #2
 80082c4:	2201      	movs	r2, #1
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082ce:	fb02 f203 	mul.w	r2, r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	7a1b      	ldrb	r3, [r3, #8]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2201      	movs	r2, #1
 80082e2:	409a      	lsls	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80082f0:	0a52      	lsrs	r2, r2, #9
 80082f2:	fb02 f203 	mul.w	r2, r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	661a      	str	r2, [r3, #96]	; 0x60
 8008302:	e031      	b.n	8008368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008308:	2b01      	cmp	r3, #1
 800830a:	d11d      	bne.n	8008348 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008310:	041b      	lsls	r3, r3, #16
 8008312:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831a:	0c1b      	lsrs	r3, r3, #16
 800831c:	431a      	orrs	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	3301      	adds	r3, #1
 8008328:	029a      	lsls	r2, r3, #10
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800833c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	661a      	str	r2, [r3, #96]	; 0x60
 8008346:	e00f      	b.n	8008368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a58      	ldr	r2, [pc, #352]	; (80084b0 <HAL_SD_GetCardCSD+0x344>)
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e09d      	b.n	80084a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836c:	0b9b      	lsrs	r3, r3, #14
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	b2da      	uxtb	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837e:	09db      	lsrs	r3, r3, #7
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	b2da      	uxtb	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a0:	0fdb      	lsrs	r3, r3, #31
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ac:	0f5b      	lsrs	r3, r3, #29
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	0e9b      	lsrs	r3, r3, #26
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	0d9b      	lsrs	r3, r3, #22
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	0d5b      	lsrs	r3, r3, #21
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	0c1b      	lsrs	r3, r3, #16
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	0bdb      	lsrs	r3, r3, #15
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	0b9b      	lsrs	r3, r3, #14
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	0b5b      	lsrs	r3, r3, #13
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	0b1b      	lsrs	r3, r3, #12
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	0a9b      	lsrs	r3, r3, #10
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	004005ff 	.word	0x004005ff

080084b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b08e      	sub	sp, #56	; 0x38
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d02e      	beq.n	800852c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d4:	d106      	bne.n	80084e4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
 80084e2:	e029      	b.n	8008538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ea:	d10a      	bne.n	8008502 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9b9 	bl	8008864 <SD_WideBus_Enable>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	639a      	str	r2, [r3, #56]	; 0x38
 8008500:	e01a      	b.n	8008538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9f6 	bl	80088fa <SD_WideBus_Disable>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	431a      	orrs	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
 800851c:	e00c      	b.n	8008538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
 800852a:	e005      	b.n	8008538 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e024      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	466c      	mov	r4, sp
 800857c:	f107 0318 	add.w	r3, r7, #24
 8008580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800858e:	4628      	mov	r0, r5
 8008590:	f001 fa34 	bl	80099fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3728      	adds	r7, #40	; 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bdb0      	pop	{r4, r5, r7, pc}
 80085a6:	bf00      	nop
 80085a8:	004005ff 	.word	0x004005ff

080085ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085ac:	b5b0      	push	{r4, r5, r7, lr}
 80085ae:	b094      	sub	sp, #80	; 0x50
 80085b0:	af04      	add	r7, sp, #16
 80085b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085b4:	2301      	movs	r3, #1
 80085b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fa64 	bl	8009a8a <SDIO_GetPowerState>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d102      	bne.n	80085ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085cc:	e0b7      	b.n	800873e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d02f      	beq.n	8008636 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fbe3 	bl	8009da6 <SDMMC_CmdSendCID>
 80085e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <SD_InitCard+0x40>
    {
      return errorstate;
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	e0a8      	b.n	800873e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fa8e 	bl	8009b14 <SDIO_GetResponse>
 80085f8:	4602      	mov	r2, r0
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2104      	movs	r1, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f001 fa85 	bl	8009b14 <SDIO_GetResponse>
 800860a:	4602      	mov	r2, r0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2108      	movs	r1, #8
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fa7c 	bl	8009b14 <SDIO_GetResponse>
 800861c:	4602      	mov	r2, r0
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	210c      	movs	r1, #12
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fa73 	bl	8009b14 <SDIO_GetResponse>
 800862e:	4602      	mov	r2, r0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	2b03      	cmp	r3, #3
 800863c:	d00d      	beq.n	800865a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f107 020e 	add.w	r2, r7, #14
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fbe9 	bl	8009e20 <SDMMC_CmdSetRelAdd>
 800864e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <SD_InitCard+0xae>
    {
      return errorstate;
 8008656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008658:	e071      	b.n	800873e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	2b03      	cmp	r3, #3
 8008660:	d036      	beq.n	80086d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008662:	89fb      	ldrh	r3, [r7, #14]
 8008664:	461a      	mov	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f001 fbb3 	bl	8009de2 <SDMMC_CmdSendCSD>
 800867c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800867e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008686:	e05a      	b.n	800873e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fa40 	bl	8009b14 <SDIO_GetResponse>
 8008694:	4602      	mov	r2, r0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2104      	movs	r1, #4
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fa37 	bl	8009b14 <SDIO_GetResponse>
 80086a6:	4602      	mov	r2, r0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2108      	movs	r1, #8
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 fa2e 	bl	8009b14 <SDIO_GetResponse>
 80086b8:	4602      	mov	r2, r0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	210c      	movs	r1, #12
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 fa25 	bl	8009b14 <SDIO_GetResponse>
 80086ca:	4602      	mov	r2, r0
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2104      	movs	r1, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fa1c 	bl	8009b14 <SDIO_GetResponse>
 80086dc:	4603      	mov	r3, r0
 80086de:	0d1a      	lsrs	r2, r3, #20
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086e4:	f107 0310 	add.w	r3, r7, #16
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fd3e 	bl	800816c <HAL_SD_GetCardCSD>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086fa:	e020      	b.n	800873e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6819      	ldr	r1, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	f04f 0400 	mov.w	r4, #0
 800870a:	461a      	mov	r2, r3
 800870c:	4623      	mov	r3, r4
 800870e:	4608      	mov	r0, r1
 8008710:	f001 fa61 	bl	8009bd6 <SDMMC_CmdSelDesel>
 8008714:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <SD_InitCard+0x174>
  {
    return errorstate;
 800871c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871e:	e00e      	b.n	800873e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681d      	ldr	r5, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	466c      	mov	r4, sp
 8008728:	f103 0210 	add.w	r2, r3, #16
 800872c:	ca07      	ldmia	r2, {r0, r1, r2}
 800872e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008732:	3304      	adds	r3, #4
 8008734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008736:	4628      	mov	r0, r5
 8008738:	f001 f960 	bl	80099fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3740      	adds	r7, #64	; 0x40
 8008742:	46bd      	mov	sp, r7
 8008744:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008748 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fa5b 	bl	8009c1c <SDMMC_CmdGoIdleState>
 8008766:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <SD_PowerON+0x2a>
  {
    return errorstate;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	e072      	b.n	8008858 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fa6e 	bl	8009c58 <SDMMC_CmdOperCond>
 800877c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fa44 	bl	8009c1c <SDMMC_CmdGoIdleState>
 8008794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e05b      	b.n	8008858 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d137      	bne.n	800881e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fa6e 	bl	8009c96 <SDMMC_CmdAppCommand>
 80087ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d02d      	beq.n	800881e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087c6:	e047      	b.n	8008858 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fa61 	bl	8009c96 <SDMMC_CmdAppCommand>
 80087d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	e03b      	b.n	8008858 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	491e      	ldr	r1, [pc, #120]	; (8008860 <SD_PowerON+0x118>)
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 fa77 	bl	8009cda <SDMMC_CmdAppOperCommand>
 80087ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087f8:	e02e      	b.n	8008858 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f001 f987 	bl	8009b14 <SDIO_GetResponse>
 8008806:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	0fdb      	lsrs	r3, r3, #31
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <SD_PowerON+0xcc>
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <SD_PowerON+0xce>
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]

    count++;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3301      	adds	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008824:	4293      	cmp	r3, r2
 8008826:	d802      	bhi.n	800882e <SD_PowerON+0xe6>
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0cc      	beq.n	80087c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008834:	4293      	cmp	r3, r2
 8008836:	d902      	bls.n	800883e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800883c:	e00c      	b.n	8008858 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	645a      	str	r2, [r3, #68]	; 0x44
 800884e:	e002      	b.n	8008856 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	c1100000 	.word	0xc1100000

08008864 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800886c:	2300      	movs	r3, #0
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f001 f94a 	bl	8009b14 <SDIO_GetResponse>
 8008880:	4603      	mov	r3, r0
 8008882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800888a:	d102      	bne.n	8008892 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800888c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008890:	e02f      	b.n	80088f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008892:	f107 030c 	add.w	r3, r7, #12
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f879 	bl	8008990 <SD_FindSCR>
 800889e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	e023      	b.n	80088f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01c      	beq.n	80088ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	041b      	lsls	r3, r3, #16
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f001 f9e8 	bl	8009c96 <SDMMC_CmdAppCommand>
 80088c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	e00f      	b.n	80088f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2102      	movs	r1, #2
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 fa21 	bl	8009d20 <SDMMC_CmdBusWidth>
 80088de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	e003      	b.n	80088f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e001      	b.n	80088f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f001 f8ff 	bl	8009b14 <SDIO_GetResponse>
 8008916:	4603      	mov	r3, r0
 8008918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008920:	d102      	bne.n	8008928 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008926:	e02f      	b.n	8008988 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008928:	f107 030c 	add.w	r3, r7, #12
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f82e 	bl	8008990 <SD_FindSCR>
 8008934:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	e023      	b.n	8008988 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01c      	beq.n	8008984 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f001 f99d 	bl	8009c96 <SDMMC_CmdAppCommand>
 800895c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	e00f      	b.n	8008988 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f001 f9d6 	bl	8009d20 <SDMMC_CmdBusWidth>
 8008974:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	e003      	b.n	8008988 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008980:	2300      	movs	r3, #0
 8008982:	e001      	b.n	8008988 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008984:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b08f      	sub	sp, #60	; 0x3c
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800899a:	f7fa ff47 	bl	800382c <HAL_GetTick>
 800899e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80089a4:	2300      	movs	r3, #0
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2108      	movs	r1, #8
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f8eb 	bl	8009b92 <SDMMC_CmdBlockLength>
 80089bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	e0a9      	b.n	8008b1c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d0:	041b      	lsls	r3, r3, #16
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f001 f95e 	bl	8009c96 <SDMMC_CmdAppCommand>
 80089da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	e09a      	b.n	8008b1c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089ec:	2308      	movs	r3, #8
 80089ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80089f0:	2330      	movs	r3, #48	; 0x30
 80089f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80089f4:	2302      	movs	r3, #2
 80089f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f107 0210 	add.w	r2, r7, #16
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 f895 	bl	8009b3a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f9a5 	bl	8009d64 <SDMMC_CmdSendSCR>
 8008a1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d022      	beq.n	8008a68 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	e07a      	b.n	8008b1c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00e      	beq.n	8008a52 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6819      	ldr	r1, [r3, #0]
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	f107 0208 	add.w	r2, r7, #8
 8008a40:	18d4      	adds	r4, r2, r3
 8008a42:	4608      	mov	r0, r1
 8008a44:	f001 f805 	bl	8009a52 <SDIO_ReadFIFO>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	6023      	str	r3, [r4, #0]
      index++;
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	3301      	adds	r3, #1
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a52:	f7fa feeb 	bl	800382c <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d102      	bne.n	8008a68 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a66:	e059      	b.n	8008b1c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a6e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0d6      	beq.n	8008a26 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a8e:	2308      	movs	r3, #8
 8008a90:	e044      	b.n	8008b1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e037      	b.n	8008b1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ac2:	2320      	movs	r3, #32
 8008ac4:	e02a      	b.n	8008b1c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ace:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	061a      	lsls	r2, r3, #24
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008adc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ae6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	0e1b      	lsrs	r3, r3, #24
 8008aec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	601a      	str	r2, [r3, #0]
    scr++;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	3304      	adds	r3, #4
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	061a      	lsls	r2, r3, #24
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	0e1b      	lsrs	r3, r3, #24
 8008b14:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	373c      	adds	r7, #60	; 0x3c
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd90      	pop	{r4, r7, pc}

08008b24 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e034      	b.n	8008ba4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7f9 fa36 	bl	8001fc0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f000 fe48 	bl	80097f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	f000 feb0 	bl	80098d4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6858      	ldr	r0, [r3, #4]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	f000 fefb 	bl	800997c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	6892      	ldr	r2, [r2, #8]
 8008b8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	6892      	ldr	r2, [r2, #8]
 8008b9a:	f041 0101 	orr.w	r1, r1, #1
 8008b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e01d      	b.n	8008bfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f815 	bl	8008c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f000 f968 	bl	8008ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f042 0201 	orr.w	r2, r2, #1
 8008c2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b06      	cmp	r3, #6
 8008c3e:	d007      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d122      	bne.n	8008cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d11b      	bne.n	8008cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f06f 0202 	mvn.w	r2, #2
 8008c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f8ee 	bl	8008e82 <HAL_TIM_IC_CaptureCallback>
 8008ca6:	e005      	b.n	8008cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8e0 	bl	8008e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f8f1 	bl	8008e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d122      	bne.n	8008d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d11b      	bne.n	8008d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f06f 0204 	mvn.w	r2, #4
 8008cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8c4 	bl	8008e82 <HAL_TIM_IC_CaptureCallback>
 8008cfa:	e005      	b.n	8008d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8b6 	bl	8008e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8c7 	bl	8008e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d122      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f003 0308 	and.w	r3, r3, #8
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d11b      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f06f 0208 	mvn.w	r2, #8
 8008d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2204      	movs	r2, #4
 8008d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f003 0303 	and.w	r3, r3, #3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f89a 	bl	8008e82 <HAL_TIM_IC_CaptureCallback>
 8008d4e:	e005      	b.n	8008d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f88c 	bl	8008e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f89d 	bl	8008e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d122      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d11b      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f06f 0210 	mvn.w	r2, #16
 8008d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2208      	movs	r2, #8
 8008d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f870 	bl	8008e82 <HAL_TIM_IC_CaptureCallback>
 8008da2:	e005      	b.n	8008db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f862 	bl	8008e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f873 	bl	8008e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d10e      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d107      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f06f 0201 	mvn.w	r2, #1
 8008dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7f8 fb69 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dec:	2b80      	cmp	r3, #128	; 0x80
 8008dee:	d10e      	bne.n	8008e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d107      	bne.n	8008e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f903 	bl	8009014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	d10e      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b40      	cmp	r3, #64	; 0x40
 8008e28:	d107      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f838 	bl	8008eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0320 	and.w	r3, r3, #32
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d10e      	bne.n	8008e66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d107      	bne.n	8008e66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f06f 0220 	mvn.w	r2, #32
 8008e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f8cd 	bl	8009000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a40      	ldr	r2, [pc, #256]	; (8008fd4 <TIM_Base_SetConfig+0x114>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d013      	beq.n	8008f00 <TIM_Base_SetConfig+0x40>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ede:	d00f      	beq.n	8008f00 <TIM_Base_SetConfig+0x40>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a3d      	ldr	r2, [pc, #244]	; (8008fd8 <TIM_Base_SetConfig+0x118>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00b      	beq.n	8008f00 <TIM_Base_SetConfig+0x40>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a3c      	ldr	r2, [pc, #240]	; (8008fdc <TIM_Base_SetConfig+0x11c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d007      	beq.n	8008f00 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a3b      	ldr	r2, [pc, #236]	; (8008fe0 <TIM_Base_SetConfig+0x120>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d003      	beq.n	8008f00 <TIM_Base_SetConfig+0x40>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a3a      	ldr	r2, [pc, #232]	; (8008fe4 <TIM_Base_SetConfig+0x124>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d108      	bne.n	8008f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2f      	ldr	r2, [pc, #188]	; (8008fd4 <TIM_Base_SetConfig+0x114>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d02b      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f20:	d027      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a2c      	ldr	r2, [pc, #176]	; (8008fd8 <TIM_Base_SetConfig+0x118>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d023      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a2b      	ldr	r2, [pc, #172]	; (8008fdc <TIM_Base_SetConfig+0x11c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01f      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <TIM_Base_SetConfig+0x120>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d01b      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a29      	ldr	r2, [pc, #164]	; (8008fe4 <TIM_Base_SetConfig+0x124>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d017      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a28      	ldr	r2, [pc, #160]	; (8008fe8 <TIM_Base_SetConfig+0x128>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d013      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a27      	ldr	r2, [pc, #156]	; (8008fec <TIM_Base_SetConfig+0x12c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00f      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <TIM_Base_SetConfig+0x130>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00b      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a25      	ldr	r2, [pc, #148]	; (8008ff4 <TIM_Base_SetConfig+0x134>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a24      	ldr	r2, [pc, #144]	; (8008ff8 <TIM_Base_SetConfig+0x138>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a23      	ldr	r2, [pc, #140]	; (8008ffc <TIM_Base_SetConfig+0x13c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d108      	bne.n	8008f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <TIM_Base_SetConfig+0x114>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_Base_SetConfig+0xf8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a0c      	ldr	r2, [pc, #48]	; (8008fe4 <TIM_Base_SetConfig+0x124>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d103      	bne.n	8008fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	615a      	str	r2, [r3, #20]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40010000 	.word	0x40010000
 8008fd8:	40000400 	.word	0x40000400
 8008fdc:	40000800 	.word	0x40000800
 8008fe0:	40000c00 	.word	0x40000c00
 8008fe4:	40010400 	.word	0x40010400
 8008fe8:	40014000 	.word	0x40014000
 8008fec:	40014400 	.word	0x40014400
 8008ff0:	40014800 	.word	0x40014800
 8008ff4:	40001800 	.word	0x40001800
 8008ff8:	40001c00 	.word	0x40001c00
 8008ffc:	40002000 	.word	0x40002000

08009000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e03f      	b.n	80090ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f8 fec8 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2224      	movs	r2, #36	; 0x24
 8009058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800906a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f829 	bl	80090c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	695a      	ldr	r2, [r3, #20]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009106:	f023 030c 	bic.w	r3, r3, #12
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	430b      	orrs	r3, r1
 8009112:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009132:	f040 8199 	bne.w	8009468 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4ac6      	ldr	r2, [pc, #792]	; (8009454 <UART_SetConfig+0x390>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00f      	beq.n	8009160 <UART_SetConfig+0x9c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4ac4      	ldr	r2, [pc, #784]	; (8009458 <UART_SetConfig+0x394>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00a      	beq.n	8009160 <UART_SetConfig+0x9c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4ac3      	ldr	r2, [pc, #780]	; (800945c <UART_SetConfig+0x398>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d005      	beq.n	8009160 <UART_SetConfig+0x9c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4ac1      	ldr	r2, [pc, #772]	; (8009460 <UART_SetConfig+0x39c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	f040 80bd 	bne.w	80092da <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009160:	f7fe f910 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 8009164:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	461d      	mov	r5, r3
 800916a:	f04f 0600 	mov.w	r6, #0
 800916e:	46a8      	mov	r8, r5
 8009170:	46b1      	mov	r9, r6
 8009172:	eb18 0308 	adds.w	r3, r8, r8
 8009176:	eb49 0409 	adc.w	r4, r9, r9
 800917a:	4698      	mov	r8, r3
 800917c:	46a1      	mov	r9, r4
 800917e:	eb18 0805 	adds.w	r8, r8, r5
 8009182:	eb49 0906 	adc.w	r9, r9, r6
 8009186:	f04f 0100 	mov.w	r1, #0
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009192:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009196:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800919a:	4688      	mov	r8, r1
 800919c:	4691      	mov	r9, r2
 800919e:	eb18 0005 	adds.w	r0, r8, r5
 80091a2:	eb49 0106 	adc.w	r1, r9, r6
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	461d      	mov	r5, r3
 80091ac:	f04f 0600 	mov.w	r6, #0
 80091b0:	196b      	adds	r3, r5, r5
 80091b2:	eb46 0406 	adc.w	r4, r6, r6
 80091b6:	461a      	mov	r2, r3
 80091b8:	4623      	mov	r3, r4
 80091ba:	f7f7 f839 	bl	8000230 <__aeabi_uldivmod>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	461a      	mov	r2, r3
 80091c4:	4ba7      	ldr	r3, [pc, #668]	; (8009464 <UART_SetConfig+0x3a0>)
 80091c6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	461d      	mov	r5, r3
 80091d4:	f04f 0600 	mov.w	r6, #0
 80091d8:	46a9      	mov	r9, r5
 80091da:	46b2      	mov	sl, r6
 80091dc:	eb19 0309 	adds.w	r3, r9, r9
 80091e0:	eb4a 040a 	adc.w	r4, sl, sl
 80091e4:	4699      	mov	r9, r3
 80091e6:	46a2      	mov	sl, r4
 80091e8:	eb19 0905 	adds.w	r9, r9, r5
 80091ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80091f0:	f04f 0100 	mov.w	r1, #0
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009204:	4689      	mov	r9, r1
 8009206:	4692      	mov	sl, r2
 8009208:	eb19 0005 	adds.w	r0, r9, r5
 800920c:	eb4a 0106 	adc.w	r1, sl, r6
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	461d      	mov	r5, r3
 8009216:	f04f 0600 	mov.w	r6, #0
 800921a:	196b      	adds	r3, r5, r5
 800921c:	eb46 0406 	adc.w	r4, r6, r6
 8009220:	461a      	mov	r2, r3
 8009222:	4623      	mov	r3, r4
 8009224:	f7f7 f804 	bl	8000230 <__aeabi_uldivmod>
 8009228:	4603      	mov	r3, r0
 800922a:	460c      	mov	r4, r1
 800922c:	461a      	mov	r2, r3
 800922e:	4b8d      	ldr	r3, [pc, #564]	; (8009464 <UART_SetConfig+0x3a0>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a88      	ldr	r2, [pc, #544]	; (8009464 <UART_SetConfig+0x3a0>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009250:	4498      	add	r8, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	461d      	mov	r5, r3
 8009256:	f04f 0600 	mov.w	r6, #0
 800925a:	46a9      	mov	r9, r5
 800925c:	46b2      	mov	sl, r6
 800925e:	eb19 0309 	adds.w	r3, r9, r9
 8009262:	eb4a 040a 	adc.w	r4, sl, sl
 8009266:	4699      	mov	r9, r3
 8009268:	46a2      	mov	sl, r4
 800926a:	eb19 0905 	adds.w	r9, r9, r5
 800926e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800927e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009286:	4689      	mov	r9, r1
 8009288:	4692      	mov	sl, r2
 800928a:	eb19 0005 	adds.w	r0, r9, r5
 800928e:	eb4a 0106 	adc.w	r1, sl, r6
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	461d      	mov	r5, r3
 8009298:	f04f 0600 	mov.w	r6, #0
 800929c:	196b      	adds	r3, r5, r5
 800929e:	eb46 0406 	adc.w	r4, r6, r6
 80092a2:	461a      	mov	r2, r3
 80092a4:	4623      	mov	r3, r4
 80092a6:	f7f6 ffc3 	bl	8000230 <__aeabi_uldivmod>
 80092aa:	4603      	mov	r3, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b6c      	ldr	r3, [pc, #432]	; (8009464 <UART_SetConfig+0x3a0>)
 80092b2:	fba3 1302 	umull	r1, r3, r3, r2
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	2164      	movs	r1, #100	; 0x64
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	3332      	adds	r3, #50	; 0x32
 80092c4:	4a67      	ldr	r2, [pc, #412]	; (8009464 <UART_SetConfig+0x3a0>)
 80092c6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	f003 0207 	and.w	r2, r3, #7
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4442      	add	r2, r8
 80092d6:	609a      	str	r2, [r3, #8]
 80092d8:	e27d      	b.n	80097d6 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092da:	f7fe f83f 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 80092de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	461d      	mov	r5, r3
 80092e4:	f04f 0600 	mov.w	r6, #0
 80092e8:	46a8      	mov	r8, r5
 80092ea:	46b1      	mov	r9, r6
 80092ec:	eb18 0308 	adds.w	r3, r8, r8
 80092f0:	eb49 0409 	adc.w	r4, r9, r9
 80092f4:	4698      	mov	r8, r3
 80092f6:	46a1      	mov	r9, r4
 80092f8:	eb18 0805 	adds.w	r8, r8, r5
 80092fc:	eb49 0906 	adc.w	r9, r9, r6
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800930c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009314:	4688      	mov	r8, r1
 8009316:	4691      	mov	r9, r2
 8009318:	eb18 0005 	adds.w	r0, r8, r5
 800931c:	eb49 0106 	adc.w	r1, r9, r6
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	461d      	mov	r5, r3
 8009326:	f04f 0600 	mov.w	r6, #0
 800932a:	196b      	adds	r3, r5, r5
 800932c:	eb46 0406 	adc.w	r4, r6, r6
 8009330:	461a      	mov	r2, r3
 8009332:	4623      	mov	r3, r4
 8009334:	f7f6 ff7c 	bl	8000230 <__aeabi_uldivmod>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
 800933c:	461a      	mov	r2, r3
 800933e:	4b49      	ldr	r3, [pc, #292]	; (8009464 <UART_SetConfig+0x3a0>)
 8009340:	fba3 2302 	umull	r2, r3, r3, r2
 8009344:	095b      	lsrs	r3, r3, #5
 8009346:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	461d      	mov	r5, r3
 800934e:	f04f 0600 	mov.w	r6, #0
 8009352:	46a9      	mov	r9, r5
 8009354:	46b2      	mov	sl, r6
 8009356:	eb19 0309 	adds.w	r3, r9, r9
 800935a:	eb4a 040a 	adc.w	r4, sl, sl
 800935e:	4699      	mov	r9, r3
 8009360:	46a2      	mov	sl, r4
 8009362:	eb19 0905 	adds.w	r9, r9, r5
 8009366:	eb4a 0a06 	adc.w	sl, sl, r6
 800936a:	f04f 0100 	mov.w	r1, #0
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800937a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800937e:	4689      	mov	r9, r1
 8009380:	4692      	mov	sl, r2
 8009382:	eb19 0005 	adds.w	r0, r9, r5
 8009386:	eb4a 0106 	adc.w	r1, sl, r6
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	461d      	mov	r5, r3
 8009390:	f04f 0600 	mov.w	r6, #0
 8009394:	196b      	adds	r3, r5, r5
 8009396:	eb46 0406 	adc.w	r4, r6, r6
 800939a:	461a      	mov	r2, r3
 800939c:	4623      	mov	r3, r4
 800939e:	f7f6 ff47 	bl	8000230 <__aeabi_uldivmod>
 80093a2:	4603      	mov	r3, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	461a      	mov	r2, r3
 80093a8:	4b2e      	ldr	r3, [pc, #184]	; (8009464 <UART_SetConfig+0x3a0>)
 80093aa:	fba3 1302 	umull	r1, r3, r3, r2
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	2164      	movs	r1, #100	; 0x64
 80093b2:	fb01 f303 	mul.w	r3, r1, r3
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	3332      	adds	r3, #50	; 0x32
 80093bc:	4a29      	ldr	r2, [pc, #164]	; (8009464 <UART_SetConfig+0x3a0>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093ca:	4498      	add	r8, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	461d      	mov	r5, r3
 80093d0:	f04f 0600 	mov.w	r6, #0
 80093d4:	46a9      	mov	r9, r5
 80093d6:	46b2      	mov	sl, r6
 80093d8:	eb19 0309 	adds.w	r3, r9, r9
 80093dc:	eb4a 040a 	adc.w	r4, sl, sl
 80093e0:	4699      	mov	r9, r3
 80093e2:	46a2      	mov	sl, r4
 80093e4:	eb19 0905 	adds.w	r9, r9, r5
 80093e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80093ec:	f04f 0100 	mov.w	r1, #0
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009400:	4689      	mov	r9, r1
 8009402:	4692      	mov	sl, r2
 8009404:	eb19 0005 	adds.w	r0, r9, r5
 8009408:	eb4a 0106 	adc.w	r1, sl, r6
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	461d      	mov	r5, r3
 8009412:	f04f 0600 	mov.w	r6, #0
 8009416:	196b      	adds	r3, r5, r5
 8009418:	eb46 0406 	adc.w	r4, r6, r6
 800941c:	461a      	mov	r2, r3
 800941e:	4623      	mov	r3, r4
 8009420:	f7f6 ff06 	bl	8000230 <__aeabi_uldivmod>
 8009424:	4603      	mov	r3, r0
 8009426:	460c      	mov	r4, r1
 8009428:	461a      	mov	r2, r3
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <UART_SetConfig+0x3a0>)
 800942c:	fba3 1302 	umull	r1, r3, r3, r2
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	2164      	movs	r1, #100	; 0x64
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	3332      	adds	r3, #50	; 0x32
 800943e:	4a09      	ldr	r2, [pc, #36]	; (8009464 <UART_SetConfig+0x3a0>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	f003 0207 	and.w	r2, r3, #7
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4442      	add	r2, r8
 8009450:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009452:	e1c0      	b.n	80097d6 <UART_SetConfig+0x712>
 8009454:	40011000 	.word	0x40011000
 8009458:	40011400 	.word	0x40011400
 800945c:	40011800 	.word	0x40011800
 8009460:	40011c00 	.word	0x40011c00
 8009464:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4adc      	ldr	r2, [pc, #880]	; (80097e0 <UART_SetConfig+0x71c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <UART_SetConfig+0x3ce>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4adb      	ldr	r2, [pc, #876]	; (80097e4 <UART_SetConfig+0x720>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00a      	beq.n	8009492 <UART_SetConfig+0x3ce>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4ad9      	ldr	r2, [pc, #868]	; (80097e8 <UART_SetConfig+0x724>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d005      	beq.n	8009492 <UART_SetConfig+0x3ce>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4ad8      	ldr	r2, [pc, #864]	; (80097ec <UART_SetConfig+0x728>)
 800948c:	4293      	cmp	r3, r2
 800948e:	f040 80d1 	bne.w	8009634 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009492:	f7fd ff77 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 8009496:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	469a      	mov	sl, r3
 800949c:	f04f 0b00 	mov.w	fp, #0
 80094a0:	46d0      	mov	r8, sl
 80094a2:	46d9      	mov	r9, fp
 80094a4:	eb18 0308 	adds.w	r3, r8, r8
 80094a8:	eb49 0409 	adc.w	r4, r9, r9
 80094ac:	4698      	mov	r8, r3
 80094ae:	46a1      	mov	r9, r4
 80094b0:	eb18 080a 	adds.w	r8, r8, sl
 80094b4:	eb49 090b 	adc.w	r9, r9, fp
 80094b8:	f04f 0100 	mov.w	r1, #0
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094cc:	4688      	mov	r8, r1
 80094ce:	4691      	mov	r9, r2
 80094d0:	eb1a 0508 	adds.w	r5, sl, r8
 80094d4:	eb4b 0609 	adc.w	r6, fp, r9
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	4619      	mov	r1, r3
 80094de:	f04f 0200 	mov.w	r2, #0
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	f04f 0400 	mov.w	r4, #0
 80094ea:	0094      	lsls	r4, r2, #2
 80094ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094f0:	008b      	lsls	r3, r1, #2
 80094f2:	461a      	mov	r2, r3
 80094f4:	4623      	mov	r3, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	4631      	mov	r1, r6
 80094fa:	f7f6 fe99 	bl	8000230 <__aeabi_uldivmod>
 80094fe:	4603      	mov	r3, r0
 8009500:	460c      	mov	r4, r1
 8009502:	461a      	mov	r2, r3
 8009504:	4bba      	ldr	r3, [pc, #744]	; (80097f0 <UART_SetConfig+0x72c>)
 8009506:	fba3 2302 	umull	r2, r3, r3, r2
 800950a:	095b      	lsrs	r3, r3, #5
 800950c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	469b      	mov	fp, r3
 8009514:	f04f 0c00 	mov.w	ip, #0
 8009518:	46d9      	mov	r9, fp
 800951a:	46e2      	mov	sl, ip
 800951c:	eb19 0309 	adds.w	r3, r9, r9
 8009520:	eb4a 040a 	adc.w	r4, sl, sl
 8009524:	4699      	mov	r9, r3
 8009526:	46a2      	mov	sl, r4
 8009528:	eb19 090b 	adds.w	r9, r9, fp
 800952c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009530:	f04f 0100 	mov.w	r1, #0
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800953c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009544:	4689      	mov	r9, r1
 8009546:	4692      	mov	sl, r2
 8009548:	eb1b 0509 	adds.w	r5, fp, r9
 800954c:	eb4c 060a 	adc.w	r6, ip, sl
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4619      	mov	r1, r3
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	f04f 0400 	mov.w	r4, #0
 8009562:	0094      	lsls	r4, r2, #2
 8009564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009568:	008b      	lsls	r3, r1, #2
 800956a:	461a      	mov	r2, r3
 800956c:	4623      	mov	r3, r4
 800956e:	4628      	mov	r0, r5
 8009570:	4631      	mov	r1, r6
 8009572:	f7f6 fe5d 	bl	8000230 <__aeabi_uldivmod>
 8009576:	4603      	mov	r3, r0
 8009578:	460c      	mov	r4, r1
 800957a:	461a      	mov	r2, r3
 800957c:	4b9c      	ldr	r3, [pc, #624]	; (80097f0 <UART_SetConfig+0x72c>)
 800957e:	fba3 1302 	umull	r1, r3, r3, r2
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	2164      	movs	r1, #100	; 0x64
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	3332      	adds	r3, #50	; 0x32
 8009590:	4a97      	ldr	r2, [pc, #604]	; (80097f0 <UART_SetConfig+0x72c>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800959c:	4498      	add	r8, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	469b      	mov	fp, r3
 80095a2:	f04f 0c00 	mov.w	ip, #0
 80095a6:	46d9      	mov	r9, fp
 80095a8:	46e2      	mov	sl, ip
 80095aa:	eb19 0309 	adds.w	r3, r9, r9
 80095ae:	eb4a 040a 	adc.w	r4, sl, sl
 80095b2:	4699      	mov	r9, r3
 80095b4:	46a2      	mov	sl, r4
 80095b6:	eb19 090b 	adds.w	r9, r9, fp
 80095ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095be:	f04f 0100 	mov.w	r1, #0
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095d2:	4689      	mov	r9, r1
 80095d4:	4692      	mov	sl, r2
 80095d6:	eb1b 0509 	adds.w	r5, fp, r9
 80095da:	eb4c 060a 	adc.w	r6, ip, sl
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4619      	mov	r1, r3
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	f04f 0400 	mov.w	r4, #0
 80095f0:	0094      	lsls	r4, r2, #2
 80095f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095f6:	008b      	lsls	r3, r1, #2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4623      	mov	r3, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	4631      	mov	r1, r6
 8009600:	f7f6 fe16 	bl	8000230 <__aeabi_uldivmod>
 8009604:	4603      	mov	r3, r0
 8009606:	460c      	mov	r4, r1
 8009608:	461a      	mov	r2, r3
 800960a:	4b79      	ldr	r3, [pc, #484]	; (80097f0 <UART_SetConfig+0x72c>)
 800960c:	fba3 1302 	umull	r1, r3, r3, r2
 8009610:	095b      	lsrs	r3, r3, #5
 8009612:	2164      	movs	r1, #100	; 0x64
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	3332      	adds	r3, #50	; 0x32
 800961e:	4a74      	ldr	r2, [pc, #464]	; (80097f0 <UART_SetConfig+0x72c>)
 8009620:	fba2 2303 	umull	r2, r3, r2, r3
 8009624:	095b      	lsrs	r3, r3, #5
 8009626:	f003 020f 	and.w	r2, r3, #15
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4442      	add	r2, r8
 8009630:	609a      	str	r2, [r3, #8]
 8009632:	e0d0      	b.n	80097d6 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009634:	f7fd fe92 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 8009638:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	469a      	mov	sl, r3
 800963e:	f04f 0b00 	mov.w	fp, #0
 8009642:	46d0      	mov	r8, sl
 8009644:	46d9      	mov	r9, fp
 8009646:	eb18 0308 	adds.w	r3, r8, r8
 800964a:	eb49 0409 	adc.w	r4, r9, r9
 800964e:	4698      	mov	r8, r3
 8009650:	46a1      	mov	r9, r4
 8009652:	eb18 080a 	adds.w	r8, r8, sl
 8009656:	eb49 090b 	adc.w	r9, r9, fp
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009666:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800966a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800966e:	4688      	mov	r8, r1
 8009670:	4691      	mov	r9, r2
 8009672:	eb1a 0508 	adds.w	r5, sl, r8
 8009676:	eb4b 0609 	adc.w	r6, fp, r9
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	4619      	mov	r1, r3
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	f04f 0400 	mov.w	r4, #0
 800968c:	0094      	lsls	r4, r2, #2
 800968e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009692:	008b      	lsls	r3, r1, #2
 8009694:	461a      	mov	r2, r3
 8009696:	4623      	mov	r3, r4
 8009698:	4628      	mov	r0, r5
 800969a:	4631      	mov	r1, r6
 800969c:	f7f6 fdc8 	bl	8000230 <__aeabi_uldivmod>
 80096a0:	4603      	mov	r3, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	461a      	mov	r2, r3
 80096a6:	4b52      	ldr	r3, [pc, #328]	; (80097f0 <UART_SetConfig+0x72c>)
 80096a8:	fba3 2302 	umull	r2, r3, r3, r2
 80096ac:	095b      	lsrs	r3, r3, #5
 80096ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	469b      	mov	fp, r3
 80096b6:	f04f 0c00 	mov.w	ip, #0
 80096ba:	46d9      	mov	r9, fp
 80096bc:	46e2      	mov	sl, ip
 80096be:	eb19 0309 	adds.w	r3, r9, r9
 80096c2:	eb4a 040a 	adc.w	r4, sl, sl
 80096c6:	4699      	mov	r9, r3
 80096c8:	46a2      	mov	sl, r4
 80096ca:	eb19 090b 	adds.w	r9, r9, fp
 80096ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80096d2:	f04f 0100 	mov.w	r1, #0
 80096d6:	f04f 0200 	mov.w	r2, #0
 80096da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096e6:	4689      	mov	r9, r1
 80096e8:	4692      	mov	sl, r2
 80096ea:	eb1b 0509 	adds.w	r5, fp, r9
 80096ee:	eb4c 060a 	adc.w	r6, ip, sl
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4619      	mov	r1, r3
 80096f8:	f04f 0200 	mov.w	r2, #0
 80096fc:	f04f 0300 	mov.w	r3, #0
 8009700:	f04f 0400 	mov.w	r4, #0
 8009704:	0094      	lsls	r4, r2, #2
 8009706:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800970a:	008b      	lsls	r3, r1, #2
 800970c:	461a      	mov	r2, r3
 800970e:	4623      	mov	r3, r4
 8009710:	4628      	mov	r0, r5
 8009712:	4631      	mov	r1, r6
 8009714:	f7f6 fd8c 	bl	8000230 <__aeabi_uldivmod>
 8009718:	4603      	mov	r3, r0
 800971a:	460c      	mov	r4, r1
 800971c:	461a      	mov	r2, r3
 800971e:	4b34      	ldr	r3, [pc, #208]	; (80097f0 <UART_SetConfig+0x72c>)
 8009720:	fba3 1302 	umull	r1, r3, r3, r2
 8009724:	095b      	lsrs	r3, r3, #5
 8009726:	2164      	movs	r1, #100	; 0x64
 8009728:	fb01 f303 	mul.w	r3, r1, r3
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	3332      	adds	r3, #50	; 0x32
 8009732:	4a2f      	ldr	r2, [pc, #188]	; (80097f0 <UART_SetConfig+0x72c>)
 8009734:	fba2 2303 	umull	r2, r3, r2, r3
 8009738:	095b      	lsrs	r3, r3, #5
 800973a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800973e:	4498      	add	r8, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	469b      	mov	fp, r3
 8009744:	f04f 0c00 	mov.w	ip, #0
 8009748:	46d9      	mov	r9, fp
 800974a:	46e2      	mov	sl, ip
 800974c:	eb19 0309 	adds.w	r3, r9, r9
 8009750:	eb4a 040a 	adc.w	r4, sl, sl
 8009754:	4699      	mov	r9, r3
 8009756:	46a2      	mov	sl, r4
 8009758:	eb19 090b 	adds.w	r9, r9, fp
 800975c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009760:	f04f 0100 	mov.w	r1, #0
 8009764:	f04f 0200 	mov.w	r2, #0
 8009768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800976c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009774:	4689      	mov	r9, r1
 8009776:	4692      	mov	sl, r2
 8009778:	eb1b 0509 	adds.w	r5, fp, r9
 800977c:	eb4c 060a 	adc.w	r6, ip, sl
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	4619      	mov	r1, r3
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	f04f 0400 	mov.w	r4, #0
 8009792:	0094      	lsls	r4, r2, #2
 8009794:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009798:	008b      	lsls	r3, r1, #2
 800979a:	461a      	mov	r2, r3
 800979c:	4623      	mov	r3, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	4631      	mov	r1, r6
 80097a2:	f7f6 fd45 	bl	8000230 <__aeabi_uldivmod>
 80097a6:	4603      	mov	r3, r0
 80097a8:	460c      	mov	r4, r1
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <UART_SetConfig+0x72c>)
 80097ae:	fba3 1302 	umull	r1, r3, r3, r2
 80097b2:	095b      	lsrs	r3, r3, #5
 80097b4:	2164      	movs	r1, #100	; 0x64
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	3332      	adds	r3, #50	; 0x32
 80097c0:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <UART_SetConfig+0x72c>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	f003 020f 	and.w	r2, r3, #15
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4442      	add	r2, r8
 80097d2:	609a      	str	r2, [r3, #8]
}
 80097d4:	e7ff      	b.n	80097d6 <UART_SetConfig+0x712>
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	40011000 	.word	0x40011000
 80097e4:	40011400 	.word	0x40011400
 80097e8:	40011800 	.word	0x40011800
 80097ec:	40011c00 	.word	0x40011c00
 80097f0:	51eb851f 	.word	0x51eb851f

080097f4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4b2f      	ldr	r3, [pc, #188]	; (80098d0 <FSMC_NORSRAM_Init+0xdc>)
 8009812:	4013      	ands	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800981e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009824:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800982a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009830:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8009836:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800983c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009842:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009848:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800984e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8009854:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800985a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009860:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8009866:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2b08      	cmp	r3, #8
 8009874:	d103      	bne.n	800987e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009892:	d10a      	bne.n	80098aa <FSMC_NORSRAM_Init+0xb6>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	431a      	orrs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	ffc00480 	.word	0xffc00480

080098d4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80098f6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009902:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800990a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009912:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	3b01      	subs	r3, #1
 800991a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800991c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	3b02      	subs	r3, #2
 8009924:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009926:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800992c:	4313      	orrs	r3, r2
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6979      	ldr	r1, [r7, #20]
 800993c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800994c:	d10e      	bne.n	800996c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009956:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	3b01      	subs	r3, #1
 800995e:	051b      	lsls	r3, r3, #20
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009994:	d122      	bne.n	80099dc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80099b2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80099ba:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80099c2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80099c8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	6979      	ldr	r1, [r7, #20]
 80099d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099da:	e005      	b.n	80099e8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80099e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	cff00000 	.word	0xcff00000

080099fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80099fc:	b084      	sub	sp, #16
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	f107 001c 	add.w	r0, r7, #28
 8009a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009a12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009a14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009a16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009a1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009a1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009a22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009a26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	b004      	add	sp, #16
 8009a50:	4770      	bx	lr

08009a52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2203      	movs	r2, #3
 8009a78:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009a7a:	2002      	movs	r0, #2
 8009a7c:	f7f9 fee2 	bl	8003844 <HAL_Delay>
  
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0303 	and.w	r3, r3, #3
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ac4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009aca:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009ad0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ae0:	f023 030f 	bic.w	r3, r3, #15
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	b2db      	uxtb	r3, r3
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3314      	adds	r3, #20
 8009b22:	461a      	mov	r2, r3
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	4413      	add	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
}  
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b60:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009b66:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009b6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0

}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b088      	sub	sp, #32
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ff74 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f975 	bl	8009eb4 <SDMMC_GetCmdResp1>
 8009bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b08a      	sub	sp, #40	; 0x28
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009be6:	2307      	movs	r3, #7
 8009be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bea:	2340      	movs	r3, #64	; 0x40
 8009bec:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bf8:	f107 0310 	add.w	r3, r7, #16
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff ff51 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	2107      	movs	r1, #7
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f952 	bl	8009eb4 <SDMMC_GetCmdResp1>
 8009c10:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3728      	adds	r7, #40	; 0x28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ff30 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f90c 	bl	8009e64 <SDMMC_GetCmdError>
 8009c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c4e:	69fb      	ldr	r3, [r7, #28]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3720      	adds	r7, #32
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c60:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c66:	2308      	movs	r3, #8
 8009c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c78:	f107 0308 	add.w	r3, r7, #8
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff ff11 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 faf5 	bl	800a274 <SDMMC_GetCmdResp7>
 8009c8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b088      	sub	sp, #32
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ca4:	2337      	movs	r3, #55	; 0x37
 8009ca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ca8:	2340      	movs	r3, #64	; 0x40
 8009caa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cac:	2300      	movs	r3, #0
 8009cae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cb6:	f107 0308 	add.w	r3, r7, #8
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fef2 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	2137      	movs	r1, #55	; 0x37
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f8f3 	bl	8009eb4 <SDMMC_GetCmdResp1>
 8009cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b088      	sub	sp, #32
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009cf0:	2329      	movs	r3, #41	; 0x29
 8009cf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff fecc 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa02 	bl	800a118 <SDMMC_GetCmdResp3>
 8009d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d16:	69fb      	ldr	r3, [r7, #28]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d2e:	2306      	movs	r3, #6
 8009d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d40:	f107 0308 	add.w	r3, r7, #8
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff fead 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d50:	2106      	movs	r1, #6
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f8ae 	bl	8009eb4 <SDMMC_GetCmdResp1>
 8009d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d70:	2333      	movs	r3, #51	; 0x33
 8009d72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d74:	2340      	movs	r3, #64	; 0x40
 8009d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fe8c 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d92:	2133      	movs	r1, #51	; 0x33
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f88d 	bl	8009eb4 <SDMMC_GetCmdResp1>
 8009d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009db2:	2302      	movs	r3, #2
 8009db4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009db6:	23c0      	movs	r3, #192	; 0xc0
 8009db8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff fe6b 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f95b 	bl	800a08c <SDMMC_GetCmdResp2>
 8009dd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b088      	sub	sp, #32
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009df0:	2309      	movs	r3, #9
 8009df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009df4:	23c0      	movs	r3, #192	; 0xc0
 8009df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff fe4c 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f93c 	bl	800a08c <SDMMC_GetCmdResp2>
 8009e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e16:	69fb      	ldr	r3, [r7, #28]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3720      	adds	r7, #32
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fe2d 	bl	8009aa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	2103      	movs	r1, #3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f99b 	bl	800a18c <SDMMC_GetCmdResp6>
 8009e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e58:	69fb      	ldr	r3, [r7, #28]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3720      	adds	r7, #32
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009e64:	b490      	push	{r4, r7}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e6c:	4b0f      	ldr	r3, [pc, #60]	; (8009eac <SDMMC_GetCmdError+0x48>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a0f      	ldr	r2, [pc, #60]	; (8009eb0 <SDMMC_GetCmdError+0x4c>)
 8009e72:	fba2 2303 	umull	r2, r3, r2, r3
 8009e76:	0a5b      	lsrs	r3, r3, #9
 8009e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e80:	4623      	mov	r3, r4
 8009e82:	1e5c      	subs	r4, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e8c:	e009      	b.n	8009ea2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0f2      	beq.n	8009e80 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	22c5      	movs	r2, #197	; 0xc5
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc90      	pop	{r4, r7}
 8009eaa:	4770      	bx	lr
 8009eac:	20000020 	.word	0x20000020
 8009eb0:	10624dd3 	.word	0x10624dd3

08009eb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009ec2:	4b6f      	ldr	r3, [pc, #444]	; (800a080 <SDMMC_GetCmdResp1+0x1cc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a6f      	ldr	r2, [pc, #444]	; (800a084 <SDMMC_GetCmdResp1+0x1d0>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	0a5b      	lsrs	r3, r3, #9
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	1e5c      	subs	r4, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ee0:	e0c9      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0f0      	beq.n	8009ed4 <SDMMC_GetCmdResp1+0x20>
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1eb      	bne.n	8009ed4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f0e:	2304      	movs	r3, #4
 8009f10:	e0b1      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0a6      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	22c5      	movs	r2, #197	; 0xc5
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff fde3 	bl	8009afa <SDIO_GetCommandResponse>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d001      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e099      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f42:	2100      	movs	r1, #0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff fde5 	bl	8009b14 <SDIO_GetResponse>
 8009f4a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4b4e      	ldr	r3, [pc, #312]	; (800a088 <SDMMC_GetCmdResp1+0x1d4>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	e08d      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	da02      	bge.n	8009f66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f64:	e087      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f70:	2340      	movs	r3, #64	; 0x40
 8009f72:	e080      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009f7e:	2380      	movs	r3, #128	; 0x80
 8009f80:	e079      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f90:	e071      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa0:	e069      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb0:	e061      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fc0:	e059      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd0:	e051      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fe0:	e049      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009fec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ff0:	e041      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a000:	e039      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a00c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a010:	e031      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a01c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a020:	e029      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a02c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a030:	e021      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a03c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a040:	e019      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a04c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a050:	e011      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a05c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a060:	e009      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a06c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a070:	e001      	b.n	800a076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd90      	pop	{r4, r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000020 	.word	0x20000020
 800a084:	10624dd3 	.word	0x10624dd3
 800a088:	fdffe008 	.word	0xfdffe008

0800a08c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a08c:	b490      	push	{r4, r7}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a094:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <SDMMC_GetCmdResp2+0x84>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a1e      	ldr	r2, [pc, #120]	; (800a114 <SDMMC_GetCmdResp2+0x88>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	0a5b      	lsrs	r3, r3, #9
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	1e5c      	subs	r4, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d102      	bne.n	800a0b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b4:	e026      	b.n	800a104 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0f0      	beq.n	800a0a8 <SDMMC_GetCmdResp2+0x1c>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1eb      	bne.n	800a0a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2204      	movs	r2, #4
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	e00e      	b.n	800a104 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e003      	b.n	800a104 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	22c5      	movs	r2, #197	; 0xc5
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bc90      	pop	{r4, r7}
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20000020 	.word	0x20000020
 800a114:	10624dd3 	.word	0x10624dd3

0800a118 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a118:	b490      	push	{r4, r7}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a120:	4b18      	ldr	r3, [pc, #96]	; (800a184 <SDMMC_GetCmdResp3+0x6c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a18      	ldr	r2, [pc, #96]	; (800a188 <SDMMC_GetCmdResp3+0x70>)
 800a126:	fba2 2303 	umull	r2, r3, r2, r3
 800a12a:	0a5b      	lsrs	r3, r3, #9
 800a12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a134:	4623      	mov	r3, r4
 800a136:	1e5c      	subs	r4, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d102      	bne.n	800a142 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a140:	e01b      	b.n	800a17a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a146:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <SDMMC_GetCmdResp3+0x1c>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1eb      	bne.n	800a134 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d004      	beq.n	800a172 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2204      	movs	r2, #4
 800a16c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a16e:	2304      	movs	r3, #4
 800a170:	e003      	b.n	800a17a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	22c5      	movs	r2, #197	; 0xc5
 800a176:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc90      	pop	{r4, r7}
 800a182:	4770      	bx	lr
 800a184:	20000020 	.word	0x20000020
 800a188:	10624dd3 	.word	0x10624dd3

0800a18c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a18c:	b590      	push	{r4, r7, lr}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	460b      	mov	r3, r1
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a19a:	4b34      	ldr	r3, [pc, #208]	; (800a26c <SDMMC_GetCmdResp6+0xe0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a34      	ldr	r2, [pc, #208]	; (800a270 <SDMMC_GetCmdResp6+0xe4>)
 800a1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a4:	0a5b      	lsrs	r3, r3, #9
 800a1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	1e5c      	subs	r4, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1ba:	e052      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0f0      	beq.n	800a1ae <SDMMC_GetCmdResp6+0x22>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1eb      	bne.n	800a1ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	e03a      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e02f      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fc79 	bl	8009afa <SDIO_GetCommandResponse>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	4293      	cmp	r3, r2
 800a210:	d001      	beq.n	800a216 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a212:	2301      	movs	r3, #1
 800a214:	e025      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	22c5      	movs	r2, #197	; 0xc5
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a21c:	2100      	movs	r1, #0
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fc78 	bl	8009b14 <SDIO_GetResponse>
 800a224:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	0c1b      	lsrs	r3, r3, #16
 800a234:	b29a      	uxth	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e011      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a24c:	e009      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a25c:	e001      	b.n	800a262 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a25e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	bd90      	pop	{r4, r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000020 	.word	0x20000020
 800a270:	10624dd3 	.word	0x10624dd3

0800a274 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a274:	b490      	push	{r4, r7}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a27c:	4b21      	ldr	r3, [pc, #132]	; (800a304 <SDMMC_GetCmdResp7+0x90>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a21      	ldr	r2, [pc, #132]	; (800a308 <SDMMC_GetCmdResp7+0x94>)
 800a282:	fba2 2303 	umull	r2, r3, r2, r3
 800a286:	0a5b      	lsrs	r3, r3, #9
 800a288:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a290:	4623      	mov	r3, r4
 800a292:	1e5c      	subs	r4, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a29c:	e02c      	b.n	800a2f8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0f0      	beq.n	800a290 <SDMMC_GetCmdResp7+0x1c>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1eb      	bne.n	800a290 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2204      	movs	r2, #4
 800a2c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	e014      	b.n	800a2f8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d004      	beq.n	800a2e4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e009      	b.n	800a2f8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2240      	movs	r2, #64	; 0x40
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2f6:	2300      	movs	r3, #0
  
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bc90      	pop	{r4, r7}
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000020 	.word	0x20000020
 800a308:	10624dd3 	.word	0x10624dd3

0800a30c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a30c:	b084      	sub	sp, #16
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	f107 001c 	add.w	r0, r7, #28
 800a31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	2b01      	cmp	r3, #1
 800a322:	d122      	bne.n	800a36a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d105      	bne.n	800a35e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f94a 	bl	800a5f8 <USB_CoreReset>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	e01a      	b.n	800a3a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f93e 	bl	800a5f8 <USB_CoreReset>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	639a      	str	r2, [r3, #56]	; 0x38
 800a392:	e005      	b.n	800a3a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10b      	bne.n	800a3be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f043 0206 	orr.w	r2, r3, #6
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f043 0220 	orr.w	r2, r3, #32
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ca:	b004      	add	sp, #16
 800a3cc:	4770      	bx	lr

0800a3ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f043 0201 	orr.w	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f023 0201 	bic.w	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a42a:	78fb      	ldrb	r3, [r7, #3]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d106      	bne.n	800a43e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	60da      	str	r2, [r3, #12]
 800a43c:	e00b      	b.n	800a456 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	60da      	str	r2, [r3, #12]
 800a450:	e001      	b.n	800a456 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e003      	b.n	800a45e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a456:	2032      	movs	r0, #50	; 0x32
 800a458:	f7f9 f9f4 	bl	8003844 <HAL_Delay>

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	019b      	lsls	r3, r3, #6
 800a47a:	f043 0220 	orr.w	r2, r3, #32
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3301      	adds	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4a09      	ldr	r2, [pc, #36]	; (800a4b0 <USB_FlushTxFifo+0x48>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d901      	bls.n	800a494 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e006      	b.n	800a4a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	f003 0320 	and.w	r3, r3, #32
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d0f0      	beq.n	800a482 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	00030d40 	.word	0x00030d40

0800a4b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2210      	movs	r2, #16
 800a4c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4a09      	ldr	r2, [pc, #36]	; (800a4f4 <USB_FlushRxFifo+0x40>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d901      	bls.n	800a4d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e006      	b.n	800a4e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b10      	cmp	r3, #16
 800a4e2:	d0f0      	beq.n	800a4c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	00030d40 	.word	0x00030d40

0800a4f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b089      	sub	sp, #36	; 0x24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4611      	mov	r1, r2
 800a504:	461a      	mov	r2, r3
 800a506:	460b      	mov	r3, r1
 800a508:	71fb      	strb	r3, [r7, #7]
 800a50a:	4613      	mov	r3, r2
 800a50c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11a      	bne.n	800a554 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a51e:	88bb      	ldrh	r3, [r7, #4]
 800a520:	3303      	adds	r3, #3
 800a522:	089b      	lsrs	r3, r3, #2
 800a524:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a526:	2300      	movs	r3, #0
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e00f      	b.n	800a54c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	031a      	lsls	r2, r3, #12
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	4413      	add	r3, r2
 800a534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a538:	461a      	mov	r2, r3
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	3304      	adds	r3, #4
 800a544:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	3301      	adds	r3, #1
 800a54a:	61bb      	str	r3, [r7, #24]
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	429a      	cmp	r2, r3
 800a552:	d3eb      	bcc.n	800a52c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3724      	adds	r7, #36	; 0x24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a562:	b480      	push	{r7}
 800a564:	b089      	sub	sp, #36	; 0x24
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	4613      	mov	r3, r2
 800a56e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	3303      	adds	r3, #3
 800a57c:	089b      	lsrs	r3, r3, #2
 800a57e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
 800a584:	e00b      	b.n	800a59e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	601a      	str	r2, [r3, #0]
    pDest++;
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	3304      	adds	r3, #4
 800a596:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	3301      	adds	r3, #1
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d3ef      	bcc.n	800a586 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a5a6:	69fb      	ldr	r3, [r7, #28]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3724      	adds	r7, #36	; 0x24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	4a13      	ldr	r2, [pc, #76]	; (800a65c <USB_CoreReset+0x64>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d901      	bls.n	800a616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e01b      	b.n	800a64e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	daf2      	bge.n	800a604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f043 0201 	orr.w	r2, r3, #1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <USB_CoreReset+0x64>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d901      	bls.n	800a640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e006      	b.n	800a64e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d0f0      	beq.n	800a62e <USB_CoreReset+0x36>

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	00030d40 	.word	0x00030d40

0800a660 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a660:	b084      	sub	sp, #16
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	f107 001c 	add.w	r0, r7, #28
 800a66e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a67c:	461a      	mov	r2, r3
 800a67e:	2300      	movs	r3, #0
 800a680:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d018      	beq.n	800a6d8 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d10a      	bne.n	800a6c2 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6ba:	f043 0304 	orr.w	r3, r3, #4
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	e014      	b.n	800a6ec <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6d0:	f023 0304 	bic.w	r3, r3, #4
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	e009      	b.n	800a6ec <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6e6:	f023 0304 	bic.w	r3, r3, #4
 800a6ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a6ec:	2110      	movs	r1, #16
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff feba 	bl	800a468 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff fedd 	bl	800a4b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	e015      	b.n	800a72c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4413      	add	r3, r2
 800a708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a70c:	461a      	mov	r2, r3
 800a70e:	f04f 33ff 	mov.w	r3, #4294967295
 800a712:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a720:	461a      	mov	r2, r3
 800a722:	2300      	movs	r3, #0
 800a724:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	429a      	cmp	r2, r3
 800a732:	d3e5      	bcc.n	800a700 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a734:	2101      	movs	r1, #1
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f8ac 	bl	800a894 <USB_DriveVbus>

  HAL_Delay(200U);
 800a73c:	20c8      	movs	r0, #200	; 0xc8
 800a73e:	f7f9 f881 	bl	8003844 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f04f 32ff 	mov.w	r2, #4294967295
 800a74e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00b      	beq.n	800a774 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a762:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <USB_HostInit+0x158>)
 800a768:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a13      	ldr	r2, [pc, #76]	; (800a7bc <USB_HostInit+0x15c>)
 800a76e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a772:	e009      	b.n	800a788 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2280      	movs	r2, #128	; 0x80
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a10      	ldr	r2, [pc, #64]	; (800a7c0 <USB_HostInit+0x160>)
 800a77e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a10      	ldr	r2, [pc, #64]	; (800a7c4 <USB_HostInit+0x164>)
 800a784:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d105      	bne.n	800a79a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f043 0210 	orr.w	r2, r3, #16
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <USB_HostInit+0x168>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7b2:	b004      	add	sp, #16
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	01000200 	.word	0x01000200
 800a7bc:	00e00300 	.word	0x00e00300
 800a7c0:	00600080 	.word	0x00600080
 800a7c4:	004000e0 	.word	0x004000e0
 800a7c8:	a3200008 	.word	0xa3200008

0800a7cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a804:	4313      	orrs	r3, r2
 800a806:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d107      	bne.n	800a81e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a814:	461a      	mov	r2, r3
 800a816:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a81a:	6053      	str	r3, [r2, #4]
 800a81c:	e009      	b.n	800a832 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d106      	bne.n	800a832 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a82a:	461a      	mov	r2, r3
 800a82c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a830:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a860:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a86a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a86e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a870:	2064      	movs	r0, #100	; 0x64
 800a872:	f7f8 ffe7 	bl	8003844 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a87e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a882:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a884:	200a      	movs	r0, #10
 800a886:	f7f8 ffdd 	bl	8003844 <HAL_Delay>

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	460b      	mov	r3, r1
 800a89e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d109      	bne.n	800a8d8 <USB_DriveVbus+0x44>
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d106      	bne.n	800a8d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e2:	d109      	bne.n	800a8f8 <USB_DriveVbus+0x64>
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	0c5b      	lsrs	r3, r3, #17
 800a924:	f003 0303 	and.w	r3, r3, #3
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	b29b      	uxth	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	4608      	mov	r0, r1
 800a962:	4611      	mov	r1, r2
 800a964:	461a      	mov	r2, r3
 800a966:	4603      	mov	r3, r0
 800a968:	70fb      	strb	r3, [r7, #3]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70bb      	strb	r3, [r7, #2]
 800a96e:	4613      	mov	r3, r2
 800a970:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	4413      	add	r3, r2
 800a982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a986:	461a      	mov	r2, r3
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
 800a98c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a98e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a992:	2b03      	cmp	r3, #3
 800a994:	d87e      	bhi.n	800aa94 <USB_HC_Init+0x13c>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <USB_HC_Init+0x44>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9ad 	.word	0x0800a9ad
 800a9a0:	0800aa57 	.word	0x0800aa57
 800a9a4:	0800a9ad 	.word	0x0800a9ad
 800a9a8:	0800aa19 	.word	0x0800aa19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a9ac:	78fb      	ldrb	r3, [r7, #3]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f240 439d 	movw	r3, #1181	; 0x49d
 800a9be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a9c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da10      	bge.n	800a9ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	0151      	lsls	r1, r2, #5
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	440a      	add	r2, r1
 800a9de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9e6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a9e8:	e057      	b.n	800aa9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d051      	beq.n	800aa9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	78fa      	ldrb	r2, [r7, #3]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa14:	60d3      	str	r3, [r2, #12]
      break;
 800aa16:	e040      	b.n	800aa9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa24:	461a      	mov	r2, r3
 800aa26:	f240 639d 	movw	r3, #1693	; 0x69d
 800aa2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aa2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	da34      	bge.n	800aa9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa52:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aa54:	e023      	b.n	800aa9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa62:	461a      	mov	r2, r3
 800aa64:	f240 2325 	movw	r3, #549	; 0x225
 800aa68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aa6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	da17      	bge.n	800aaa2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aa90:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aa92:	e006      	b.n	800aaa2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	e004      	b.n	800aaa4 <USB_HC_Init+0x14c>
      break;
 800aa9a:	bf00      	nop
 800aa9c:	e002      	b.n	800aaa4 <USB_HC_Init+0x14c>
      break;
 800aa9e:	bf00      	nop
 800aaa0:	e000      	b.n	800aaa4 <USB_HC_Init+0x14c>
      break;
 800aaa2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	2101      	movs	r1, #1
 800aab4:	fa01 f303 	lsl.w	r3, r1, r3
 800aab8:	68b9      	ldr	r1, [r7, #8]
 800aaba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aabe:	4313      	orrs	r3, r2
 800aac0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800aace:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da03      	bge.n	800aade <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800aad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	e001      	b.n	800aae2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800aae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d103      	bne.n	800aaf2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800aaea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e001      	b.n	800aaf6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aaf6:	787b      	ldrb	r3, [r7, #1]
 800aaf8:	059b      	lsls	r3, r3, #22
 800aafa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aafe:	78bb      	ldrb	r3, [r7, #2]
 800ab00:	02db      	lsls	r3, r3, #11
 800ab02:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab0c:	049b      	lsls	r3, r3, #18
 800ab0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	0159      	lsls	r1, r3, #5
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	440b      	add	r3, r1
 800ab28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab2c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab32:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ab34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d10f      	bne.n	800ab5c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	78fa      	ldrb	r2, [r7, #3]
 800ab4c:	0151      	lsls	r1, r2, #5
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	440a      	add	r2, r1
 800ab52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab5a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08c      	sub	sp, #48	; 0x30
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ab84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d028      	beq.n	800abe8 <USB_HC_StartXfer+0x7c>
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	791b      	ldrb	r3, [r3, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d124      	bne.n	800abe8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ab9e:	79fb      	ldrb	r3, [r7, #7]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10b      	bne.n	800abbc <USB_HC_StartXfer+0x50>
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	795b      	ldrb	r3, [r3, #5]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d107      	bne.n	800abbc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	4619      	mov	r1, r3
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 fa30 	bl	800b018 <USB_DoPing>
      return HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	e114      	b.n	800ade6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d112      	bne.n	800abe8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	6a3a      	ldr	r2, [r7, #32]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abdc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800abe0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d018      	beq.n	800ac22 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	8912      	ldrh	r2, [r2, #8]
 800abf8:	4413      	add	r3, r2
 800abfa:	3b01      	subs	r3, #1
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	8912      	ldrh	r2, [r2, #8]
 800ac00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac04:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ac06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac08:	8b7b      	ldrh	r3, [r7, #26]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d90b      	bls.n	800ac26 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800ac0e:	8b7b      	ldrh	r3, [r7, #26]
 800ac10:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ac12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	8912      	ldrh	r2, [r2, #8]
 800ac18:	fb02 f203 	mul.w	r2, r2, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	611a      	str	r2, [r3, #16]
 800ac20:	e001      	b.n	800ac26 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800ac22:	2301      	movs	r3, #1
 800ac24:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	78db      	ldrb	r3, [r3, #3]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ac2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	8912      	ldrh	r2, [r2, #8]
 800ac34:	fb02 f203 	mul.w	r2, r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ac44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac46:	04d9      	lsls	r1, r3, #19
 800ac48:	4b69      	ldr	r3, [pc, #420]	; (800adf0 <USB_HC_StartXfer+0x284>)
 800ac4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ac4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	7a9b      	ldrb	r3, [r3, #10]
 800ac52:	075b      	lsls	r3, r3, #29
 800ac54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ac58:	69f9      	ldr	r1, [r7, #28]
 800ac5a:	0148      	lsls	r0, r1, #5
 800ac5c:	6a39      	ldr	r1, [r7, #32]
 800ac5e:	4401      	add	r1, r0
 800ac60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ac64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ac66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	68d9      	ldr	r1, [r3, #12]
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7e:	460a      	mov	r2, r1
 800ac80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bf0c      	ite	eq
 800ac92:	2301      	moveq	r3, #1
 800ac94:	2300      	movne	r3, #0
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	6a3a      	ldr	r2, [r7, #32]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	7e7b      	ldrb	r3, [r7, #25]
 800acca:	075b      	lsls	r3, r3, #29
 800accc:	69f9      	ldr	r1, [r7, #28]
 800acce:	0148      	lsls	r0, r1, #5
 800acd0:	6a39      	ldr	r1, [r7, #32]
 800acd2:	4401      	add	r1, r0
 800acd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800acd8:	4313      	orrs	r3, r2
 800acda:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a42      	ldr	r2, [pc, #264]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800acec:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800acee:	4b41      	ldr	r3, [pc, #260]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acf6:	4a3f      	ldr	r2, [pc, #252]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800acf8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	78db      	ldrb	r3, [r3, #3]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d006      	beq.n	800ad10 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ad02:	4b3c      	ldr	r3, [pc, #240]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad0a:	4a3a      	ldr	r2, [pc, #232]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	e005      	b.n	800ad1c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ad10:	4b38      	ldr	r3, [pc, #224]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad18:	4a36      	ldr	r2, [pc, #216]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad1a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad1c:	4b35      	ldr	r3, [pc, #212]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	4a33      	ldr	r2, [pc, #204]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad26:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad34:	461a      	mov	r2, r3
 800ad36:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <USB_HC_StartXfer+0x288>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	e04f      	b.n	800ade6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	78db      	ldrb	r3, [r3, #3]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d14a      	bne.n	800ade4 <USB_HC_StartXfer+0x278>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d046      	beq.n	800ade4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	79db      	ldrb	r3, [r3, #7]
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d830      	bhi.n	800adc0 <USB_HC_StartXfer+0x254>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <USB_HC_StartXfer+0x1f8>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800ad75 	.word	0x0800ad75
 800ad68:	0800ad99 	.word	0x0800ad99
 800ad6c:	0800ad75 	.word	0x0800ad75
 800ad70:	0800ad99 	.word	0x0800ad99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	3303      	adds	r3, #3
 800ad7a:	089b      	lsrs	r3, r3, #2
 800ad7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ad7e:	8afa      	ldrh	r2, [r7, #22]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d91c      	bls.n	800adc4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f043 0220 	orr.w	r2, r3, #32
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	619a      	str	r2, [r3, #24]
        }
        break;
 800ad96:	e015      	b.n	800adc4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	3303      	adds	r3, #3
 800ad9e:	089b      	lsrs	r3, r3, #2
 800ada0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ada2:	8afa      	ldrh	r2, [r7, #22]
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	b29b      	uxth	r3, r3
 800adae:	429a      	cmp	r2, r3
 800adb0:	d90a      	bls.n	800adc8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	619a      	str	r2, [r3, #24]
        }
        break;
 800adbe:	e003      	b.n	800adc8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800adc0:	bf00      	nop
 800adc2:	e002      	b.n	800adca <USB_HC_StartXfer+0x25e>
        break;
 800adc4:	bf00      	nop
 800adc6:	e000      	b.n	800adca <USB_HC_StartXfer+0x25e>
        break;
 800adc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	68d9      	ldr	r1, [r3, #12]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	785a      	ldrb	r2, [r3, #1]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	b298      	uxth	r0, r3
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	4603      	mov	r3, r0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff fb8a 	bl	800a4f8 <USB_WritePacket>
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3728      	adds	r7, #40	; 0x28
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	1ff80000 	.word	0x1ff80000
 800adf4:	200001a8 	.word	0x200001a8

0800adf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	b29b      	uxth	r3, r3
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	0c9b      	lsrs	r3, r3, #18
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <USB_HC_Halt+0x3a>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d16c      	bne.n	800af2e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae72:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d143      	bne.n	800af08 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aebe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aede:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	3301      	adds	r3, #1
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeec:	d81d      	bhi.n	800af2a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af04:	d0ec      	beq.n	800aee0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af06:	e080      	b.n	800b00a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af26:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af28:	e06f      	b.n	800b00a <USB_HC_Halt+0x1f0>
          break;
 800af2a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af2c:	e06d      	b.n	800b00a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	4413      	add	r3, r2
 800af36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	440a      	add	r2, r1
 800af44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af4c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d143      	bne.n	800afe6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	4413      	add	r3, r2
 800af66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	0151      	lsls	r1, r2, #5
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	440a      	add	r2, r1
 800af74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af7c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	4413      	add	r3, r2
 800af86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	440a      	add	r2, r1
 800af94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af9c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afbc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	3301      	adds	r3, #1
 800afc2:	617b      	str	r3, [r7, #20]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afca:	d81d      	bhi.n	800b008 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afe2:	d0ec      	beq.n	800afbe <USB_HC_Halt+0x1a4>
 800afe4:	e011      	b.n	800b00a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	015a      	lsls	r2, r3, #5
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	4413      	add	r3, r2
 800afee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	0151      	lsls	r1, r2, #5
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	440a      	add	r2, r1
 800affc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	e000      	b.n	800b00a <USB_HC_Halt+0x1f0>
          break;
 800b008:	bf00      	nop
    }
  }

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b02c:	2301      	movs	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	04da      	lsls	r2, r3, #19
 800b034:	4b15      	ldr	r3, [pc, #84]	; (800b08c <USB_DoPing+0x74>)
 800b036:	4013      	ands	r3, r2
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b048:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	4413      	add	r3, r2
 800b052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b060:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b068:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	4413      	add	r3, r2
 800b072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b076:	461a      	mov	r2, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	1ff80000 	.word	0x1ff80000

0800b090 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff f9a5 	bl	800a3f0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b0a6:	2110      	movs	r1, #16
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff f9dd 	bl	800a468 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fa00 	bl	800a4b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	e01f      	b.n	800b0fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b0f      	cmp	r3, #15
 800b0fe:	d9dc      	bls.n	800b0ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b100:	2300      	movs	r3, #0
 800b102:	613b      	str	r3, [r7, #16]
 800b104:	e034      	b.n	800b170 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b11c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b124:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b12c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4413      	add	r3, r2
 800b136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b13a:	461a      	mov	r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	3301      	adds	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b14c:	d80c      	bhi.n	800b168 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	015a      	lsls	r2, r3, #5
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b164:	d0ec      	beq.n	800b140 <USB_StopHost+0xb0>
 800b166:	e000      	b.n	800b16a <USB_StopHost+0xda>
        break;
 800b168:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3301      	adds	r3, #1
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2b0f      	cmp	r3, #15
 800b174:	d9c7      	bls.n	800b106 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b17c:	461a      	mov	r2, r3
 800b17e:	f04f 33ff 	mov.w	r3, #4294967295
 800b182:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f04f 32ff 	mov.w	r2, #4294967295
 800b18a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff f91e 	bl	800a3ce <USB_EnableGlobalInt>

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b089      	sub	sp, #36	; 0x24
 800b1a0:	af04      	add	r7, sp, #16
 800b1a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	2102      	movs	r1, #2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fcb4 	bl	800bb18 <USBH_FindInterface>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	2bff      	cmp	r3, #255	; 0xff
 800b1b8:	d002      	beq.n	800b1c0 <USBH_CDC_InterfaceInit+0x24>
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d901      	bls.n	800b1c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e13d      	b.n	800b440 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fc89 	bl	800bae0 <USBH_SelectInterface>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e131      	b.n	800b440 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b1e2:	2050      	movs	r0, #80	; 0x50
 800b1e4:	f005 fb66 	bl	80108b4 <malloc>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e11f      	b.n	800b440 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b200:	2250      	movs	r2, #80	; 0x50
 800b202:	2100      	movs	r1, #0
 800b204:	68b8      	ldr	r0, [r7, #8]
 800b206:	f005 fb70 	bl	80108ea <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	211a      	movs	r1, #26
 800b210:	fb01 f303 	mul.w	r3, r1, r3
 800b214:	4413      	add	r3, r2
 800b216:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	da15      	bge.n	800b24e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	211a      	movs	r1, #26
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	4413      	add	r3, r2
 800b22e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	211a      	movs	r1, #26
 800b23e:	fb01 f303 	mul.w	r3, r1, r3
 800b242:	4413      	add	r3, r2
 800b244:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b248:	881a      	ldrh	r2, [r3, #0]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f002 f890 	bl	800d37a <USBH_AllocPipe>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	7819      	ldrb	r1, [r3, #0]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	7858      	ldrb	r0, [r3, #1]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	8952      	ldrh	r2, [r2, #10]
 800b27a:	9202      	str	r2, [sp, #8]
 800b27c:	2203      	movs	r2, #3
 800b27e:	9201      	str	r2, [sp, #4]
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	4623      	mov	r3, r4
 800b284:	4602      	mov	r2, r0
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f002 f848 	bl	800d31c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2200      	movs	r2, #0
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f005 fa5d 	bl	8010754 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b29a:	2300      	movs	r3, #0
 800b29c:	2200      	movs	r2, #0
 800b29e:	210a      	movs	r1, #10
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fc39 	bl	800bb18 <USBH_FindInterface>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	2bff      	cmp	r3, #255	; 0xff
 800b2ae:	d002      	beq.n	800b2b6 <USBH_CDC_InterfaceInit+0x11a>
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d901      	bls.n	800b2ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	e0c2      	b.n	800b440 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	211a      	movs	r1, #26
 800b2c0:	fb01 f303 	mul.w	r3, r1, r3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	b25b      	sxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	da16      	bge.n	800b300 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	211a      	movs	r1, #26
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	4413      	add	r3, r2
 800b2de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	211a      	movs	r1, #26
 800b2ee:	fb01 f303 	mul.w	r3, r1, r3
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b2f8:	881a      	ldrh	r2, [r3, #0]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	835a      	strh	r2, [r3, #26]
 800b2fe:	e015      	b.n	800b32c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	211a      	movs	r1, #26
 800b306:	fb01 f303 	mul.w	r3, r1, r3
 800b30a:	4413      	add	r3, r2
 800b30c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b310:	781a      	ldrb	r2, [r3, #0]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	211a      	movs	r1, #26
 800b31c:	fb01 f303 	mul.w	r3, r1, r3
 800b320:	4413      	add	r3, r2
 800b322:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b326:	881a      	ldrh	r2, [r3, #0]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	211a      	movs	r1, #26
 800b332:	fb01 f303 	mul.w	r3, r1, r3
 800b336:	4413      	add	r3, r2
 800b338:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b25b      	sxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	da16      	bge.n	800b372 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	211a      	movs	r1, #26
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	4413      	add	r3, r2
 800b350:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	211a      	movs	r1, #26
 800b360:	fb01 f303 	mul.w	r3, r1, r3
 800b364:	4413      	add	r3, r2
 800b366:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b36a:	881a      	ldrh	r2, [r3, #0]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	835a      	strh	r2, [r3, #26]
 800b370:	e015      	b.n	800b39e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	211a      	movs	r1, #26
 800b378:	fb01 f303 	mul.w	r3, r1, r3
 800b37c:	4413      	add	r3, r2
 800b37e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	211a      	movs	r1, #26
 800b38e:	fb01 f303 	mul.w	r3, r1, r3
 800b392:	4413      	add	r3, r2
 800b394:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b398:	881a      	ldrh	r2, [r3, #0]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	7b9b      	ldrb	r3, [r3, #14]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 ffe8 	bl	800d37a <USBH_AllocPipe>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	7bdb      	ldrb	r3, [r3, #15]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 ffde 	bl	800d37a <USBH_AllocPipe>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	7b59      	ldrb	r1, [r3, #13]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	7b98      	ldrb	r0, [r3, #14]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	8b12      	ldrh	r2, [r2, #24]
 800b3de:	9202      	str	r2, [sp, #8]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	9201      	str	r2, [sp, #4]
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	4623      	mov	r3, r4
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 ff96 	bl	800d31c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	7b19      	ldrb	r1, [r3, #12]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	7bd8      	ldrb	r0, [r3, #15]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	8b52      	ldrh	r2, [r2, #26]
 800b408:	9202      	str	r2, [sp, #8]
 800b40a:	2202      	movs	r2, #2
 800b40c:	9201      	str	r2, [sp, #4]
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	4623      	mov	r3, r4
 800b412:	4602      	mov	r2, r0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f001 ff81 	bl	800d31c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	7b5b      	ldrb	r3, [r3, #13]
 800b426:	2200      	movs	r2, #0
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f005 f992 	bl	8010754 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	7b1b      	ldrb	r3, [r3, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f005 f98b 	bl	8010754 <USBH_LL_SetToggle>

  return USBH_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}

0800b448 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00e      	beq.n	800b480 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 ff76 	bl	800d35a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 ffa1 	bl	800d3bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	7b1b      	ldrb	r3, [r3, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	7b1b      	ldrb	r3, [r3, #12]
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 ff63 	bl	800d35a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	7b1b      	ldrb	r3, [r3, #12]
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 ff8e 	bl	800d3bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	7b5b      	ldrb	r3, [r3, #13]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00e      	beq.n	800b4cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	7b5b      	ldrb	r3, [r3, #13]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f001 ff50 	bl	800d35a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	7b5b      	ldrb	r3, [r3, #13]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 ff7b 	bl	800d3bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00b      	beq.n	800b4f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f005 f9ef 	bl	80108c4 <free>
    phost->pActiveClass->pData = 0U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3340      	adds	r3, #64	; 0x40
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f8b1 	bl	800b67a <GetLineCoding>
 800b518:	4603      	mov	r3, r0
 800b51a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b528:	2102      	movs	r1, #2
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b52e:	7afb      	ldrb	r3, [r7, #11]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b540:	2301      	movs	r3, #1
 800b542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d877      	bhi.n	800b64c <USBH_CDC_Process+0x114>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <USBH_CDC_Process+0x2c>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b579 	.word	0x0800b579
 800b568:	0800b57f 	.word	0x0800b57f
 800b56c:	0800b5af 	.word	0x0800b5af
 800b570:	0800b623 	.word	0x0800b623
 800b574:	0800b631 	.word	0x0800b631
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]
      break;
 800b57c:	e06d      	b.n	800b65a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f897 	bl	800b6b8 <SetLineCoding>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b59c:	e058      	b.n	800b650 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d055      	beq.n	800b650 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b5ac:	e050      	b.n	800b650 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	3340      	adds	r3, #64	; 0x40
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f860 	bl	800b67a <GetLineCoding>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d126      	bne.n	800b612 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5d6:	791b      	ldrb	r3, [r3, #4]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d13b      	bne.n	800b654 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d133      	bne.n	800b654 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d12b      	bne.n	800b654 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b604:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b606:	429a      	cmp	r2, r3
 800b608:	d124      	bne.n	800b654 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f984 	bl	800b918 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b610:	e020      	b.n	800b654 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b612:	7bbb      	ldrb	r3, [r7, #14]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d01d      	beq.n	800b654 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2204      	movs	r2, #4
 800b61c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b620:	e018      	b.n	800b654 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f867 	bl	800b6f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f8f8 	bl	800b81e <CDC_ProcessReception>
      break;
 800b62e:	e014      	b.n	800b65a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b630:	2100      	movs	r1, #0
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 f94f 	bl	800c8d6 <USBH_ClrFeature>
 800b638:	4603      	mov	r3, r0
 800b63a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b64a:	e005      	b.n	800b658 <USBH_CDC_Process+0x120>

    default:
      break;
 800b64c:	bf00      	nop
 800b64e:	e004      	b.n	800b65a <USBH_CDC_Process+0x122>
      break;
 800b650:	bf00      	nop
 800b652:	e002      	b.n	800b65a <USBH_CDC_Process+0x122>
      break;
 800b654:	bf00      	nop
 800b656:	e000      	b.n	800b65a <USBH_CDC_Process+0x122>
      break;
 800b658:	bf00      	nop

  }

  return status;
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	22a1      	movs	r2, #161	; 0xa1
 800b688:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2221      	movs	r2, #33	; 0x21
 800b68e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2207      	movs	r2, #7
 800b6a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 faf4 	bl	800cc96 <USBH_CtlReq>
 800b6ae:	4603      	mov	r3, r0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2221      	movs	r2, #33	; 0x21
 800b6c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2207      	movs	r2, #7
 800b6de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	2207      	movs	r2, #7
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 fad5 	bl	800cc96 <USBH_CtlReq>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af02      	add	r7, sp, #8
 800b6fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b708:	2300      	movs	r3, #0
 800b70a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b712:	2b01      	cmp	r3, #1
 800b714:	d002      	beq.n	800b71c <CDC_ProcessTransmission+0x26>
 800b716:	2b02      	cmp	r3, #2
 800b718:	d025      	beq.n	800b766 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800b71a:	e07c      	b.n	800b816 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	8b12      	ldrh	r2, [r2, #24]
 800b724:	4293      	cmp	r3, r2
 800b726:	d90c      	bls.n	800b742 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	69d9      	ldr	r1, [r3, #28]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8b1a      	ldrh	r2, [r3, #24]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	7b58      	ldrb	r0, [r3, #13]
 800b734:	2301      	movs	r3, #1
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	4603      	mov	r3, r0
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fdab 	bl	800d296 <USBH_BulkSendData>
 800b740:	e00c      	b.n	800b75c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	7b58      	ldrb	r0, [r3, #13]
 800b750:	2301      	movs	r3, #1
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4603      	mov	r3, r0
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fd9d 	bl	800d296 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b764:	e057      	b.n	800b816 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	7b5b      	ldrb	r3, [r3, #13]
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f004 ffc7 	bl	8010700 <USBH_LL_GetURBState>
 800b772:	4603      	mov	r3, r0
 800b774:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b776:	7afb      	ldrb	r3, [r7, #11]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d136      	bne.n	800b7ea <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	8b12      	ldrh	r2, [r2, #24]
 800b784:	4293      	cmp	r3, r2
 800b786:	d90e      	bls.n	800b7a6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	8b12      	ldrh	r2, [r2, #24]
 800b790:	1a9a      	subs	r2, r3, r2
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	8b12      	ldrh	r2, [r2, #24]
 800b79e:	441a      	add	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	61da      	str	r2, [r3, #28]
 800b7a4:	e002      	b.n	800b7ac <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d004      	beq.n	800b7be <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b7bc:	e006      	b.n	800b7cc <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f892 	bl	800b8f0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f001 ffca 	bl	800d77c <osMessageQueuePut>
      break;
 800b7e8:	e014      	b.n	800b814 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d111      	bne.n	800b814 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2204      	movs	r2, #4
 800b7fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b80c:	2300      	movs	r3, #0
 800b80e:	2200      	movs	r2, #0
 800b810:	f001 ffb4 	bl	800d77c <osMessageQueuePut>
      break;
 800b814:	bf00      	nop
  }
}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b086      	sub	sp, #24
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b830:	2300      	movs	r3, #0
 800b832:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d002      	beq.n	800b844 <CDC_ProcessReception+0x26>
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d00e      	beq.n	800b860 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b842:	e051      	b.n	800b8e8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	6a19      	ldr	r1, [r3, #32]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	8b5a      	ldrh	r2, [r3, #26]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	7b1b      	ldrb	r3, [r3, #12]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f001 fd45 	bl	800d2e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2204      	movs	r2, #4
 800b85a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b85e:	e043      	b.n	800b8e8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	7b1b      	ldrb	r3, [r3, #12]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f004 ff4a 	bl	8010700 <USBH_LL_GetURBState>
 800b86c:	4603      	mov	r3, r0
 800b86e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b870:	7cfb      	ldrb	r3, [r7, #19]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d137      	bne.n	800b8e6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	7b1b      	ldrb	r3, [r3, #12]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f004 fead 	bl	80105dc <USBH_LL_GetLastXferSize>
 800b882:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d016      	beq.n	800b8bc <CDC_ProcessReception+0x9e>
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	8b5b      	ldrh	r3, [r3, #26]
 800b892:	461a      	mov	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4293      	cmp	r3, r2
 800b898:	d910      	bls.n	800b8bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6a1a      	ldr	r2, [r3, #32]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	441a      	add	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2203      	movs	r2, #3
 800b8b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b8ba:	e006      	b.n	800b8ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f81d 	bl	800b904 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2204      	movs	r2, #4
 800b8ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f001 ff4b 	bl	800d77c <osMessageQueuePut>
      break;
 800b8e6:	bf00      	nop
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4613      	mov	r3, r2
 800b938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b940:	2302      	movs	r3, #2
 800b942:	e044      	b.n	800b9ce <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	79fa      	ldrb	r2, [r7, #7]
 800b948:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 f841 	bl	800b9e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b990:	2200      	movs	r2, #0
 800b992:	2104      	movs	r1, #4
 800b994:	2010      	movs	r0, #16
 800b996:	f001 fe6b 	bl	800d670 <osMessageQueueNew>
 800b99a:	4602      	mov	r2, r0
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <USBH_Init+0xac>)
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <USBH_Init+0xb0>)
 800b9a6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b9a8:	4b0b      	ldr	r3, [pc, #44]	; (800b9d8 <USBH_Init+0xac>)
 800b9aa:	2280      	movs	r2, #128	; 0x80
 800b9ac:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <USBH_Init+0xac>)
 800b9b0:	2218      	movs	r2, #24
 800b9b2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b9b4:	4a08      	ldr	r2, [pc, #32]	; (800b9d8 <USBH_Init+0xac>)
 800b9b6:	68f9      	ldr	r1, [r7, #12]
 800b9b8:	4809      	ldr	r0, [pc, #36]	; (800b9e0 <USBH_Init+0xb4>)
 800b9ba:	f001 fdb3 	bl	800d524 <osThreadNew>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f004 fd56 	bl	8010478 <USBH_LL_Init>

  return USBH_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20004f9c 	.word	0x20004f9c
 800b9dc:	08010b24 	.word	0x08010b24
 800b9e0:	0800c64d 	.word	0x0800c64d

0800b9e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e009      	b.n	800ba0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	33e0      	adds	r3, #224	; 0xe0
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3301      	adds	r3, #1
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b0e      	cmp	r3, #14
 800ba0e:	d9f2      	bls.n	800b9f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	e009      	b.n	800ba2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba30:	d3f1      	bcc.n	800ba16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2240      	movs	r2, #64	; 0x40
 800ba56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d016      	beq.n	800bace <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10e      	bne.n	800bac8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bab0:	1c59      	adds	r1, r3, #1
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	33de      	adds	r3, #222	; 0xde
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
 800bac6:	e004      	b.n	800bad2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bac8:	2302      	movs	r3, #2
 800baca:	73fb      	strb	r3, [r7, #15]
 800bacc:	e001      	b.n	800bad2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bace:	2302      	movs	r3, #2
 800bad0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d204      	bcs.n	800bb06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bb04:	e001      	b.n	800bb0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb06:	2302      	movs	r3, #2
 800bb08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	4608      	mov	r0, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	70fb      	strb	r3, [r7, #3]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70bb      	strb	r3, [r7, #2]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bb40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb42:	e025      	b.n	800bb90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	221a      	movs	r2, #26
 800bb48:	fb02 f303 	mul.w	r3, r2, r3
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	3302      	adds	r3, #2
 800bb54:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	795b      	ldrb	r3, [r3, #5]
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d002      	beq.n	800bb66 <USBH_FindInterface+0x4e>
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	2bff      	cmp	r3, #255	; 0xff
 800bb64:	d111      	bne.n	800bb8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bb6a:	78ba      	ldrb	r2, [r7, #2]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d002      	beq.n	800bb76 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb70:	78bb      	ldrb	r3, [r7, #2]
 800bb72:	2bff      	cmp	r3, #255	; 0xff
 800bb74:	d109      	bne.n	800bb8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb7a:	787a      	ldrb	r2, [r7, #1]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d002      	beq.n	800bb86 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb80:	787b      	ldrb	r3, [r7, #1]
 800bb82:	2bff      	cmp	r3, #255	; 0xff
 800bb84:	d101      	bne.n	800bb8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	e006      	b.n	800bb98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d9d6      	bls.n	800bb44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bb96:	23ff      	movs	r3, #255	; 0xff
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f004 fc9f 	bl	80104f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f004 fdb6 	bl	8010726 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af04      	add	r7, sp, #16
 800bbca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d102      	bne.n	800bbe6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b0b      	cmp	r3, #11
 800bbee:	f200 823c 	bhi.w	800c06a <USBH_Process+0x4a6>
 800bbf2:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <USBH_Process+0x34>)
 800bbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf8:	0800bc29 	.word	0x0800bc29
 800bbfc:	0800bc77 	.word	0x0800bc77
 800bc00:	0800bcfb 	.word	0x0800bcfb
 800bc04:	0800bfe9 	.word	0x0800bfe9
 800bc08:	0800c06b 	.word	0x0800c06b
 800bc0c:	0800bdbb 	.word	0x0800bdbb
 800bc10:	0800bf73 	.word	0x0800bf73
 800bc14:	0800be0d 	.word	0x0800be0d
 800bc18:	0800be49 	.word	0x0800be49
 800bc1c:	0800be83 	.word	0x0800be83
 800bc20:	0800becb 	.word	0x0800becb
 800bc24:	0800bfd1 	.word	0x0800bfd1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 821c 	beq.w	800c06e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bc3c:	20c8      	movs	r0, #200	; 0xc8
 800bc3e:	f004 fdbc 	bl	80107ba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f004 fcaf 	bl	80105a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f001 fd84 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bc74:	e1fb      	b.n	800c06e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d107      	bne.n	800bc90 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e025      	b.n	800bcdc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bc96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc9a:	d914      	bls.n	800bcc6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bca2:	3301      	adds	r3, #1
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d903      	bls.n	800bcbe <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	220d      	movs	r2, #13
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	e00e      	b.n	800bcdc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	e00a      	b.n	800bcdc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bccc:	f103 020a 	add.w	r2, r3, #10
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bcd6:	200a      	movs	r0, #10
 800bcd8:	f004 fd6f 	bl	80107ba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f001 fd42 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800bcf8:	e1c0      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd10:	2064      	movs	r0, #100	; 0x64
 800bd12:	f004 fd52 	bl	80107ba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f004 fc20 	bl	801055c <USBH_LL_GetSpeed>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2205      	movs	r2, #5
 800bd2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fb23 	bl	800d37a <USBH_AllocPipe>
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd3c:	2180      	movs	r1, #128	; 0x80
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f001 fb1b 	bl	800d37a <USBH_AllocPipe>
 800bd44:	4603      	mov	r3, r0
 800bd46:	461a      	mov	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7919      	ldrb	r1, [r3, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd60:	b292      	uxth	r2, r2
 800bd62:	9202      	str	r2, [sp, #8]
 800bd64:	2200      	movs	r2, #0
 800bd66:	9201      	str	r2, [sp, #4]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2280      	movs	r2, #128	; 0x80
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 fad4 	bl	800d31c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7959      	ldrb	r1, [r3, #5]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd88:	b292      	uxth	r2, r2
 800bd8a:	9202      	str	r2, [sp, #8]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	9201      	str	r2, [sp, #4]
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	4603      	mov	r3, r0
 800bd94:	2200      	movs	r2, #0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 fac0 	bl	800d31c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f001 fce2 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800bdb8:	e160      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f964 	bl	800c088 <USBH_HandleEnum>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f040 8152 	bne.w	800c072 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d103      	bne.n	800bde8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2208      	movs	r2, #8
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	e002      	b.n	800bdee <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2207      	movs	r2, #7
 800bdec:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2205      	movs	r2, #5
 800bdf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be02:	2300      	movs	r3, #0
 800be04:	2200      	movs	r2, #0
 800be06:	f001 fcb9 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800be0a:	e132      	b.n	800c072 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 812f 	beq.w	800c076 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be1e:	2101      	movs	r1, #1
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2208      	movs	r2, #8
 800be28:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2205      	movs	r2, #5
 800be2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be3e:	2300      	movs	r3, #0
 800be40:	2200      	movs	r2, #0
 800be42:	f001 fc9b 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800be46:	e116      	b.n	800c076 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be4e:	b29b      	uxth	r3, r3
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fcf8 	bl	800c848 <USBH_SetCfg>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2209      	movs	r2, #9
 800be62:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be78:	2300      	movs	r3, #0
 800be7a:	2200      	movs	r2, #0
 800be7c:	f001 fc7e 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800be80:	e0fc      	b.n	800c07c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800be90:	2101      	movs	r1, #1
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fcfb 	bl	800c88e <USBH_SetFeature>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	220a      	movs	r2, #10
 800bea2:	701a      	strb	r2, [r3, #0]
 800bea4:	e002      	b.n	800beac <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	220a      	movs	r2, #10
 800beaa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bec0:	2300      	movs	r3, #0
 800bec2:	2200      	movs	r2, #0
 800bec4:	f001 fc5a 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800bec8:	e0d8      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d03f      	beq.n	800bf54 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]
 800bee0:	e016      	b.n	800bf10 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bee2:	7bfa      	ldrb	r2, [r7, #15]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	32de      	adds	r2, #222	; 0xde
 800bee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beec:	791a      	ldrb	r2, [r3, #4]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d108      	bne.n	800bf0a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bef8:	7bfa      	ldrb	r2, [r7, #15]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32de      	adds	r2, #222	; 0xde
 800befe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bf08:	e005      	b.n	800bf16 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	73fb      	strb	r3, [r7, #15]
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0e5      	beq.n	800bee2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d016      	beq.n	800bf4e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d109      	bne.n	800bf46 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2206      	movs	r2, #6
 800bf36:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf3e:	2103      	movs	r1, #3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	4798      	blx	r3
 800bf44:	e006      	b.n	800bf54 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	220d      	movs	r2, #13
 800bf4a:	701a      	strb	r2, [r3, #0]
 800bf4c:	e002      	b.n	800bf54 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	220d      	movs	r2, #13
 800bf52:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2205      	movs	r2, #5
 800bf58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf68:	2300      	movs	r3, #0
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f001 fc06 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800bf70:	e084      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d017      	beq.n	800bfac <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	4798      	blx	r3
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d103      	bne.n	800bf9c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	220b      	movs	r2, #11
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	e00a      	b.n	800bfb2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d106      	bne.n	800bfb2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	220d      	movs	r2, #13
 800bfa8:	701a      	strb	r2, [r3, #0]
 800bfaa:	e002      	b.n	800bfb2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	220d      	movs	r2, #13
 800bfb0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2205      	movs	r2, #5
 800bfb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f001 fbd7 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800bfce:	e055      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d04f      	beq.n	800c07a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
      }
      break;
 800bfe6:	e048      	b.n	800c07a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff fcf7 	bl	800b9e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d009      	beq.n	800c014 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c024:	2105      	movs	r1, #5
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b01      	cmp	r3, #1
 800c034:	d107      	bne.n	800c046 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff fdb0 	bl	800bba4 <USBH_Start>
 800c044:	e002      	b.n	800c04c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f004 fa52 	bl	80104f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c060:	2300      	movs	r3, #0
 800c062:	2200      	movs	r2, #0
 800c064:	f001 fb8a 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      break;
 800c068:	e008      	b.n	800c07c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c06a:	bf00      	nop
 800c06c:	e006      	b.n	800c07c <USBH_Process+0x4b8>
      break;
 800c06e:	bf00      	nop
 800c070:	e004      	b.n	800c07c <USBH_Process+0x4b8>
      break;
 800c072:	bf00      	nop
 800c074:	e002      	b.n	800c07c <USBH_Process+0x4b8>
    break;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <USBH_Process+0x4b8>
      break;
 800c07a:	bf00      	nop
  }
  return USBH_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop

0800c088 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af04      	add	r7, sp, #16
 800c08e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c090:	2301      	movs	r3, #1
 800c092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c094:	2301      	movs	r3, #1
 800c096:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	785b      	ldrb	r3, [r3, #1]
 800c09c:	2b07      	cmp	r3, #7
 800c09e:	f200 8208 	bhi.w	800c4b2 <USBH_HandleEnum+0x42a>
 800c0a2:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <USBH_HandleEnum+0x20>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c0c9 	.word	0x0800c0c9
 800c0ac:	0800c187 	.word	0x0800c187
 800c0b0:	0800c1f1 	.word	0x0800c1f1
 800c0b4:	0800c27f 	.word	0x0800c27f
 800c0b8:	0800c2e9 	.word	0x0800c2e9
 800c0bc:	0800c359 	.word	0x0800c359
 800c0c0:	0800c3f5 	.word	0x0800c3f5
 800c0c4:	0800c473 	.word	0x0800c473
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c0c8:	2108      	movs	r1, #8
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 faec 	bl	800c6a8 <USBH_Get_DevDesc>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d130      	bne.n	800c13c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7919      	ldrb	r1, [r3, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0fe:	b292      	uxth	r2, r2
 800c100:	9202      	str	r2, [sp, #8]
 800c102:	2200      	movs	r2, #0
 800c104:	9201      	str	r2, [sp, #4]
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4603      	mov	r3, r0
 800c10a:	2280      	movs	r2, #128	; 0x80
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 f905 	bl	800d31c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7959      	ldrb	r1, [r3, #5]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c126:	b292      	uxth	r2, r2
 800c128:	9202      	str	r2, [sp, #8]
 800c12a:	2200      	movs	r2, #0
 800c12c:	9201      	str	r2, [sp, #4]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	4603      	mov	r3, r0
 800c132:	2200      	movs	r2, #0
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 f8f1 	bl	800d31c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c13a:	e1bc      	b.n	800c4b6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	f040 81b9 	bne.w	800c4b6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c14a:	3301      	adds	r3, #1
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d903      	bls.n	800c166 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	220d      	movs	r2, #13
 800c162:	701a      	strb	r2, [r3, #0]
      break;
 800c164:	e1a7      	b.n	800c4b6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	795b      	ldrb	r3, [r3, #5]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 f925 	bl	800d3bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	791b      	ldrb	r3, [r3, #4]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f001 f91f 	bl	800d3bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	701a      	strb	r2, [r3, #0]
      break;
 800c184:	e197      	b.n	800c4b6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c186:	2112      	movs	r1, #18
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa8d 	bl	800c6a8 <USBH_Get_DevDesc>
 800c18e:	4603      	mov	r3, r0
 800c190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d103      	bne.n	800c1a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c19e:	e18c      	b.n	800c4ba <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	f040 8189 	bne.w	800c4ba <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d903      	bls.n	800c1ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	220d      	movs	r2, #13
 800c1c6:	701a      	strb	r2, [r3, #0]
      break;
 800c1c8:	e177      	b.n	800c4ba <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	795b      	ldrb	r3, [r3, #5]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 f8f3 	bl	800d3bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	791b      	ldrb	r3, [r3, #4]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 f8ed 	bl	800d3bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	701a      	strb	r2, [r3, #0]
      break;
 800c1ee:	e164      	b.n	800c4ba <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fb04 	bl	800c800 <USBH_SetAddress>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d132      	bne.n	800c268 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c202:	2002      	movs	r0, #2
 800c204:	f004 fad9 	bl	80107ba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2203      	movs	r2, #3
 800c214:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7919      	ldrb	r1, [r3, #4]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c22a:	b292      	uxth	r2, r2
 800c22c:	9202      	str	r2, [sp, #8]
 800c22e:	2200      	movs	r2, #0
 800c230:	9201      	str	r2, [sp, #4]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4603      	mov	r3, r0
 800c236:	2280      	movs	r2, #128	; 0x80
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 f86f 	bl	800d31c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7959      	ldrb	r1, [r3, #5]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c252:	b292      	uxth	r2, r2
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	2200      	movs	r2, #0
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	4603      	mov	r3, r0
 800c25e:	2200      	movs	r2, #0
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 f85b 	bl	800d31c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c266:	e12a      	b.n	800c4be <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	f040 8127 	bne.w	800c4be <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	220d      	movs	r2, #13
 800c274:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	705a      	strb	r2, [r3, #1]
      break;
 800c27c:	e11f      	b.n	800c4be <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c27e:	2109      	movs	r1, #9
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fa39 	bl	800c6f8 <USBH_Get_CfgDesc>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2204      	movs	r2, #4
 800c294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c296:	e114      	b.n	800c4c2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	f040 8111 	bne.w	800c4c2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d903      	bls.n	800c2c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	220d      	movs	r2, #13
 800c2be:	701a      	strb	r2, [r3, #0]
      break;
 800c2c0:	e0ff      	b.n	800c4c2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	795b      	ldrb	r3, [r3, #5]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 f877 	bl	800d3bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	791b      	ldrb	r3, [r3, #4]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 f871 	bl	800d3bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
      break;
 800c2e6:	e0ec      	b.n	800c4c2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa01 	bl	800c6f8 <USBH_Get_CfgDesc>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d103      	bne.n	800c308 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2205      	movs	r2, #5
 800c304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c306:	e0de      	b.n	800c4c6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	f040 80db 	bne.w	800c4c6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c316:	3301      	adds	r3, #1
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c326:	2b03      	cmp	r3, #3
 800c328:	d903      	bls.n	800c332 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	220d      	movs	r2, #13
 800c32e:	701a      	strb	r2, [r3, #0]
      break;
 800c330:	e0c9      	b.n	800c4c6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	795b      	ldrb	r3, [r3, #5]
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 f83f 	bl	800d3bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	791b      	ldrb	r3, [r3, #4]
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 f839 	bl	800d3bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	701a      	strb	r2, [r3, #0]
      break;
 800c356:	e0b6      	b.n	800c4c6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d036      	beq.n	800c3d0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c36e:	23ff      	movs	r3, #255	; 0xff
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f9e5 	bl	800c740 <USBH_Get_StringDesc>
 800c376:	4603      	mov	r3, r0
 800c378:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d111      	bne.n	800c3a4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2206      	movs	r2, #6
 800c384:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2205      	movs	r2, #5
 800c38a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c39a:	2300      	movs	r3, #0
 800c39c:	2200      	movs	r2, #0
 800c39e:	f001 f9ed 	bl	800d77c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c3a2:	e092      	b.n	800c4ca <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	f040 808f 	bne.w	800c4ca <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2206      	movs	r2, #6
 800c3b0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2205      	movs	r2, #5
 800c3b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f001 f9d7 	bl	800d77c <osMessageQueuePut>
      break;
 800c3ce:	e07c      	b.n	800c4ca <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2206      	movs	r2, #6
 800c3d4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2205      	movs	r2, #5
 800c3da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f001 f9c5 	bl	800d77c <osMessageQueuePut>
      break;
 800c3f2:	e06a      	b.n	800c4ca <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d027      	beq.n	800c44e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c40a:	23ff      	movs	r3, #255	; 0xff
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f997 	bl	800c740 <USBH_Get_StringDesc>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d103      	bne.n	800c424 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2207      	movs	r2, #7
 800c420:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c422:	e054      	b.n	800c4ce <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	2b03      	cmp	r3, #3
 800c428:	d151      	bne.n	800c4ce <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2207      	movs	r2, #7
 800c42e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2205      	movs	r2, #5
 800c434:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c444:	2300      	movs	r3, #0
 800c446:	2200      	movs	r2, #0
 800c448:	f001 f998 	bl	800d77c <osMessageQueuePut>
      break;
 800c44c:	e03f      	b.n	800c4ce <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2207      	movs	r2, #7
 800c452:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2205      	movs	r2, #5
 800c458:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	f001 f986 	bl	800d77c <osMessageQueuePut>
      break;
 800c470:	e02d      	b.n	800c4ce <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d017      	beq.n	800c4ac <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c488:	23ff      	movs	r3, #255	; 0xff
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f958 	bl	800c740 <USBH_Get_StringDesc>
 800c490:	4603      	mov	r3, r0
 800c492:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c49e:	e018      	b.n	800c4d2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d115      	bne.n	800c4d2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4aa:	e012      	b.n	800c4d2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b0:	e00f      	b.n	800c4d2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800c4b2:	bf00      	nop
 800c4b4:	e00e      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4b6:	bf00      	nop
 800c4b8:	e00c      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4ba:	bf00      	nop
 800c4bc:	e00a      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4be:	bf00      	nop
 800c4c0:	e008      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4c2:	bf00      	nop
 800c4c4:	e006      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4c6:	bf00      	nop
 800c4c8:	e004      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4ca:	bf00      	nop
 800c4cc:	e002      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4ce:	bf00      	nop
 800c4d0:	e000      	b.n	800c4d4 <USBH_HandleEnum+0x44c>
      break;
 800c4d2:	bf00      	nop
  }
  return Status;
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop

0800c4e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c4f2:	bf00      	nop
 800c4f4:	370c      	adds	r7, #12
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f804 	bl	800c522 <USBH_HandleSof>
}
 800c51a:	bf00      	nop
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b0b      	cmp	r3, #11
 800c532:	d10a      	bne.n	800c54a <USBH_HandleSof+0x28>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
  }
}
 800c54a:	bf00      	nop
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c576:	2300      	movs	r3, #0
 800c578:	2200      	movs	r2, #0
 800c57a:	f001 f8ff 	bl	800d77c <osMessageQueuePut>
#endif
#endif

  return;
 800c57e:	bf00      	nop
}
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c596:	bf00      	nop
}
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f001 f8cf 	bl	800d77c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f003 ff8c 	bl	8010526 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	791b      	ldrb	r3, [r3, #4]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fed1 	bl	800d3bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	795b      	ldrb	r3, [r3, #5]
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fecb 	bl	800d3bc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c63a:	2300      	movs	r3, #0
 800c63c:	2200      	movs	r2, #0
 800c63e:	f001 f89d 	bl	800d77c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c660:	f04f 33ff 	mov.w	r3, #4294967295
 800c664:	2200      	movs	r2, #0
 800c666:	f001 f8fd 	bl	800d864 <osMessageQueueGet>
 800c66a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1f0      	bne.n	800c654 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff faa6 	bl	800bbc4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c678:	e7ec      	b.n	800c654 <USBH_Process_OS+0x8>

0800c67a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c696:	2300      	movs	r3, #0
 800c698:	2200      	movs	r2, #0
 800c69a:	f001 f86f 	bl	800d77c <osMessageQueuePut>
#endif

  return USBH_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f864 	bl	800c796 <USBH_GetDescriptor>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73fb      	strb	r3, [r7, #15]
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6e4:	78fa      	ldrb	r2, [r7, #3]
 800c6e6:	b292      	uxth	r2, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f000 f918 	bl	800c91e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af02      	add	r7, sp, #8
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	460b      	mov	r3, r1
 800c702:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	331c      	adds	r3, #28
 800c708:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c70a:	887b      	ldrh	r3, [r7, #2]
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f83d 	bl	800c796 <USBH_GetDescriptor>
 800c71c:	4603      	mov	r3, r0
 800c71e:	72fb      	strb	r3, [r7, #11]
 800c720:	7afb      	ldrb	r3, [r7, #11]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d107      	bne.n	800c736 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c72c:	887a      	ldrh	r2, [r7, #2]
 800c72e:	68f9      	ldr	r1, [r7, #12]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 f964 	bl	800c9fe <USBH_ParseCfgDesc>
  }

  return status;
 800c736:	7afb      	ldrb	r3, [r7, #11]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b088      	sub	sp, #32
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	461a      	mov	r2, r3
 800c74c:	460b      	mov	r3, r1
 800c74e:	72fb      	strb	r3, [r7, #11]
 800c750:	4613      	mov	r3, r2
 800c752:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c754:	7afb      	ldrb	r3, [r7, #11]
 800c756:	b29b      	uxth	r3, r3
 800c758:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c75c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c764:	893b      	ldrh	r3, [r7, #8]
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	460b      	mov	r3, r1
 800c76a:	2100      	movs	r1, #0
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 f812 	bl	800c796 <USBH_GetDescriptor>
 800c772:	4603      	mov	r3, r0
 800c774:	75fb      	strb	r3, [r7, #23]
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d107      	bne.n	800c78c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c782:	893a      	ldrh	r2, [r7, #8]
 800c784:	6879      	ldr	r1, [r7, #4]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 fa37 	bl	800cbfa <USBH_ParseStringDesc>
  }

  return status;
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	607b      	str	r3, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	72fb      	strb	r3, [r7, #11]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	789b      	ldrb	r3, [r3, #2]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d11c      	bne.n	800c7ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2206      	movs	r2, #6
 800c7c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	893a      	ldrh	r2, [r7, #8]
 800c7c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c7c8:	893b      	ldrh	r3, [r7, #8]
 800c7ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7d2:	d104      	bne.n	800c7de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f240 4209 	movw	r2, #1033	; 0x409
 800c7da:	829a      	strh	r2, [r3, #20]
 800c7dc:	e002      	b.n	800c7e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8b3a      	ldrh	r2, [r7, #24]
 800c7e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7ea:	8b3b      	ldrh	r3, [r7, #24]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 fa50 	bl	800cc96 <USBH_CtlReq>
 800c7f6:	4603      	mov	r3, r0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	789b      	ldrb	r3, [r3, #2]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d10f      	bne.n	800c834 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2205      	movs	r2, #5
 800c81e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c820:	78fb      	ldrb	r3, [r7, #3]
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fa2c 	bl	800cc96 <USBH_CtlReq>
 800c83e:	4603      	mov	r3, r0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	460b      	mov	r3, r1
 800c852:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	789b      	ldrb	r3, [r3, #2]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10e      	bne.n	800c87a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2209      	movs	r2, #9
 800c866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	887a      	ldrh	r2, [r7, #2]
 800c86c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fa09 	bl	800cc96 <USBH_CtlReq>
 800c884:	4603      	mov	r3, r0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	460b      	mov	r3, r1
 800c898:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	789b      	ldrb	r3, [r3, #2]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d10f      	bne.n	800c8c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2203      	movs	r2, #3
 800c8ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c8ae:	78fb      	ldrb	r3, [r7, #3]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f9e5 	bl	800cc96 <USBH_CtlReq>
 800c8cc:	4603      	mov	r3, r0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	460b      	mov	r3, r1
 800c8e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	789b      	ldrb	r3, [r3, #2]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d10f      	bne.n	800c90a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c90a:	2200      	movs	r2, #0
 800c90c:	2100      	movs	r1, #0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f9c1 	bl	800cc96 <USBH_CtlReq>
 800c914:	4603      	mov	r3, r0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	4613      	mov	r3, r2
 800c92a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	785a      	ldrb	r2, [r3, #1]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	3302      	adds	r3, #2
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	b29a      	uxth	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	3303      	adds	r3, #3
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	021b      	lsls	r3, r3, #8
 800c94e:	b29b      	uxth	r3, r3
 800c950:	4313      	orrs	r3, r2
 800c952:	b29a      	uxth	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	791a      	ldrb	r2, [r3, #4]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	795a      	ldrb	r2, [r3, #5]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	799a      	ldrb	r2, [r3, #6]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	79da      	ldrb	r2, [r3, #7]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	2b08      	cmp	r3, #8
 800c97c:	d939      	bls.n	800c9f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	3308      	adds	r3, #8
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	b29a      	uxth	r2, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	3309      	adds	r3, #9
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	021b      	lsls	r3, r3, #8
 800c990:	b29b      	uxth	r3, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	330a      	adds	r3, #10
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	330b      	adds	r3, #11
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	021b      	lsls	r3, r3, #8
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	330c      	adds	r3, #12
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	330d      	adds	r3, #13
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	021b      	lsls	r3, r3, #8
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	7b9a      	ldrb	r2, [r3, #14]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	7bda      	ldrb	r2, [r3, #15]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	7c1a      	ldrb	r2, [r3, #16]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	7c5a      	ldrb	r2, [r3, #17]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	745a      	strb	r2, [r3, #17]
  }
}
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b08a      	sub	sp, #40	; 0x28
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	60f8      	str	r0, [r7, #12]
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	785a      	ldrb	r2, [r3, #1]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	3302      	adds	r3, #2
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	3303      	adds	r3, #3
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	4313      	orrs	r3, r2
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	791a      	ldrb	r2, [r3, #4]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	795a      	ldrb	r2, [r3, #5]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	799a      	ldrb	r2, [r3, #6]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	79da      	ldrb	r2, [r3, #7]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	7a1a      	ldrb	r2, [r3, #8]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca74:	88fb      	ldrh	r3, [r7, #6]
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	d95f      	bls.n	800cb3a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca7a:	2309      	movs	r3, #9
 800ca7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca82:	e051      	b.n	800cb28 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca84:	f107 0316 	add.w	r3, r7, #22
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca8c:	f000 f8e8 	bl	800cc60 <USBH_GetNextDesc>
 800ca90:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d146      	bne.n	800cb28 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca9e:	221a      	movs	r2, #26
 800caa0:	fb02 f303 	mul.w	r3, r2, r3
 800caa4:	3308      	adds	r3, #8
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	4413      	add	r3, r2
 800caaa:	3302      	adds	r3, #2
 800caac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800caae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cab0:	69f8      	ldr	r0, [r7, #28]
 800cab2:	f000 f846 	bl	800cb42 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cab6:	2300      	movs	r3, #0
 800cab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cac0:	e022      	b.n	800cb08 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cac2:	f107 0316 	add.w	r3, r7, #22
 800cac6:	4619      	mov	r1, r3
 800cac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caca:	f000 f8c9 	bl	800cc60 <USBH_GetNextDesc>
 800cace:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	785b      	ldrb	r3, [r3, #1]
 800cad4:	2b05      	cmp	r3, #5
 800cad6:	d117      	bne.n	800cb08 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cadc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cae0:	3201      	adds	r2, #1
 800cae2:	00d2      	lsls	r2, r2, #3
 800cae4:	211a      	movs	r1, #26
 800cae6:	fb01 f303 	mul.w	r3, r1, r3
 800caea:	4413      	add	r3, r2
 800caec:	3308      	adds	r3, #8
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	3304      	adds	r3, #4
 800caf4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800caf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caf8:	69b8      	ldr	r0, [r7, #24]
 800cafa:	f000 f851 	bl	800cba0 <USBH_ParseEPDesc>
            ep_ix++;
 800cafe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb02:	3301      	adds	r3, #1
 800cb04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	791b      	ldrb	r3, [r3, #4]
 800cb0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d204      	bcs.n	800cb1e <USBH_ParseCfgDesc+0x120>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	885a      	ldrh	r2, [r3, #2]
 800cb18:	8afb      	ldrh	r3, [r7, #22]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d8d1      	bhi.n	800cac2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cb1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb22:	3301      	adds	r3, #1
 800cb24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d804      	bhi.n	800cb3a <USBH_ParseCfgDesc+0x13c>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	885a      	ldrh	r2, [r3, #2]
 800cb34:	8afb      	ldrh	r3, [r7, #22]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d8a4      	bhi.n	800ca84 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cb3a:	bf00      	nop
 800cb3c:	3728      	adds	r7, #40	; 0x28
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781a      	ldrb	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	785a      	ldrb	r2, [r3, #1]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	789a      	ldrb	r2, [r3, #2]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	78da      	ldrb	r2, [r3, #3]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	791a      	ldrb	r2, [r3, #4]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	795a      	ldrb	r2, [r3, #5]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	799a      	ldrb	r2, [r3, #6]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	79da      	ldrb	r2, [r3, #7]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	7a1a      	ldrb	r2, [r3, #8]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	721a      	strb	r2, [r3, #8]
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	785a      	ldrb	r2, [r3, #1]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	789a      	ldrb	r2, [r3, #2]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	78da      	ldrb	r2, [r3, #3]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	3305      	adds	r3, #5
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	799a      	ldrb	r2, [r3, #6]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	719a      	strb	r2, [r3, #6]
}
 800cbee:	bf00      	nop
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b087      	sub	sp, #28
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	60f8      	str	r0, [r7, #12]
 800cc02:	60b9      	str	r1, [r7, #8]
 800cc04:	4613      	mov	r3, r2
 800cc06:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d120      	bne.n	800cc54 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	1e9a      	subs	r2, r3, #2
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	bf28      	it	cs
 800cc1e:	4613      	movcs	r3, r2
 800cc20:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3302      	adds	r3, #2
 800cc26:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	82fb      	strh	r3, [r7, #22]
 800cc2c:	e00b      	b.n	800cc46 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc2e:	8afb      	ldrh	r3, [r7, #22]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc40:	8afb      	ldrh	r3, [r7, #22]
 800cc42:	3302      	adds	r3, #2
 800cc44:	82fb      	strh	r3, [r7, #22]
 800cc46:	8afa      	ldrh	r2, [r7, #22]
 800cc48:	8abb      	ldrh	r3, [r7, #20]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d3ef      	bcc.n	800cc2e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2200      	movs	r2, #0
 800cc52:	701a      	strb	r2, [r3, #0]
  }
}
 800cc54:	bf00      	nop
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	881a      	ldrh	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4413      	add	r3, r2
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4413      	add	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc88:	68fb      	ldr	r3, [r7, #12]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b086      	sub	sp, #24
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	4613      	mov	r3, r2
 800cca2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cca4:	2301      	movs	r3, #1
 800cca6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	789b      	ldrb	r3, [r3, #2]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d002      	beq.n	800ccb6 <USBH_CtlReq+0x20>
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d01d      	beq.n	800ccf0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ccb4:	e043      	b.n	800cd3e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	88fa      	ldrh	r2, [r7, #6]
 800ccc0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2202      	movs	r2, #2
 800cccc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cce6:	2300      	movs	r3, #0
 800cce8:	2200      	movs	r2, #0
 800ccea:	f000 fd47 	bl	800d77c <osMessageQueuePut>
      break;
 800ccee:	e026      	b.n	800cd3e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 f829 	bl	800cd48 <USBH_HandleControl>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <USBH_CtlReq+0x70>
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d106      	bne.n	800cd14 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	761a      	strb	r2, [r3, #24]
 800cd12:	e005      	b.n	800cd20 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d102      	bne.n	800cd20 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2203      	movs	r2, #3
 800cd24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd34:	2300      	movs	r3, #0
 800cd36:	2200      	movs	r2, #0
 800cd38:	f000 fd20 	bl	800d77c <osMessageQueuePut>
      break;
 800cd3c:	bf00      	nop
  }
  return status;
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd50:	2301      	movs	r3, #1
 800cd52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd54:	2300      	movs	r3, #0
 800cd56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7e1b      	ldrb	r3, [r3, #24]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	2b0a      	cmp	r3, #10
 800cd60:	f200 822b 	bhi.w	800d1ba <USBH_HandleControl+0x472>
 800cd64:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <USBH_HandleControl+0x24>)
 800cd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6a:	bf00      	nop
 800cd6c:	0800cd99 	.word	0x0800cd99
 800cd70:	0800cdb3 	.word	0x0800cdb3
 800cd74:	0800ce55 	.word	0x0800ce55
 800cd78:	0800ce7b 	.word	0x0800ce7b
 800cd7c:	0800cf07 	.word	0x0800cf07
 800cd80:	0800cf33 	.word	0x0800cf33
 800cd84:	0800cff5 	.word	0x0800cff5
 800cd88:	0800d017 	.word	0x0800d017
 800cd8c:	0800d0a9 	.word	0x0800d0a9
 800cd90:	0800d0d1 	.word	0x0800d0d1
 800cd94:	0800d163 	.word	0x0800d163
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f103 0110 	add.w	r1, r3, #16
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	795b      	ldrb	r3, [r3, #5]
 800cda2:	461a      	mov	r2, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fa19 	bl	800d1dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2202      	movs	r2, #2
 800cdae:	761a      	strb	r2, [r3, #24]
      break;
 800cdb0:	e20e      	b.n	800d1d0 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	795b      	ldrb	r3, [r3, #5]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f003 fca1 	bl	8010700 <USBH_LL_GetURBState>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d12c      	bne.n	800ce22 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7c1b      	ldrb	r3, [r3, #16]
 800cdcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8adb      	ldrh	r3, [r3, #22]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdda:	7b7b      	ldrb	r3, [r7, #13]
 800cddc:	2b80      	cmp	r3, #128	; 0x80
 800cdde:	d103      	bne.n	800cde8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2203      	movs	r2, #3
 800cde4:	761a      	strb	r2, [r3, #24]
 800cde6:	e00d      	b.n	800ce04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2205      	movs	r2, #5
 800cdec:	761a      	strb	r2, [r3, #24]
 800cdee:	e009      	b.n	800ce04 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cdf0:	7b7b      	ldrb	r3, [r7, #13]
 800cdf2:	2b80      	cmp	r3, #128	; 0x80
 800cdf4:	d103      	bne.n	800cdfe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2209      	movs	r2, #9
 800cdfa:	761a      	strb	r2, [r3, #24]
 800cdfc:	e002      	b.n	800ce04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2207      	movs	r2, #7
 800ce02:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2203      	movs	r2, #3
 800ce08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f000 fcae 	bl	800d77c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce20:	e1cd      	b.n	800d1be <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d003      	beq.n	800ce30 <USBH_HandleControl+0xe8>
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	f040 81c7 	bne.w	800d1be <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	220b      	movs	r2, #11
 800ce34:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2203      	movs	r2, #3
 800ce3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f000 fc95 	bl	800d77c <osMessageQueuePut>
      break;
 800ce52:	e1b4      	b.n	800d1be <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6899      	ldr	r1, [r3, #8]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	899a      	ldrh	r2, [r3, #12]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	791b      	ldrb	r3, [r3, #4]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f9f4 	bl	800d25a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2204      	movs	r2, #4
 800ce76:	761a      	strb	r2, [r3, #24]
      break;
 800ce78:	e1aa      	b.n	800d1d0 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	791b      	ldrb	r3, [r3, #4]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f003 fc3d 	bl	8010700 <USBH_LL_GetURBState>
 800ce86:	4603      	mov	r3, r0
 800ce88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d110      	bne.n	800ceb2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2209      	movs	r2, #9
 800ce94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceaa:	2300      	movs	r3, #0
 800ceac:	2200      	movs	r2, #0
 800ceae:	f000 fc65 	bl	800d77c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	2b05      	cmp	r3, #5
 800ceb6:	d110      	bne.n	800ceda <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2203      	movs	r2, #3
 800cec0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ced0:	2300      	movs	r3, #0
 800ced2:	2200      	movs	r2, #0
 800ced4:	f000 fc52 	bl	800d77c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ced8:	e173      	b.n	800d1c2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b04      	cmp	r3, #4
 800cede:	f040 8170 	bne.w	800d1c2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	220b      	movs	r2, #11
 800cee6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2203      	movs	r2, #3
 800ceec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cefc:	2300      	movs	r3, #0
 800cefe:	2200      	movs	r2, #0
 800cf00:	f000 fc3c 	bl	800d77c <osMessageQueuePut>
      break;
 800cf04:	e15d      	b.n	800d1c2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6899      	ldr	r1, [r3, #8]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	899a      	ldrh	r2, [r3, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7958      	ldrb	r0, [r3, #5]
 800cf12:	2301      	movs	r3, #1
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	4603      	mov	r3, r0
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f979 	bl	800d210 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2206      	movs	r2, #6
 800cf2e:	761a      	strb	r2, [r3, #24]
      break;
 800cf30:	e14e      	b.n	800d1d0 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	795b      	ldrb	r3, [r3, #5]
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f003 fbe1 	bl	8010700 <USBH_LL_GetURBState>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d111      	bne.n	800cf6c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2207      	movs	r2, #7
 800cf4c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2203      	movs	r2, #3
 800cf52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf62:	2300      	movs	r3, #0
 800cf64:	2200      	movs	r2, #0
 800cf66:	f000 fc09 	bl	800d77c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf6a:	e12c      	b.n	800d1c6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800cf6c:	7bbb      	ldrb	r3, [r7, #14]
 800cf6e:	2b05      	cmp	r3, #5
 800cf70:	d113      	bne.n	800cf9a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	220c      	movs	r2, #12
 800cf76:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2203      	movs	r2, #3
 800cf80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf90:	2300      	movs	r3, #0
 800cf92:	2200      	movs	r2, #0
 800cf94:	f000 fbf2 	bl	800d77c <osMessageQueuePut>
      break;
 800cf98:	e115      	b.n	800d1c6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d111      	bne.n	800cfc4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2203      	movs	r2, #3
 800cfaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f000 fbdd 	bl	800d77c <osMessageQueuePut>
      break;
 800cfc2:	e100      	b.n	800d1c6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	f040 80fd 	bne.w	800d1c6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	220b      	movs	r2, #11
 800cfd0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2203      	movs	r2, #3
 800cfda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfea:	2300      	movs	r3, #0
 800cfec:	2200      	movs	r2, #0
 800cfee:	f000 fbc5 	bl	800d77c <osMessageQueuePut>
      break;
 800cff2:	e0e8      	b.n	800d1c6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	791b      	ldrb	r3, [r3, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	2100      	movs	r1, #0
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f92c 	bl	800d25a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d008:	b29a      	uxth	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2208      	movs	r2, #8
 800d012:	761a      	strb	r2, [r3, #24]

      break;
 800d014:	e0dc      	b.n	800d1d0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	791b      	ldrb	r3, [r3, #4]
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f003 fb6f 	bl	8010700 <USBH_LL_GetURBState>
 800d022:	4603      	mov	r3, r0
 800d024:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d113      	bne.n	800d054 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	220d      	movs	r2, #13
 800d030:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2203      	movs	r2, #3
 800d03a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d04a:	2300      	movs	r3, #0
 800d04c:	2200      	movs	r2, #0
 800d04e:	f000 fb95 	bl	800d77c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d052:	e0ba      	b.n	800d1ca <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800d054:	7bbb      	ldrb	r3, [r7, #14]
 800d056:	2b04      	cmp	r3, #4
 800d058:	d111      	bne.n	800d07e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	220b      	movs	r2, #11
 800d05e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2203      	movs	r2, #3
 800d064:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d074:	2300      	movs	r3, #0
 800d076:	2200      	movs	r2, #0
 800d078:	f000 fb80 	bl	800d77c <osMessageQueuePut>
      break;
 800d07c:	e0a5      	b.n	800d1ca <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	2b05      	cmp	r3, #5
 800d082:	f040 80a2 	bne.w	800d1ca <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800d086:	2303      	movs	r3, #3
 800d088:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2203      	movs	r2, #3
 800d08e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f000 fb6b 	bl	800d77c <osMessageQueuePut>
      break;
 800d0a6:	e090      	b.n	800d1ca <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	795a      	ldrb	r2, [r3, #5]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f8aa 	bl	800d210 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	220a      	movs	r2, #10
 800d0cc:	761a      	strb	r2, [r3, #24]
      break;
 800d0ce:	e07f      	b.n	800d1d0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	795b      	ldrb	r3, [r3, #5]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f003 fb12 	bl	8010700 <USBH_LL_GetURBState>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d113      	bne.n	800d10e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	220d      	movs	r2, #13
 800d0ee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d104:	2300      	movs	r3, #0
 800d106:	2200      	movs	r2, #0
 800d108:	f000 fb38 	bl	800d77c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d10c:	e05f      	b.n	800d1ce <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d111      	bne.n	800d138 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2209      	movs	r2, #9
 800d118:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2203      	movs	r2, #3
 800d11e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d12e:	2300      	movs	r3, #0
 800d130:	2200      	movs	r2, #0
 800d132:	f000 fb23 	bl	800d77c <osMessageQueuePut>
      break;
 800d136:	e04a      	b.n	800d1ce <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	2b04      	cmp	r3, #4
 800d13c:	d147      	bne.n	800d1ce <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	220b      	movs	r2, #11
 800d142:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d158:	2300      	movs	r3, #0
 800d15a:	2200      	movs	r2, #0
 800d15c:	f000 fb0e 	bl	800d77c <osMessageQueuePut>
      break;
 800d160:	e035      	b.n	800d1ce <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	7e5b      	ldrb	r3, [r3, #25]
 800d166:	3301      	adds	r3, #1
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	765a      	strb	r2, [r3, #25]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7e5b      	ldrb	r3, [r3, #25]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d806      	bhi.n	800d184 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d182:	e025      	b.n	800d1d0 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d18a:	2106      	movs	r1, #6
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	795b      	ldrb	r3, [r3, #5]
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f90d 	bl	800d3bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	791b      	ldrb	r3, [r3, #4]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 f907 	bl	800d3bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1b8:	e00a      	b.n	800d1d0 <USBH_HandleControl+0x488>

    default:
      break;
 800d1ba:	bf00      	nop
 800d1bc:	e008      	b.n	800d1d0 <USBH_HandleControl+0x488>
      break;
 800d1be:	bf00      	nop
 800d1c0:	e006      	b.n	800d1d0 <USBH_HandleControl+0x488>
      break;
 800d1c2:	bf00      	nop
 800d1c4:	e004      	b.n	800d1d0 <USBH_HandleControl+0x488>
      break;
 800d1c6:	bf00      	nop
 800d1c8:	e002      	b.n	800d1d0 <USBH_HandleControl+0x488>
      break;
 800d1ca:	bf00      	nop
 800d1cc:	e000      	b.n	800d1d0 <USBH_HandleControl+0x488>
      break;
 800d1ce:	bf00      	nop
  }

  return status;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop

0800d1dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b088      	sub	sp, #32
 800d1e0:	af04      	add	r7, sp, #16
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1ea:	79f9      	ldrb	r1, [r7, #7]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9303      	str	r3, [sp, #12]
 800d1f0:	2308      	movs	r3, #8
 800d1f2:	9302      	str	r3, [sp, #8]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	2200      	movs	r2, #0
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f003 fa4c 	bl	801069e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af04      	add	r7, sp, #16
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	4611      	mov	r1, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	460b      	mov	r3, r1
 800d220:	80fb      	strh	r3, [r7, #6]
 800d222:	4613      	mov	r3, r2
 800d224:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d001      	beq.n	800d234 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d234:	7979      	ldrb	r1, [r7, #5]
 800d236:	7e3b      	ldrb	r3, [r7, #24]
 800d238:	9303      	str	r3, [sp, #12]
 800d23a:	88fb      	ldrh	r3, [r7, #6]
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	2301      	movs	r3, #1
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	2300      	movs	r3, #0
 800d248:	2200      	movs	r2, #0
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f003 fa27 	bl	801069e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b088      	sub	sp, #32
 800d25e:	af04      	add	r7, sp, #16
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	4611      	mov	r1, r2
 800d266:	461a      	mov	r2, r3
 800d268:	460b      	mov	r3, r1
 800d26a:	80fb      	strh	r3, [r7, #6]
 800d26c:	4613      	mov	r3, r2
 800d26e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d270:	7979      	ldrb	r1, [r7, #5]
 800d272:	2300      	movs	r3, #0
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	88fb      	ldrh	r3, [r7, #6]
 800d278:	9302      	str	r3, [sp, #8]
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	2301      	movs	r3, #1
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	2300      	movs	r3, #0
 800d284:	2201      	movs	r2, #1
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f003 fa09 	bl	801069e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d28c:	2300      	movs	r3, #0

}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b088      	sub	sp, #32
 800d29a:	af04      	add	r7, sp, #16
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	80fb      	strh	r3, [r7, #6]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d2ba:	7979      	ldrb	r1, [r7, #5]
 800d2bc:	7e3b      	ldrb	r3, [r7, #24]
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	88fb      	ldrh	r3, [r7, #6]
 800d2c2:	9302      	str	r3, [sp, #8]
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f003 f9e4 	bl	801069e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af04      	add	r7, sp, #16
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	80fb      	strh	r3, [r7, #6]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d2f6:	7979      	ldrb	r1, [r7, #5]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9303      	str	r3, [sp, #12]
 800d2fc:	88fb      	ldrh	r3, [r7, #6]
 800d2fe:	9302      	str	r3, [sp, #8]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	2301      	movs	r3, #1
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2302      	movs	r3, #2
 800d30a:	2201      	movs	r2, #1
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f003 f9c6 	bl	801069e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af04      	add	r7, sp, #16
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	4608      	mov	r0, r1
 800d326:	4611      	mov	r1, r2
 800d328:	461a      	mov	r2, r3
 800d32a:	4603      	mov	r3, r0
 800d32c:	70fb      	strb	r3, [r7, #3]
 800d32e:	460b      	mov	r3, r1
 800d330:	70bb      	strb	r3, [r7, #2]
 800d332:	4613      	mov	r3, r2
 800d334:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d336:	7878      	ldrb	r0, [r7, #1]
 800d338:	78ba      	ldrb	r2, [r7, #2]
 800d33a:	78f9      	ldrb	r1, [r7, #3]
 800d33c:	8b3b      	ldrh	r3, [r7, #24]
 800d33e:	9302      	str	r3, [sp, #8]
 800d340:	7d3b      	ldrb	r3, [r7, #20]
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	7c3b      	ldrb	r3, [r7, #16]
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	4603      	mov	r3, r0
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f003 f959 	bl	8010602 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	460b      	mov	r3, r1
 800d364:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d366:	78fb      	ldrb	r3, [r7, #3]
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f003 f978 	bl	8010660 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f836 	bl	800d3f8 <USBH_GetFreePipe>
 800d38c:	4603      	mov	r3, r0
 800d38e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d396:	4293      	cmp	r3, r2
 800d398:	d00a      	beq.n	800d3b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d39a:	78fa      	ldrb	r2, [r7, #3]
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	f003 030f 	and.w	r3, r3, #15
 800d3a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	33e0      	adds	r3, #224	; 0xe0
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	440b      	add	r3, r1
 800d3ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d3b0:	89fb      	ldrh	r3, [r7, #14]
 800d3b2:	b2db      	uxtb	r3, r3
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d3c8:	78fb      	ldrb	r3, [r7, #3]
 800d3ca:	2b0a      	cmp	r3, #10
 800d3cc:	d80d      	bhi.n	800d3ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d3ce:	78fb      	ldrb	r3, [r7, #3]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	33e0      	adds	r3, #224	; 0xe0
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4413      	add	r3, r2
 800d3d8:	685a      	ldr	r2, [r3, #4]
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d3e0:	6879      	ldr	r1, [r7, #4]
 800d3e2:	33e0      	adds	r3, #224	; 0xe0
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	440b      	add	r3, r1
 800d3e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
 800d408:	e00f      	b.n	800d42a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	33e0      	adds	r3, #224	; 0xe0
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4413      	add	r3, r2
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
 800d420:	b29b      	uxth	r3, r3
 800d422:	e007      	b.n	800d434 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	3301      	adds	r3, #1
 800d428:	73fb      	strb	r3, [r7, #15]
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	2b0a      	cmp	r3, #10
 800d42e:	d9ec      	bls.n	800d40a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d430:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d444:	bf00      	nop
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
	...

0800d450 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d456:	f3ef 8305 	mrs	r3, IPSR
 800d45a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d45c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10f      	bne.n	800d482 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d462:	f3ef 8310 	mrs	r3, PRIMASK
 800d466:	607b      	str	r3, [r7, #4]
  return(result);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d105      	bne.n	800d47a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d46e:	f3ef 8311 	mrs	r3, BASEPRI
 800d472:	603b      	str	r3, [r7, #0]
  return(result);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d007      	beq.n	800d48a <osKernelInitialize+0x3a>
 800d47a:	4b0e      	ldr	r3, [pc, #56]	; (800d4b4 <osKernelInitialize+0x64>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d103      	bne.n	800d48a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d482:	f06f 0305 	mvn.w	r3, #5
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	e00c      	b.n	800d4a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d48a:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <osKernelInitialize+0x64>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d105      	bne.n	800d49e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d492:	4b08      	ldr	r3, [pc, #32]	; (800d4b4 <osKernelInitialize+0x64>)
 800d494:	2201      	movs	r2, #1
 800d496:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d498:	2300      	movs	r3, #0
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	e002      	b.n	800d4a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d49e:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	200001ac 	.word	0x200001ac

0800d4b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4be:	f3ef 8305 	mrs	r3, IPSR
 800d4c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10f      	bne.n	800d4ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ce:	607b      	str	r3, [r7, #4]
  return(result);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d105      	bne.n	800d4e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d4da:	603b      	str	r3, [r7, #0]
  return(result);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d007      	beq.n	800d4f2 <osKernelStart+0x3a>
 800d4e2:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <osKernelStart+0x68>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d103      	bne.n	800d4f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d4ea:	f06f 0305 	mvn.w	r3, #5
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	e010      	b.n	800d514 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <osKernelStart+0x68>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d109      	bne.n	800d50e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d4fa:	f7ff ffa1 	bl	800d440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d4fe:	4b08      	ldr	r3, [pc, #32]	; (800d520 <osKernelStart+0x68>)
 800d500:	2202      	movs	r2, #2
 800d502:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d504:	f001 fa38 	bl	800e978 <vTaskStartScheduler>
      stat = osOK;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	e002      	b.n	800d514 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d50e:	f04f 33ff 	mov.w	r3, #4294967295
 800d512:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d514:	68fb      	ldr	r3, [r7, #12]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	200001ac 	.word	0x200001ac

0800d524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d524:	b580      	push	{r7, lr}
 800d526:	b090      	sub	sp, #64	; 0x40
 800d528:	af04      	add	r7, sp, #16
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d530:	2300      	movs	r3, #0
 800d532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d534:	f3ef 8305 	mrs	r3, IPSR
 800d538:	61fb      	str	r3, [r7, #28]
  return(result);
 800d53a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f040 808f 	bne.w	800d660 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d542:	f3ef 8310 	mrs	r3, PRIMASK
 800d546:	61bb      	str	r3, [r7, #24]
  return(result);
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d105      	bne.n	800d55a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d54e:	f3ef 8311 	mrs	r3, BASEPRI
 800d552:	617b      	str	r3, [r7, #20]
  return(result);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <osThreadNew+0x3e>
 800d55a:	4b44      	ldr	r3, [pc, #272]	; (800d66c <osThreadNew+0x148>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d07e      	beq.n	800d660 <osThreadNew+0x13c>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d07b      	beq.n	800d660 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d568:	2380      	movs	r3, #128	; 0x80
 800d56a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d56c:	2318      	movs	r3, #24
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d570:	2300      	movs	r3, #0
 800d572:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d574:	f04f 33ff 	mov.w	r3, #4294967295
 800d578:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d045      	beq.n	800d60c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <osThreadNew+0x6a>
        name = attr->name;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d008      	beq.n	800d5b4 <osThreadNew+0x90>
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	2b38      	cmp	r3, #56	; 0x38
 800d5a6:	d805      	bhi.n	800d5b4 <osThreadNew+0x90>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <osThreadNew+0x94>
        return (NULL);
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e054      	b.n	800d662 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	695b      	ldr	r3, [r3, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d003      	beq.n	800d5c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	089b      	lsrs	r3, r3, #2
 800d5c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00e      	beq.n	800d5ee <osThreadNew+0xca>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	2b5b      	cmp	r3, #91	; 0x5b
 800d5d6:	d90a      	bls.n	800d5ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d006      	beq.n	800d5ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <osThreadNew+0xca>
        mem = 1;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	623b      	str	r3, [r7, #32]
 800d5ec:	e010      	b.n	800d610 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10c      	bne.n	800d610 <osThreadNew+0xec>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d108      	bne.n	800d610 <osThreadNew+0xec>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <osThreadNew+0xec>
          mem = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	623b      	str	r3, [r7, #32]
 800d60a:	e001      	b.n	800d610 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d110      	bne.n	800d638 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d61e:	9202      	str	r2, [sp, #8]
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f001 f805 	bl	800e63c <xTaskCreateStatic>
 800d632:	4603      	mov	r3, r0
 800d634:	613b      	str	r3, [r7, #16]
 800d636:	e013      	b.n	800d660 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d110      	bne.n	800d660 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	b29a      	uxth	r2, r3
 800d642:	f107 0310 	add.w	r3, r7, #16
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f001 f84d 	bl	800e6f0 <xTaskCreate>
 800d656:	4603      	mov	r3, r0
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d001      	beq.n	800d660 <osThreadNew+0x13c>
          hTask = NULL;
 800d65c:	2300      	movs	r3, #0
 800d65e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d660:	693b      	ldr	r3, [r7, #16]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3730      	adds	r7, #48	; 0x30
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	200001ac 	.word	0x200001ac

0800d670 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d670:	b580      	push	{r7, lr}
 800d672:	b08c      	sub	sp, #48	; 0x30
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d67c:	2300      	movs	r3, #0
 800d67e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d680:	f3ef 8305 	mrs	r3, IPSR
 800d684:	61bb      	str	r3, [r7, #24]
  return(result);
 800d686:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d170      	bne.n	800d76e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d68c:	f3ef 8310 	mrs	r3, PRIMASK
 800d690:	617b      	str	r3, [r7, #20]
  return(result);
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d105      	bne.n	800d6a4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d698:	f3ef 8311 	mrs	r3, BASEPRI
 800d69c:	613b      	str	r3, [r7, #16]
  return(result);
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d003      	beq.n	800d6ac <osMessageQueueNew+0x3c>
 800d6a4:	4b34      	ldr	r3, [pc, #208]	; (800d778 <osMessageQueueNew+0x108>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d060      	beq.n	800d76e <osMessageQueueNew+0xfe>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d05d      	beq.n	800d76e <osMessageQueueNew+0xfe>
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d05a      	beq.n	800d76e <osMessageQueueNew+0xfe>
    mem = -1;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d029      	beq.n	800d718 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d012      	beq.n	800d6f2 <osMessageQueueNew+0x82>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	2b4f      	cmp	r3, #79	; 0x4f
 800d6d2:	d90e      	bls.n	800d6f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00a      	beq.n	800d6f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	695a      	ldr	r2, [r3, #20]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	68b9      	ldr	r1, [r7, #8]
 800d6e4:	fb01 f303 	mul.w	r3, r1, r3
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d302      	bcc.n	800d6f2 <osMessageQueueNew+0x82>
        mem = 1;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	623b      	str	r3, [r7, #32]
 800d6f0:	e014      	b.n	800d71c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d110      	bne.n	800d71c <osMessageQueueNew+0xac>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10c      	bne.n	800d71c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d706:	2b00      	cmp	r3, #0
 800d708:	d108      	bne.n	800d71c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d104      	bne.n	800d71c <osMessageQueueNew+0xac>
          mem = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	623b      	str	r3, [r7, #32]
 800d716:	e001      	b.n	800d71c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d10c      	bne.n	800d73c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	691a      	ldr	r2, [r3, #16]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6899      	ldr	r1, [r3, #8]
 800d72a:	2300      	movs	r3, #0
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	460b      	mov	r3, r1
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 fa58 	bl	800dbe8 <xQueueGenericCreateStatic>
 800d738:	6278      	str	r0, [r7, #36]	; 0x24
 800d73a:	e008      	b.n	800d74e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d105      	bne.n	800d74e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d742:	2200      	movs	r2, #0
 800d744:	68b9      	ldr	r1, [r7, #8]
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 fac1 	bl	800dcce <xQueueGenericCreate>
 800d74c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00c      	beq.n	800d76e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d003      	beq.n	800d762 <osMessageQueueNew+0xf2>
        name = attr->name;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	61fb      	str	r3, [r7, #28]
 800d760:	e001      	b.n	800d766 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d766:	69f9      	ldr	r1, [r7, #28]
 800d768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d76a:	f000 ff0b 	bl	800e584 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d770:	4618      	mov	r0, r3
 800d772:	3728      	adds	r7, #40	; 0x28
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	200001ac 	.word	0x200001ac

0800d77c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08a      	sub	sp, #40	; 0x28
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	4613      	mov	r3, r2
 800d78a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d790:	2300      	movs	r3, #0
 800d792:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d794:	f3ef 8305 	mrs	r3, IPSR
 800d798:	61fb      	str	r3, [r7, #28]
  return(result);
 800d79a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10f      	bne.n	800d7c0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ac:	f3ef 8311 	mrs	r3, BASEPRI
 800d7b0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d02c      	beq.n	800d812 <osMessageQueuePut+0x96>
 800d7b8:	4b28      	ldr	r3, [pc, #160]	; (800d85c <osMessageQueuePut+0xe0>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d128      	bne.n	800d812 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d005      	beq.n	800d7d2 <osMessageQueuePut+0x56>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <osMessageQueuePut+0x56>
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d7d2:	f06f 0303 	mvn.w	r3, #3
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7d8:	e039      	b.n	800d84e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d7de:	f107 0210 	add.w	r2, r7, #16
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	6a38      	ldr	r0, [r7, #32]
 800d7e8:	f000 fbce 	bl	800df88 <xQueueGenericSendFromISR>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d003      	beq.n	800d7fa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d7f2:	f06f 0302 	mvn.w	r3, #2
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7f8:	e029      	b.n	800d84e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d026      	beq.n	800d84e <osMessageQueuePut+0xd2>
 800d800:	4b17      	ldr	r3, [pc, #92]	; (800d860 <osMessageQueuePut+0xe4>)
 800d802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d810:	e01d      	b.n	800d84e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <osMessageQueuePut+0xa2>
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d103      	bne.n	800d826 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d81e:	f06f 0303 	mvn.w	r3, #3
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
 800d824:	e014      	b.n	800d850 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d826:	2300      	movs	r3, #0
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	6a38      	ldr	r0, [r7, #32]
 800d82e:	f000 fab1 	bl	800dd94 <xQueueGenericSend>
 800d832:	4603      	mov	r3, r0
 800d834:	2b01      	cmp	r3, #1
 800d836:	d00b      	beq.n	800d850 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d83e:	f06f 0301 	mvn.w	r3, #1
 800d842:	627b      	str	r3, [r7, #36]	; 0x24
 800d844:	e004      	b.n	800d850 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d846:	f06f 0302 	mvn.w	r3, #2
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
 800d84c:	e000      	b.n	800d850 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d84e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d852:	4618      	mov	r0, r3
 800d854:	3728      	adds	r7, #40	; 0x28
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	200001ac 	.word	0x200001ac
 800d860:	e000ed04 	.word	0xe000ed04

0800d864 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d864:	b580      	push	{r7, lr}
 800d866:	b08a      	sub	sp, #40	; 0x28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d876:	2300      	movs	r3, #0
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d87a:	f3ef 8305 	mrs	r3, IPSR
 800d87e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d880:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10f      	bne.n	800d8a6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d886:	f3ef 8310 	mrs	r3, PRIMASK
 800d88a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d105      	bne.n	800d89e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d892:	f3ef 8311 	mrs	r3, BASEPRI
 800d896:	617b      	str	r3, [r7, #20]
  return(result);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d02c      	beq.n	800d8f8 <osMessageQueueGet+0x94>
 800d89e:	4b28      	ldr	r3, [pc, #160]	; (800d940 <osMessageQueueGet+0xdc>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d128      	bne.n	800d8f8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d005      	beq.n	800d8b8 <osMessageQueueGet+0x54>
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d002      	beq.n	800d8b8 <osMessageQueueGet+0x54>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d8b8:	f06f 0303 	mvn.w	r3, #3
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8be:	e038      	b.n	800d932 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d8c4:	f107 0310 	add.w	r3, r7, #16
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	6a38      	ldr	r0, [r7, #32]
 800d8ce:	f000 fccb 	bl	800e268 <xQueueReceiveFromISR>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d003      	beq.n	800d8e0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d8d8:	f06f 0302 	mvn.w	r3, #2
 800d8dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8de:	e028      	b.n	800d932 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d025      	beq.n	800d932 <osMessageQueueGet+0xce>
 800d8e6:	4b17      	ldr	r3, [pc, #92]	; (800d944 <osMessageQueueGet+0xe0>)
 800d8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8f6:	e01c      	b.n	800d932 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d002      	beq.n	800d904 <osMessageQueueGet+0xa0>
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d103      	bne.n	800d90c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d904:	f06f 0303 	mvn.w	r3, #3
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
 800d90a:	e013      	b.n	800d934 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	6a38      	ldr	r0, [r7, #32]
 800d912:	f000 fbcd 	bl	800e0b0 <xQueueReceive>
 800d916:	4603      	mov	r3, r0
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d00b      	beq.n	800d934 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d922:	f06f 0301 	mvn.w	r3, #1
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
 800d928:	e004      	b.n	800d934 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d92a:	f06f 0302 	mvn.w	r3, #2
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
 800d930:	e000      	b.n	800d934 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d932:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d936:	4618      	mov	r0, r3
 800d938:	3728      	adds	r7, #40	; 0x28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	200001ac 	.word	0x200001ac
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	4a07      	ldr	r2, [pc, #28]	; (800d974 <vApplicationGetIdleTaskMemory+0x2c>)
 800d958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	4a06      	ldr	r2, [pc, #24]	; (800d978 <vApplicationGetIdleTaskMemory+0x30>)
 800d95e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2280      	movs	r2, #128	; 0x80
 800d964:	601a      	str	r2, [r3, #0]
}
 800d966:	bf00      	nop
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	200001b0 	.word	0x200001b0
 800d978:	2000020c 	.word	0x2000020c

0800d97c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	4a07      	ldr	r2, [pc, #28]	; (800d9a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d98c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	4a06      	ldr	r2, [pc, #24]	; (800d9ac <vApplicationGetTimerTaskMemory+0x30>)
 800d992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d99a:	601a      	str	r2, [r3, #0]
}
 800d99c:	bf00      	nop
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	2000040c 	.word	0x2000040c
 800d9ac:	20000468 	.word	0x20000468

0800d9b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f103 0208 	add.w	r2, r3, #8
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f103 0208 	add.w	r2, r3, #8
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f103 0208 	add.w	r2, r3, #8
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da0a:	b480      	push	{r7}
 800da0c:	b085      	sub	sp, #20
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	689a      	ldr	r2, [r3, #8]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	683a      	ldr	r2, [r7, #0]
 800da2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d103      	bne.n	800da72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	e00c      	b.n	800da8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3308      	adds	r3, #8
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	e002      	b.n	800da80 <vListInsert+0x2e>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d2f6      	bcs.n	800da7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	601a      	str	r2, [r3, #0]
}
 800dab8:	bf00      	nop
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	6892      	ldr	r2, [r2, #8]
 800dada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6852      	ldr	r2, [r2, #4]
 800dae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	429a      	cmp	r2, r3
 800daee:	d103      	bne.n	800daf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	1e5a      	subs	r2, r3, #1
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d109      	bne.n	800db40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	60bb      	str	r3, [r7, #8]
 800db3e:	e7fe      	b.n	800db3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800db40:	f002 f89c 	bl	800fc7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4c:	68f9      	ldr	r1, [r7, #12]
 800db4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800db50:	fb01 f303 	mul.w	r3, r1, r3
 800db54:	441a      	add	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db70:	3b01      	subs	r3, #1
 800db72:	68f9      	ldr	r1, [r7, #12]
 800db74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800db76:	fb01 f303 	mul.w	r3, r1, r3
 800db7a:	441a      	add	r2, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	22ff      	movs	r2, #255	; 0xff
 800db84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	22ff      	movs	r2, #255	; 0xff
 800db8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d114      	bne.n	800dbc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d01a      	beq.n	800dbd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	3310      	adds	r3, #16
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 f968 	bl	800ee78 <xTaskRemoveFromEventList>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d012      	beq.n	800dbd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dbae:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <xQueueGenericReset+0xcc>)
 800dbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	e009      	b.n	800dbd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3310      	adds	r3, #16
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fef3 	bl	800d9b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3324      	adds	r3, #36	; 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff feee 	bl	800d9b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dbd4:	f002 f880 	bl	800fcd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dbd8:	2301      	movs	r3, #1
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	e000ed04 	.word	0xe000ed04

0800dbe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08e      	sub	sp, #56	; 0x38
 800dbec:	af02      	add	r7, sp, #8
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <xQueueGenericCreateStatic+0x28>
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc0e:	e7fe      	b.n	800dc0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d109      	bne.n	800dc2a <xQueueGenericCreateStatic+0x42>
 800dc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	627b      	str	r3, [r7, #36]	; 0x24
 800dc28:	e7fe      	b.n	800dc28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <xQueueGenericCreateStatic+0x4e>
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <xQueueGenericCreateStatic+0x52>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <xQueueGenericCreateStatic+0x54>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d109      	bne.n	800dc54 <xQueueGenericCreateStatic+0x6c>
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	623b      	str	r3, [r7, #32]
 800dc52:	e7fe      	b.n	800dc52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d102      	bne.n	800dc60 <xQueueGenericCreateStatic+0x78>
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d101      	bne.n	800dc64 <xQueueGenericCreateStatic+0x7c>
 800dc60:	2301      	movs	r3, #1
 800dc62:	e000      	b.n	800dc66 <xQueueGenericCreateStatic+0x7e>
 800dc64:	2300      	movs	r3, #0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d109      	bne.n	800dc7e <xQueueGenericCreateStatic+0x96>
 800dc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	61fb      	str	r3, [r7, #28]
 800dc7c:	e7fe      	b.n	800dc7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dc7e:	2350      	movs	r3, #80	; 0x50
 800dc80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b50      	cmp	r3, #80	; 0x50
 800dc86:	d009      	beq.n	800dc9c <xQueueGenericCreateStatic+0xb4>
 800dc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	61bb      	str	r3, [r7, #24]
 800dc9a:	e7fe      	b.n	800dc9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dc9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00d      	beq.n	800dcc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dcb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 f844 	bl	800dd4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3730      	adds	r7, #48	; 0x30
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b08a      	sub	sp, #40	; 0x28
 800dcd2:	af02      	add	r7, sp, #8
 800dcd4:	60f8      	str	r0, [r7, #12]
 800dcd6:	60b9      	str	r1, [r7, #8]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d109      	bne.n	800dcf6 <xQueueGenericCreate+0x28>
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	613b      	str	r3, [r7, #16]
 800dcf4:	e7fe      	b.n	800dcf4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d102      	bne.n	800dd02 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	e004      	b.n	800dd0c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	fb02 f303 	mul.w	r3, r2, r3
 800dd0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	3350      	adds	r3, #80	; 0x50
 800dd10:	4618      	mov	r0, r3
 800dd12:	f002 f8cd 	bl	800feb0 <pvPortMalloc>
 800dd16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d011      	beq.n	800dd42 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	3350      	adds	r3, #80	; 0x50
 800dd26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd30:	79fa      	ldrb	r2, [r7, #7]
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	4613      	mov	r3, r2
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	68b9      	ldr	r1, [r7, #8]
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f000 f805 	bl	800dd4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd42:	69bb      	ldr	r3, [r7, #24]
	}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3720      	adds	r7, #32
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d103      	bne.n	800dd68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	601a      	str	r2, [r3, #0]
 800dd66:	e002      	b.n	800dd6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd7a:	2101      	movs	r1, #1
 800dd7c:	69b8      	ldr	r0, [r7, #24]
 800dd7e:	f7ff fecb 	bl	800db18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	78fa      	ldrb	r2, [r7, #3]
 800dd86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dd8a:	bf00      	nop
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
	...

0800dd94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08e      	sub	sp, #56	; 0x38
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
 800dda0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dda2:	2300      	movs	r3, #0
 800dda4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d109      	bne.n	800ddc4 <xQueueGenericSend+0x30>
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddc2:	e7fe      	b.n	800ddc2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d103      	bne.n	800ddd2 <xQueueGenericSend+0x3e>
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <xQueueGenericSend+0x42>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e000      	b.n	800ddd8 <xQueueGenericSend+0x44>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d109      	bne.n	800ddf0 <xQueueGenericSend+0x5c>
 800dddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	627b      	str	r3, [r7, #36]	; 0x24
 800ddee:	e7fe      	b.n	800ddee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d103      	bne.n	800ddfe <xQueueGenericSend+0x6a>
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d101      	bne.n	800de02 <xQueueGenericSend+0x6e>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e000      	b.n	800de04 <xQueueGenericSend+0x70>
 800de02:	2300      	movs	r3, #0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d109      	bne.n	800de1c <xQueueGenericSend+0x88>
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	623b      	str	r3, [r7, #32]
 800de1a:	e7fe      	b.n	800de1a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de1c:	f001 f9e2 	bl	800f1e4 <xTaskGetSchedulerState>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <xQueueGenericSend+0x98>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <xQueueGenericSend+0x9c>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e000      	b.n	800de32 <xQueueGenericSend+0x9e>
 800de30:	2300      	movs	r3, #0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d109      	bne.n	800de4a <xQueueGenericSend+0xb6>
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	61fb      	str	r3, [r7, #28]
 800de48:	e7fe      	b.n	800de48 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de4a:	f001 ff17 	bl	800fc7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de56:	429a      	cmp	r2, r3
 800de58:	d302      	bcc.n	800de60 <xQueueGenericSend+0xcc>
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d129      	bne.n	800deb4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de66:	f000 fa7c 	bl	800e362 <prvCopyDataToQueue>
 800de6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d010      	beq.n	800de96 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	3324      	adds	r3, #36	; 0x24
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fffd 	bl	800ee78 <xTaskRemoveFromEventList>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d013      	beq.n	800deac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800de84:	4b3f      	ldr	r3, [pc, #252]	; (800df84 <xQueueGenericSend+0x1f0>)
 800de86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	e00a      	b.n	800deac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d007      	beq.n	800deac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800de9c:	4b39      	ldr	r3, [pc, #228]	; (800df84 <xQueueGenericSend+0x1f0>)
 800de9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea2:	601a      	str	r2, [r3, #0]
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800deac:	f001 ff14 	bl	800fcd8 <vPortExitCritical>
				return pdPASS;
 800deb0:	2301      	movs	r3, #1
 800deb2:	e063      	b.n	800df7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d103      	bne.n	800dec2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deba:	f001 ff0d 	bl	800fcd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	e05c      	b.n	800df7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dec8:	f107 0314 	add.w	r3, r7, #20
 800decc:	4618      	mov	r0, r3
 800dece:	f001 f835 	bl	800ef3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ded2:	2301      	movs	r3, #1
 800ded4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ded6:	f001 feff 	bl	800fcd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800deda:	f000 fdb1 	bl	800ea40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dede:	f001 fecd 	bl	800fc7c <vPortEnterCritical>
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dee8:	b25b      	sxtb	r3, r3
 800deea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deee:	d103      	bne.n	800def8 <xQueueGenericSend+0x164>
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800defe:	b25b      	sxtb	r3, r3
 800df00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df04:	d103      	bne.n	800df0e <xQueueGenericSend+0x17a>
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df0e:	f001 fee3 	bl	800fcd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df12:	1d3a      	adds	r2, r7, #4
 800df14:	f107 0314 	add.w	r3, r7, #20
 800df18:	4611      	mov	r1, r2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f001 f824 	bl	800ef68 <xTaskCheckForTimeOut>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d124      	bne.n	800df70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df28:	f000 fb13 	bl	800e552 <prvIsQueueFull>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d018      	beq.n	800df64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	3310      	adds	r3, #16
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 ff4e 	bl	800eddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df42:	f000 fa9e 	bl	800e482 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df46:	f000 fd89 	bl	800ea5c <xTaskResumeAll>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f47f af7c 	bne.w	800de4a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800df52:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <xQueueGenericSend+0x1f0>)
 800df54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	e772      	b.n	800de4a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df66:	f000 fa8c 	bl	800e482 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df6a:	f000 fd77 	bl	800ea5c <xTaskResumeAll>
 800df6e:	e76c      	b.n	800de4a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df72:	f000 fa86 	bl	800e482 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df76:	f000 fd71 	bl	800ea5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3738      	adds	r7, #56	; 0x38
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	e000ed04 	.word	0xe000ed04

0800df88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08e      	sub	sp, #56	; 0x38
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d109      	bne.n	800dfb4 <xQueueGenericSendFromISR+0x2c>
 800dfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
 800dfb2:	e7fe      	b.n	800dfb2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d103      	bne.n	800dfc2 <xQueueGenericSendFromISR+0x3a>
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d101      	bne.n	800dfc6 <xQueueGenericSendFromISR+0x3e>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e000      	b.n	800dfc8 <xQueueGenericSendFromISR+0x40>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d109      	bne.n	800dfe0 <xQueueGenericSendFromISR+0x58>
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	623b      	str	r3, [r7, #32]
 800dfde:	e7fe      	b.n	800dfde <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d103      	bne.n	800dfee <xQueueGenericSendFromISR+0x66>
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d101      	bne.n	800dff2 <xQueueGenericSendFromISR+0x6a>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <xQueueGenericSendFromISR+0x6c>
 800dff2:	2300      	movs	r3, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d109      	bne.n	800e00c <xQueueGenericSendFromISR+0x84>
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	e7fe      	b.n	800e00a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e00c:	f001 ff12 	bl	800fe34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e010:	f3ef 8211 	mrs	r2, BASEPRI
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	61ba      	str	r2, [r7, #24]
 800e026:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e028:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e02a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e034:	429a      	cmp	r2, r3
 800e036:	d302      	bcc.n	800e03e <xQueueGenericSendFromISR+0xb6>
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d12c      	bne.n	800e098 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	68b9      	ldr	r1, [r7, #8]
 800e04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e04e:	f000 f988 	bl	800e362 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e052:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05a:	d112      	bne.n	800e082 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	2b00      	cmp	r3, #0
 800e062:	d016      	beq.n	800e092 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	3324      	adds	r3, #36	; 0x24
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 ff05 	bl	800ee78 <xTaskRemoveFromEventList>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00e      	beq.n	800e092 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00b      	beq.n	800e092 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	e007      	b.n	800e092 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e086:	3301      	adds	r3, #1
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	b25a      	sxtb	r2, r3
 800e08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e092:	2301      	movs	r3, #1
 800e094:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e096:	e001      	b.n	800e09c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	637b      	str	r3, [r7, #52]	; 0x34
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3738      	adds	r7, #56	; 0x38
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08c      	sub	sp, #48	; 0x30
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d109      	bne.n	800e0de <xQueueReceive+0x2e>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	623b      	str	r3, [r7, #32]
 800e0dc:	e7fe      	b.n	800e0dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d103      	bne.n	800e0ec <xQueueReceive+0x3c>
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <xQueueReceive+0x40>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e000      	b.n	800e0f2 <xQueueReceive+0x42>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d109      	bne.n	800e10a <xQueueReceive+0x5a>
 800e0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	e7fe      	b.n	800e108 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e10a:	f001 f86b 	bl	800f1e4 <xTaskGetSchedulerState>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <xQueueReceive+0x6a>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d101      	bne.n	800e11e <xQueueReceive+0x6e>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e000      	b.n	800e120 <xQueueReceive+0x70>
 800e11e:	2300      	movs	r3, #0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d109      	bne.n	800e138 <xQueueReceive+0x88>
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	61bb      	str	r3, [r7, #24]
 800e136:	e7fe      	b.n	800e136 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e138:	f001 fda0 	bl	800fc7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e140:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01f      	beq.n	800e188 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e148:	68b9      	ldr	r1, [r7, #8]
 800e14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e14c:	f000 f973 	bl	800e436 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	1e5a      	subs	r2, r3, #1
 800e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e156:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00f      	beq.n	800e180 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	3310      	adds	r3, #16
 800e164:	4618      	mov	r0, r3
 800e166:	f000 fe87 	bl	800ee78 <xTaskRemoveFromEventList>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d007      	beq.n	800e180 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e170:	4b3c      	ldr	r3, [pc, #240]	; (800e264 <xQueueReceive+0x1b4>)
 800e172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e180:	f001 fdaa 	bl	800fcd8 <vPortExitCritical>
				return pdPASS;
 800e184:	2301      	movs	r3, #1
 800e186:	e069      	b.n	800e25c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d103      	bne.n	800e196 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e18e:	f001 fda3 	bl	800fcd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e192:	2300      	movs	r3, #0
 800e194:	e062      	b.n	800e25c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d106      	bne.n	800e1aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e19c:	f107 0310 	add.w	r3, r7, #16
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f000 fecb 	bl	800ef3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1aa:	f001 fd95 	bl	800fcd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1ae:	f000 fc47 	bl	800ea40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1b2:	f001 fd63 	bl	800fc7c <vPortEnterCritical>
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1bc:	b25b      	sxtb	r3, r3
 800e1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c2:	d103      	bne.n	800e1cc <xQueueReceive+0x11c>
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1d2:	b25b      	sxtb	r3, r3
 800e1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d8:	d103      	bne.n	800e1e2 <xQueueReceive+0x132>
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1e2:	f001 fd79 	bl	800fcd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1e6:	1d3a      	adds	r2, r7, #4
 800e1e8:	f107 0310 	add.w	r3, r7, #16
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 feba 	bl	800ef68 <xTaskCheckForTimeOut>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d123      	bne.n	800e242 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1fc:	f000 f993 	bl	800e526 <prvIsQueueEmpty>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d017      	beq.n	800e236 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	3324      	adds	r3, #36	; 0x24
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	4611      	mov	r1, r2
 800e20e:	4618      	mov	r0, r3
 800e210:	f000 fde4 	bl	800eddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e216:	f000 f934 	bl	800e482 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e21a:	f000 fc1f 	bl	800ea5c <xTaskResumeAll>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d189      	bne.n	800e138 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e224:	4b0f      	ldr	r3, [pc, #60]	; (800e264 <xQueueReceive+0x1b4>)
 800e226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22a:	601a      	str	r2, [r3, #0]
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	e780      	b.n	800e138 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e238:	f000 f923 	bl	800e482 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e23c:	f000 fc0e 	bl	800ea5c <xTaskResumeAll>
 800e240:	e77a      	b.n	800e138 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e244:	f000 f91d 	bl	800e482 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e248:	f000 fc08 	bl	800ea5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e24e:	f000 f96a 	bl	800e526 <prvIsQueueEmpty>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	f43f af6f 	beq.w	800e138 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e25a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3730      	adds	r7, #48	; 0x30
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	e000ed04 	.word	0xe000ed04

0800e268 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08e      	sub	sp, #56	; 0x38
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d109      	bne.n	800e292 <xQueueReceiveFromISR+0x2a>
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	623b      	str	r3, [r7, #32]
 800e290:	e7fe      	b.n	800e290 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <xQueueReceiveFromISR+0x38>
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <xQueueReceiveFromISR+0x3c>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e000      	b.n	800e2a6 <xQueueReceiveFromISR+0x3e>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d109      	bne.n	800e2be <xQueueReceiveFromISR+0x56>
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	61fb      	str	r3, [r7, #28]
 800e2bc:	e7fe      	b.n	800e2bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2be:	f001 fdb9 	bl	800fe34 <vPortValidateInterruptPriority>
	__asm volatile
 800e2c2:	f3ef 8211 	mrs	r2, BASEPRI
 800e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	61ba      	str	r2, [r7, #24]
 800e2d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e2da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d02f      	beq.n	800e34a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2f8:	f000 f89d 	bl	800e436 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	1e5a      	subs	r2, r3, #1
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d112      	bne.n	800e334 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d016      	beq.n	800e344 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	3310      	adds	r3, #16
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 fdac 	bl	800ee78 <xTaskRemoveFromEventList>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00e      	beq.n	800e344 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	e007      	b.n	800e344 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e338:	3301      	adds	r3, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	b25a      	sxtb	r2, r3
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e344:	2301      	movs	r3, #1
 800e346:	637b      	str	r3, [r7, #52]	; 0x34
 800e348:	e001      	b.n	800e34e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	637b      	str	r3, [r7, #52]	; 0x34
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3738      	adds	r7, #56	; 0x38
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b086      	sub	sp, #24
 800e366:	af00      	add	r7, sp, #0
 800e368:	60f8      	str	r0, [r7, #12]
 800e36a:	60b9      	str	r1, [r7, #8]
 800e36c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e36e:	2300      	movs	r3, #0
 800e370:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e376:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10d      	bne.n	800e39c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d14d      	bne.n	800e424 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 ff47 	bl	800f220 <xTaskPriorityDisinherit>
 800e392:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	609a      	str	r2, [r3, #8]
 800e39a:	e043      	b.n	800e424 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d119      	bne.n	800e3d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6858      	ldr	r0, [r3, #4]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	68b9      	ldr	r1, [r7, #8]
 800e3ae:	f002 fa91 	bl	80108d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ba:	441a      	add	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d32b      	bcc.n	800e424 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	605a      	str	r2, [r3, #4]
 800e3d4:	e026      	b.n	800e424 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68d8      	ldr	r0, [r3, #12]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3de:	461a      	mov	r2, r3
 800e3e0:	68b9      	ldr	r1, [r7, #8]
 800e3e2:	f002 fa77 	bl	80108d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68da      	ldr	r2, [r3, #12]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ee:	425b      	negs	r3, r3
 800e3f0:	441a      	add	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	68da      	ldr	r2, [r3, #12]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d207      	bcs.n	800e412 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	689a      	ldr	r2, [r3, #8]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	425b      	negs	r3, r3
 800e40c:	441a      	add	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d105      	bne.n	800e424 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	3b01      	subs	r3, #1
 800e422:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	1c5a      	adds	r2, r3, #1
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e42c:	697b      	ldr	r3, [r7, #20]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b082      	sub	sp, #8
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e444:	2b00      	cmp	r3, #0
 800e446:	d018      	beq.n	800e47a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	68da      	ldr	r2, [r3, #12]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e450:	441a      	add	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d303      	bcc.n	800e46a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68d9      	ldr	r1, [r3, #12]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e472:	461a      	mov	r2, r3
 800e474:	6838      	ldr	r0, [r7, #0]
 800e476:	f002 fa2d 	bl	80108d4 <memcpy>
	}
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e48a:	f001 fbf7 	bl	800fc7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e494:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e496:	e011      	b.n	800e4bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d012      	beq.n	800e4c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3324      	adds	r3, #36	; 0x24
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fce7 	bl	800ee78 <xTaskRemoveFromEventList>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e4b0:	f000 fdba 	bl	800f028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	dce9      	bgt.n	800e498 <prvUnlockQueue+0x16>
 800e4c4:	e000      	b.n	800e4c8 <prvUnlockQueue+0x46>
					break;
 800e4c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	22ff      	movs	r2, #255	; 0xff
 800e4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e4d0:	f001 fc02 	bl	800fcd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e4d4:	f001 fbd2 	bl	800fc7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4e0:	e011      	b.n	800e506 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d012      	beq.n	800e510 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3310      	adds	r3, #16
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fcc2 	bl	800ee78 <xTaskRemoveFromEventList>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e4fa:	f000 fd95 	bl	800f028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e4fe:	7bbb      	ldrb	r3, [r7, #14]
 800e500:	3b01      	subs	r3, #1
 800e502:	b2db      	uxtb	r3, r3
 800e504:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	dce9      	bgt.n	800e4e2 <prvUnlockQueue+0x60>
 800e50e:	e000      	b.n	800e512 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e510:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e51a:	f001 fbdd 	bl	800fcd8 <vPortExitCritical>
}
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b084      	sub	sp, #16
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e52e:	f001 fba5 	bl	800fc7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e53a:	2301      	movs	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]
 800e53e:	e001      	b.n	800e544 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e540:	2300      	movs	r3, #0
 800e542:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e544:	f001 fbc8 	bl	800fcd8 <vPortExitCritical>

	return xReturn;
 800e548:	68fb      	ldr	r3, [r7, #12]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e55a:	f001 fb8f 	bl	800fc7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e566:	429a      	cmp	r2, r3
 800e568:	d102      	bne.n	800e570 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e56a:	2301      	movs	r3, #1
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	e001      	b.n	800e574 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e570:	2300      	movs	r3, #0
 800e572:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e574:	f001 fbb0 	bl	800fcd8 <vPortExitCritical>

	return xReturn;
 800e578:	68fb      	ldr	r3, [r7, #12]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
	...

0800e584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e58e:	2300      	movs	r3, #0
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	e014      	b.n	800e5be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e594:	4a0e      	ldr	r2, [pc, #56]	; (800e5d0 <vQueueAddToRegistry+0x4c>)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10b      	bne.n	800e5b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e5a0:	490b      	ldr	r1, [pc, #44]	; (800e5d0 <vQueueAddToRegistry+0x4c>)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	683a      	ldr	r2, [r7, #0]
 800e5a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e5aa:	4a09      	ldr	r2, [pc, #36]	; (800e5d0 <vQueueAddToRegistry+0x4c>)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	4413      	add	r3, r2
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e5b6:	e005      	b.n	800e5c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	60fb      	str	r3, [r7, #12]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b07      	cmp	r3, #7
 800e5c2:	d9e7      	bls.n	800e594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e5c4:	bf00      	nop
 800e5c6:	3714      	adds	r7, #20
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	20004fc0 	.word	0x20004fc0

0800e5d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e5e4:	f001 fb4a 	bl	800fc7c <vPortEnterCritical>
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5ee:	b25b      	sxtb	r3, r3
 800e5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f4:	d103      	bne.n	800e5fe <vQueueWaitForMessageRestricted+0x2a>
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e604:	b25b      	sxtb	r3, r3
 800e606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e60a:	d103      	bne.n	800e614 <vQueueWaitForMessageRestricted+0x40>
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e614:	f001 fb60 	bl	800fcd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	3324      	adds	r3, #36	; 0x24
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fbfb 	bl	800ee24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e62e:	6978      	ldr	r0, [r7, #20]
 800e630:	f7ff ff27 	bl	800e482 <prvUnlockQueue>
	}
 800e634:	bf00      	nop
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08e      	sub	sp, #56	; 0x38
 800e640:	af04      	add	r7, sp, #16
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d109      	bne.n	800e664 <xTaskCreateStatic+0x28>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	623b      	str	r3, [r7, #32]
 800e662:	e7fe      	b.n	800e662 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	2b00      	cmp	r3, #0
 800e668:	d109      	bne.n	800e67e <xTaskCreateStatic+0x42>
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	e7fe      	b.n	800e67c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e67e:	235c      	movs	r3, #92	; 0x5c
 800e680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	2b5c      	cmp	r3, #92	; 0x5c
 800e686:	d009      	beq.n	800e69c <xTaskCreateStatic+0x60>
 800e688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68c:	f383 8811 	msr	BASEPRI, r3
 800e690:	f3bf 8f6f 	isb	sy
 800e694:	f3bf 8f4f 	dsb	sy
 800e698:	61bb      	str	r3, [r7, #24]
 800e69a:	e7fe      	b.n	800e69a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e69c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d01e      	beq.n	800e6e2 <xTaskCreateStatic+0xa6>
 800e6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d01b      	beq.n	800e6e2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e6bc:	2300      	movs	r3, #0
 800e6be:	9303      	str	r3, [sp, #12]
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	9302      	str	r3, [sp, #8]
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	9301      	str	r3, [sp, #4]
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	68b9      	ldr	r1, [r7, #8]
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f000 f850 	bl	800e77a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6dc:	f000 f8dc 	bl	800e898 <prvAddNewTaskToReadyList>
 800e6e0:	e001      	b.n	800e6e6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e6e6:	697b      	ldr	r3, [r7, #20]
	}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3728      	adds	r7, #40	; 0x28
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b08c      	sub	sp, #48	; 0x30
 800e6f4:	af04      	add	r7, sp, #16
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	603b      	str	r3, [r7, #0]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e700:	88fb      	ldrh	r3, [r7, #6]
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4618      	mov	r0, r3
 800e706:	f001 fbd3 	bl	800feb0 <pvPortMalloc>
 800e70a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00e      	beq.n	800e730 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e712:	205c      	movs	r0, #92	; 0x5c
 800e714:	f001 fbcc 	bl	800feb0 <pvPortMalloc>
 800e718:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d003      	beq.n	800e728 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	631a      	str	r2, [r3, #48]	; 0x30
 800e726:	e005      	b.n	800e734 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e728:	6978      	ldr	r0, [r7, #20]
 800e72a:	f001 fc83 	bl	8010034 <vPortFree>
 800e72e:	e001      	b.n	800e734 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e730:	2300      	movs	r3, #0
 800e732:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d017      	beq.n	800e76a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e742:	88fa      	ldrh	r2, [r7, #6]
 800e744:	2300      	movs	r3, #0
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	9302      	str	r3, [sp, #8]
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	9301      	str	r3, [sp, #4]
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 f80e 	bl	800e77a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e75e:	69f8      	ldr	r0, [r7, #28]
 800e760:	f000 f89a 	bl	800e898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e764:	2301      	movs	r3, #1
 800e766:	61bb      	str	r3, [r7, #24]
 800e768:	e002      	b.n	800e770 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e76a:	f04f 33ff 	mov.w	r3, #4294967295
 800e76e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e770:	69bb      	ldr	r3, [r7, #24]
	}
 800e772:	4618      	mov	r0, r3
 800e774:	3720      	adds	r7, #32
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b088      	sub	sp, #32
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	607a      	str	r2, [r7, #4]
 800e786:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	461a      	mov	r2, r3
 800e792:	21a5      	movs	r1, #165	; 0xa5
 800e794:	f002 f8a9 	bl	80108ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	f023 0307 	bic.w	r3, r3, #7
 800e7b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	f003 0307 	and.w	r3, r3, #7
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d009      	beq.n	800e7d0 <prvInitialiseNewTask+0x56>
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	617b      	str	r3, [r7, #20]
 800e7ce:	e7fe      	b.n	800e7ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d01f      	beq.n	800e816 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	61fb      	str	r3, [r7, #28]
 800e7da:	e012      	b.n	800e802 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e7dc:	68ba      	ldr	r2, [r7, #8]
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	7819      	ldrb	r1, [r3, #0]
 800e7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	3334      	adds	r3, #52	; 0x34
 800e7ec:	460a      	mov	r2, r1
 800e7ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e7f0:	68ba      	ldr	r2, [r7, #8]
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	3301      	adds	r3, #1
 800e800:	61fb      	str	r3, [r7, #28]
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	2b0f      	cmp	r3, #15
 800e806:	d9e9      	bls.n	800e7dc <prvInitialiseNewTask+0x62>
 800e808:	e000      	b.n	800e80c <prvInitialiseNewTask+0x92>
			{
				break;
 800e80a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e814:	e003      	b.n	800e81e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	2b37      	cmp	r3, #55	; 0x37
 800e822:	d901      	bls.n	800e828 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e824:	2337      	movs	r3, #55	; 0x37
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e82c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	2200      	movs	r2, #0
 800e838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83c:	3304      	adds	r3, #4
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff f8d6 	bl	800d9f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e846:	3318      	adds	r3, #24
 800e848:	4618      	mov	r0, r3
 800e84a:	f7ff f8d1 	bl	800d9f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	2200      	movs	r2, #0
 800e868:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	69b8      	ldr	r0, [r7, #24]
 800e878:	f001 f8d8 	bl	800fa2c <pxPortInitialiseStack>
 800e87c:	4602      	mov	r2, r0
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	2b00      	cmp	r3, #0
 800e886:	d002      	beq.n	800e88e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e88e:	bf00      	nop
 800e890:	3720      	adds	r7, #32
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e8a0:	f001 f9ec 	bl	800fc7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e8a4:	4b2d      	ldr	r3, [pc, #180]	; (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4a2c      	ldr	r2, [pc, #176]	; (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e8ae:	4b2c      	ldr	r3, [pc, #176]	; (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d109      	bne.n	800e8ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e8b6:	4a2a      	ldr	r2, [pc, #168]	; (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e8bc:	4b27      	ldr	r3, [pc, #156]	; (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d110      	bne.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e8c4:	f000 fbd4 	bl	800f070 <prvInitialiseTaskLists>
 800e8c8:	e00d      	b.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e8ca:	4b26      	ldr	r3, [pc, #152]	; (800e964 <prvAddNewTaskToReadyList+0xcc>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e8d2:	4b23      	ldr	r3, [pc, #140]	; (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d802      	bhi.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e8e0:	4a1f      	ldr	r2, [pc, #124]	; (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8e6:	4b20      	ldr	r3, [pc, #128]	; (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	4a1e      	ldr	r2, [pc, #120]	; (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8f0:	4b1d      	ldr	r3, [pc, #116]	; (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fc:	4b1b      	ldr	r3, [pc, #108]	; (800e96c <prvAddNewTaskToReadyList+0xd4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d903      	bls.n	800e90c <prvAddNewTaskToReadyList+0x74>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e908:	4a18      	ldr	r2, [pc, #96]	; (800e96c <prvAddNewTaskToReadyList+0xd4>)
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4a15      	ldr	r2, [pc, #84]	; (800e970 <prvAddNewTaskToReadyList+0xd8>)
 800e91a:	441a      	add	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7ff f871 	bl	800da0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e928:	f001 f9d6 	bl	800fcd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e92c:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <prvAddNewTaskToReadyList+0xcc>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00e      	beq.n	800e952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93e:	429a      	cmp	r2, r3
 800e940:	d207      	bcs.n	800e952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e942:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <prvAddNewTaskToReadyList+0xdc>)
 800e944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e952:	bf00      	nop
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	20000d3c 	.word	0x20000d3c
 800e960:	20000868 	.word	0x20000868
 800e964:	20000d48 	.word	0x20000d48
 800e968:	20000d58 	.word	0x20000d58
 800e96c:	20000d44 	.word	0x20000d44
 800e970:	2000086c 	.word	0x2000086c
 800e974:	e000ed04 	.word	0xe000ed04

0800e978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e986:	463a      	mov	r2, r7
 800e988:	1d39      	adds	r1, r7, #4
 800e98a:	f107 0308 	add.w	r3, r7, #8
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe ffda 	bl	800d948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e994:	6839      	ldr	r1, [r7, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68ba      	ldr	r2, [r7, #8]
 800e99a:	9202      	str	r2, [sp, #8]
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	460a      	mov	r2, r1
 800e9a6:	4920      	ldr	r1, [pc, #128]	; (800ea28 <vTaskStartScheduler+0xb0>)
 800e9a8:	4820      	ldr	r0, [pc, #128]	; (800ea2c <vTaskStartScheduler+0xb4>)
 800e9aa:	f7ff fe47 	bl	800e63c <xTaskCreateStatic>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	4b1f      	ldr	r3, [pc, #124]	; (800ea30 <vTaskStartScheduler+0xb8>)
 800e9b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9b4:	4b1e      	ldr	r3, [pc, #120]	; (800ea30 <vTaskStartScheduler+0xb8>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	e001      	b.n	800e9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d102      	bne.n	800e9d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e9cc:	f000 fce8 	bl	800f3a0 <xTimerCreateTimerTask>
 800e9d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d115      	bne.n	800ea04 <vTaskStartScheduler+0x8c>
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9ea:	4b12      	ldr	r3, [pc, #72]	; (800ea34 <vTaskStartScheduler+0xbc>)
 800e9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9f2:	4b11      	ldr	r3, [pc, #68]	; (800ea38 <vTaskStartScheduler+0xc0>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9f8:	4b10      	ldr	r3, [pc, #64]	; (800ea3c <vTaskStartScheduler+0xc4>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e9fe:	f001 f89f 	bl	800fb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea02:	e00d      	b.n	800ea20 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0a:	d109      	bne.n	800ea20 <vTaskStartScheduler+0xa8>
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	60fb      	str	r3, [r7, #12]
 800ea1e:	e7fe      	b.n	800ea1e <vTaskStartScheduler+0xa6>
}
 800ea20:	bf00      	nop
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	08010b30 	.word	0x08010b30
 800ea2c:	0800f041 	.word	0x0800f041
 800ea30:	20000d60 	.word	0x20000d60
 800ea34:	20000d5c 	.word	0x20000d5c
 800ea38:	20000d48 	.word	0x20000d48
 800ea3c:	20000d40 	.word	0x20000d40

0800ea40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea40:	b480      	push	{r7}
 800ea42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ea44:	4b04      	ldr	r3, [pc, #16]	; (800ea58 <vTaskSuspendAll+0x18>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	4a03      	ldr	r2, [pc, #12]	; (800ea58 <vTaskSuspendAll+0x18>)
 800ea4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ea4e:	bf00      	nop
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20000d64 	.word	0x20000d64

0800ea5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea62:	2300      	movs	r3, #0
 800ea64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea66:	2300      	movs	r3, #0
 800ea68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea6a:	4b41      	ldr	r3, [pc, #260]	; (800eb70 <xTaskResumeAll+0x114>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <xTaskResumeAll+0x2a>
 800ea72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	e7fe      	b.n	800ea84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea86:	f001 f8f9 	bl	800fc7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea8a:	4b39      	ldr	r3, [pc, #228]	; (800eb70 <xTaskResumeAll+0x114>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	4a37      	ldr	r2, [pc, #220]	; (800eb70 <xTaskResumeAll+0x114>)
 800ea92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea94:	4b36      	ldr	r3, [pc, #216]	; (800eb70 <xTaskResumeAll+0x114>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d162      	bne.n	800eb62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea9c:	4b35      	ldr	r3, [pc, #212]	; (800eb74 <xTaskResumeAll+0x118>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d05e      	beq.n	800eb62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eaa4:	e02f      	b.n	800eb06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaa6:	4b34      	ldr	r3, [pc, #208]	; (800eb78 <xTaskResumeAll+0x11c>)
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3318      	adds	r3, #24
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7ff f806 	bl	800dac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff f801 	bl	800dac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac6:	4b2d      	ldr	r3, [pc, #180]	; (800eb7c <xTaskResumeAll+0x120>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d903      	bls.n	800ead6 <xTaskResumeAll+0x7a>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	4a2a      	ldr	r2, [pc, #168]	; (800eb7c <xTaskResumeAll+0x120>)
 800ead4:	6013      	str	r3, [r2, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eada:	4613      	mov	r3, r2
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4413      	add	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4a27      	ldr	r2, [pc, #156]	; (800eb80 <xTaskResumeAll+0x124>)
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3304      	adds	r3, #4
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7fe ff8c 	bl	800da0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf6:	4b23      	ldr	r3, [pc, #140]	; (800eb84 <xTaskResumeAll+0x128>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d302      	bcc.n	800eb06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800eb00:	4b21      	ldr	r3, [pc, #132]	; (800eb88 <xTaskResumeAll+0x12c>)
 800eb02:	2201      	movs	r2, #1
 800eb04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb06:	4b1c      	ldr	r3, [pc, #112]	; (800eb78 <xTaskResumeAll+0x11c>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1cb      	bne.n	800eaa6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb14:	f000 fb46 	bl	800f1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eb18:	4b1c      	ldr	r3, [pc, #112]	; (800eb8c <xTaskResumeAll+0x130>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d010      	beq.n	800eb46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb24:	f000 f846 	bl	800ebb4 <xTaskIncrementTick>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800eb2e:	4b16      	ldr	r3, [pc, #88]	; (800eb88 <xTaskResumeAll+0x12c>)
 800eb30:	2201      	movs	r2, #1
 800eb32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1f1      	bne.n	800eb24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800eb40:	4b12      	ldr	r3, [pc, #72]	; (800eb8c <xTaskResumeAll+0x130>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb46:	4b10      	ldr	r3, [pc, #64]	; (800eb88 <xTaskResumeAll+0x12c>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb52:	4b0f      	ldr	r3, [pc, #60]	; (800eb90 <xTaskResumeAll+0x134>)
 800eb54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb62:	f001 f8b9 	bl	800fcd8 <vPortExitCritical>

	return xAlreadyYielded;
 800eb66:	68bb      	ldr	r3, [r7, #8]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20000d64 	.word	0x20000d64
 800eb74:	20000d3c 	.word	0x20000d3c
 800eb78:	20000cfc 	.word	0x20000cfc
 800eb7c:	20000d44 	.word	0x20000d44
 800eb80:	2000086c 	.word	0x2000086c
 800eb84:	20000868 	.word	0x20000868
 800eb88:	20000d50 	.word	0x20000d50
 800eb8c:	20000d4c 	.word	0x20000d4c
 800eb90:	e000ed04 	.word	0xe000ed04

0800eb94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb9a:	4b05      	ldr	r3, [pc, #20]	; (800ebb0 <xTaskGetTickCount+0x1c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eba0:	687b      	ldr	r3, [r7, #4]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	20000d40 	.word	0x20000d40

0800ebb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebbe:	4b4e      	ldr	r3, [pc, #312]	; (800ecf8 <xTaskIncrementTick+0x144>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f040 8088 	bne.w	800ecd8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ebc8:	4b4c      	ldr	r3, [pc, #304]	; (800ecfc <xTaskIncrementTick+0x148>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ebd0:	4a4a      	ldr	r2, [pc, #296]	; (800ecfc <xTaskIncrementTick+0x148>)
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d11f      	bne.n	800ec1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ebdc:	4b48      	ldr	r3, [pc, #288]	; (800ed00 <xTaskIncrementTick+0x14c>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d009      	beq.n	800ebfa <xTaskIncrementTick+0x46>
 800ebe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	603b      	str	r3, [r7, #0]
 800ebf8:	e7fe      	b.n	800ebf8 <xTaskIncrementTick+0x44>
 800ebfa:	4b41      	ldr	r3, [pc, #260]	; (800ed00 <xTaskIncrementTick+0x14c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	4b40      	ldr	r3, [pc, #256]	; (800ed04 <xTaskIncrementTick+0x150>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a3e      	ldr	r2, [pc, #248]	; (800ed00 <xTaskIncrementTick+0x14c>)
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	4a3e      	ldr	r2, [pc, #248]	; (800ed04 <xTaskIncrementTick+0x150>)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	4b3e      	ldr	r3, [pc, #248]	; (800ed08 <xTaskIncrementTick+0x154>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3301      	adds	r3, #1
 800ec14:	4a3c      	ldr	r2, [pc, #240]	; (800ed08 <xTaskIncrementTick+0x154>)
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	f000 fac4 	bl	800f1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec1c:	4b3b      	ldr	r3, [pc, #236]	; (800ed0c <xTaskIncrementTick+0x158>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	693a      	ldr	r2, [r7, #16]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d349      	bcc.n	800ecba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec26:	4b36      	ldr	r3, [pc, #216]	; (800ed00 <xTaskIncrementTick+0x14c>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d104      	bne.n	800ec3a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec30:	4b36      	ldr	r3, [pc, #216]	; (800ed0c <xTaskIncrementTick+0x158>)
 800ec32:	f04f 32ff 	mov.w	r2, #4294967295
 800ec36:	601a      	str	r2, [r3, #0]
					break;
 800ec38:	e03f      	b.n	800ecba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec3a:	4b31      	ldr	r3, [pc, #196]	; (800ed00 <xTaskIncrementTick+0x14c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d203      	bcs.n	800ec5a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec52:	4a2e      	ldr	r2, [pc, #184]	; (800ed0c <xTaskIncrementTick+0x158>)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec58:	e02f      	b.n	800ecba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe ff30 	bl	800dac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d004      	beq.n	800ec76 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	3318      	adds	r3, #24
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fe ff27 	bl	800dac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7a:	4b25      	ldr	r3, [pc, #148]	; (800ed10 <xTaskIncrementTick+0x15c>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d903      	bls.n	800ec8a <xTaskIncrementTick+0xd6>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec86:	4a22      	ldr	r2, [pc, #136]	; (800ed10 <xTaskIncrementTick+0x15c>)
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8e:	4613      	mov	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4a1f      	ldr	r2, [pc, #124]	; (800ed14 <xTaskIncrementTick+0x160>)
 800ec98:	441a      	add	r2, r3
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7fe feb2 	bl	800da0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecaa:	4b1b      	ldr	r3, [pc, #108]	; (800ed18 <xTaskIncrementTick+0x164>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d3b8      	bcc.n	800ec26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecb8:	e7b5      	b.n	800ec26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ecba:	4b17      	ldr	r3, [pc, #92]	; (800ed18 <xTaskIncrementTick+0x164>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc0:	4914      	ldr	r1, [pc, #80]	; (800ed14 <xTaskIncrementTick+0x160>)
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4413      	add	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	440b      	add	r3, r1
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d907      	bls.n	800ece2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	617b      	str	r3, [r7, #20]
 800ecd6:	e004      	b.n	800ece2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ecd8:	4b10      	ldr	r3, [pc, #64]	; (800ed1c <xTaskIncrementTick+0x168>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	4a0f      	ldr	r2, [pc, #60]	; (800ed1c <xTaskIncrementTick+0x168>)
 800ece0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ece2:	4b0f      	ldr	r3, [pc, #60]	; (800ed20 <xTaskIncrementTick+0x16c>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800ecea:	2301      	movs	r3, #1
 800ecec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ecee:	697b      	ldr	r3, [r7, #20]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3718      	adds	r7, #24
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	20000d64 	.word	0x20000d64
 800ecfc:	20000d40 	.word	0x20000d40
 800ed00:	20000cf4 	.word	0x20000cf4
 800ed04:	20000cf8 	.word	0x20000cf8
 800ed08:	20000d54 	.word	0x20000d54
 800ed0c:	20000d5c 	.word	0x20000d5c
 800ed10:	20000d44 	.word	0x20000d44
 800ed14:	2000086c 	.word	0x2000086c
 800ed18:	20000868 	.word	0x20000868
 800ed1c:	20000d4c 	.word	0x20000d4c
 800ed20:	20000d50 	.word	0x20000d50

0800ed24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed2a:	4b27      	ldr	r3, [pc, #156]	; (800edc8 <vTaskSwitchContext+0xa4>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d003      	beq.n	800ed3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed32:	4b26      	ldr	r3, [pc, #152]	; (800edcc <vTaskSwitchContext+0xa8>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed38:	e040      	b.n	800edbc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ed3a:	4b24      	ldr	r3, [pc, #144]	; (800edcc <vTaskSwitchContext+0xa8>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed40:	4b23      	ldr	r3, [pc, #140]	; (800edd0 <vTaskSwitchContext+0xac>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	60fb      	str	r3, [r7, #12]
 800ed46:	e00f      	b.n	800ed68 <vTaskSwitchContext+0x44>
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d109      	bne.n	800ed62 <vTaskSwitchContext+0x3e>
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	607b      	str	r3, [r7, #4]
 800ed60:	e7fe      	b.n	800ed60 <vTaskSwitchContext+0x3c>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	491a      	ldr	r1, [pc, #104]	; (800edd4 <vTaskSwitchContext+0xb0>)
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	4413      	add	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	440b      	add	r3, r1
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d0e5      	beq.n	800ed48 <vTaskSwitchContext+0x24>
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	4413      	add	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4a13      	ldr	r2, [pc, #76]	; (800edd4 <vTaskSwitchContext+0xb0>)
 800ed88:	4413      	add	r3, r2
 800ed8a:	60bb      	str	r3, [r7, #8]
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	605a      	str	r2, [r3, #4]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d104      	bne.n	800edac <vTaskSwitchContext+0x88>
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	605a      	str	r2, [r3, #4]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	4a09      	ldr	r2, [pc, #36]	; (800edd8 <vTaskSwitchContext+0xb4>)
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	4a06      	ldr	r2, [pc, #24]	; (800edd0 <vTaskSwitchContext+0xac>)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6013      	str	r3, [r2, #0]
}
 800edbc:	bf00      	nop
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	20000d64 	.word	0x20000d64
 800edcc:	20000d50 	.word	0x20000d50
 800edd0:	20000d44 	.word	0x20000d44
 800edd4:	2000086c 	.word	0x2000086c
 800edd8:	20000868 	.word	0x20000868

0800eddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d109      	bne.n	800ee00 <vTaskPlaceOnEventList+0x24>
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	e7fe      	b.n	800edfe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee00:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <vTaskPlaceOnEventList+0x44>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3318      	adds	r3, #24
 800ee06:	4619      	mov	r1, r3
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7fe fe22 	bl	800da52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee0e:	2101      	movs	r1, #1
 800ee10:	6838      	ldr	r0, [r7, #0]
 800ee12:	f000 fa71 	bl	800f2f8 <prvAddCurrentTaskToDelayedList>
}
 800ee16:	bf00      	nop
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	20000868 	.word	0x20000868

0800ee24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d109      	bne.n	800ee4a <vTaskPlaceOnEventListRestricted+0x26>
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	e7fe      	b.n	800ee48 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <vTaskPlaceOnEventListRestricted+0x50>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3318      	adds	r3, #24
 800ee50:	4619      	mov	r1, r3
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7fe fdd9 	bl	800da0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	68b8      	ldr	r0, [r7, #8]
 800ee68:	f000 fa46 	bl	800f2f8 <prvAddCurrentTaskToDelayedList>
	}
 800ee6c:	bf00      	nop
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	20000868 	.word	0x20000868

0800ee78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d109      	bne.n	800eea2 <xTaskRemoveFromEventList+0x2a>
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	e7fe      	b.n	800eea0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	3318      	adds	r3, #24
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fe0c 	bl	800dac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeac:	4b1d      	ldr	r3, [pc, #116]	; (800ef24 <xTaskRemoveFromEventList+0xac>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d11d      	bne.n	800eef0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fe03 	bl	800dac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec2:	4b19      	ldr	r3, [pc, #100]	; (800ef28 <xTaskRemoveFromEventList+0xb0>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d903      	bls.n	800eed2 <xTaskRemoveFromEventList+0x5a>
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eece:	4a16      	ldr	r2, [pc, #88]	; (800ef28 <xTaskRemoveFromEventList+0xb0>)
 800eed0:	6013      	str	r3, [r2, #0]
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed6:	4613      	mov	r3, r2
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4a13      	ldr	r2, [pc, #76]	; (800ef2c <xTaskRemoveFromEventList+0xb4>)
 800eee0:	441a      	add	r2, r3
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	3304      	adds	r3, #4
 800eee6:	4619      	mov	r1, r3
 800eee8:	4610      	mov	r0, r2
 800eeea:	f7fe fd8e 	bl	800da0a <vListInsertEnd>
 800eeee:	e005      	b.n	800eefc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	3318      	adds	r3, #24
 800eef4:	4619      	mov	r1, r3
 800eef6:	480e      	ldr	r0, [pc, #56]	; (800ef30 <xTaskRemoveFromEventList+0xb8>)
 800eef8:	f7fe fd87 	bl	800da0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef00:	4b0c      	ldr	r3, [pc, #48]	; (800ef34 <xTaskRemoveFromEventList+0xbc>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d905      	bls.n	800ef16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef0e:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <xTaskRemoveFromEventList+0xc0>)
 800ef10:	2201      	movs	r2, #1
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	e001      	b.n	800ef1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef1a:	697b      	ldr	r3, [r7, #20]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	20000d64 	.word	0x20000d64
 800ef28:	20000d44 	.word	0x20000d44
 800ef2c:	2000086c 	.word	0x2000086c
 800ef30:	20000cfc 	.word	0x20000cfc
 800ef34:	20000868 	.word	0x20000868
 800ef38:	20000d50 	.word	0x20000d50

0800ef3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef44:	4b06      	ldr	r3, [pc, #24]	; (800ef60 <vTaskInternalSetTimeOutState+0x24>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef4c:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <vTaskInternalSetTimeOutState+0x28>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	605a      	str	r2, [r3, #4]
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr
 800ef60:	20000d54 	.word	0x20000d54
 800ef64:	20000d40 	.word	0x20000d40

0800ef68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d109      	bne.n	800ef8c <xTaskCheckForTimeOut+0x24>
 800ef78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	e7fe      	b.n	800ef8a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d109      	bne.n	800efa6 <xTaskCheckForTimeOut+0x3e>
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e7fe      	b.n	800efa4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800efa6:	f000 fe69 	bl	800fc7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efaa:	4b1d      	ldr	r3, [pc, #116]	; (800f020 <xTaskCheckForTimeOut+0xb8>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	69ba      	ldr	r2, [r7, #24]
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc2:	d102      	bne.n	800efca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efc4:	2300      	movs	r3, #0
 800efc6:	61fb      	str	r3, [r7, #28]
 800efc8:	e023      	b.n	800f012 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	4b15      	ldr	r3, [pc, #84]	; (800f024 <xTaskCheckForTimeOut+0xbc>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d007      	beq.n	800efe6 <xTaskCheckForTimeOut+0x7e>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	69ba      	ldr	r2, [r7, #24]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d302      	bcc.n	800efe6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efe0:	2301      	movs	r3, #1
 800efe2:	61fb      	str	r3, [r7, #28]
 800efe4:	e015      	b.n	800f012 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	697a      	ldr	r2, [r7, #20]
 800efec:	429a      	cmp	r2, r3
 800efee:	d20b      	bcs.n	800f008 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	1ad2      	subs	r2, r2, r3
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff ff9d 	bl	800ef3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f002:	2300      	movs	r3, #0
 800f004:	61fb      	str	r3, [r7, #28]
 800f006:	e004      	b.n	800f012 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	2200      	movs	r2, #0
 800f00c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f00e:	2301      	movs	r3, #1
 800f010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f012:	f000 fe61 	bl	800fcd8 <vPortExitCritical>

	return xReturn;
 800f016:	69fb      	ldr	r3, [r7, #28]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3720      	adds	r7, #32
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000d40 	.word	0x20000d40
 800f024:	20000d54 	.word	0x20000d54

0800f028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f028:	b480      	push	{r7}
 800f02a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f02c:	4b03      	ldr	r3, [pc, #12]	; (800f03c <vTaskMissedYield+0x14>)
 800f02e:	2201      	movs	r2, #1
 800f030:	601a      	str	r2, [r3, #0]
}
 800f032:	bf00      	nop
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	20000d50 	.word	0x20000d50

0800f040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f048:	f000 f852 	bl	800f0f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f04c:	4b06      	ldr	r3, [pc, #24]	; (800f068 <prvIdleTask+0x28>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d9f9      	bls.n	800f048 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <prvIdleTask+0x2c>)
 800f056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f064:	e7f0      	b.n	800f048 <prvIdleTask+0x8>
 800f066:	bf00      	nop
 800f068:	2000086c 	.word	0x2000086c
 800f06c:	e000ed04 	.word	0xe000ed04

0800f070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f076:	2300      	movs	r3, #0
 800f078:	607b      	str	r3, [r7, #4]
 800f07a:	e00c      	b.n	800f096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	4613      	mov	r3, r2
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4413      	add	r3, r2
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	4a12      	ldr	r2, [pc, #72]	; (800f0d0 <prvInitialiseTaskLists+0x60>)
 800f088:	4413      	add	r3, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe fc90 	bl	800d9b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3301      	adds	r3, #1
 800f094:	607b      	str	r3, [r7, #4]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b37      	cmp	r3, #55	; 0x37
 800f09a:	d9ef      	bls.n	800f07c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f09c:	480d      	ldr	r0, [pc, #52]	; (800f0d4 <prvInitialiseTaskLists+0x64>)
 800f09e:	f7fe fc87 	bl	800d9b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0a2:	480d      	ldr	r0, [pc, #52]	; (800f0d8 <prvInitialiseTaskLists+0x68>)
 800f0a4:	f7fe fc84 	bl	800d9b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0a8:	480c      	ldr	r0, [pc, #48]	; (800f0dc <prvInitialiseTaskLists+0x6c>)
 800f0aa:	f7fe fc81 	bl	800d9b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0ae:	480c      	ldr	r0, [pc, #48]	; (800f0e0 <prvInitialiseTaskLists+0x70>)
 800f0b0:	f7fe fc7e 	bl	800d9b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0b4:	480b      	ldr	r0, [pc, #44]	; (800f0e4 <prvInitialiseTaskLists+0x74>)
 800f0b6:	f7fe fc7b 	bl	800d9b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0ba:	4b0b      	ldr	r3, [pc, #44]	; (800f0e8 <prvInitialiseTaskLists+0x78>)
 800f0bc:	4a05      	ldr	r2, [pc, #20]	; (800f0d4 <prvInitialiseTaskLists+0x64>)
 800f0be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	; (800f0ec <prvInitialiseTaskLists+0x7c>)
 800f0c2:	4a05      	ldr	r2, [pc, #20]	; (800f0d8 <prvInitialiseTaskLists+0x68>)
 800f0c4:	601a      	str	r2, [r3, #0]
}
 800f0c6:	bf00      	nop
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2000086c 	.word	0x2000086c
 800f0d4:	20000ccc 	.word	0x20000ccc
 800f0d8:	20000ce0 	.word	0x20000ce0
 800f0dc:	20000cfc 	.word	0x20000cfc
 800f0e0:	20000d10 	.word	0x20000d10
 800f0e4:	20000d28 	.word	0x20000d28
 800f0e8:	20000cf4 	.word	0x20000cf4
 800f0ec:	20000cf8 	.word	0x20000cf8

0800f0f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0f6:	e019      	b.n	800f12c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f0f8:	f000 fdc0 	bl	800fc7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0fc:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <prvCheckTasksWaitingTermination+0x4c>)
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe fcdb 	bl	800dac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f10e:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <prvCheckTasksWaitingTermination+0x50>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	3b01      	subs	r3, #1
 800f114:	4a0a      	ldr	r2, [pc, #40]	; (800f140 <prvCheckTasksWaitingTermination+0x50>)
 800f116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f118:	4b0a      	ldr	r3, [pc, #40]	; (800f144 <prvCheckTasksWaitingTermination+0x54>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	4a09      	ldr	r2, [pc, #36]	; (800f144 <prvCheckTasksWaitingTermination+0x54>)
 800f120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f122:	f000 fdd9 	bl	800fcd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f80e 	bl	800f148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <prvCheckTasksWaitingTermination+0x54>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e1      	bne.n	800f0f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f134:	bf00      	nop
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	20000d10 	.word	0x20000d10
 800f140:	20000d3c 	.word	0x20000d3c
 800f144:	20000d24 	.word	0x20000d24

0800f148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f156:	2b00      	cmp	r3, #0
 800f158:	d108      	bne.n	800f16c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 ff68 	bl	8010034 <vPortFree>
				vPortFree( pxTCB );
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 ff65 	bl	8010034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f16a:	e017      	b.n	800f19c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f172:	2b01      	cmp	r3, #1
 800f174:	d103      	bne.n	800f17e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 ff5c 	bl	8010034 <vPortFree>
	}
 800f17c:	e00e      	b.n	800f19c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f184:	2b02      	cmp	r3, #2
 800f186:	d009      	beq.n	800f19c <prvDeleteTCB+0x54>
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	60fb      	str	r3, [r7, #12]
 800f19a:	e7fe      	b.n	800f19a <prvDeleteTCB+0x52>
	}
 800f19c:	bf00      	nop
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1aa:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <prvResetNextTaskUnblockTime+0x38>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d104      	bne.n	800f1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1b4:	4b0a      	ldr	r3, [pc, #40]	; (800f1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1bc:	e008      	b.n	800f1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1be:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <prvResetNextTaskUnblockTime+0x38>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	4a04      	ldr	r2, [pc, #16]	; (800f1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f1ce:	6013      	str	r3, [r2, #0]
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	20000cf4 	.word	0x20000cf4
 800f1e0:	20000d5c 	.word	0x20000d5c

0800f1e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f1ea:	4b0b      	ldr	r3, [pc, #44]	; (800f218 <xTaskGetSchedulerState+0x34>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d102      	bne.n	800f1f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	607b      	str	r3, [r7, #4]
 800f1f6:	e008      	b.n	800f20a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1f8:	4b08      	ldr	r3, [pc, #32]	; (800f21c <xTaskGetSchedulerState+0x38>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d102      	bne.n	800f206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f200:	2302      	movs	r3, #2
 800f202:	607b      	str	r3, [r7, #4]
 800f204:	e001      	b.n	800f20a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f206:	2300      	movs	r3, #0
 800f208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f20a:	687b      	ldr	r3, [r7, #4]
	}
 800f20c:	4618      	mov	r0, r3
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	20000d48 	.word	0x20000d48
 800f21c:	20000d64 	.word	0x20000d64

0800f220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f22c:	2300      	movs	r3, #0
 800f22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d054      	beq.n	800f2e0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f236:	4b2d      	ldr	r3, [pc, #180]	; (800f2ec <xTaskPriorityDisinherit+0xcc>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d009      	beq.n	800f254 <xTaskPriorityDisinherit+0x34>
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	60fb      	str	r3, [r7, #12]
 800f252:	e7fe      	b.n	800f252 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d109      	bne.n	800f270 <xTaskPriorityDisinherit+0x50>
 800f25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f260:	f383 8811 	msr	BASEPRI, r3
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	60bb      	str	r3, [r7, #8]
 800f26e:	e7fe      	b.n	800f26e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f274:	1e5a      	subs	r2, r3, #1
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f282:	429a      	cmp	r2, r3
 800f284:	d02c      	beq.n	800f2e0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d128      	bne.n	800f2e0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	3304      	adds	r3, #4
 800f292:	4618      	mov	r0, r3
 800f294:	f7fe fc16 	bl	800dac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b0:	4b0f      	ldr	r3, [pc, #60]	; (800f2f0 <xTaskPriorityDisinherit+0xd0>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d903      	bls.n	800f2c0 <xTaskPriorityDisinherit+0xa0>
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2bc:	4a0c      	ldr	r2, [pc, #48]	; (800f2f0 <xTaskPriorityDisinherit+0xd0>)
 800f2be:	6013      	str	r3, [r2, #0]
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	4413      	add	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4a09      	ldr	r2, [pc, #36]	; (800f2f4 <xTaskPriorityDisinherit+0xd4>)
 800f2ce:	441a      	add	r2, r3
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	f7fe fb97 	bl	800da0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f2e0:	697b      	ldr	r3, [r7, #20]
	}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3718      	adds	r7, #24
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20000868 	.word	0x20000868
 800f2f0:	20000d44 	.word	0x20000d44
 800f2f4:	2000086c 	.word	0x2000086c

0800f2f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f302:	4b21      	ldr	r3, [pc, #132]	; (800f388 <prvAddCurrentTaskToDelayedList+0x90>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f308:	4b20      	ldr	r3, [pc, #128]	; (800f38c <prvAddCurrentTaskToDelayedList+0x94>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3304      	adds	r3, #4
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe fbd8 	bl	800dac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31a:	d10a      	bne.n	800f332 <prvAddCurrentTaskToDelayedList+0x3a>
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d007      	beq.n	800f332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f322:	4b1a      	ldr	r3, [pc, #104]	; (800f38c <prvAddCurrentTaskToDelayedList+0x94>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	3304      	adds	r3, #4
 800f328:	4619      	mov	r1, r3
 800f32a:	4819      	ldr	r0, [pc, #100]	; (800f390 <prvAddCurrentTaskToDelayedList+0x98>)
 800f32c:	f7fe fb6d 	bl	800da0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f330:	e026      	b.n	800f380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4413      	add	r3, r2
 800f338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f33a:	4b14      	ldr	r3, [pc, #80]	; (800f38c <prvAddCurrentTaskToDelayedList+0x94>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	429a      	cmp	r2, r3
 800f348:	d209      	bcs.n	800f35e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f34a:	4b12      	ldr	r3, [pc, #72]	; (800f394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <prvAddCurrentTaskToDelayedList+0x94>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3304      	adds	r3, #4
 800f354:	4619      	mov	r1, r3
 800f356:	4610      	mov	r0, r2
 800f358:	f7fe fb7b 	bl	800da52 <vListInsert>
}
 800f35c:	e010      	b.n	800f380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f35e:	4b0e      	ldr	r3, [pc, #56]	; (800f398 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <prvAddCurrentTaskToDelayedList+0x94>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3304      	adds	r3, #4
 800f368:	4619      	mov	r1, r3
 800f36a:	4610      	mov	r0, r2
 800f36c:	f7fe fb71 	bl	800da52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	429a      	cmp	r2, r3
 800f378:	d202      	bcs.n	800f380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f37a:	4a08      	ldr	r2, [pc, #32]	; (800f39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	6013      	str	r3, [r2, #0]
}
 800f380:	bf00      	nop
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20000d40 	.word	0x20000d40
 800f38c:	20000868 	.word	0x20000868
 800f390:	20000d28 	.word	0x20000d28
 800f394:	20000cf8 	.word	0x20000cf8
 800f398:	20000cf4 	.word	0x20000cf4
 800f39c:	20000d5c 	.word	0x20000d5c

0800f3a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08a      	sub	sp, #40	; 0x28
 800f3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f3aa:	f000 faff 	bl	800f9ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f3ae:	4b1c      	ldr	r3, [pc, #112]	; (800f420 <xTimerCreateTimerTask+0x80>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d021      	beq.n	800f3fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f3be:	1d3a      	adds	r2, r7, #4
 800f3c0:	f107 0108 	add.w	r1, r7, #8
 800f3c4:	f107 030c 	add.w	r3, r7, #12
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fe fad7 	bl	800d97c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	9202      	str	r2, [sp, #8]
 800f3d6:	9301      	str	r3, [sp, #4]
 800f3d8:	2302      	movs	r3, #2
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	2300      	movs	r3, #0
 800f3de:	460a      	mov	r2, r1
 800f3e0:	4910      	ldr	r1, [pc, #64]	; (800f424 <xTimerCreateTimerTask+0x84>)
 800f3e2:	4811      	ldr	r0, [pc, #68]	; (800f428 <xTimerCreateTimerTask+0x88>)
 800f3e4:	f7ff f92a 	bl	800e63c <xTaskCreateStatic>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	4b10      	ldr	r3, [pc, #64]	; (800f42c <xTimerCreateTimerTask+0x8c>)
 800f3ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f3ee:	4b0f      	ldr	r3, [pc, #60]	; (800f42c <xTimerCreateTimerTask+0x8c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <xTimerCreateTimerTask+0x74>
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	613b      	str	r3, [r7, #16]
 800f412:	e7fe      	b.n	800f412 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f414:	697b      	ldr	r3, [r7, #20]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20000d98 	.word	0x20000d98
 800f424:	08010b38 	.word	0x08010b38
 800f428:	0800f561 	.word	0x0800f561
 800f42c:	20000d9c 	.word	0x20000d9c

0800f430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08a      	sub	sp, #40	; 0x28
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
 800f43c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f43e:	2300      	movs	r3, #0
 800f440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d109      	bne.n	800f45c <xTimerGenericCommand+0x2c>
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	623b      	str	r3, [r7, #32]
 800f45a:	e7fe      	b.n	800f45a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f45c:	4b19      	ldr	r3, [pc, #100]	; (800f4c4 <xTimerGenericCommand+0x94>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d02a      	beq.n	800f4ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b05      	cmp	r3, #5
 800f474:	dc18      	bgt.n	800f4a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f476:	f7ff feb5 	bl	800f1e4 <xTaskGetSchedulerState>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d109      	bne.n	800f494 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f480:	4b10      	ldr	r3, [pc, #64]	; (800f4c4 <xTimerGenericCommand+0x94>)
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	f107 0110 	add.w	r1, r7, #16
 800f488:	2300      	movs	r3, #0
 800f48a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48c:	f7fe fc82 	bl	800dd94 <xQueueGenericSend>
 800f490:	6278      	str	r0, [r7, #36]	; 0x24
 800f492:	e012      	b.n	800f4ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f494:	4b0b      	ldr	r3, [pc, #44]	; (800f4c4 <xTimerGenericCommand+0x94>)
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	f107 0110 	add.w	r1, r7, #16
 800f49c:	2300      	movs	r3, #0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f7fe fc78 	bl	800dd94 <xQueueGenericSend>
 800f4a4:	6278      	str	r0, [r7, #36]	; 0x24
 800f4a6:	e008      	b.n	800f4ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4a8:	4b06      	ldr	r3, [pc, #24]	; (800f4c4 <xTimerGenericCommand+0x94>)
 800f4aa:	6818      	ldr	r0, [r3, #0]
 800f4ac:	f107 0110 	add.w	r1, r7, #16
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	f7fe fd68 	bl	800df88 <xQueueGenericSendFromISR>
 800f4b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3728      	adds	r7, #40	; 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000d98 	.word	0x20000d98

0800f4c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b088      	sub	sp, #32
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4d2:	4b22      	ldr	r3, [pc, #136]	; (800f55c <prvProcessExpiredTimer+0x94>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	3304      	adds	r3, #4
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe faef 	bl	800dac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ec:	f003 0304 	and.w	r3, r3, #4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d021      	beq.n	800f538 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	699a      	ldr	r2, [r3, #24]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	18d1      	adds	r1, r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	6978      	ldr	r0, [r7, #20]
 800f502:	f000 f8d1 	bl	800f6a8 <prvInsertTimerInActiveList>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01e      	beq.n	800f54a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f50c:	2300      	movs	r3, #0
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	2300      	movs	r3, #0
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	2100      	movs	r1, #0
 800f516:	6978      	ldr	r0, [r7, #20]
 800f518:	f7ff ff8a 	bl	800f430 <xTimerGenericCommand>
 800f51c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d112      	bne.n	800f54a <prvProcessExpiredTimer+0x82>
 800f524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	e7fe      	b.n	800f536 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f53e:	f023 0301 	bic.w	r3, r3, #1
 800f542:	b2da      	uxtb	r2, r3
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	6978      	ldr	r0, [r7, #20]
 800f550:	4798      	blx	r3
}
 800f552:	bf00      	nop
 800f554:	3718      	adds	r7, #24
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	20000d90 	.word	0x20000d90

0800f560 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 f857 	bl	800f620 <prvGetNextExpireTime>
 800f572:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	4619      	mov	r1, r3
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 f803 	bl	800f584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f57e:	f000 f8d5 	bl	800f72c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f582:	e7f1      	b.n	800f568 <prvTimerTask+0x8>

0800f584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f58e:	f7ff fa57 	bl	800ea40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f592:	f107 0308 	add.w	r3, r7, #8
 800f596:	4618      	mov	r0, r3
 800f598:	f000 f866 	bl	800f668 <prvSampleTimeNow>
 800f59c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d130      	bne.n	800f606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10a      	bne.n	800f5c0 <prvProcessTimerOrBlockTask+0x3c>
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d806      	bhi.n	800f5c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5b2:	f7ff fa53 	bl	800ea5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7ff ff85 	bl	800f4c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5be:	e024      	b.n	800f60a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d008      	beq.n	800f5d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5c6:	4b13      	ldr	r3, [pc, #76]	; (800f614 <prvProcessTimerOrBlockTask+0x90>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d101      	bne.n	800f5d4 <prvProcessTimerOrBlockTask+0x50>
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e000      	b.n	800f5d6 <prvProcessTimerOrBlockTask+0x52>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5d8:	4b0f      	ldr	r3, [pc, #60]	; (800f618 <prvProcessTimerOrBlockTask+0x94>)
 800f5da:	6818      	ldr	r0, [r3, #0]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	f7fe fff5 	bl	800e5d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5ea:	f7ff fa37 	bl	800ea5c <xTaskResumeAll>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10a      	bne.n	800f60a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5f4:	4b09      	ldr	r3, [pc, #36]	; (800f61c <prvProcessTimerOrBlockTask+0x98>)
 800f5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	f3bf 8f6f 	isb	sy
}
 800f604:	e001      	b.n	800f60a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f606:	f7ff fa29 	bl	800ea5c <xTaskResumeAll>
}
 800f60a:	bf00      	nop
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	20000d94 	.word	0x20000d94
 800f618:	20000d98 	.word	0x20000d98
 800f61c:	e000ed04 	.word	0xe000ed04

0800f620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f628:	4b0e      	ldr	r3, [pc, #56]	; (800f664 <prvGetNextExpireTime+0x44>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <prvGetNextExpireTime+0x16>
 800f632:	2201      	movs	r2, #1
 800f634:	e000      	b.n	800f638 <prvGetNextExpireTime+0x18>
 800f636:	2200      	movs	r2, #0
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d105      	bne.n	800f650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f644:	4b07      	ldr	r3, [pc, #28]	; (800f664 <prvGetNextExpireTime+0x44>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60fb      	str	r3, [r7, #12]
 800f64e:	e001      	b.n	800f654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f650:	2300      	movs	r3, #0
 800f652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f654:	68fb      	ldr	r3, [r7, #12]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	20000d90 	.word	0x20000d90

0800f668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f670:	f7ff fa90 	bl	800eb94 <xTaskGetTickCount>
 800f674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f676:	4b0b      	ldr	r3, [pc, #44]	; (800f6a4 <prvSampleTimeNow+0x3c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d205      	bcs.n	800f68c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f680:	f000 f930 	bl	800f8e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	e002      	b.n	800f692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f692:	4a04      	ldr	r2, [pc, #16]	; (800f6a4 <prvSampleTimeNow+0x3c>)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f698:	68fb      	ldr	r3, [r7, #12]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20000da0 	.word	0x20000da0

0800f6a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
 800f6b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d812      	bhi.n	800f6f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	1ad2      	subs	r2, r2, r3
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	699b      	ldr	r3, [r3, #24]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d302      	bcc.n	800f6e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e01b      	b.n	800f71a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6e2:	4b10      	ldr	r3, [pc, #64]	; (800f724 <prvInsertTimerInActiveList+0x7c>)
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	f7fe f9b0 	bl	800da52 <vListInsert>
 800f6f2:	e012      	b.n	800f71a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d206      	bcs.n	800f70a <prvInsertTimerInActiveList+0x62>
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	d302      	bcc.n	800f70a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f704:	2301      	movs	r3, #1
 800f706:	617b      	str	r3, [r7, #20]
 800f708:	e007      	b.n	800f71a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f70a:	4b07      	ldr	r3, [pc, #28]	; (800f728 <prvInsertTimerInActiveList+0x80>)
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	3304      	adds	r3, #4
 800f712:	4619      	mov	r1, r3
 800f714:	4610      	mov	r0, r2
 800f716:	f7fe f99c 	bl	800da52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f71a:	697b      	ldr	r3, [r7, #20]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	20000d94 	.word	0x20000d94
 800f728:	20000d90 	.word	0x20000d90

0800f72c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08e      	sub	sp, #56	; 0x38
 800f730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f732:	e0c6      	b.n	800f8c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	da17      	bge.n	800f76a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f73a:	1d3b      	adds	r3, r7, #4
 800f73c:	3304      	adds	r3, #4
 800f73e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <prvProcessReceivedCommands+0x2e>
 800f746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	61fb      	str	r3, [r7, #28]
 800f758:	e7fe      	b.n	800f758 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f760:	6850      	ldr	r0, [r2, #4]
 800f762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f764:	6892      	ldr	r2, [r2, #8]
 800f766:	4611      	mov	r1, r2
 800f768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f2c0 80a7 	blt.w	800f8c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d004      	beq.n	800f788 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	3304      	adds	r3, #4
 800f782:	4618      	mov	r0, r3
 800f784:	f7fe f99e 	bl	800dac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f788:	463b      	mov	r3, r7
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7ff ff6c 	bl	800f668 <prvSampleTimeNow>
 800f790:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2b09      	cmp	r3, #9
 800f796:	f200 8094 	bhi.w	800f8c2 <prvProcessReceivedCommands+0x196>
 800f79a:	a201      	add	r2, pc, #4	; (adr r2, 800f7a0 <prvProcessReceivedCommands+0x74>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f7c9 	.word	0x0800f7c9
 800f7a4:	0800f7c9 	.word	0x0800f7c9
 800f7a8:	0800f7c9 	.word	0x0800f7c9
 800f7ac:	0800f83b 	.word	0x0800f83b
 800f7b0:	0800f84f 	.word	0x0800f84f
 800f7b4:	0800f897 	.word	0x0800f897
 800f7b8:	0800f7c9 	.word	0x0800f7c9
 800f7bc:	0800f7c9 	.word	0x0800f7c9
 800f7c0:	0800f83b 	.word	0x0800f83b
 800f7c4:	0800f84f 	.word	0x0800f84f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7ce:	f043 0301 	orr.w	r3, r3, #1
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	18d1      	adds	r1, r2, r3
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7e8:	f7ff ff5e 	bl	800f6a8 <prvInsertTimerInActiveList>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d067      	beq.n	800f8c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f800:	f003 0304 	and.w	r3, r3, #4
 800f804:	2b00      	cmp	r3, #0
 800f806:	d05c      	beq.n	800f8c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	699b      	ldr	r3, [r3, #24]
 800f80e:	441a      	add	r2, r3
 800f810:	2300      	movs	r3, #0
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	2300      	movs	r3, #0
 800f816:	2100      	movs	r1, #0
 800f818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81a:	f7ff fe09 	bl	800f430 <xTimerGenericCommand>
 800f81e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f820:	6a3b      	ldr	r3, [r7, #32]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d14d      	bne.n	800f8c2 <prvProcessReceivedCommands+0x196>
 800f826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	61bb      	str	r3, [r7, #24]
 800f838:	e7fe      	b.n	800f838 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f840:	f023 0301 	bic.w	r3, r3, #1
 800f844:	b2da      	uxtb	r2, r3
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f84c:	e039      	b.n	800f8c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f854:	f043 0301 	orr.w	r3, r3, #1
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d109      	bne.n	800f882 <prvProcessReceivedCommands+0x156>
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	617b      	str	r3, [r7, #20]
 800f880:	e7fe      	b.n	800f880 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f884:	699a      	ldr	r2, [r3, #24]
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	18d1      	adds	r1, r2, r3
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f890:	f7ff ff0a 	bl	800f6a8 <prvInsertTimerInActiveList>
					break;
 800f894:	e015      	b.n	800f8c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f89c:	f003 0302 	and.w	r3, r3, #2
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a6:	f000 fbc5 	bl	8010034 <vPortFree>
 800f8aa:	e00a      	b.n	800f8c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8b2:	f023 0301 	bic.w	r3, r3, #1
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8be:	e000      	b.n	800f8c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f8c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8c2:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <prvProcessReceivedCommands+0x1b4>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	1d39      	adds	r1, r7, #4
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe fbf0 	bl	800e0b0 <xQueueReceive>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f47f af2e 	bne.w	800f734 <prvProcessReceivedCommands+0x8>
	}
}
 800f8d8:	bf00      	nop
 800f8da:	3730      	adds	r7, #48	; 0x30
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	20000d98 	.word	0x20000d98

0800f8e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b088      	sub	sp, #32
 800f8e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8ea:	e047      	b.n	800f97c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8ec:	4b2d      	ldr	r3, [pc, #180]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8f6:	4b2b      	ldr	r3, [pc, #172]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3304      	adds	r3, #4
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe f8dd 	bl	800dac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f918:	f003 0304 	and.w	r3, r3, #4
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d02d      	beq.n	800f97c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	699b      	ldr	r3, [r3, #24]
 800f924:	693a      	ldr	r2, [r7, #16]
 800f926:	4413      	add	r3, r2
 800f928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d90e      	bls.n	800f950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f93e:	4b19      	ldr	r3, [pc, #100]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3304      	adds	r3, #4
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7fe f882 	bl	800da52 <vListInsert>
 800f94e:	e015      	b.n	800f97c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f950:	2300      	movs	r3, #0
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	2300      	movs	r3, #0
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	2100      	movs	r1, #0
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff fd68 	bl	800f430 <xTimerGenericCommand>
 800f960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d109      	bne.n	800f97c <prvSwitchTimerLists+0x98>
 800f968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96c:	f383 8811 	msr	BASEPRI, r3
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	603b      	str	r3, [r7, #0]
 800f97a:	e7fe      	b.n	800f97a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f97c:	4b09      	ldr	r3, [pc, #36]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1b2      	bne.n	800f8ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f986:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f98c:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <prvSwitchTimerLists+0xc4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a04      	ldr	r2, [pc, #16]	; (800f9a4 <prvSwitchTimerLists+0xc0>)
 800f992:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f994:	4a04      	ldr	r2, [pc, #16]	; (800f9a8 <prvSwitchTimerLists+0xc4>)
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	6013      	str	r3, [r2, #0]
}
 800f99a:	bf00      	nop
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20000d90 	.word	0x20000d90
 800f9a8:	20000d94 	.word	0x20000d94

0800f9ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9b2:	f000 f963 	bl	800fc7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9b6:	4b15      	ldr	r3, [pc, #84]	; (800fa0c <prvCheckForValidListAndQueue+0x60>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d120      	bne.n	800fa00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9be:	4814      	ldr	r0, [pc, #80]	; (800fa10 <prvCheckForValidListAndQueue+0x64>)
 800f9c0:	f7fd fff6 	bl	800d9b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9c4:	4813      	ldr	r0, [pc, #76]	; (800fa14 <prvCheckForValidListAndQueue+0x68>)
 800f9c6:	f7fd fff3 	bl	800d9b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9ca:	4b13      	ldr	r3, [pc, #76]	; (800fa18 <prvCheckForValidListAndQueue+0x6c>)
 800f9cc:	4a10      	ldr	r2, [pc, #64]	; (800fa10 <prvCheckForValidListAndQueue+0x64>)
 800f9ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9d0:	4b12      	ldr	r3, [pc, #72]	; (800fa1c <prvCheckForValidListAndQueue+0x70>)
 800f9d2:	4a10      	ldr	r2, [pc, #64]	; (800fa14 <prvCheckForValidListAndQueue+0x68>)
 800f9d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	4b11      	ldr	r3, [pc, #68]	; (800fa20 <prvCheckForValidListAndQueue+0x74>)
 800f9dc:	4a11      	ldr	r2, [pc, #68]	; (800fa24 <prvCheckForValidListAndQueue+0x78>)
 800f9de:	2110      	movs	r1, #16
 800f9e0:	200a      	movs	r0, #10
 800f9e2:	f7fe f901 	bl	800dbe8 <xQueueGenericCreateStatic>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	4b08      	ldr	r3, [pc, #32]	; (800fa0c <prvCheckForValidListAndQueue+0x60>)
 800f9ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f9ec:	4b07      	ldr	r3, [pc, #28]	; (800fa0c <prvCheckForValidListAndQueue+0x60>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d005      	beq.n	800fa00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f9f4:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <prvCheckForValidListAndQueue+0x60>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	490b      	ldr	r1, [pc, #44]	; (800fa28 <prvCheckForValidListAndQueue+0x7c>)
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fe fdc2 	bl	800e584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa00:	f000 f96a 	bl	800fcd8 <vPortExitCritical>
}
 800fa04:	bf00      	nop
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20000d98 	.word	0x20000d98
 800fa10:	20000d68 	.word	0x20000d68
 800fa14:	20000d7c 	.word	0x20000d7c
 800fa18:	20000d90 	.word	0x20000d90
 800fa1c:	20000d94 	.word	0x20000d94
 800fa20:	20000e44 	.word	0x20000e44
 800fa24:	20000da4 	.word	0x20000da4
 800fa28:	08010b40 	.word	0x08010b40

0800fa2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b085      	sub	sp, #20
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3b04      	subs	r3, #4
 800fa3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	3b04      	subs	r3, #4
 800fa4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	f023 0201 	bic.w	r2, r3, #1
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	3b04      	subs	r3, #4
 800fa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa5c:	4a0c      	ldr	r2, [pc, #48]	; (800fa90 <pxPortInitialiseStack+0x64>)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	3b14      	subs	r3, #20
 800fa66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	3b04      	subs	r3, #4
 800fa72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f06f 0202 	mvn.w	r2, #2
 800fa7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3b20      	subs	r3, #32
 800fa80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa82:	68fb      	ldr	r3, [r7, #12]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr
 800fa90:	0800fa95 	.word	0x0800fa95

0800fa94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <prvTaskExitError+0x50>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa6:	d009      	beq.n	800fabc <prvTaskExitError+0x28>
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	e7fe      	b.n	800faba <prvTaskExitError+0x26>
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800face:	bf00      	nop
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0fc      	beq.n	800fad0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fad6:	bf00      	nop
 800fad8:	3714      	adds	r7, #20
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	2000009c 	.word	0x2000009c
	...

0800faf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800faf0:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <pxCurrentTCBConst2>)
 800faf2:	6819      	ldr	r1, [r3, #0]
 800faf4:	6808      	ldr	r0, [r1, #0]
 800faf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafa:	f380 8809 	msr	PSP, r0
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f04f 0000 	mov.w	r0, #0
 800fb06:	f380 8811 	msr	BASEPRI, r0
 800fb0a:	4770      	bx	lr
 800fb0c:	f3af 8000 	nop.w

0800fb10 <pxCurrentTCBConst2>:
 800fb10:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop

0800fb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb18:	4808      	ldr	r0, [pc, #32]	; (800fb3c <prvPortStartFirstTask+0x24>)
 800fb1a:	6800      	ldr	r0, [r0, #0]
 800fb1c:	6800      	ldr	r0, [r0, #0]
 800fb1e:	f380 8808 	msr	MSP, r0
 800fb22:	f04f 0000 	mov.w	r0, #0
 800fb26:	f380 8814 	msr	CONTROL, r0
 800fb2a:	b662      	cpsie	i
 800fb2c:	b661      	cpsie	f
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	df00      	svc	0
 800fb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb3a:	bf00      	nop
 800fb3c:	e000ed08 	.word	0xe000ed08

0800fb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb46:	4b44      	ldr	r3, [pc, #272]	; (800fc58 <xPortStartScheduler+0x118>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a44      	ldr	r2, [pc, #272]	; (800fc5c <xPortStartScheduler+0x11c>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d109      	bne.n	800fb64 <xPortStartScheduler+0x24>
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	613b      	str	r3, [r7, #16]
 800fb62:	e7fe      	b.n	800fb62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb64:	4b3c      	ldr	r3, [pc, #240]	; (800fc58 <xPortStartScheduler+0x118>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a3d      	ldr	r2, [pc, #244]	; (800fc60 <xPortStartScheduler+0x120>)
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d109      	bne.n	800fb82 <xPortStartScheduler+0x42>
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	e7fe      	b.n	800fb80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb82:	4b38      	ldr	r3, [pc, #224]	; (800fc64 <xPortStartScheduler+0x124>)
 800fb84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	22ff      	movs	r2, #255	; 0xff
 800fb92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb9c:	78fb      	ldrb	r3, [r7, #3]
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fba4:	b2da      	uxtb	r2, r3
 800fba6:	4b30      	ldr	r3, [pc, #192]	; (800fc68 <xPortStartScheduler+0x128>)
 800fba8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbaa:	4b30      	ldr	r3, [pc, #192]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbac:	2207      	movs	r2, #7
 800fbae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbb0:	e009      	b.n	800fbc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fbb2:	4b2e      	ldr	r3, [pc, #184]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	4a2c      	ldr	r2, [pc, #176]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbbc:	78fb      	ldrb	r3, [r7, #3]
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	005b      	lsls	r3, r3, #1
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbc6:	78fb      	ldrb	r3, [r7, #3]
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbce:	2b80      	cmp	r3, #128	; 0x80
 800fbd0:	d0ef      	beq.n	800fbb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbd2:	4b26      	ldr	r3, [pc, #152]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f1c3 0307 	rsb	r3, r3, #7
 800fbda:	2b04      	cmp	r3, #4
 800fbdc:	d009      	beq.n	800fbf2 <xPortStartScheduler+0xb2>
 800fbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	60bb      	str	r3, [r7, #8]
 800fbf0:	e7fe      	b.n	800fbf0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fbf2:	4b1e      	ldr	r3, [pc, #120]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	021b      	lsls	r3, r3, #8
 800fbf8:	4a1c      	ldr	r2, [pc, #112]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fbfc:	4b1b      	ldr	r3, [pc, #108]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc04:	4a19      	ldr	r2, [pc, #100]	; (800fc6c <xPortStartScheduler+0x12c>)
 800fc06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	b2da      	uxtb	r2, r3
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc10:	4b17      	ldr	r3, [pc, #92]	; (800fc70 <xPortStartScheduler+0x130>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a16      	ldr	r2, [pc, #88]	; (800fc70 <xPortStartScheduler+0x130>)
 800fc16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc1c:	4b14      	ldr	r3, [pc, #80]	; (800fc70 <xPortStartScheduler+0x130>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a13      	ldr	r2, [pc, #76]	; (800fc70 <xPortStartScheduler+0x130>)
 800fc22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc28:	f000 f8d6 	bl	800fdd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc2c:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <xPortStartScheduler+0x134>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc32:	f000 f8f5 	bl	800fe20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc36:	4b10      	ldr	r3, [pc, #64]	; (800fc78 <xPortStartScheduler+0x138>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a0f      	ldr	r2, [pc, #60]	; (800fc78 <xPortStartScheduler+0x138>)
 800fc3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc42:	f7ff ff69 	bl	800fb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc46:	f7ff f86d 	bl	800ed24 <vTaskSwitchContext>
	prvTaskExitError();
 800fc4a:	f7ff ff23 	bl	800fa94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3718      	adds	r7, #24
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	e000ed00 	.word	0xe000ed00
 800fc5c:	410fc271 	.word	0x410fc271
 800fc60:	410fc270 	.word	0x410fc270
 800fc64:	e000e400 	.word	0xe000e400
 800fc68:	20000e94 	.word	0x20000e94
 800fc6c:	20000e98 	.word	0x20000e98
 800fc70:	e000ed20 	.word	0xe000ed20
 800fc74:	2000009c 	.word	0x2000009c
 800fc78:	e000ef34 	.word	0xe000ef34

0800fc7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc94:	4b0e      	ldr	r3, [pc, #56]	; (800fcd0 <vPortEnterCritical+0x54>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	4a0d      	ldr	r2, [pc, #52]	; (800fcd0 <vPortEnterCritical+0x54>)
 800fc9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc9e:	4b0c      	ldr	r3, [pc, #48]	; (800fcd0 <vPortEnterCritical+0x54>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d10e      	bne.n	800fcc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fca6:	4b0b      	ldr	r3, [pc, #44]	; (800fcd4 <vPortEnterCritical+0x58>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d009      	beq.n	800fcc4 <vPortEnterCritical+0x48>
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	603b      	str	r3, [r7, #0]
 800fcc2:	e7fe      	b.n	800fcc2 <vPortEnterCritical+0x46>
	}
}
 800fcc4:	bf00      	nop
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr
 800fcd0:	2000009c 	.word	0x2000009c
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fcde:	4b11      	ldr	r3, [pc, #68]	; (800fd24 <vPortExitCritical+0x4c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d109      	bne.n	800fcfa <vPortExitCritical+0x22>
 800fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	607b      	str	r3, [r7, #4]
 800fcf8:	e7fe      	b.n	800fcf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fcfa:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <vPortExitCritical+0x4c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	4a08      	ldr	r2, [pc, #32]	; (800fd24 <vPortExitCritical+0x4c>)
 800fd02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd04:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <vPortExitCritical+0x4c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d104      	bne.n	800fd16 <vPortExitCritical+0x3e>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd16:	bf00      	nop
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	2000009c 	.word	0x2000009c
	...

0800fd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd30:	f3ef 8009 	mrs	r0, PSP
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	4b15      	ldr	r3, [pc, #84]	; (800fd90 <pxCurrentTCBConst>)
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	f01e 0f10 	tst.w	lr, #16
 800fd40:	bf08      	it	eq
 800fd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4a:	6010      	str	r0, [r2, #0]
 800fd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fd54:	f380 8811 	msr	BASEPRI, r0
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	f7fe ffe0 	bl	800ed24 <vTaskSwitchContext>
 800fd64:	f04f 0000 	mov.w	r0, #0
 800fd68:	f380 8811 	msr	BASEPRI, r0
 800fd6c:	bc09      	pop	{r0, r3}
 800fd6e:	6819      	ldr	r1, [r3, #0]
 800fd70:	6808      	ldr	r0, [r1, #0]
 800fd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd76:	f01e 0f10 	tst.w	lr, #16
 800fd7a:	bf08      	it	eq
 800fd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd80:	f380 8809 	msr	PSP, r0
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	f3af 8000 	nop.w

0800fd90 <pxCurrentTCBConst>:
 800fd90:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop

0800fd98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fdb0:	f7fe ff00 	bl	800ebb4 <xTaskIncrementTick>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdba:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <SysTick_Handler+0x3c>)
 800fdbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdc0:	601a      	str	r2, [r3, #0]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fdcc:	bf00      	nop
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	e000ed04 	.word	0xe000ed04

0800fdd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fdd8:	b480      	push	{r7}
 800fdda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fddc:	4b0b      	ldr	r3, [pc, #44]	; (800fe0c <vPortSetupTimerInterrupt+0x34>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fde2:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <vPortSetupTimerInterrupt+0x38>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <vPortSetupTimerInterrupt+0x3c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a0a      	ldr	r2, [pc, #40]	; (800fe18 <vPortSetupTimerInterrupt+0x40>)
 800fdee:	fba2 2303 	umull	r2, r3, r2, r3
 800fdf2:	099b      	lsrs	r3, r3, #6
 800fdf4:	4a09      	ldr	r2, [pc, #36]	; (800fe1c <vPortSetupTimerInterrupt+0x44>)
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdfa:	4b04      	ldr	r3, [pc, #16]	; (800fe0c <vPortSetupTimerInterrupt+0x34>)
 800fdfc:	2207      	movs	r2, #7
 800fdfe:	601a      	str	r2, [r3, #0]
}
 800fe00:	bf00      	nop
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	e000e010 	.word	0xe000e010
 800fe10:	e000e018 	.word	0xe000e018
 800fe14:	20000020 	.word	0x20000020
 800fe18:	10624dd3 	.word	0x10624dd3
 800fe1c:	e000e014 	.word	0xe000e014

0800fe20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe30 <vPortEnableVFP+0x10>
 800fe24:	6801      	ldr	r1, [r0, #0]
 800fe26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe2a:	6001      	str	r1, [r0, #0]
 800fe2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe2e:	bf00      	nop
 800fe30:	e000ed88 	.word	0xe000ed88

0800fe34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe3a:	f3ef 8305 	mrs	r3, IPSR
 800fe3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b0f      	cmp	r3, #15
 800fe44:	d913      	bls.n	800fe6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe46:	4a16      	ldr	r2, [pc, #88]	; (800fea0 <vPortValidateInterruptPriority+0x6c>)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe50:	4b14      	ldr	r3, [pc, #80]	; (800fea4 <vPortValidateInterruptPriority+0x70>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	7afa      	ldrb	r2, [r7, #11]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d209      	bcs.n	800fe6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fe5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5e:	f383 8811 	msr	BASEPRI, r3
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	607b      	str	r3, [r7, #4]
 800fe6c:	e7fe      	b.n	800fe6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe6e:	4b0e      	ldr	r3, [pc, #56]	; (800fea8 <vPortValidateInterruptPriority+0x74>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe76:	4b0d      	ldr	r3, [pc, #52]	; (800feac <vPortValidateInterruptPriority+0x78>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d909      	bls.n	800fe92 <vPortValidateInterruptPriority+0x5e>
 800fe7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe82:	f383 8811 	msr	BASEPRI, r3
 800fe86:	f3bf 8f6f 	isb	sy
 800fe8a:	f3bf 8f4f 	dsb	sy
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	e7fe      	b.n	800fe90 <vPortValidateInterruptPriority+0x5c>
	}
 800fe92:	bf00      	nop
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	e000e3f0 	.word	0xe000e3f0
 800fea4:	20000e94 	.word	0x20000e94
 800fea8:	e000ed0c 	.word	0xe000ed0c
 800feac:	20000e98 	.word	0x20000e98

0800feb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b08a      	sub	sp, #40	; 0x28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800feb8:	2300      	movs	r3, #0
 800feba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800febc:	f7fe fdc0 	bl	800ea40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fec0:	4b57      	ldr	r3, [pc, #348]	; (8010020 <pvPortMalloc+0x170>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d101      	bne.n	800fecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fec8:	f000 f90c 	bl	80100e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fecc:	4b55      	ldr	r3, [pc, #340]	; (8010024 <pvPortMalloc+0x174>)
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	4013      	ands	r3, r2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f040 808c 	bne.w	800fff2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d01c      	beq.n	800ff1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fee0:	2208      	movs	r2, #8
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4413      	add	r3, r2
 800fee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f003 0307 	and.w	r3, r3, #7
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d013      	beq.n	800ff1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f023 0307 	bic.w	r3, r3, #7
 800fef8:	3308      	adds	r3, #8
 800fefa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f003 0307 	and.w	r3, r3, #7
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <pvPortMalloc+0x6a>
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	617b      	str	r3, [r7, #20]
 800ff18:	e7fe      	b.n	800ff18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d068      	beq.n	800fff2 <pvPortMalloc+0x142>
 800ff20:	4b41      	ldr	r3, [pc, #260]	; (8010028 <pvPortMalloc+0x178>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d863      	bhi.n	800fff2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff2a:	4b40      	ldr	r3, [pc, #256]	; (801002c <pvPortMalloc+0x17c>)
 800ff2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff2e:	4b3f      	ldr	r3, [pc, #252]	; (801002c <pvPortMalloc+0x17c>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff34:	e004      	b.n	800ff40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d903      	bls.n	800ff52 <pvPortMalloc+0xa2>
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1f1      	bne.n	800ff36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff52:	4b33      	ldr	r3, [pc, #204]	; (8010020 <pvPortMalloc+0x170>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d04a      	beq.n	800fff2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2208      	movs	r2, #8
 800ff62:	4413      	add	r3, r2
 800ff64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	6a3b      	ldr	r3, [r7, #32]
 800ff6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	1ad2      	subs	r2, r2, r3
 800ff76:	2308      	movs	r3, #8
 800ff78:	005b      	lsls	r3, r3, #1
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d91e      	bls.n	800ffbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	4413      	add	r3, r2
 800ff84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	f003 0307 	and.w	r3, r3, #7
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d009      	beq.n	800ffa4 <pvPortMalloc+0xf4>
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	613b      	str	r3, [r7, #16]
 800ffa2:	e7fe      	b.n	800ffa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	1ad2      	subs	r2, r2, r3
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffb6:	69b8      	ldr	r0, [r7, #24]
 800ffb8:	f000 f8f6 	bl	80101a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffbc:	4b1a      	ldr	r3, [pc, #104]	; (8010028 <pvPortMalloc+0x178>)
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	4a18      	ldr	r2, [pc, #96]	; (8010028 <pvPortMalloc+0x178>)
 800ffc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffca:	4b17      	ldr	r3, [pc, #92]	; (8010028 <pvPortMalloc+0x178>)
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	4b18      	ldr	r3, [pc, #96]	; (8010030 <pvPortMalloc+0x180>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d203      	bcs.n	800ffde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ffd6:	4b14      	ldr	r3, [pc, #80]	; (8010028 <pvPortMalloc+0x178>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a15      	ldr	r2, [pc, #84]	; (8010030 <pvPortMalloc+0x180>)
 800ffdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	685a      	ldr	r2, [r3, #4]
 800ffe2:	4b10      	ldr	r3, [pc, #64]	; (8010024 <pvPortMalloc+0x174>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	431a      	orrs	r2, r3
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	2200      	movs	r2, #0
 800fff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fff2:	f7fe fd33 	bl	800ea5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	f003 0307 	and.w	r3, r3, #7
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d009      	beq.n	8010014 <pvPortMalloc+0x164>
 8010000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	60fb      	str	r3, [r7, #12]
 8010012:	e7fe      	b.n	8010012 <pvPortMalloc+0x162>
	return pvReturn;
 8010014:	69fb      	ldr	r3, [r7, #28]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3728      	adds	r7, #40	; 0x28
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	20004aa4 	.word	0x20004aa4
 8010024:	20004ab0 	.word	0x20004ab0
 8010028:	20004aa8 	.word	0x20004aa8
 801002c:	20004a9c 	.word	0x20004a9c
 8010030:	20004aac 	.word	0x20004aac

08010034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d046      	beq.n	80100d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010046:	2308      	movs	r3, #8
 8010048:	425b      	negs	r3, r3
 801004a:	697a      	ldr	r2, [r7, #20]
 801004c:	4413      	add	r3, r2
 801004e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	685a      	ldr	r2, [r3, #4]
 8010058:	4b20      	ldr	r3, [pc, #128]	; (80100dc <vPortFree+0xa8>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4013      	ands	r3, r2
 801005e:	2b00      	cmp	r3, #0
 8010060:	d109      	bne.n	8010076 <vPortFree+0x42>
 8010062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	60fb      	str	r3, [r7, #12]
 8010074:	e7fe      	b.n	8010074 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d009      	beq.n	8010092 <vPortFree+0x5e>
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	60bb      	str	r3, [r7, #8]
 8010090:	e7fe      	b.n	8010090 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	4b11      	ldr	r3, [pc, #68]	; (80100dc <vPortFree+0xa8>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4013      	ands	r3, r2
 801009c:	2b00      	cmp	r3, #0
 801009e:	d019      	beq.n	80100d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d115      	bne.n	80100d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	685a      	ldr	r2, [r3, #4]
 80100ac:	4b0b      	ldr	r3, [pc, #44]	; (80100dc <vPortFree+0xa8>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	43db      	mvns	r3, r3
 80100b2:	401a      	ands	r2, r3
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100b8:	f7fe fcc2 	bl	800ea40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	4b07      	ldr	r3, [pc, #28]	; (80100e0 <vPortFree+0xac>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4413      	add	r3, r2
 80100c6:	4a06      	ldr	r2, [pc, #24]	; (80100e0 <vPortFree+0xac>)
 80100c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100ca:	6938      	ldr	r0, [r7, #16]
 80100cc:	f000 f86c 	bl	80101a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80100d0:	f7fe fcc4 	bl	800ea5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100d4:	bf00      	nop
 80100d6:	3718      	adds	r7, #24
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20004ab0 	.word	0x20004ab0
 80100e0:	20004aa8 	.word	0x20004aa8

080100e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80100ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80100ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80100f0:	4b27      	ldr	r3, [pc, #156]	; (8010190 <prvHeapInit+0xac>)
 80100f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f003 0307 	and.w	r3, r3, #7
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00c      	beq.n	8010118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3307      	adds	r3, #7
 8010102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f023 0307 	bic.w	r3, r3, #7
 801010a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	4a1f      	ldr	r2, [pc, #124]	; (8010190 <prvHeapInit+0xac>)
 8010114:	4413      	add	r3, r2
 8010116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801011c:	4a1d      	ldr	r2, [pc, #116]	; (8010194 <prvHeapInit+0xb0>)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010122:	4b1c      	ldr	r3, [pc, #112]	; (8010194 <prvHeapInit+0xb0>)
 8010124:	2200      	movs	r2, #0
 8010126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	4413      	add	r3, r2
 801012e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010130:	2208      	movs	r2, #8
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	1a9b      	subs	r3, r3, r2
 8010136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f023 0307 	bic.w	r3, r3, #7
 801013e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	4a15      	ldr	r2, [pc, #84]	; (8010198 <prvHeapInit+0xb4>)
 8010144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010146:	4b14      	ldr	r3, [pc, #80]	; (8010198 <prvHeapInit+0xb4>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2200      	movs	r2, #0
 801014c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801014e:	4b12      	ldr	r3, [pc, #72]	; (8010198 <prvHeapInit+0xb4>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	1ad2      	subs	r2, r2, r3
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010164:	4b0c      	ldr	r3, [pc, #48]	; (8010198 <prvHeapInit+0xb4>)
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	4a0a      	ldr	r2, [pc, #40]	; (801019c <prvHeapInit+0xb8>)
 8010172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	4a09      	ldr	r2, [pc, #36]	; (80101a0 <prvHeapInit+0xbc>)
 801017a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801017c:	4b09      	ldr	r3, [pc, #36]	; (80101a4 <prvHeapInit+0xc0>)
 801017e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010182:	601a      	str	r2, [r3, #0]
}
 8010184:	bf00      	nop
 8010186:	3714      	adds	r7, #20
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr
 8010190:	20000e9c 	.word	0x20000e9c
 8010194:	20004a9c 	.word	0x20004a9c
 8010198:	20004aa4 	.word	0x20004aa4
 801019c:	20004aac 	.word	0x20004aac
 80101a0:	20004aa8 	.word	0x20004aa8
 80101a4:	20004ab0 	.word	0x20004ab0

080101a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101b0:	4b28      	ldr	r3, [pc, #160]	; (8010254 <prvInsertBlockIntoFreeList+0xac>)
 80101b2:	60fb      	str	r3, [r7, #12]
 80101b4:	e002      	b.n	80101bc <prvInsertBlockIntoFreeList+0x14>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d8f7      	bhi.n	80101b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	4413      	add	r3, r2
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d108      	bne.n	80101ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	685a      	ldr	r2, [r3, #4]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	441a      	add	r2, r3
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	441a      	add	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d118      	bne.n	8010230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <prvInsertBlockIntoFreeList+0xb0>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	429a      	cmp	r2, r3
 8010208:	d00d      	beq.n	8010226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	441a      	add	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	601a      	str	r2, [r3, #0]
 8010224:	e008      	b.n	8010238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010226:	4b0c      	ldr	r3, [pc, #48]	; (8010258 <prvInsertBlockIntoFreeList+0xb0>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	e003      	b.n	8010238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	429a      	cmp	r2, r3
 801023e:	d002      	beq.n	8010246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010246:	bf00      	nop
 8010248:	3714      	adds	r7, #20
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	20004a9c 	.word	0x20004a9c
 8010258:	20004aa4 	.word	0x20004aa4

0801025c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010260:	2201      	movs	r2, #1
 8010262:	490e      	ldr	r1, [pc, #56]	; (801029c <MX_USB_HOST_Init+0x40>)
 8010264:	480e      	ldr	r0, [pc, #56]	; (80102a0 <MX_USB_HOST_Init+0x44>)
 8010266:	f7fb fb61 	bl	800b92c <USBH_Init>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010270:	f7f1 f932 	bl	80014d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010274:	490b      	ldr	r1, [pc, #44]	; (80102a4 <MX_USB_HOST_Init+0x48>)
 8010276:	480a      	ldr	r0, [pc, #40]	; (80102a0 <MX_USB_HOST_Init+0x44>)
 8010278:	f7fb fc08 	bl	800ba8c <USBH_RegisterClass>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010282:	f7f1 f929 	bl	80014d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010286:	4806      	ldr	r0, [pc, #24]	; (80102a0 <MX_USB_HOST_Init+0x44>)
 8010288:	f7fb fc8c 	bl	800bba4 <USBH_Start>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010292:	f7f1 f921 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010296:	bf00      	nop
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	080102a9 	.word	0x080102a9
 80102a0:	20005000 	.word	0x20005000
 80102a4:	2000007c 	.word	0x2000007c

080102a8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	460b      	mov	r3, r1
 80102b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80102b4:	78fb      	ldrb	r3, [r7, #3]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	2b04      	cmp	r3, #4
 80102ba:	d819      	bhi.n	80102f0 <USBH_UserProcess+0x48>
 80102bc:	a201      	add	r2, pc, #4	; (adr r2, 80102c4 <USBH_UserProcess+0x1c>)
 80102be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c2:	bf00      	nop
 80102c4:	080102f1 	.word	0x080102f1
 80102c8:	080102e1 	.word	0x080102e1
 80102cc:	080102f1 	.word	0x080102f1
 80102d0:	080102e9 	.word	0x080102e9
 80102d4:	080102d9 	.word	0x080102d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80102d8:	4b09      	ldr	r3, [pc, #36]	; (8010300 <USBH_UserProcess+0x58>)
 80102da:	2203      	movs	r2, #3
 80102dc:	701a      	strb	r2, [r3, #0]
  break;
 80102de:	e008      	b.n	80102f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80102e0:	4b07      	ldr	r3, [pc, #28]	; (8010300 <USBH_UserProcess+0x58>)
 80102e2:	2202      	movs	r2, #2
 80102e4:	701a      	strb	r2, [r3, #0]
  break;
 80102e6:	e004      	b.n	80102f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <USBH_UserProcess+0x58>)
 80102ea:	2201      	movs	r2, #1
 80102ec:	701a      	strb	r2, [r3, #0]
  break;
 80102ee:	e000      	b.n	80102f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80102f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80102f2:	bf00      	nop
 80102f4:	370c      	adds	r7, #12
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	20004ab4 	.word	0x20004ab4

08010304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b08a      	sub	sp, #40	; 0x28
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801030c:	f107 0314 	add.w	r3, r7, #20
 8010310:	2200      	movs	r2, #0
 8010312:	601a      	str	r2, [r3, #0]
 8010314:	605a      	str	r2, [r3, #4]
 8010316:	609a      	str	r2, [r3, #8]
 8010318:	60da      	str	r2, [r3, #12]
 801031a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010324:	d147      	bne.n	80103b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010326:	2300      	movs	r3, #0
 8010328:	613b      	str	r3, [r7, #16]
 801032a:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 801032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801032e:	4a24      	ldr	r2, [pc, #144]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010330:	f043 0301 	orr.w	r3, r3, #1
 8010334:	6313      	str	r3, [r2, #48]	; 0x30
 8010336:	4b22      	ldr	r3, [pc, #136]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033a:	f003 0301 	and.w	r3, r3, #1
 801033e:	613b      	str	r3, [r7, #16]
 8010340:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8010342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010348:	2300      	movs	r3, #0
 801034a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801034c:	2300      	movs	r3, #0
 801034e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010350:	f107 0314 	add.w	r3, r7, #20
 8010354:	4619      	mov	r1, r3
 8010356:	481b      	ldr	r0, [pc, #108]	; (80103c4 <HAL_HCD_MspInit+0xc0>)
 8010358:	f7f4 f8e6 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801035c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010362:	2302      	movs	r3, #2
 8010364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010366:	2300      	movs	r3, #0
 8010368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801036a:	2303      	movs	r3, #3
 801036c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801036e:	230a      	movs	r3, #10
 8010370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010372:	f107 0314 	add.w	r3, r7, #20
 8010376:	4619      	mov	r1, r3
 8010378:	4812      	ldr	r0, [pc, #72]	; (80103c4 <HAL_HCD_MspInit+0xc0>)
 801037a:	f7f4 f8d5 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801037e:	4b10      	ldr	r3, [pc, #64]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010382:	4a0f      	ldr	r2, [pc, #60]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010388:	6353      	str	r3, [r2, #52]	; 0x34
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
 801038e:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010392:	4a0b      	ldr	r2, [pc, #44]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 8010394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010398:	6453      	str	r3, [r2, #68]	; 0x44
 801039a:	4b09      	ldr	r3, [pc, #36]	; (80103c0 <HAL_HCD_MspInit+0xbc>)
 801039c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801039e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103a2:	60fb      	str	r3, [r7, #12]
 80103a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103a6:	2200      	movs	r2, #0
 80103a8:	2100      	movs	r1, #0
 80103aa:	2043      	movs	r0, #67	; 0x43
 80103ac:	f7f3 fd96 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103b0:	2043      	movs	r0, #67	; 0x43
 80103b2:	f7f3 fdaf 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103b6:	bf00      	nop
 80103b8:	3728      	adds	r7, #40	; 0x28
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	40023800 	.word	0x40023800
 80103c4:	40020000 	.word	0x40020000

080103c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fc f891 	bl	800c4fe <USBH_LL_IncTimer>
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fc f8d5 	bl	800c5a2 <USBH_LL_Connect>
}
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801040e:	4618      	mov	r0, r3
 8010410:	f7fc f8ea 	bl	800c5e8 <USBH_LL_Disconnect>
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	70fb      	strb	r3, [r7, #3]
 8010428:	4613      	mov	r3, r2
 801042a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010432:	4618      	mov	r0, r3
 8010434:	f7fc f921 	bl	800c67a <USBH_LL_NotifyURBChange>
#endif
}
 8010438:	bf00      	nop
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801044e:	4618      	mov	r0, r3
 8010450:	f7fc f87f 	bl	800c552 <USBH_LL_PortEnabled>
}
 8010454:	bf00      	nop
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801046a:	4618      	mov	r0, r3
 801046c:	f7fc f88b 	bl	800c586 <USBH_LL_PortDisabled>
}
 8010470:	bf00      	nop
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010486:	2b01      	cmp	r3, #1
 8010488:	d12a      	bne.n	80104e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801048a:	4a18      	ldr	r2, [pc, #96]	; (80104ec <USBH_LL_Init+0x74>)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a15      	ldr	r2, [pc, #84]	; (80104ec <USBH_LL_Init+0x74>)
 8010496:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801049a:	4b14      	ldr	r3, [pc, #80]	; (80104ec <USBH_LL_Init+0x74>)
 801049c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80104a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80104a2:	4b12      	ldr	r3, [pc, #72]	; (80104ec <USBH_LL_Init+0x74>)
 80104a4:	220c      	movs	r2, #12
 80104a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80104a8:	4b10      	ldr	r3, [pc, #64]	; (80104ec <USBH_LL_Init+0x74>)
 80104aa:	2201      	movs	r2, #1
 80104ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80104ae:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <USBH_LL_Init+0x74>)
 80104b0:	2200      	movs	r2, #0
 80104b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80104b4:	4b0d      	ldr	r3, [pc, #52]	; (80104ec <USBH_LL_Init+0x74>)
 80104b6:	2202      	movs	r2, #2
 80104b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104ba:	4b0c      	ldr	r3, [pc, #48]	; (80104ec <USBH_LL_Init+0x74>)
 80104bc:	2200      	movs	r2, #0
 80104be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80104c0:	480a      	ldr	r0, [pc, #40]	; (80104ec <USBH_LL_Init+0x74>)
 80104c2:	f7f4 fa18 	bl	80048f6 <HAL_HCD_Init>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80104cc:	f7f1 f804 	bl	80014d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80104d0:	4806      	ldr	r0, [pc, #24]	; (80104ec <USBH_LL_Init+0x74>)
 80104d2:	f7f4 fe1b 	bl	800510c <HAL_HCD_GetCurrentFrame>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4619      	mov	r1, r3
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7fc f800 	bl	800c4e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	200053e4 	.word	0x200053e4

080104f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f8:	2300      	movs	r3, #0
 80104fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010506:	4618      	mov	r0, r3
 8010508:	f7f4 fd88 	bl	800501c <HAL_HCD_Start>
 801050c:	4603      	mov	r3, r0
 801050e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010510:	7bfb      	ldrb	r3, [r7, #15]
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f95c 	bl	80107d0 <USBH_Get_USB_Status>
 8010518:	4603      	mov	r3, r0
 801051a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801051c:	7bbb      	ldrb	r3, [r7, #14]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b084      	sub	sp, #16
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801053c:	4618      	mov	r0, r3
 801053e:	f7f4 fd90 	bl	8005062 <HAL_HCD_Stop>
 8010542:	4603      	mov	r3, r0
 8010544:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f941 	bl	80107d0 <USBH_Get_USB_Status>
 801054e:	4603      	mov	r3, r0
 8010550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010552:	7bbb      	ldrb	r3, [r7, #14]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010564:	2301      	movs	r3, #1
 8010566:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801056e:	4618      	mov	r0, r3
 8010570:	f7f4 fdda 	bl	8005128 <HAL_HCD_GetCurrentSpeed>
 8010574:	4603      	mov	r3, r0
 8010576:	2b01      	cmp	r3, #1
 8010578:	d007      	beq.n	801058a <USBH_LL_GetSpeed+0x2e>
 801057a:	2b01      	cmp	r3, #1
 801057c:	d302      	bcc.n	8010584 <USBH_LL_GetSpeed+0x28>
 801057e:	2b02      	cmp	r3, #2
 8010580:	d006      	beq.n	8010590 <USBH_LL_GetSpeed+0x34>
 8010582:	e008      	b.n	8010596 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010584:	2300      	movs	r3, #0
 8010586:	73fb      	strb	r3, [r7, #15]
    break;
 8010588:	e008      	b.n	801059c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801058a:	2301      	movs	r3, #1
 801058c:	73fb      	strb	r3, [r7, #15]
    break;
 801058e:	e005      	b.n	801059c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010590:	2302      	movs	r3, #2
 8010592:	73fb      	strb	r3, [r7, #15]
    break;
 8010594:	e002      	b.n	801059c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8010596:	2301      	movs	r3, #1
 8010598:	73fb      	strb	r3, [r7, #15]
    break;
 801059a:	bf00      	nop
  }
  return  speed;
 801059c:	7bfb      	ldrb	r3, [r7, #15]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b084      	sub	sp, #16
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105bc:	4618      	mov	r0, r3
 80105be:	f7f4 fd6d 	bl	800509c <HAL_HCD_ResetPort>
 80105c2:	4603      	mov	r3, r0
 80105c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105c6:	7bfb      	ldrb	r3, [r7, #15]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 f901 	bl	80107d0 <USBH_Get_USB_Status>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	460b      	mov	r3, r1
 80105e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105ee:	78fa      	ldrb	r2, [r7, #3]
 80105f0:	4611      	mov	r1, r2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f4 fd75 	bl	80050e2 <HAL_HCD_HC_GetXferCount>
 80105f8:	4603      	mov	r3, r0
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010602:	b590      	push	{r4, r7, lr}
 8010604:	b089      	sub	sp, #36	; 0x24
 8010606:	af04      	add	r7, sp, #16
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	4608      	mov	r0, r1
 801060c:	4611      	mov	r1, r2
 801060e:	461a      	mov	r2, r3
 8010610:	4603      	mov	r3, r0
 8010612:	70fb      	strb	r3, [r7, #3]
 8010614:	460b      	mov	r3, r1
 8010616:	70bb      	strb	r3, [r7, #2]
 8010618:	4613      	mov	r3, r2
 801061a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010620:	2300      	movs	r3, #0
 8010622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801062a:	787c      	ldrb	r4, [r7, #1]
 801062c:	78ba      	ldrb	r2, [r7, #2]
 801062e:	78f9      	ldrb	r1, [r7, #3]
 8010630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010632:	9302      	str	r3, [sp, #8]
 8010634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	4623      	mov	r3, r4
 8010642:	f7f4 f9ba 	bl	80049ba <HAL_HCD_HC_Init>
 8010646:	4603      	mov	r3, r0
 8010648:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801064a:	7bfb      	ldrb	r3, [r7, #15]
 801064c:	4618      	mov	r0, r3
 801064e:	f000 f8bf 	bl	80107d0 <USBH_Get_USB_Status>
 8010652:	4603      	mov	r3, r0
 8010654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010656:	7bbb      	ldrb	r3, [r7, #14]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3714      	adds	r7, #20
 801065c:	46bd      	mov	sp, r7
 801065e:	bd90      	pop	{r4, r7, pc}

08010660 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801067a:	78fa      	ldrb	r2, [r7, #3]
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f7f4 fa33 	bl	8004aea <HAL_HCD_HC_Halt>
 8010684:	4603      	mov	r3, r0
 8010686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	4618      	mov	r0, r3
 801068c:	f000 f8a0 	bl	80107d0 <USBH_Get_USB_Status>
 8010690:	4603      	mov	r3, r0
 8010692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010694:	7bbb      	ldrb	r3, [r7, #14]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801069e:	b590      	push	{r4, r7, lr}
 80106a0:	b089      	sub	sp, #36	; 0x24
 80106a2:	af04      	add	r7, sp, #16
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	4608      	mov	r0, r1
 80106a8:	4611      	mov	r1, r2
 80106aa:	461a      	mov	r2, r3
 80106ac:	4603      	mov	r3, r0
 80106ae:	70fb      	strb	r3, [r7, #3]
 80106b0:	460b      	mov	r3, r1
 80106b2:	70bb      	strb	r3, [r7, #2]
 80106b4:	4613      	mov	r3, r2
 80106b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b8:	2300      	movs	r3, #0
 80106ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80106c6:	787c      	ldrb	r4, [r7, #1]
 80106c8:	78ba      	ldrb	r2, [r7, #2]
 80106ca:	78f9      	ldrb	r1, [r7, #3]
 80106cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106d4:	9302      	str	r3, [sp, #8]
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	4623      	mov	r3, r4
 80106e2:	f7f4 fa25 	bl	8004b30 <HAL_HCD_HC_SubmitRequest>
 80106e6:	4603      	mov	r3, r0
 80106e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 f86f 	bl	80107d0 <USBH_Get_USB_Status>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3714      	adds	r7, #20
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd90      	pop	{r4, r7, pc}

08010700 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010712:	78fa      	ldrb	r2, [r7, #3]
 8010714:	4611      	mov	r1, r2
 8010716:	4618      	mov	r0, r3
 8010718:	f7f4 fcce 	bl	80050b8 <HAL_HCD_HC_GetURBState>
 801071c:	4603      	mov	r3, r0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	460b      	mov	r3, r1
 8010730:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010738:	2b01      	cmp	r3, #1
 801073a:	d103      	bne.n	8010744 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	4618      	mov	r0, r3
 8010740:	f000 f872 	bl	8010828 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010744:	20c8      	movs	r0, #200	; 0xc8
 8010746:	f7f3 f87d 	bl	8003844 <HAL_Delay>
  return USBH_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010754:	b480      	push	{r7}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	460b      	mov	r3, r1
 801075e:	70fb      	strb	r3, [r7, #3]
 8010760:	4613      	mov	r3, r2
 8010762:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801076a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801076c:	78fa      	ldrb	r2, [r7, #3]
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	440b      	add	r3, r1
 801077a:	333b      	adds	r3, #59	; 0x3b
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00a      	beq.n	8010798 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010782:	78fa      	ldrb	r2, [r7, #3]
 8010784:	68f9      	ldr	r1, [r7, #12]
 8010786:	4613      	mov	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4413      	add	r3, r2
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	440b      	add	r3, r1
 8010790:	3350      	adds	r3, #80	; 0x50
 8010792:	78ba      	ldrb	r2, [r7, #2]
 8010794:	701a      	strb	r2, [r3, #0]
 8010796:	e009      	b.n	80107ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010798:	78fa      	ldrb	r2, [r7, #3]
 801079a:	68f9      	ldr	r1, [r7, #12]
 801079c:	4613      	mov	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	4413      	add	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	440b      	add	r3, r1
 80107a6:	3351      	adds	r3, #81	; 0x51
 80107a8:	78ba      	ldrb	r2, [r7, #2]
 80107aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b082      	sub	sp, #8
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7f3 f83e 	bl	8003844 <HAL_Delay>
}
 80107c8:	bf00      	nop
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107da:	2300      	movs	r3, #0
 80107dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80107de:	79fb      	ldrb	r3, [r7, #7]
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d817      	bhi.n	8010814 <USBH_Get_USB_Status+0x44>
 80107e4:	a201      	add	r2, pc, #4	; (adr r2, 80107ec <USBH_Get_USB_Status+0x1c>)
 80107e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ea:	bf00      	nop
 80107ec:	080107fd 	.word	0x080107fd
 80107f0:	08010803 	.word	0x08010803
 80107f4:	08010809 	.word	0x08010809
 80107f8:	0801080f 	.word	0x0801080f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010800:	e00b      	b.n	801081a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010802:	2302      	movs	r3, #2
 8010804:	73fb      	strb	r3, [r7, #15]
    break;
 8010806:	e008      	b.n	801081a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010808:	2301      	movs	r3, #1
 801080a:	73fb      	strb	r3, [r7, #15]
    break;
 801080c:	e005      	b.n	801081a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801080e:	2302      	movs	r3, #2
 8010810:	73fb      	strb	r3, [r7, #15]
    break;
 8010812:	e002      	b.n	801081a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010814:	2302      	movs	r3, #2
 8010816:	73fb      	strb	r3, [r7, #15]
    break;
 8010818:	bf00      	nop
  }
  return usb_status;
 801081a:	7bfb      	ldrb	r3, [r7, #15]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	4603      	mov	r3, r0
 8010830:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010832:	79fb      	ldrb	r3, [r7, #7]
 8010834:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010836:	79fb      	ldrb	r3, [r7, #7]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d102      	bne.n	8010842 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801083c:	2301      	movs	r3, #1
 801083e:	73fb      	strb	r3, [r7, #15]
 8010840:	e001      	b.n	8010846 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010842:	2300      	movs	r3, #0
 8010844:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8010846:	7bfb      	ldrb	r3, [r7, #15]
 8010848:	461a      	mov	r2, r3
 801084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801084e:	4803      	ldr	r0, [pc, #12]	; (801085c <MX_DriverVbusFS+0x34>)
 8010850:	f7f4 f814 	bl	800487c <HAL_GPIO_WritePin>
}
 8010854:	bf00      	nop
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	40021800 	.word	0x40021800

08010860 <__errno>:
 8010860:	4b01      	ldr	r3, [pc, #4]	; (8010868 <__errno+0x8>)
 8010862:	6818      	ldr	r0, [r3, #0]
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	200000a0 	.word	0x200000a0

0801086c <__libc_init_array>:
 801086c:	b570      	push	{r4, r5, r6, lr}
 801086e:	4e0d      	ldr	r6, [pc, #52]	; (80108a4 <__libc_init_array+0x38>)
 8010870:	4c0d      	ldr	r4, [pc, #52]	; (80108a8 <__libc_init_array+0x3c>)
 8010872:	1ba4      	subs	r4, r4, r6
 8010874:	10a4      	asrs	r4, r4, #2
 8010876:	2500      	movs	r5, #0
 8010878:	42a5      	cmp	r5, r4
 801087a:	d109      	bne.n	8010890 <__libc_init_array+0x24>
 801087c:	4e0b      	ldr	r6, [pc, #44]	; (80108ac <__libc_init_array+0x40>)
 801087e:	4c0c      	ldr	r4, [pc, #48]	; (80108b0 <__libc_init_array+0x44>)
 8010880:	f000 f92a 	bl	8010ad8 <_init>
 8010884:	1ba4      	subs	r4, r4, r6
 8010886:	10a4      	asrs	r4, r4, #2
 8010888:	2500      	movs	r5, #0
 801088a:	42a5      	cmp	r5, r4
 801088c:	d105      	bne.n	801089a <__libc_init_array+0x2e>
 801088e:	bd70      	pop	{r4, r5, r6, pc}
 8010890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010894:	4798      	blx	r3
 8010896:	3501      	adds	r5, #1
 8010898:	e7ee      	b.n	8010878 <__libc_init_array+0xc>
 801089a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801089e:	4798      	blx	r3
 80108a0:	3501      	adds	r5, #1
 80108a2:	e7f2      	b.n	801088a <__libc_init_array+0x1e>
 80108a4:	08012c1c 	.word	0x08012c1c
 80108a8:	08012c1c 	.word	0x08012c1c
 80108ac:	08012c1c 	.word	0x08012c1c
 80108b0:	08012c20 	.word	0x08012c20

080108b4 <malloc>:
 80108b4:	4b02      	ldr	r3, [pc, #8]	; (80108c0 <malloc+0xc>)
 80108b6:	4601      	mov	r1, r0
 80108b8:	6818      	ldr	r0, [r3, #0]
 80108ba:	f000 b86d 	b.w	8010998 <_malloc_r>
 80108be:	bf00      	nop
 80108c0:	200000a0 	.word	0x200000a0

080108c4 <free>:
 80108c4:	4b02      	ldr	r3, [pc, #8]	; (80108d0 <free+0xc>)
 80108c6:	4601      	mov	r1, r0
 80108c8:	6818      	ldr	r0, [r3, #0]
 80108ca:	f000 b817 	b.w	80108fc <_free_r>
 80108ce:	bf00      	nop
 80108d0:	200000a0 	.word	0x200000a0

080108d4 <memcpy>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	1e43      	subs	r3, r0, #1
 80108d8:	440a      	add	r2, r1
 80108da:	4291      	cmp	r1, r2
 80108dc:	d100      	bne.n	80108e0 <memcpy+0xc>
 80108de:	bd10      	pop	{r4, pc}
 80108e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108e8:	e7f7      	b.n	80108da <memcpy+0x6>

080108ea <memset>:
 80108ea:	4402      	add	r2, r0
 80108ec:	4603      	mov	r3, r0
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d100      	bne.n	80108f4 <memset+0xa>
 80108f2:	4770      	bx	lr
 80108f4:	f803 1b01 	strb.w	r1, [r3], #1
 80108f8:	e7f9      	b.n	80108ee <memset+0x4>
	...

080108fc <_free_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	4605      	mov	r5, r0
 8010900:	2900      	cmp	r1, #0
 8010902:	d045      	beq.n	8010990 <_free_r+0x94>
 8010904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010908:	1f0c      	subs	r4, r1, #4
 801090a:	2b00      	cmp	r3, #0
 801090c:	bfb8      	it	lt
 801090e:	18e4      	addlt	r4, r4, r3
 8010910:	f000 f8e0 	bl	8010ad4 <__malloc_lock>
 8010914:	4a1f      	ldr	r2, [pc, #124]	; (8010994 <_free_r+0x98>)
 8010916:	6813      	ldr	r3, [r2, #0]
 8010918:	4610      	mov	r0, r2
 801091a:	b933      	cbnz	r3, 801092a <_free_r+0x2e>
 801091c:	6063      	str	r3, [r4, #4]
 801091e:	6014      	str	r4, [r2, #0]
 8010920:	4628      	mov	r0, r5
 8010922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010926:	f000 b8d6 	b.w	8010ad6 <__malloc_unlock>
 801092a:	42a3      	cmp	r3, r4
 801092c:	d90c      	bls.n	8010948 <_free_r+0x4c>
 801092e:	6821      	ldr	r1, [r4, #0]
 8010930:	1862      	adds	r2, r4, r1
 8010932:	4293      	cmp	r3, r2
 8010934:	bf04      	itt	eq
 8010936:	681a      	ldreq	r2, [r3, #0]
 8010938:	685b      	ldreq	r3, [r3, #4]
 801093a:	6063      	str	r3, [r4, #4]
 801093c:	bf04      	itt	eq
 801093e:	1852      	addeq	r2, r2, r1
 8010940:	6022      	streq	r2, [r4, #0]
 8010942:	6004      	str	r4, [r0, #0]
 8010944:	e7ec      	b.n	8010920 <_free_r+0x24>
 8010946:	4613      	mov	r3, r2
 8010948:	685a      	ldr	r2, [r3, #4]
 801094a:	b10a      	cbz	r2, 8010950 <_free_r+0x54>
 801094c:	42a2      	cmp	r2, r4
 801094e:	d9fa      	bls.n	8010946 <_free_r+0x4a>
 8010950:	6819      	ldr	r1, [r3, #0]
 8010952:	1858      	adds	r0, r3, r1
 8010954:	42a0      	cmp	r0, r4
 8010956:	d10b      	bne.n	8010970 <_free_r+0x74>
 8010958:	6820      	ldr	r0, [r4, #0]
 801095a:	4401      	add	r1, r0
 801095c:	1858      	adds	r0, r3, r1
 801095e:	4282      	cmp	r2, r0
 8010960:	6019      	str	r1, [r3, #0]
 8010962:	d1dd      	bne.n	8010920 <_free_r+0x24>
 8010964:	6810      	ldr	r0, [r2, #0]
 8010966:	6852      	ldr	r2, [r2, #4]
 8010968:	605a      	str	r2, [r3, #4]
 801096a:	4401      	add	r1, r0
 801096c:	6019      	str	r1, [r3, #0]
 801096e:	e7d7      	b.n	8010920 <_free_r+0x24>
 8010970:	d902      	bls.n	8010978 <_free_r+0x7c>
 8010972:	230c      	movs	r3, #12
 8010974:	602b      	str	r3, [r5, #0]
 8010976:	e7d3      	b.n	8010920 <_free_r+0x24>
 8010978:	6820      	ldr	r0, [r4, #0]
 801097a:	1821      	adds	r1, r4, r0
 801097c:	428a      	cmp	r2, r1
 801097e:	bf04      	itt	eq
 8010980:	6811      	ldreq	r1, [r2, #0]
 8010982:	6852      	ldreq	r2, [r2, #4]
 8010984:	6062      	str	r2, [r4, #4]
 8010986:	bf04      	itt	eq
 8010988:	1809      	addeq	r1, r1, r0
 801098a:	6021      	streq	r1, [r4, #0]
 801098c:	605c      	str	r4, [r3, #4]
 801098e:	e7c7      	b.n	8010920 <_free_r+0x24>
 8010990:	bd38      	pop	{r3, r4, r5, pc}
 8010992:	bf00      	nop
 8010994:	20004ab8 	.word	0x20004ab8

08010998 <_malloc_r>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	1ccd      	adds	r5, r1, #3
 801099c:	f025 0503 	bic.w	r5, r5, #3
 80109a0:	3508      	adds	r5, #8
 80109a2:	2d0c      	cmp	r5, #12
 80109a4:	bf38      	it	cc
 80109a6:	250c      	movcc	r5, #12
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	4606      	mov	r6, r0
 80109ac:	db01      	blt.n	80109b2 <_malloc_r+0x1a>
 80109ae:	42a9      	cmp	r1, r5
 80109b0:	d903      	bls.n	80109ba <_malloc_r+0x22>
 80109b2:	230c      	movs	r3, #12
 80109b4:	6033      	str	r3, [r6, #0]
 80109b6:	2000      	movs	r0, #0
 80109b8:	bd70      	pop	{r4, r5, r6, pc}
 80109ba:	f000 f88b 	bl	8010ad4 <__malloc_lock>
 80109be:	4a21      	ldr	r2, [pc, #132]	; (8010a44 <_malloc_r+0xac>)
 80109c0:	6814      	ldr	r4, [r2, #0]
 80109c2:	4621      	mov	r1, r4
 80109c4:	b991      	cbnz	r1, 80109ec <_malloc_r+0x54>
 80109c6:	4c20      	ldr	r4, [pc, #128]	; (8010a48 <_malloc_r+0xb0>)
 80109c8:	6823      	ldr	r3, [r4, #0]
 80109ca:	b91b      	cbnz	r3, 80109d4 <_malloc_r+0x3c>
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 f871 	bl	8010ab4 <_sbrk_r>
 80109d2:	6020      	str	r0, [r4, #0]
 80109d4:	4629      	mov	r1, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	f000 f86c 	bl	8010ab4 <_sbrk_r>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d124      	bne.n	8010a2a <_malloc_r+0x92>
 80109e0:	230c      	movs	r3, #12
 80109e2:	6033      	str	r3, [r6, #0]
 80109e4:	4630      	mov	r0, r6
 80109e6:	f000 f876 	bl	8010ad6 <__malloc_unlock>
 80109ea:	e7e4      	b.n	80109b6 <_malloc_r+0x1e>
 80109ec:	680b      	ldr	r3, [r1, #0]
 80109ee:	1b5b      	subs	r3, r3, r5
 80109f0:	d418      	bmi.n	8010a24 <_malloc_r+0x8c>
 80109f2:	2b0b      	cmp	r3, #11
 80109f4:	d90f      	bls.n	8010a16 <_malloc_r+0x7e>
 80109f6:	600b      	str	r3, [r1, #0]
 80109f8:	50cd      	str	r5, [r1, r3]
 80109fa:	18cc      	adds	r4, r1, r3
 80109fc:	4630      	mov	r0, r6
 80109fe:	f000 f86a 	bl	8010ad6 <__malloc_unlock>
 8010a02:	f104 000b 	add.w	r0, r4, #11
 8010a06:	1d23      	adds	r3, r4, #4
 8010a08:	f020 0007 	bic.w	r0, r0, #7
 8010a0c:	1ac3      	subs	r3, r0, r3
 8010a0e:	d0d3      	beq.n	80109b8 <_malloc_r+0x20>
 8010a10:	425a      	negs	r2, r3
 8010a12:	50e2      	str	r2, [r4, r3]
 8010a14:	e7d0      	b.n	80109b8 <_malloc_r+0x20>
 8010a16:	428c      	cmp	r4, r1
 8010a18:	684b      	ldr	r3, [r1, #4]
 8010a1a:	bf16      	itet	ne
 8010a1c:	6063      	strne	r3, [r4, #4]
 8010a1e:	6013      	streq	r3, [r2, #0]
 8010a20:	460c      	movne	r4, r1
 8010a22:	e7eb      	b.n	80109fc <_malloc_r+0x64>
 8010a24:	460c      	mov	r4, r1
 8010a26:	6849      	ldr	r1, [r1, #4]
 8010a28:	e7cc      	b.n	80109c4 <_malloc_r+0x2c>
 8010a2a:	1cc4      	adds	r4, r0, #3
 8010a2c:	f024 0403 	bic.w	r4, r4, #3
 8010a30:	42a0      	cmp	r0, r4
 8010a32:	d005      	beq.n	8010a40 <_malloc_r+0xa8>
 8010a34:	1a21      	subs	r1, r4, r0
 8010a36:	4630      	mov	r0, r6
 8010a38:	f000 f83c 	bl	8010ab4 <_sbrk_r>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d0cf      	beq.n	80109e0 <_malloc_r+0x48>
 8010a40:	6025      	str	r5, [r4, #0]
 8010a42:	e7db      	b.n	80109fc <_malloc_r+0x64>
 8010a44:	20004ab8 	.word	0x20004ab8
 8010a48:	20004abc 	.word	0x20004abc

08010a4c <rand>:
 8010a4c:	b538      	push	{r3, r4, r5, lr}
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <rand+0x50>)
 8010a50:	681c      	ldr	r4, [r3, #0]
 8010a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a54:	b97b      	cbnz	r3, 8010a76 <rand+0x2a>
 8010a56:	2018      	movs	r0, #24
 8010a58:	f7ff ff2c 	bl	80108b4 <malloc>
 8010a5c:	4a10      	ldr	r2, [pc, #64]	; (8010aa0 <rand+0x54>)
 8010a5e:	4b11      	ldr	r3, [pc, #68]	; (8010aa4 <rand+0x58>)
 8010a60:	63a0      	str	r0, [r4, #56]	; 0x38
 8010a62:	e9c0 2300 	strd	r2, r3, [r0]
 8010a66:	4b10      	ldr	r3, [pc, #64]	; (8010aa8 <rand+0x5c>)
 8010a68:	6083      	str	r3, [r0, #8]
 8010a6a:	230b      	movs	r3, #11
 8010a6c:	8183      	strh	r3, [r0, #12]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	2300      	movs	r3, #0
 8010a72:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010a76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010a78:	480c      	ldr	r0, [pc, #48]	; (8010aac <rand+0x60>)
 8010a7a:	690a      	ldr	r2, [r1, #16]
 8010a7c:	694b      	ldr	r3, [r1, #20]
 8010a7e:	4c0c      	ldr	r4, [pc, #48]	; (8010ab0 <rand+0x64>)
 8010a80:	4350      	muls	r0, r2
 8010a82:	fb04 0003 	mla	r0, r4, r3, r0
 8010a86:	fba2 2304 	umull	r2, r3, r2, r4
 8010a8a:	4403      	add	r3, r0
 8010a8c:	1c54      	adds	r4, r2, #1
 8010a8e:	f143 0500 	adc.w	r5, r3, #0
 8010a92:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8010a96:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	200000a0 	.word	0x200000a0
 8010aa0:	abcd330e 	.word	0xabcd330e
 8010aa4:	e66d1234 	.word	0xe66d1234
 8010aa8:	0005deec 	.word	0x0005deec
 8010aac:	5851f42d 	.word	0x5851f42d
 8010ab0:	4c957f2d 	.word	0x4c957f2d

08010ab4 <_sbrk_r>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4c06      	ldr	r4, [pc, #24]	; (8010ad0 <_sbrk_r+0x1c>)
 8010ab8:	2300      	movs	r3, #0
 8010aba:	4605      	mov	r5, r0
 8010abc:	4608      	mov	r0, r1
 8010abe:	6023      	str	r3, [r4, #0]
 8010ac0:	f7f1 fbe8 	bl	8002294 <_sbrk>
 8010ac4:	1c43      	adds	r3, r0, #1
 8010ac6:	d102      	bne.n	8010ace <_sbrk_r+0x1a>
 8010ac8:	6823      	ldr	r3, [r4, #0]
 8010aca:	b103      	cbz	r3, 8010ace <_sbrk_r+0x1a>
 8010acc:	602b      	str	r3, [r5, #0]
 8010ace:	bd38      	pop	{r3, r4, r5, pc}
 8010ad0:	200056a8 	.word	0x200056a8

08010ad4 <__malloc_lock>:
 8010ad4:	4770      	bx	lr

08010ad6 <__malloc_unlock>:
 8010ad6:	4770      	bx	lr

08010ad8 <_init>:
 8010ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ada:	bf00      	nop
 8010adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ade:	bc08      	pop	{r3}
 8010ae0:	469e      	mov	lr, r3
 8010ae2:	4770      	bx	lr

08010ae4 <_fini>:
 8010ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae6:	bf00      	nop
 8010ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aea:	bc08      	pop	{r3}
 8010aec:	469e      	mov	lr, r3
 8010aee:	4770      	bx	lr
