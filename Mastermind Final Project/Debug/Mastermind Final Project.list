
Mastermind Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000210c  08010488  08010488  00020488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012594  08012594  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012594  08012594  00022594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801259c  0801259c  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801259c  0801259c  0002259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125a0  080125a0  000225a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080125a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000557c  200000f0  08012694  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000566c  08012694  0003566c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000416eb  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007203  00000000  00000000  0007180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003098  00000000  00000000  00078a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da8  00000000  00000000  0007baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c113  00000000  00000000  0007e850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b5b6  00000000  00000000  0008a963  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd7c3  00000000  00000000  000b5f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b36dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d1bc  00000000  00000000  001b3758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010470 	.word	0x08010470

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	08010470 	.word	0x08010470

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  for (int i = 0; i <10; i++ )
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e014      	b.n	8000556 <main+0x36>
  {
	  for (int j = 0; j < 4; j++)
 800052c:	2300      	movs	r3, #0
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	e00b      	b.n	800054a <main+0x2a>
	  {
		  newColorMap[i][j] = LCD_COLOR_WHITE;
 8000532:	492f      	ldr	r1, [pc, #188]	; (80005f0 <main+0xd0>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	009a      	lsls	r2, r3, #2
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	4413      	add	r3, r2
 800053c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000540:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for (int j = 0; j < 4; j++)
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b03      	cmp	r3, #3
 800054e:	ddf0      	ble.n	8000532 <main+0x12>
  for (int i = 0; i <10; i++ )
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b09      	cmp	r3, #9
 800055a:	dde7      	ble.n	800052c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f002 fe34 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f856 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 fb68 	bl	8000c38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000568:	f000 f906 	bl	8000778 <MX_ADC1_Init>
  MX_DAC_Init();
 800056c:	f000 f956 	bl	800081c <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000570:	f000 f97e 	bl	8000870 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000574:	f000 f9b4 	bl	80008e0 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000578:	f000 fa1c 	bl	80009b4 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800057c:	f000 fc8c 	bl	8000e98 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000580:	f000 fa7c 	bl	8000a7c <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000584:	f000 faa8 	bl	8000ad8 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 fad2 	bl	8000b30 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800058c:	f000 fb00 	bl	8000b90 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000590:	f000 fb28 	bl	8000be4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000594:	f000 fa44 	bl	8000a20 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000598:	f000 f8da 	bl	8000750 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // LCD Setup
   BSP_LCD_Init();
 800059c:	f002 fb1f 	bl	8002bde <BSP_LCD_Init>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005a4:	f002 fbda 	bl	8002d5c <BSP_LCD_Clear>

   BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f002 f962 	bl	8002874 <BSP_PB_Init>

   BSP_LCD_SetFont(&Font24);
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0xd4>)
 80005b2:	f002 fbc3 	bl	8002d3c <BSP_LCD_SetFont>

   BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80005b6:	f24a 1045 	movw	r0, #41285	; 0xa145
 80005ba:	f002 fb9f 	bl	8002cfc <BSP_LCD_SetTextColor>
   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005c2:	f002 fbab 	bl	8002d1c <BSP_LCD_SetBackColor>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c6:	f00c fc47 	bl	800ce58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of drawScreen */
  drawScreenHandle = osThreadNew(DrawScreenTask, NULL, &drawScreen_attributes);
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <main+0xd8>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <main+0xdc>)
 80005d0:	f00c fcac 	bl	800cf2c <osThreadNew>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0xe0>)
 80005d8:	601a      	str	r2, [r3, #0]

  /* creation of gameControl */
  gameControlHandle = osThreadNew(GameControlTask, NULL, &gameControl_attributes);
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <main+0xe4>)
 80005dc:	2100      	movs	r1, #0
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <main+0xe8>)
 80005e0:	f00c fca4 	bl	800cf2c <osThreadNew>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <main+0xec>)
 80005e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f00c fc69 	bl	800cec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0xce>
 80005f0:	20004d04 	.word	0x20004d04
 80005f4:	20000050 	.word	0x20000050
 80005f8:	080104c8 	.word	0x080104c8
 80005fc:	08000ffd 	.word	0x08000ffd
 8000600:	20004e28 	.word	0x20004e28
 8000604:	080104ec 	.word	0x080104ec
 8000608:	08001125 	.word	0x08001125
 800060c:	20004e74 	.word	0x20004e74

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0aa      	sub	sp, #168	; 0xa8
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00f fe63 	bl	80102ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00f fe54 	bl	80102ea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <SystemClock_Config+0x138>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <SystemClock_Config+0x138>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <SystemClock_Config+0x138>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b3a      	ldr	r3, [pc, #232]	; (800074c <SystemClock_Config+0x13c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a39      	ldr	r2, [pc, #228]	; (800074c <SystemClock_Config+0x13c>)
 8000668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <SystemClock_Config+0x13c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800067a:	2303      	movs	r3, #3
 800067c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000682:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800069e:	230f      	movs	r3, #15
 80006a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b0:	2305      	movs	r3, #5
 80006b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 ff85 	bl	80075d0 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 fd54 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f996 	bl	8006a1c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006f6:	f000 fd3f 	bl	8001178 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80006fa:	f240 1371 	movw	r3, #369	; 0x171
 80006fe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000700:	2332      	movs	r3, #50	; 0x32
 8000702:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000704:	230c      	movs	r3, #12
 8000706:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800071e:	2300      	movs	r3, #0
 8000720:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f006 fb72 	bl	8006e18 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800073a:	f000 fd1d 	bl	8001178 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	37a8      	adds	r7, #168	; 0xa8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2017      	movs	r0, #23
 800075a:	f003 f8c3 	bl	80038e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800075e:	2017      	movs	r0, #23
 8000760:	f003 f8dc 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2028      	movs	r0, #40	; 0x28
 800076a:	f003 f8bb 	bl	80038e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800076e:	2028      	movs	r0, #40	; 0x28
 8000770:	f003 f8d4 	bl	800391c <HAL_NVIC_EnableIRQ>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC1_Init+0x98>)
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <MX_ADC1_Init+0x9c>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC1_Init+0x98>)
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_ADC1_Init+0xa0>)
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC1_Init+0x98>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_ADC1_Init+0x98>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_ADC1_Init+0x98>)
 80007d8:	f002 fd5a 	bl	8003290 <HAL_ADC_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fcc9 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007e6:	230a      	movs	r3, #10
 80007e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_ADC1_Init+0x98>)
 80007f8:	f002 fd8e 	bl	8003318 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000802:	f000 fcb9 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20004c5c 	.word	0x20004c5c
 8000814:	40012000 	.word	0x40012000
 8000818:	0f000001 	.word	0x0f000001

0800081c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_DAC_Init+0x4c>)
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_DAC_Init+0x50>)
 800082e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_DAC_Init+0x4c>)
 8000832:	f003 f881 	bl	8003938 <HAL_DAC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800083c:	f000 fc9c 	bl	8001178 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_DAC_Init+0x4c>)
 8000850:	f003 f8e8 	bl	8003a24 <HAL_DAC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800085a:	f000 fc8d 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20004ca4 	.word	0x20004ca4
 800086c:	40007400 	.word	0x40007400

08000870 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <MX_DFSDM1_Init+0x6c>)
 8000878:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 800087c:	2201      	movs	r2, #1
 800087e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 8000888:	2202      	movs	r2, #2
 800088a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_DFSDM1_Init+0x68>)
 80008c4:	f003 f906 	bl	8003ad4 <HAL_DFSDM_ChannelInit>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008ce:	f000 fc53 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004a80 	.word	0x20004a80
 80008dc:	40016020 	.word	0x40016020

080008e0 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <MX_DFSDM2_Init+0xc8>)
 80008e8:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000910:	2202      	movs	r2, #2
 8000912:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000922:	2201      	movs	r2, #1
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_DFSDM2_Init+0xc4>)
 8000934:	f003 f8ce 	bl	8003ad4 <HAL_DFSDM_ChannelInit>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800093e:	f000 fc1b 	bl	8001178 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <MX_DFSDM2_Init+0xd0>)
 8000946:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 800094a:	2201      	movs	r2, #1
 800094c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000956:	2202      	movs	r2, #2
 8000958:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 800096e:	2202      	movs	r2, #2
 8000970:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000980:	2201      	movs	r2, #1
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_DFSDM2_Init+0xcc>)
 8000992:	f003 f89f 	bl	8003ad4 <HAL_DFSDM_ChannelInit>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 800099c:	f000 fbec 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20004c24 	.word	0x20004c24
 80009a8:	40016420 	.word	0x40016420
 80009ac:	20004b5c 	.word	0x20004b5c
 80009b0:	400164e0 	.word	0x400164e0

080009b4 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_FMPI2C1_Init+0x64>)
 80009bc:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <MX_FMPI2C1_Init+0x68>)
 80009c2:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 80009f0:	f003 f9c4 	bl	8003d7c <HAL_FMPI2C_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f000 fbbd 	bl	8001178 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_FMPI2C1_Init+0x60>)
 8000a02:	f003 fa4a 	bl	8003e9a <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 fbb4 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20004cb8 	.word	0x20004cb8
 8000a18:	40006000 	.word	0x40006000
 8000a1c:	00303d5b 	.word	0x00303d5b

08000a20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C2_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C2_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a5e:	f005 f93f 	bl	8005ce0 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fb86 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20004ab8 	.word	0x20004ab8
 8000a74:	40005800 	.word	0x40005800
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <MX_I2S2_Init+0x58>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000aa4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2S2_Init+0x54>)
 8000abe:	f005 fa47 	bl	8005f50 <HAL_I2S_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ac8:	f000 fb56 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20004e78 	.word	0x20004e78
 8000ad4:	40003800 	.word	0x40003800

08000ad8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_QUADSPI_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_QUADSPI_Init+0x50>)
 8000b14:	f005 fec0 	bl	8006898 <HAL_QSPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b1e:	f000 fb2b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20004ec0 	.word	0x20004ec0
 8000b2c:	a0001000 	.word	0xa0001000

08000b30 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_SDIO_SD_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b60:	f006 ff78 	bl	8007a54 <HAL_SD_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b6a:	f000 fb05 	bl	8001178 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_SDIO_SD_Init+0x58>)
 8000b74:	f007 f9a2 	bl	8007ebc <HAL_SD_ConfigWideBusOperation>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 fafb 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20004da4 	.word	0x20004da4
 8000b8c:	40012c00 	.word	0x40012c00

08000b90 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_UART10_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_UART10_Init+0x4c>)
 8000bc8:	f007 ff32 	bl	8008a30 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 fad1 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20004b94 	.word	0x20004b94
 8000be0:	40011c00 	.word	0x40011c00

08000be4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART6_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c1c:	f007 ff08 	bl	8008a30 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 faa7 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20004e2c 	.word	0x20004e2c
 8000c34:	40011400 	.word	0x40011400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	4b89      	ldr	r3, [pc, #548]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a88      	ldr	r2, [pc, #544]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b86      	ldr	r3, [pc, #536]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	4b82      	ldr	r3, [pc, #520]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a81      	ldr	r2, [pc, #516]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b7f      	ldr	r3, [pc, #508]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a7a      	ldr	r2, [pc, #488]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b74      	ldr	r3, [pc, #464]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a73      	ldr	r2, [pc, #460]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a6c      	ldr	r2, [pc, #432]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b6a      	ldr	r3, [pc, #424]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a65      	ldr	r2, [pc, #404]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b63      	ldr	r3, [pc, #396]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a5e      	ldr	r2, [pc, #376]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b5c      	ldr	r3, [pc, #368]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a57      	ldr	r2, [pc, #348]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b55      	ldr	r3, [pc, #340]	; (8000e78 <MX_GPIO_Init+0x240>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2138      	movs	r1, #56	; 0x38
 8000d32:	4852      	ldr	r0, [pc, #328]	; (8000e7c <MX_GPIO_Init+0x244>)
 8000d34:	f003 faa6 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4850      	ldr	r0, [pc, #320]	; (8000e80 <MX_GPIO_Init+0x248>)
 8000d3e:	f003 faa1 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d48:	484e      	ldr	r0, [pc, #312]	; (8000e84 <MX_GPIO_Init+0x24c>)
 8000d4a:	f003 fa9b 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	484c      	ldr	r0, [pc, #304]	; (8000e88 <MX_GPIO_Init+0x250>)
 8000d56:	f003 fa95 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d5a:	2338      	movs	r3, #56	; 0x38
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4842      	ldr	r0, [pc, #264]	; (8000e7c <MX_GPIO_Init+0x244>)
 8000d72:	f003 f8dd 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000d76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <MX_GPIO_Init+0x254>)
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4841      	ldr	r0, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x258>)
 8000d8c:	f003 f8d0 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000d90:	2302      	movs	r3, #2
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_GPIO_Init+0x254>)
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4837      	ldr	r0, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x248>)
 8000da4:	f003 f8c4 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000da8:	f248 0301 	movw	r3, #32769	; 0x8001
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <MX_GPIO_Init+0x254>)
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4835      	ldr	r0, [pc, #212]	; (8000e94 <MX_GPIO_Init+0x25c>)
 8000dbe:	f003 f8b7 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4829      	ldr	r0, [pc, #164]	; (8000e80 <MX_GPIO_Init+0x248>)
 8000dda:	f003 f8a9 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000dde:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <MX_GPIO_Init+0x254>)
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <MX_GPIO_Init+0x24c>)
 8000df4:	f003 f89c 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000df8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481c      	ldr	r0, [pc, #112]	; (8000e84 <MX_GPIO_Init+0x24c>)
 8000e12:	f003 f88d 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4816      	ldr	r0, [pc, #88]	; (8000e88 <MX_GPIO_Init+0x250>)
 8000e30:	f003 f87e 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_GPIO_Init+0x254>)
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <MX_GPIO_Init+0x250>)
 8000e4a:	f003 f871 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e4e:	2330      	movs	r3, #48	; 0x30
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_GPIO_Init+0x24c>)
 8000e6a:	f003 f861 	bl	8003f30 <HAL_GPIO_Init>

}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	10110000 	.word	0x10110000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40020000 	.word	0x40020000

08000e98 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000eb2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000eb6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000eba:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <MX_FSMC_Init+0x15c>)
 8000ebc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ebe:	4b4c      	ldr	r3, [pc, #304]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ed0:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ed6:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f22:	23ff      	movs	r3, #255	; 0xff
 8000f24:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f26:	230f      	movs	r3, #15
 8000f28:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f2e:	2311      	movs	r3, #17
 8000f30:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482c      	ldr	r0, [pc, #176]	; (8000ff0 <MX_FSMC_Init+0x158>)
 8000f3e:	f007 faf5 	bl	800852c <HAL_SRAM_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000f48:	f000 f916 	bl	8001178 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f4e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f52:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <MX_FSMC_Init+0x15c>)
 8000f58:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f6e:	2210      	movs	r2, #16
 8000f70:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fbe:	23ff      	movs	r3, #255	; 0xff
 8000fc0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fca:	2311      	movs	r3, #17
 8000fcc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_FSMC_Init+0x160>)
 8000fda:	f007 faa7 	bl	800852c <HAL_SRAM_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8000fe4:	f000 f8c8 	bl	8001178 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20004bd4 	.word	0x20004bd4
 8000ff4:	a0000104 	.word	0xa0000104
 8000ff8:	20004d54 	.word	0x20004d54

08000ffc <DrawScreenTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DrawScreenTask */
void DrawScreenTask(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001004:	f00e fe2a 	bl	800fc5c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (drawScreen)
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <DrawScreenTask+0x10c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0fb      	beq.n	8001008 <DrawScreenTask+0xc>
	  {
		  if (clearScreen)
 8001010:	4b3e      	ldr	r3, [pc, #248]	; (800110c <DrawScreenTask+0x110>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <DrawScreenTask+0x22>
	      {

	      	clearScreen = false;
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <DrawScreenTask+0x110>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

	      }

	      if (screenNum == 1)
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <DrawScreenTask+0x114>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d06b      	beq.n	80010fe <DrawScreenTask+0x102>
	      {

	      }
	      else if (screenNum == 2)
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <DrawScreenTask+0x114>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d167      	bne.n	80010fe <DrawScreenTask+0x102>
	      {
	    	  for (int i = 0; i <10; i++ )
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e061      	b.n	80010f8 <DrawScreenTask+0xfc>
	    	  {
	    		  for (int j = 0; j < 4; j++)
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	e058      	b.n	80010ec <DrawScreenTask+0xf0>
	    		  {
	    			  if (currentColorMap[i][j] != newColorMap[i][j])
 800103a:	4936      	ldr	r1, [pc, #216]	; (8001114 <DrawScreenTask+0x118>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	009a      	lsls	r2, r3, #2
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001048:	4833      	ldr	r0, [pc, #204]	; (8001118 <DrawScreenTask+0x11c>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	0099      	lsls	r1, r3, #2
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	440b      	add	r3, r1
 8001052:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001056:	429a      	cmp	r2, r3
 8001058:	d045      	beq.n	80010e6 <DrawScreenTask+0xea>
	    			  {
	    				  BSP_LCD_SetTextColor(newColorMap[i][j]);
 800105a:	492f      	ldr	r1, [pc, #188]	; (8001118 <DrawScreenTask+0x11c>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	009a      	lsls	r2, r3, #2
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4413      	add	r3, r2
 8001064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fe47 	bl	8002cfc <BSP_LCD_SetTextColor>
	    				  BSP_LCD_FillCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 800106e:	492b      	ldr	r1, [pc, #172]	; (800111c <DrawScreenTask+0x120>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	009a      	lsls	r2, r3, #2
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800107c:	b298      	uxth	r0, r3
 800107e:	4928      	ldr	r1, [pc, #160]	; (8001120 <DrawScreenTask+0x124>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	009a      	lsls	r2, r3, #2
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108c:	b29b      	uxth	r3, r3
 800108e:	2208      	movs	r2, #8
 8001090:	b292      	uxth	r2, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f001 ffaa 	bl	8002fec <BSP_LCD_FillCircle>
	    				  currentColorMap[i][j] = newColorMap[i][j];
 8001098:	491f      	ldr	r1, [pc, #124]	; (8001118 <DrawScreenTask+0x11c>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80010a6:	491b      	ldr	r1, [pc, #108]	; (8001114 <DrawScreenTask+0x118>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	009a      	lsls	r2, r3, #2
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4413      	add	r3, r2
 80010b0:	4602      	mov	r2, r0
 80010b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	    				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f001 fe20 	bl	8002cfc <BSP_LCD_SetTextColor>
	    				  BSP_LCD_DrawCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 80010bc:	4917      	ldr	r1, [pc, #92]	; (800111c <DrawScreenTask+0x120>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	009a      	lsls	r2, r3, #2
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4413      	add	r3, r2
 80010c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ca:	b298      	uxth	r0, r3
 80010cc:	4914      	ldr	r1, [pc, #80]	; (8001120 <DrawScreenTask+0x124>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	009a      	lsls	r2, r3, #2
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2208      	movs	r2, #8
 80010de:	b292      	uxth	r2, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f001 fec7 	bl	8002e74 <BSP_LCD_DrawCircle>
	    		  for (int j = 0; j < 4; j++)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	dda3      	ble.n	800103a <DrawScreenTask+0x3e>
	    	  for (int i = 0; i <10; i++ )
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	dd9a      	ble.n	8001034 <DrawScreenTask+0x38>
	      else if (screenNum == 3)
	      {

	      }

	      drawScreen = false;
 80010fe:	4b02      	ldr	r3, [pc, #8]	; (8001108 <DrawScreenTask+0x10c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	  if (drawScreen)
 8001104:	e780      	b.n	8001008 <DrawScreenTask+0xc>
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	20000000 	.word	0x20000000
 8001110:	20000004 	.word	0x20000004
 8001114:	20004b0c 	.word	0x20004b0c
 8001118:	20004d04 	.word	0x20004d04
 800111c:	08010510 	.word	0x08010510
 8001120:	080105b0 	.word	0x080105b0

08001124 <GameControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GameControlTask */
void GameControlTask(void *argument)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GameControlTask */
  /* Infinite loop */
  for(;;)
  {
	  if (screenNum == 1)
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <GameControlTask+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d0fb      	beq.n	800112c <GameControlTask+0x8>
	  {

	  }
	  else if (screenNum == 2)
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <GameControlTask+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d1f7      	bne.n	800112c <GameControlTask+0x8>

			  generateSolution = false;*/
		  }


		  if (gameover)
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <GameControlTask+0x2c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f3      	beq.n	800112c <GameControlTask+0x8>
		  {
			  screenNum = 3;
 8001144:	4b01      	ldr	r3, [pc, #4]	; (800114c <GameControlTask+0x28>)
 8001146:	2203      	movs	r2, #3
 8001148:	601a      	str	r2, [r3, #0]
	  if (screenNum == 1)
 800114a:	e7ef      	b.n	800112c <GameControlTask+0x8>
 800114c:	20000004 	.word	0x20000004
 8001150:	2000010c 	.word	0x2000010c

08001154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001166:	f002 f851 	bl	800320c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40001000 	.word	0x40001000

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a31      	ldr	r2, [pc, #196]	; (80012bc <HAL_ADC_MspInit+0xe4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d15b      	bne.n	80012b2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_ADC_MspInit+0xe8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800126a:	2311      	movs	r3, #17
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <HAL_ADC_MspInit+0xec>)
 800127e:	f002 fe57 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001282:	2326      	movs	r3, #38	; 0x26
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <HAL_ADC_MspInit+0xf0>)
 8001296:	f002 fe4b 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800129a:	2302      	movs	r3, #2
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <HAL_ADC_MspInit+0xf4>)
 80012ae:	f002 fe3f 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012000 	.word	0x40012000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <HAL_DAC_MspInit+0x8c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12f      	bne.n	8001352 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_DAC_MspInit+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_DAC_MspInit+0x90>)
 80012fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_DAC_MspInit+0x90>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_DAC_MspInit+0x90>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_DAC_MspInit+0x90>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_DAC_MspInit+0x90>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800132a:	2310      	movs	r3, #16
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_DAC_MspInit+0x94>)
 800133e:	f002 fdf7 	bl	8003f30 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2036      	movs	r0, #54	; 0x36
 8001348:	f002 facc 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134c:	2036      	movs	r0, #54	; 0x36
 800134e:	f002 fae5 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40007400 	.word	0x40007400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a77      	ldr	r2, [pc, #476]	; (8001564 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00e      	beq.n	80013a8 <HAL_DFSDM_ChannelMspInit+0x40>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a76      	ldr	r2, [pc, #472]	; (8001568 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d009      	beq.n	80013a8 <HAL_DFSDM_ChannelMspInit+0x40>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a74      	ldr	r2, [pc, #464]	; (800156c <HAL_DFSDM_ChannelMspInit+0x204>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d004      	beq.n	80013a8 <HAL_DFSDM_ChannelMspInit+0x40>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	; (8001570 <HAL_DFSDM_ChannelMspInit+0x208>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d154      	bne.n	8001452 <HAL_DFSDM_ChannelMspInit+0xea>
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d150      	bne.n	8001452 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	4a6f      	ldr	r2, [pc, #444]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a68      	ldr	r2, [pc, #416]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a61      	ldr	r2, [pc, #388]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001416:	2306      	movs	r3, #6
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	4856      	ldr	r0, [pc, #344]	; (800157c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001422:	f002 fd85 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001426:	2340      	movs	r3, #64	; 0x40
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001436:	2306      	movs	r3, #6
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	484f      	ldr	r0, [pc, #316]	; (8001580 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001442:	f002 fd75 	bl	8003f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001446:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800144e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001450:	e084      	b.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a43      	ldr	r2, [pc, #268]	; (8001564 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d07f      	beq.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a41      	ldr	r2, [pc, #260]	; (8001568 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d07a      	beq.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <HAL_DFSDM_ChannelMspInit+0x204>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d075      	beq.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3e      	ldr	r2, [pc, #248]	; (8001570 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d070      	beq.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d16c      	bne.n	800155c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a3b      	ldr	r2, [pc, #236]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 800148c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a34      	ldr	r2, [pc, #208]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001502:	2307      	movs	r3, #7
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	481b      	ldr	r0, [pc, #108]	; (800157c <HAL_DFSDM_ChannelMspInit+0x214>)
 800150e:	f002 fd0f 	bl	8003f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001512:	2304      	movs	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001522:	2303      	movs	r3, #3
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4814      	ldr	r0, [pc, #80]	; (8001580 <HAL_DFSDM_ChannelMspInit+0x218>)
 800152e:	f002 fcff 	bl	8003f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001542:	2306      	movs	r3, #6
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <HAL_DFSDM_ChannelMspInit+0x220>)
 800154e:	f002 fcef 	bl	8003f30 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40016000 	.word	0x40016000
 8001568:	40016020 	.word	0x40016020
 800156c:	40016040 	.word	0x40016040
 8001570:	40016060 	.word	0x40016060
 8001574:	20000110 	.word	0x20000110
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020c00 	.word	0x40020c00
 8001584:	20000114 	.word	0x20000114
 8001588:	40020400 	.word	0x40020400

0800158c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_FMPI2C_MspInit+0x84>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d12b      	bne.n	8001606 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ce:	2312      	movs	r3, #18
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80015da:	2304      	movs	r3, #4
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <HAL_FMPI2C_MspInit+0x8c>)
 80015e6:	f002 fca3 	bl	8003f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_FMPI2C_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40006000 	.word	0x40006000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_I2C_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800165a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001660:	2312      	movs	r3, #18
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001664:	2301      	movs	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800166c:	2304      	movs	r3, #4
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_I2C_MspInit+0x8c>)
 8001678:	f002 fc5a 	bl	8003f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005800 	.word	0x40005800
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_I2S_MspInit+0x15c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 8097 	bne.w	80017fe <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a45      	ldr	r2, [pc, #276]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_I2S_MspInit+0x160>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_I2S_MspInit+0x160>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_I2S_MspInit+0x160>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_I2S_MspInit+0x160>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_I2S_MspInit+0x160>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_I2S_MspInit+0x160>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_I2S_MspInit+0x160>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_I2S_MspInit+0x160>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <HAL_I2S_MspInit+0x160>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <HAL_I2S_MspInit+0x160>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800175c:	2304      	movs	r3, #4
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800176c:	2306      	movs	r3, #6
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4826      	ldr	r0, [pc, #152]	; (8001810 <HAL_I2S_MspInit+0x164>)
 8001778:	f002 fbda 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800177c:	2308      	movs	r3, #8
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178c:	2305      	movs	r3, #5
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <HAL_I2S_MspInit+0x164>)
 8001798:	f002 fbca 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800179c:	2308      	movs	r3, #8
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ac:	2305      	movs	r3, #5
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4817      	ldr	r0, [pc, #92]	; (8001814 <HAL_I2S_MspInit+0x168>)
 80017b8:	f002 fbba 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80017bc:	2308      	movs	r3, #8
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017cc:	2305      	movs	r3, #5
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <HAL_I2S_MspInit+0x16c>)
 80017d8:	f002 fbaa 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80017dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ee:	2305      	movs	r3, #5
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <HAL_I2S_MspInit+0x170>)
 80017fa:	f002 fb99 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40003800 	.word	0x40003800
 800180c:	40023800 	.word	0x40023800
 8001810:	40020800 	.word	0x40020800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40020400 	.word	0x40020400

08001820 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_QSPI_MspInit+0x178>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 80a6 	bne.w	8001990 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	4b54      	ldr	r3, [pc, #336]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	4a53      	ldr	r2, [pc, #332]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	6393      	str	r3, [r2, #56]	; 0x38
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a37      	ldr	r2, [pc, #220]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_QSPI_MspInit+0x17c>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80018ec:	2304      	movs	r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018fc:	2309      	movs	r3, #9
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	4826      	ldr	r0, [pc, #152]	; (80019a0 <HAL_QSPI_MspInit+0x180>)
 8001908:	f002 fb12 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800190c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800191e:	230a      	movs	r3, #10
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	481e      	ldr	r0, [pc, #120]	; (80019a4 <HAL_QSPI_MspInit+0x184>)
 800192a:	f002 fb01 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800192e:	2304      	movs	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800193e:	2309      	movs	r3, #9
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <HAL_QSPI_MspInit+0x188>)
 800194a:	f002 faf1 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001960:	2309      	movs	r3, #9
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4810      	ldr	r0, [pc, #64]	; (80019ac <HAL_QSPI_MspInit+0x18c>)
 800196c:	f002 fae0 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001980:	230a      	movs	r3, #10
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_QSPI_MspInit+0x190>)
 800198c:	f002 fad0 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	a0001000 	.word	0xa0001000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40021400 	.word	0x40021400
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021800 	.word	0x40021800

080019b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <HAL_SD_MspInit+0xc0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d14a      	bne.n	8001a6c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 80019e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_SD_MspInit+0xc4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001a2a:	2340      	movs	r3, #64	; 0x40
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <HAL_SD_MspInit+0xc8>)
 8001a46:	f002 fa73 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001a4a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a4e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <HAL_SD_MspInit+0xcc>)
 8001a68:	f002 fa62 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020800 	.word	0x40020800

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_UART_MspInit+0xec>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12d      	bne.n	8001b02 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001ade:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001af0:	230b      	movs	r3, #11
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <HAL_UART_MspInit+0xf4>)
 8001afc:	f002 fa18 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b00:	e031      	b.n	8001b66 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_UART_MspInit+0xf8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12c      	bne.n	8001b66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_UART_MspInit+0xf0>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001b44:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b56:	2308      	movs	r3, #8
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_UART_MspInit+0xf4>)
 8001b62:	f002 f9e5 	bl	8003f30 <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40011c00 	.word	0x40011c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40021800 	.word	0x40021800
 8001b7c:	40011400 	.word	0x40011400

08001b80 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_FSMC_MspInit+0xc8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d151      	bne.n	8001c40 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_FSMC_MspInit+0xc8>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_FSMC_MspInit+0xcc>)
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <HAL_FSMC_MspInit+0xcc>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6393      	str	r3, [r2, #56]	; 0x38
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_FSMC_MspInit+0xcc>)
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001bbe:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001bc2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481d      	ldr	r0, [pc, #116]	; (8001c50 <HAL_FSMC_MspInit+0xd0>)
 8001bda:	f002 f9a9 	bl	8003f30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001bde:	f240 433f 	movw	r3, #1087	; 0x43f
 8001be2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4816      	ldr	r0, [pc, #88]	; (8001c54 <HAL_FSMC_MspInit+0xd4>)
 8001bfa:	f002 f999 	bl	8003f30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001bfe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c02:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c10:	230c      	movs	r3, #12
 8001c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	480f      	ldr	r0, [pc, #60]	; (8001c58 <HAL_FSMC_MspInit+0xd8>)
 8001c1a:	f002 f989 	bl	8003f30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001c1e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001c22:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c30:	230c      	movs	r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <HAL_FSMC_MspInit+0xdc>)
 8001c3a:	f002 f979 	bl	8003f30 <HAL_GPIO_Init>
 8001c3e:	e000      	b.n	8001c42 <HAL_FSMC_MspInit+0xc2>
    return;
 8001c40:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000118 	.word	0x20000118
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40020c00 	.word	0x40020c00

08001c60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001c68:	f7ff ff8a 	bl	8001b80 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	2036      	movs	r0, #54	; 0x36
 8001c8a:	f001 fe2b 	bl	80038e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c8e:	2036      	movs	r0, #54	; 0x36
 8001c90:	f001 fe44 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_InitTick+0xa0>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_InitTick+0xa0>)
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_InitTick+0xa0>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb0:	f107 0210 	add.w	r2, r7, #16
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f005 f87a 	bl	8006db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f005 f850 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8001cc4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <HAL_InitTick+0xa4>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9b      	lsrs	r3, r3, #18
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_InitTick+0xa8>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <HAL_InitTick+0xac>)
 8001cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_InitTick+0xa8>)
 8001cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_InitTick+0xa8>)
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_InitTick+0xa8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_InitTick+0xa8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <HAL_InitTick+0xa8>)
 8001cf6:	f006 fc5d 	bl	80085b4 <HAL_TIM_Base_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <HAL_InitTick+0xa8>)
 8001d02:	f006 fc8c 	bl	800861e <HAL_TIM_Base_Start_IT>
 8001d06:	4603      	mov	r3, r0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	20004f0c 	.word	0x20004f0c
 8001d20:	40001000 	.word	0x40001000

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d5c:	2040      	movs	r0, #64	; 0x40
 8001d5e:	f002 faab 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d62:	2080      	movs	r0, #128	; 0x80
 8001d64:	f002 faa8 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d6c:	f002 faa4 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6))
 8001d70:	2140      	movs	r1, #64	; 0x40
 8001d72:	4821      	ldr	r0, [pc, #132]	; (8001df8 <EXTI9_5_IRQHandler+0xa0>)
 8001d74:	f002 fa6e 	bl	8004254 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00e      	beq.n	8001d9c <EXTI9_5_IRQHandler+0x44>
  {

	  newColorMap[gameRound][currentCol] = LCD_COLOR_GREEN;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <EXTI9_5_IRQHandler+0xa4>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <EXTI9_5_IRQHandler+0xa8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	491f      	ldr	r1, [pc, #124]	; (8001e04 <EXTI9_5_IRQHandler+0xac>)
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <EXTI9_5_IRQHandler+0xb0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
	  drawScreen = true;

  }

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d9a:	e02a      	b.n	8001df2 <EXTI9_5_IRQHandler+0x9a>
  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7))
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4816      	ldr	r0, [pc, #88]	; (8001df8 <EXTI9_5_IRQHandler+0xa0>)
 8001da0:	f002 fa58 	bl	8004254 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00e      	beq.n	8001dc8 <EXTI9_5_IRQHandler+0x70>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_YELLOW;
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <EXTI9_5_IRQHandler+0xa4>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <EXTI9_5_IRQHandler+0xa8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4914      	ldr	r1, [pc, #80]	; (8001e04 <EXTI9_5_IRQHandler+0xac>)
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <EXTI9_5_IRQHandler+0xb0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
}
 8001dc6:	e014      	b.n	8001df2 <EXTI9_5_IRQHandler+0x9a>
  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <EXTI9_5_IRQHandler+0xb4>)
 8001dce:	f002 fa41 	bl	8004254 <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <EXTI9_5_IRQHandler+0x9a>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_BLACK;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <EXTI9_5_IRQHandler+0xa4>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <EXTI9_5_IRQHandler+0xa8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4908      	ldr	r1, [pc, #32]	; (8001e04 <EXTI9_5_IRQHandler+0xac>)
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <EXTI9_5_IRQHandler+0xb0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	2000011c 	.word	0x2000011c
 8001e00:	20000120 	.word	0x20000120
 8001e04:	20004d04 	.word	0x20004d04
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	40020400 	.word	0x40020400

08001e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e18:	f002 fa4e 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e20:	f002 fa4a 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e28:	f002 fa46 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e30:	f002 fa42 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10))
 8001e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e38:	482e      	ldr	r0, [pc, #184]	; (8001ef4 <EXTI15_10_IRQHandler+0xe4>)
 8001e3a:	f002 fa0b 	bl	8004254 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <EXTI15_10_IRQHandler+0x50>
  {

	  newColorMap[gameRound][currentCol] = LCD_COLOR_BLUE;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <EXTI15_10_IRQHandler+0xe8>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	492c      	ldr	r1, [pc, #176]	; (8001f00 <EXTI15_10_IRQHandler+0xf0>)
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	221f      	movs	r2, #31
 8001e54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <EXTI15_10_IRQHandler+0xf4>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
	  newColorMap[gameRound][currentCol] = LCD_COLOR_MAGENTA;
	  drawScreen = true;
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e5e:	e046      	b.n	8001eee <EXTI15_10_IRQHandler+0xde>
  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 8001e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e64:	4828      	ldr	r0, [pc, #160]	; (8001f08 <EXTI15_10_IRQHandler+0xf8>)
 8001e66:	f002 f9f5 	bl	8004254 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d011      	beq.n	8001e94 <EXTI15_10_IRQHandler+0x84>
	  currentCol++;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001e78:	6013      	str	r3, [r2, #0]
	  if (currentCol == 4)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d135      	bne.n	8001eee <EXTI15_10_IRQHandler+0xde>
		  currentCol = 0;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
	  	  gameRound++;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <EXTI15_10_IRQHandler+0xe8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <EXTI15_10_IRQHandler+0xe8>)
 8001e90:	6013      	str	r3, [r2, #0]
}
 8001e92:	e02c      	b.n	8001eee <EXTI15_10_IRQHandler+0xde>
  else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13))
 8001e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <EXTI15_10_IRQHandler+0xfc>)
 8001e9a:	f002 f9db 	bl	8004254 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <EXTI15_10_IRQHandler+0xb2>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_RED;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <EXTI15_10_IRQHandler+0xe8>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4914      	ldr	r1, [pc, #80]	; (8001f00 <EXTI15_10_IRQHandler+0xf0>)
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001eb6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <EXTI15_10_IRQHandler+0xf4>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
}
 8001ec0:	e015      	b.n	8001eee <EXTI15_10_IRQHandler+0xde>
  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8001ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <EXTI15_10_IRQHandler+0x100>)
 8001ec8:	f002 f9c4 	bl	8004254 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <EXTI15_10_IRQHandler+0xde>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_MAGENTA;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <EXTI15_10_IRQHandler+0xe8>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <EXTI15_10_IRQHandler+0xec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4909      	ldr	r1, [pc, #36]	; (8001f00 <EXTI15_10_IRQHandler+0xf0>)
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001ee4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <EXTI15_10_IRQHandler+0xf4>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	2000011c 	.word	0x2000011c
 8001efc:	20000120 	.word	0x20000120
 8001f00:	20004d04 	.word	0x20004d04
 8001f04:	20000008 	.word	0x20000008
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40020000 	.word	0x40020000

08001f14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <TIM6_DAC_IRQHandler+0x14>)
 8001f1a:	f001 fd2f 	bl	800397c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <TIM6_DAC_IRQHandler+0x18>)
 8001f20:	f006 fba1 	bl	8008666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20004ca4 	.word	0x20004ca4
 8001f2c:	20004f0c 	.word	0x20004f0c

08001f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <OTG_FS_IRQHandler+0x10>)
 8001f36:	f002 fc71 	bl	800481c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200053a4 	.word	0x200053a4

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f00e f974 	bl	8010260 <__errno>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20050000 	.word	0x20050000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000124 	.word	0x20000124
 8001fac:	20005670 	.word	0x20005670

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <SystemInit+0x28>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <SystemInit+0x28>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SystemInit+0x28>)
 8001fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fca:	609a      	str	r2, [r3, #8]
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fe2:	e003      	b.n	8001fec <LoopCopyDataInit>

08001fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fea:	3104      	adds	r1, #4

08001fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff4:	d3f6      	bcc.n	8001fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff8:	e002      	b.n	8002000 <LoopFillZerobss>

08001ffa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ffc:	f842 3b04 	str.w	r3, [r2], #4

08002000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002004:	d3f9      	bcc.n	8001ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002006:	f7ff ffd3 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f00e f92f 	bl	801026c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7fe fa87 	bl	8000520 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002014:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002018:	080125a4 	.word	0x080125a4
  ldr  r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002020:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8002024:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8002028:	2000566c 	.word	0x2000566c

0800202c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC_IRQHandler>

0800202e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002034:	f000 fd6e 	bl	8002b14 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2010      	movs	r0, #16
 800203e:	f000 f9e4 	bl	800240a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002042:	200a      	movs	r0, #10
 8002044:	f000 fd8d 	bl	8002b62 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2001      	movs	r0, #1
 800204e:	f000 f9dc 	bl	800240a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002052:	20c8      	movs	r0, #200	; 0xc8
 8002054:	f000 fd85 	bl	8002b62 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2011      	movs	r0, #17
 800205e:	f000 f9d4 	bl	800240a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8002062:	2078      	movs	r0, #120	; 0x78
 8002064:	f000 fd7d 	bl	8002b62 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002068:	2300      	movs	r3, #0
 800206a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800206c:	463b      	mov	r3, r7
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	2036      	movs	r0, #54	; 0x36
 8002074:	f000 f9c9 	bl	800240a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002078:	2305      	movs	r3, #5
 800207a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800207c:	463b      	mov	r3, r7
 800207e:	2201      	movs	r2, #1
 8002080:	4619      	mov	r1, r3
 8002082:	203a      	movs	r0, #58	; 0x3a
 8002084:	f000 f9c1 	bl	800240a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2021      	movs	r0, #33	; 0x21
 800208e:	f000 f9bc 	bl	800240a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800209e:	23ef      	movs	r3, #239	; 0xef
 80020a0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80020a2:	463b      	mov	r3, r7
 80020a4:	2204      	movs	r2, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	202a      	movs	r0, #42	; 0x2a
 80020aa:	f000 f9ae 	bl	800240a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80020ba:	23ef      	movs	r3, #239	; 0xef
 80020bc:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80020be:	463b      	mov	r3, r7
 80020c0:	2204      	movs	r2, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	202b      	movs	r0, #43	; 0x2b
 80020c6:	f000 f9a0 	bl	800240a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80020ca:	230c      	movs	r3, #12
 80020cc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80020ce:	230c      	movs	r3, #12
 80020d0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80020d6:	2333      	movs	r3, #51	; 0x33
 80020d8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80020da:	2333      	movs	r3, #51	; 0x33
 80020dc:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80020de:	463b      	mov	r3, r7
 80020e0:	2205      	movs	r2, #5
 80020e2:	4619      	mov	r1, r3
 80020e4:	20b2      	movs	r0, #178	; 0xb2
 80020e6:	f000 f990 	bl	800240a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80020ea:	2335      	movs	r3, #53	; 0x35
 80020ec:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80020ee:	463b      	mov	r3, r7
 80020f0:	2201      	movs	r2, #1
 80020f2:	4619      	mov	r1, r3
 80020f4:	20b7      	movs	r0, #183	; 0xb7
 80020f6:	f000 f988 	bl	800240a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80020fa:	231f      	movs	r3, #31
 80020fc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80020fe:	463b      	mov	r3, r7
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	20bb      	movs	r0, #187	; 0xbb
 8002106:	f000 f980 	bl	800240a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800210a:	232c      	movs	r3, #44	; 0x2c
 800210c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800210e:	463b      	mov	r3, r7
 8002110:	2201      	movs	r2, #1
 8002112:	4619      	mov	r1, r3
 8002114:	20c0      	movs	r0, #192	; 0xc0
 8002116:	f000 f978 	bl	800240a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800211a:	2301      	movs	r3, #1
 800211c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800211e:	23c3      	movs	r3, #195	; 0xc3
 8002120:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002122:	463b      	mov	r3, r7
 8002124:	2202      	movs	r2, #2
 8002126:	4619      	mov	r1, r3
 8002128:	20c2      	movs	r0, #194	; 0xc2
 800212a:	f000 f96e 	bl	800240a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800212e:	2320      	movs	r3, #32
 8002130:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002132:	463b      	mov	r3, r7
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	20c4      	movs	r0, #196	; 0xc4
 800213a:	f000 f966 	bl	800240a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800213e:	230f      	movs	r3, #15
 8002140:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002142:	463b      	mov	r3, r7
 8002144:	2201      	movs	r2, #1
 8002146:	4619      	mov	r1, r3
 8002148:	20c6      	movs	r0, #198	; 0xc6
 800214a:	f000 f95e 	bl	800240a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800214e:	23a4      	movs	r3, #164	; 0xa4
 8002150:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002152:	23a1      	movs	r3, #161	; 0xa1
 8002154:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002156:	463b      	mov	r3, r7
 8002158:	2201      	movs	r2, #1
 800215a:	4619      	mov	r1, r3
 800215c:	20d0      	movs	r0, #208	; 0xd0
 800215e:	f000 f954 	bl	800240a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002162:	23d0      	movs	r3, #208	; 0xd0
 8002164:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002166:	2308      	movs	r3, #8
 8002168:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800216a:	2311      	movs	r3, #17
 800216c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800216e:	2308      	movs	r3, #8
 8002170:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002172:	230c      	movs	r3, #12
 8002174:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002176:	2315      	movs	r3, #21
 8002178:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800217a:	2339      	movs	r3, #57	; 0x39
 800217c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800217e:	2333      	movs	r3, #51	; 0x33
 8002180:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002182:	2350      	movs	r3, #80	; 0x50
 8002184:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002186:	2336      	movs	r3, #54	; 0x36
 8002188:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800218a:	2313      	movs	r3, #19
 800218c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800218e:	2314      	movs	r3, #20
 8002190:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002192:	2329      	movs	r3, #41	; 0x29
 8002194:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002196:	232d      	movs	r3, #45	; 0x2d
 8002198:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800219a:	463b      	mov	r3, r7
 800219c:	220e      	movs	r2, #14
 800219e:	4619      	mov	r1, r3
 80021a0:	20e0      	movs	r0, #224	; 0xe0
 80021a2:	f000 f932 	bl	800240a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80021a6:	23d0      	movs	r3, #208	; 0xd0
 80021a8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80021aa:	2308      	movs	r3, #8
 80021ac:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80021ae:	2310      	movs	r3, #16
 80021b0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80021b2:	2308      	movs	r3, #8
 80021b4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80021b6:	2306      	movs	r3, #6
 80021b8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80021ba:	2306      	movs	r3, #6
 80021bc:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80021be:	2339      	movs	r3, #57	; 0x39
 80021c0:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80021c2:	2344      	movs	r3, #68	; 0x44
 80021c4:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80021c6:	2351      	movs	r3, #81	; 0x51
 80021c8:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80021ca:	230b      	movs	r3, #11
 80021cc:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80021ce:	2316      	movs	r3, #22
 80021d0:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80021d2:	2314      	movs	r3, #20
 80021d4:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80021d6:	232f      	movs	r3, #47	; 0x2f
 80021d8:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80021da:	2331      	movs	r3, #49	; 0x31
 80021dc:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80021de:	463b      	mov	r3, r7
 80021e0:	220e      	movs	r2, #14
 80021e2:	4619      	mov	r1, r3
 80021e4:	20e1      	movs	r0, #225	; 0xe1
 80021e6:	f000 f910 	bl	800240a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80021ea:	f000 f847 	bl	800227c <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80021ee:	2300      	movs	r3, #0
 80021f0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80021f2:	463b      	mov	r3, r7
 80021f4:	2201      	movs	r2, #1
 80021f6:	4619      	mov	r1, r3
 80021f8:	2035      	movs	r0, #53	; 0x35
 80021fa:	f000 f906 	bl	800240a <ST7789H2_WriteReg>

}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002214:	2300      	movs	r3, #0
 8002216:	723b      	strb	r3, [r7, #8]
 8002218:	e025      	b.n	8002266 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d120      	bne.n	8002262 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002224:	2300      	movs	r3, #0
 8002226:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002228:	2301      	movs	r3, #1
 800222a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800222c:	23f0      	movs	r3, #240	; 0xf0
 800222e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002234:	2300      	movs	r3, #0
 8002236:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	2206      	movs	r2, #6
 800223e:	4619      	mov	r1, r3
 8002240:	2033      	movs	r0, #51	; 0x33
 8002242:	f000 f8e2 	bl	800240a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800224a:	2350      	movs	r3, #80	; 0x50
 800224c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2202      	movs	r2, #2
 8002254:	4619      	mov	r1, r3
 8002256:	2037      	movs	r0, #55	; 0x37
 8002258:	f000 f8d7 	bl	800240a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	723b      	strb	r3, [r7, #8]
 8002260:	e001      	b.n	8002266 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002262:	2360      	movs	r3, #96	; 0x60
 8002264:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	2036      	movs	r0, #54	; 0x36
 8002270:	f000 f8cb 	bl	800240a <ST7789H2_WriteReg>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2029      	movs	r0, #41	; 0x29
 8002286:	f000 f8c0 	bl	800240a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2011      	movs	r0, #17
 8002290:	f000 f8bb 	bl	800240a <ST7789H2_WriteReg>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800229e:	23fe      	movs	r3, #254	; 0xfe
 80022a0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2201      	movs	r2, #1
 80022a6:	4619      	mov	r1, r3
 80022a8:	20bd      	movs	r0, #189	; 0xbd
 80022aa:	f000 f8ae 	bl	800240a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2010      	movs	r0, #16
 80022b4:	f000 f8a9 	bl	800240a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80022b8:	200a      	movs	r0, #10
 80022ba:	f000 fc52 	bl	8002b62 <LCD_IO_Delay>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80022ca:	23f0      	movs	r3, #240	; 0xf0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80022da:	23f0      	movs	r3, #240	; 0xf0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80022ea:	f000 fc13 	bl	8002b14 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80022ee:	2004      	movs	r0, #4
 80022f0:	f000 f8ad 	bl	800244e <ST7789H2_ReadReg>
 80022f4:	4603      	mov	r3, r0
 80022f6:	b29b      	uxth	r3, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}

080022fc <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	80fb      	strh	r3, [r7, #6]
 8002308:	4613      	mov	r3, r2
 800230a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 800230c:	2300      	movs	r3, #0
 800230e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002316:	2300      	movs	r3, #0
 8002318:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3b11      	subs	r3, #17
 8002320:	b2db      	uxtb	r3, r3
 8002322:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2204      	movs	r2, #4
 800232a:	4619      	mov	r1, r3
 800232c:	202a      	movs	r0, #42	; 0x2a
 800232e:	f000 f86c 	bl	800240a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002336:	88bb      	ldrh	r3, [r7, #4]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800233c:	2300      	movs	r3, #0
 800233e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002340:	88bb      	ldrh	r3, [r7, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3b11      	subs	r3, #17
 8002346:	b2db      	uxtb	r3, r3
 8002348:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	2204      	movs	r2, #4
 8002350:	4619      	mov	r1, r3
 8002352:	202b      	movs	r0, #43	; 0x2b
 8002354:	f000 f859 	bl	800240a <ST7789H2_WriteReg>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	460b      	mov	r3, r1
 800236c:	80bb      	strh	r3, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002372:	88ba      	ldrh	r2, [r7, #4]
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffbf 	bl	80022fc <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	202c      	movs	r0, #44	; 0x2c
 8002384:	f000 f841 	bl	800240a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fbc8 	bl	8002b20 <LCD_IO_WriteData>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	80fb      	strh	r3, [r7, #6]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80023a8:	88ba      	ldrh	r2, [r7, #4]
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffa4 	bl	80022fc <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80023b4:	88ba      	ldrh	r2, [r7, #4]
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f9bd 	bl	800273a <ST7789H2_ReadPixel_rgb888>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	733a      	strb	r2, [r7, #12]
 80023c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80023ca:	737a      	strb	r2, [r7, #13]
 80023cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023d0:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80023d8:	7b7b      	ldrb	r3, [r7, #13]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	02db      	lsls	r3, r3, #11
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	7dbb      	ldrb	r3, [r7, #22]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	7d7b      	ldrb	r3, [r7, #21]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002400:	8a7b      	ldrh	r3, [r7, #18]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	6039      	str	r1, [r7, #0]
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	4613      	mov	r3, r2
 8002418:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fb8c 	bl	8002b3a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e00a      	b.n	800243e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb74 	bl	8002b20 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3f0      	bcc.n	8002428 <ST7789H2_WriteReg+0x1e>
  }
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb6d 	bl	8002b3a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002460:	f000 fb78 	bl	8002b54 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002464:	f000 fb76 	bl	8002b54 <LCD_IO_ReadData>
 8002468:	4603      	mov	r3, r0
 800246a:	b2db      	uxtb	r3, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002474:	b490      	push	{r4, r7}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	4603      	mov	r3, r0
 8002488:	80bb      	strh	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2bef      	cmp	r3, #239	; 0xef
 8002496:	d803      	bhi.n	80024a0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <ST7789H2_SetDisplayWindow+0x94>)
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	8013      	strh	r3, [r2, #0]
 800249e:	e002      	b.n	80024a6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <ST7789H2_SetDisplayWindow+0x94>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	2bef      	cmp	r3, #239	; 0xef
 80024aa:	d803      	bhi.n	80024b4 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <ST7789H2_SetDisplayWindow+0x98>)
 80024ae:	88bb      	ldrh	r3, [r7, #4]
 80024b0:	8013      	strh	r3, [r2, #0]
 80024b2:	e002      	b.n	80024ba <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <ST7789H2_SetDisplayWindow+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4413      	add	r3, r2
 80024c0:	2bf0      	cmp	r3, #240	; 0xf0
 80024c2:	dc08      	bgt.n	80024d6 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <ST7789H2_SetDisplayWindow+0x9c>)
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	e002      	b.n	80024dc <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <ST7789H2_SetDisplayWindow+0x9c>)
 80024d8:	22ef      	movs	r2, #239	; 0xef
 80024da:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80024dc:	883a      	ldrh	r2, [r7, #0]
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	2bf0      	cmp	r3, #240	; 0xf0
 80024e4:	dc08      	bgt.n	80024f8 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80024e6:	883a      	ldrh	r2, [r7, #0]
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <ST7789H2_SetDisplayWindow+0xa0>)
 80024f4:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80024f6:	e002      	b.n	80024fe <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <ST7789H2_SetDisplayWindow+0xa0>)
 80024fa:	22ef      	movs	r2, #239	; 0xef
 80024fc:	801a      	strh	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bc90      	pop	{r4, r7}
 8002506:	4770      	bx	lr
 8002508:	20000128 	.word	0x20000128
 800250c:	2000012a 	.word	0x2000012a
 8002510:	20000048 	.word	0x20000048
 8002514:	2000004a 	.word	0x2000004a

08002518 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	4604      	mov	r4, r0
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4623      	mov	r3, r4
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	4603      	mov	r3, r0
 800252c:	80bb      	strh	r3, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]
 8002532:	4613      	mov	r3, r2
 8002534:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	88bb      	ldrh	r3, [r7, #4]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fedb 	bl	80022fc <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	202c      	movs	r0, #44	; 0x2c
 800254c:	f7ff ff5d 	bl	800240a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002550:	2300      	movs	r3, #0
 8002552:	81fb      	strh	r3, [r7, #14]
 8002554:	e006      	b.n	8002564 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fae1 	bl	8002b20 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800255e:	89fb      	ldrh	r3, [r7, #14]
 8002560:	3301      	adds	r3, #1
 8002562:	81fb      	strh	r3, [r7, #14]
 8002564:	89fa      	ldrh	r2, [r7, #14]
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d3f4      	bcc.n	8002556 <ST7789H2_DrawHLine+0x3e>
  }  
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4623      	mov	r3, r4
 8002584:	80fb      	strh	r3, [r7, #6]
 8002586:	4603      	mov	r3, r0
 8002588:	80bb      	strh	r3, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	88bb      	ldrh	r3, [r7, #4]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fead 	bl	80022fc <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	202c      	movs	r0, #44	; 0x2c
 80025a8:	f7ff ff2f 	bl	800240a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	81fb      	strh	r3, [r7, #14]
 80025b0:	e00b      	b.n	80025ca <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	89fb      	ldrh	r3, [r7, #14]
 80025b6:	4413      	add	r3, r2
 80025b8:	b299      	uxth	r1, r3
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fece 	bl	8002360 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	3301      	adds	r3, #1
 80025c8:	81fb      	strh	r3, [r7, #14]
 80025ca:	89fa      	ldrh	r2, [r7, #14]
 80025cc:	883b      	ldrh	r3, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3ef      	bcc.n	80025b2 <ST7789H2_DrawVLine+0x3e>
  }
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}
	...

080025dc <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	603a      	str	r2, [r7, #0]
 80025e6:	80fb      	strh	r3, [r7, #6]
 80025e8:	460b      	mov	r3, r1
 80025ea:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <ST7789H2_DrawBitmap+0xdc>)
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <ST7789H2_DrawBitmap+0xe0>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <ST7789H2_DrawBitmap+0xe4>)
 800260a:	881a      	ldrh	r2, [r3, #0]
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <ST7789H2_DrawBitmap+0xe8>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	b29b      	uxth	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	3302      	adds	r3, #2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	461a      	mov	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	330a      	adds	r3, #10
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	461a      	mov	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002662:	88ba      	ldrh	r2, [r7, #4]
 8002664:	89bb      	ldrh	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e01d      	b.n	80026a8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fe3f 	bl	80022fc <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b299      	uxth	r1, r3
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	89fa      	ldrh	r2, [r7, #14]
 8002696:	88f8      	ldrh	r0, [r7, #6]
 8002698:	f000 f898 	bl	80027cc <ST7789H2_DrawRGBHLine>
    nb_line++;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3301      	adds	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8dd      	bhi.n	800266c <ST7789H2_DrawBitmap+0x90>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000048 	.word	0x20000048
 80026bc:	20000128 	.word	0x20000128
 80026c0:	2000004a 	.word	0x2000004a
 80026c4:	2000012a 	.word	0x2000012a

080026c8 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4604      	mov	r4, r0
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	80fb      	strh	r3, [r7, #6]
 80026da:	4603      	mov	r3, r0
 80026dc:	80bb      	strh	r3, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
 80026e2:	4613      	mov	r3, r2
 80026e4:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80026ea:	88bb      	ldrh	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e019      	b.n	8002724 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fdff 	bl	80022fc <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	b299      	uxth	r1, r3
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	4413      	add	r3, r2
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	88f8      	ldrh	r0, [r7, #6]
 8002714:	f000 f85a 	bl	80027cc <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	88ba      	ldrh	r2, [r7, #4]
 8002726:	883b      	ldrh	r3, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4293      	cmp	r3, r2
 8002730:	d3de      	bcc.n	80026f0 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	460a      	mov	r2, r1
 8002744:	80fb      	strh	r3, [r7, #6]
 8002746:	4613      	mov	r3, r2
 8002748:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800274a:	88ba      	ldrh	r2, [r7, #4]
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fdd3 	bl	80022fc <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	202e      	movs	r0, #46	; 0x2e
 800275c:	f7ff fe55 	bl	800240a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002760:	f000 f9f8 	bl	8002b54 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002764:	f000 f9f6 	bl	8002b54 <LCD_IO_ReadData>
 8002768:	4603      	mov	r3, r0
 800276a:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 800276c:	f000 f9f2 	bl	8002b54 <LCD_IO_ReadData>
 8002770:	4603      	mov	r3, r0
 8002772:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	121b      	asrs	r3, r3, #8
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 800278e:	8abb      	ldrh	r3, [r7, #20]
 8002790:	121b      	asrs	r3, r3, #8
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f023 0303 	bic.w	r3, r3, #3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4611      	mov	r1, r2
 80027a8:	8019      	strh	r1, [r3, #0]
 80027aa:	3302      	adds	r3, #2
 80027ac:	0c12      	lsrs	r2, r2, #16
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	7c3a      	ldrb	r2, [r7, #16]
 80027b4:	f362 0307 	bfi	r3, r2, #0, #8
 80027b8:	7c7a      	ldrb	r2, [r7, #17]
 80027ba:	f362 230f 	bfi	r3, r2, #8, #8
 80027be:	7cba      	ldrb	r2, [r7, #18]
 80027c0:	f362 4317 	bfi	r3, r2, #16, #8
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	4603      	mov	r3, r0
 80027d6:	81fb      	strh	r3, [r7, #14]
 80027d8:	460b      	mov	r3, r1
 80027da:	81bb      	strh	r3, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	202c      	movs	r0, #44	; 0x2c
 80027ee:	f7ff fe0c 	bl	800240a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e02a      	b.n	800284e <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <ST7789H2_DrawRGBHLine+0x98>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4293      	cmp	r3, r2
 8002802:	d321      	bcc.n	8002848 <ST7789H2_DrawRGBHLine+0x7c>
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <ST7789H2_DrawRGBHLine+0x9c>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	89ba      	ldrh	r2, [r7, #12]
 800280a:	429a      	cmp	r2, r3
 800280c:	d31c      	bcc.n	8002848 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <ST7789H2_DrawRGBHLine+0xa0>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4293      	cmp	r3, r2
 8002818:	d816      	bhi.n	8002848 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <ST7789H2_DrawRGBHLine+0xa4>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	89ba      	ldrh	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d811      	bhi.n	8002848 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002824:	897a      	ldrh	r2, [r7, #10]
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4413      	add	r3, r2
 800282a:	461a      	mov	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f96f 	bl	8002b20 <LCD_IO_WriteData>
      }      
      i++;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3301      	adds	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	897a      	ldrh	r2, [r7, #10]
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	4413      	add	r3, r2
 8002854:	461a      	mov	r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4293      	cmp	r3, r2
 800285a:	d3cd      	bcc.n	80027f8 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000128 	.word	0x20000128
 8002868:	2000012a 	.word	0x2000012a
 800286c:	20000048 	.word	0x20000048
 8002870:	2000004a 	.word	0x2000004a

08002874 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	460a      	mov	r2, r1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	4613      	mov	r3, r2
 8002882:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <BSP_PB_Init+0xa0>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <BSP_PB_Init+0xa0>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <BSP_PB_Init+0xa0>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d111      	bne.n	80028ca <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028a6:	2301      	movs	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80028ae:	2302      	movs	r3, #2
 80028b0:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <BSP_PB_Init+0xa4>)
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	f107 020c 	add.w	r2, r7, #12
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 fb33 	bl	8003f30 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80028ca:	79bb      	ldrb	r3, [r7, #6]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d11d      	bne.n	800290c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028d0:	2301      	movs	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80028d4:	2302      	movs	r3, #2
 80028d6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <BSP_PB_Init+0xa8>)
 80028de:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <BSP_PB_Init+0xa4>)
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	f107 020c 	add.w	r2, r7, #12
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 fb1e 	bl	8003f30 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80028f4:	2306      	movs	r3, #6
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	210f      	movs	r1, #15
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fff1 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002902:	2306      	movs	r3, #6
 8002904:	b25b      	sxtb	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f001 f808 	bl	800391c <HAL_NVIC_EnableIRQ>
  }
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	2000004c 	.word	0x2000004c
 800291c:	10110000 	.word	0x10110000

08002920 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6393      	str	r3, [r2, #56]	; 0x38
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002968:	f043 0310 	orr.w	r3, r3, #16
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 8002984:	f043 0320 	orr.w	r3, r3, #32
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 80029a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <FMC_BANK3_MspInit+0xf4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80029be:	230c      	movs	r3, #12
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80029c2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80029c6:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4812      	ldr	r0, [pc, #72]	; (8002a18 <FMC_BANK3_MspInit+0xf8>)
 80029d0:	f001 faae 	bl	8003f30 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80029d4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80029d8:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480e      	ldr	r0, [pc, #56]	; (8002a1c <FMC_BANK3_MspInit+0xfc>)
 80029e2:	f001 faa5 	bl	8003f30 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80029e6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80029ea:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	480b      	ldr	r0, [pc, #44]	; (8002a20 <FMC_BANK3_MspInit+0x100>)
 80029f4:	f001 fa9c 	bl	8003f30 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80029f8:	f240 433f 	movw	r3, #1087	; 0x43f
 80029fc:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <FMC_BANK3_MspInit+0x104>)
 8002a06:	f001 fa93 	bl	8003f30 <HAL_GPIO_Init>
}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40021400 	.word	0x40021400
 8002a24:	40021800 	.word	0x40021800

08002a28 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b09c      	sub	sp, #112	; 0x70
 8002a2c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002a2e:	f7ff ff77 	bl	8002920 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002a32:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002a36:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <FMC_BANK3_Init+0x8c>)
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002a40:	2301      	movs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002a44:	2304      	movs	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002a50:	2302      	movs	r3, #2
 8002a52:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002a60:	2300      	movs	r3, #0
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002a64:	2310      	movs	r3, #16
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002a74:	2300      	movs	r3, #0
 8002a76:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a86:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002a9e:	1d3a      	adds	r2, r7, #4
 8002aa0:	1d39      	adds	r1, r7, #4
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f005 fd40 	bl	800852c <HAL_SRAM_Init>
}
 8002aac:	bf00      	nop
 8002aae:	3770      	adds	r7, #112	; 0x70
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	a0000104 	.word	0xa0000104

08002ab8 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002ac2:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002aca:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002ae4:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	b292      	uxth	r2, r2
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002b02:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b06:	885b      	ldrh	r3, [r3, #2]
 8002b08:	b29b      	uxth	r3, r3
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002b18:	f7ff ff86 	bl	8002a28 <FMC_BANK3_Init>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ffc3 	bl	8002ab8 <FMC_BANK3_WriteData>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ffc7 	bl	8002ada <FMC_BANK3_WriteReg>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002b58:	f7ff ffd1 	bl	8002afe <FMC_BANK3_ReadData>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fb6e 	bl	800324c <HAL_Delay>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002b80:	f000 f80e 	bl	8002ba0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002b94:	f000 f80b 	bl	8002bae <BSP_AUDIO_OUT_Error_CallBack>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002bc4:	f000 f804 	bl	8002bd0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002be2:	2001      	movs	r0, #1
 8002be4:	f000 f804 	bl	8002bf0 <BSP_LCD_InitEx>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <BSP_LCD_InitEx+0xc0>)
 8002bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c02:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <BSP_LCD_InitEx+0xc0>)
 8002c06:	4a2b      	ldr	r2, [pc, #172]	; (8002cb4 <BSP_LCD_InitEx+0xc4>)
 8002c08:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002c0a:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <BSP_LCD_InitEx+0xc0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002c10:	f000 fa7e 	bl	8003110 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	2120      	movs	r1, #32
 8002c18:	4827      	ldr	r0, [pc, #156]	; (8002cb8 <BSP_LCD_InitEx+0xc8>)
 8002c1a:	f001 fb33 	bl	8004284 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c24:	4825      	ldr	r0, [pc, #148]	; (8002cbc <BSP_LCD_InitEx+0xcc>)
 8002c26:	f001 fb2d 	bl	8004284 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002c2a:	2005      	movs	r0, #5
 8002c2c:	f000 fb0e 	bl	800324c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c36:	4821      	ldr	r0, [pc, #132]	; (8002cbc <BSP_LCD_InitEx+0xcc>)
 8002c38:	f001 fb24 	bl	8004284 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002c3c:	200a      	movs	r0, #10
 8002c3e:	f000 fb05 	bl	800324c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c48:	481c      	ldr	r0, [pc, #112]	; (8002cbc <BSP_LCD_InitEx+0xcc>)
 8002c4a:	f001 fb1b 	bl	8004284 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002c4e:	2014      	movs	r0, #20
 8002c50:	f000 fafc 	bl	800324c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <BSP_LCD_InitEx+0xcc>)
 8002c5c:	f001 fb12 	bl	8004284 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002c60:	200a      	movs	r0, #10
 8002c62:	f000 faf3 	bl	800324c <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <BSP_LCD_InitEx+0xd0>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b85      	cmp	r3, #133	; 0x85
 8002c70:	d118      	bne.n	8002ca4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <BSP_LCD_InitEx+0xd4>)
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <BSP_LCD_InitEx+0xd0>)
 8002c76:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <BSP_LCD_InitEx+0xd4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fabd 	bl	8002206 <ST7789H2_SetOrientation>
 8002c8c:	e005      	b.n	8002c9a <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d102      	bne.n	8002c9a <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002c94:	2002      	movs	r0, #2
 8002c96:	f7ff fab6 	bl	8002206 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c9a:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <BSP_LCD_InitEx+0xd8>)
 8002c9c:	f000 f84e 	bl	8002d3c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20004f4c 	.word	0x20004f4c
 8002cb4:	20000050 	.word	0x20000050
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	2000012c 	.word	0x2000012c
 8002cc8:	20000058 	.word	0x20000058

08002ccc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <BSP_LCD_GetXSize+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	4798      	blx	r3
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000012c 	.word	0x2000012c

08002ce4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <BSP_LCD_GetYSize+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4798      	blx	r3
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000012c 	.word	0x2000012c

08002cfc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <BSP_LCD_SetTextColor+0x1c>)
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20004f4c 	.word	0x20004f4c

08002d1c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	4a03      	ldr	r2, [pc, #12]	; (8002d38 <BSP_LCD_SetBackColor+0x1c>)
 8002d2a:	6053      	str	r3, [r2, #4]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20004f4c 	.word	0x20004f4c

08002d3c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <BSP_LCD_SetFont+0x1c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6093      	str	r3, [r2, #8]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20004f4c 	.word	0x20004f4c

08002d5c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <BSP_LCD_Clear+0x68>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <BSP_LCD_Clear+0x68>)
 8002d78:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002d7a:	f7ff ffb3 	bl	8002ce4 <BSP_LCD_GetYSize>
 8002d7e:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e00d      	b.n	8002da2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	b29c      	uxth	r4, r3
 8002d8a:	f7ff ff9f 	bl	8002ccc <BSP_LCD_GetXSize>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	4621      	mov	r1, r4
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 f832 	bl	8002e00 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3ed      	bcc.n	8002d86 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <BSP_LCD_Clear+0x68>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <BSP_LCD_Clear+0x68>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ffa0 	bl	8002cfc <BSP_LCD_SetTextColor>
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	20004f4c 	.word	0x20004f4c

08002dc8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	80bb      	strh	r3, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <BSP_LCD_DrawPixel+0x34>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <BSP_LCD_DrawPixel+0x34>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	88b9      	ldrh	r1, [r7, #4]
 8002dee:	88f8      	ldrh	r0, [r7, #6]
 8002df0:	4798      	blx	r3
  }
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000012c 	.word	0x2000012c

08002e00 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	80bb      	strh	r3, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <BSP_LCD_DrawHLine+0x6c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <BSP_LCD_DrawHLine+0x6c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1c      	ldr	r4, [r3, #32]
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <BSP_LCD_DrawHLine+0x70>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b298      	uxth	r0, r3
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	88ba      	ldrh	r2, [r7, #4]
 8002e30:	88f9      	ldrh	r1, [r7, #6]
 8002e32:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002e34:	e015      	b.n	8002e62 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e00e      	b.n	8002e5a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	4413      	add	r3, r2
 8002e44:	b298      	uxth	r0, r3
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <BSP_LCD_DrawHLine+0x70>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	88bb      	ldrh	r3, [r7, #4]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7ff ffba 	bl	8002dc8 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d3ec      	bcc.n	8002e3c <BSP_LCD_DrawHLine+0x3c>
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000012c 	.word	0x2000012c
 8002e70:	20004f4c 	.word	0x20004f4c

08002e74 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	80bb      	strh	r3, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	f1c3 0303 	rsb	r3, r3, #3
 8002e8e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002e98:	e09a      	b.n	8002fd0 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b298      	uxth	r0, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	88ba      	ldrh	r2, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b299      	uxth	r1, r3
 8002eae:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f7ff ff87 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	b298      	uxth	r0, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	88ba      	ldrh	r2, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f7ff ff77 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b298      	uxth	r0, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	88ba      	ldrh	r2, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b299      	uxth	r1, r3
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f7ff ff67 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b298      	uxth	r0, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	88ba      	ldrh	r2, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	b299      	uxth	r1, r3
 8002f0e:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff ff57 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4413      	add	r3, r2
 8002f22:	b298      	uxth	r0, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	88bb      	ldrh	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b299      	uxth	r1, r3
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff ff47 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b298      	uxth	r0, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	f7ff ff37 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4413      	add	r3, r2
 8002f62:	b298      	uxth	r0, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	88bb      	ldrh	r3, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b299      	uxth	r1, r3
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	f7ff ff27 	bl	8002dc8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	b298      	uxth	r0, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <BSP_LCD_DrawCircle+0x170>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff ff17 	bl	8002dc8 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f9a:	4813      	ldr	r0, [pc, #76]	; (8002fe8 <BSP_LCD_DrawCircle+0x174>)
 8002f9c:	f7ff fece 	bl	8002d3c <BSP_LCD_SetFont>

    if (decision < 0)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da06      	bge.n	8002fb4 <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	009a      	lsls	r2, r3, #2
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	4413      	add	r3, r2
 8002fae:	3306      	adds	r3, #6
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e00a      	b.n	8002fca <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	330a      	adds	r3, #10
 8002fc2:	617b      	str	r3, [r7, #20]
      current_y--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f67f af60 	bls.w	8002e9a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20004f4c 	.word	0x20004f4c
 8002fe8:	20000058 	.word	0x20000058

08002fec <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	80bb      	strh	r3, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	f1c3 0303 	rsb	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003010:	4b3e      	ldr	r3, [pc, #248]	; (800310c <BSP_LCD_FillCircle+0x120>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fe70 	bl	8002cfc <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800301c:	e061      	b.n	80030e2 <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	b29b      	uxth	r3, r3
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b298      	uxth	r0, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	b29a      	uxth	r2, r3
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	b299      	uxth	r1, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	b29b      	uxth	r3, r3
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	f7ff fedd 	bl	8002e00 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	b29b      	uxth	r3, r3
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b298      	uxth	r0, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	b29b      	uxth	r3, r3
 8003054:	88ba      	ldrh	r2, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b299      	uxth	r1, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	b29b      	uxth	r3, r3
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	f7ff fecc 	bl	8002e00 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d021      	beq.n	80030b2 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	b29b      	uxth	r3, r3
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	b298      	uxth	r0, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	b29b      	uxth	r3, r3
 800307c:	88ba      	ldrh	r2, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	b299      	uxth	r1, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	b29b      	uxth	r3, r3
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	f7ff feb8 	bl	8002e00 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	b29b      	uxth	r3, r3
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b298      	uxth	r0, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	b29a      	uxth	r2, r3
 800309e:	88bb      	ldrh	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	b299      	uxth	r1, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	f7ff fea7 	bl	8002e00 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da06      	bge.n	80030c6 <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4413      	add	r3, r2
 80030c0:	3306      	adds	r3, #6
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e00a      	b.n	80030dc <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4413      	add	r3, r2
 80030d2:	330a      	adds	r3, #10
 80030d4:	617b      	str	r3, [r7, #20]
      current_y--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	3301      	adds	r3, #1
 80030e0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d999      	bls.n	800301e <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <BSP_LCD_FillCircle+0x120>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fe03 	bl	8002cfc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	88b9      	ldrh	r1, [r7, #4]
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff feb9 	bl	8002e74 <BSP_LCD_DrawCircle>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20004f4c 	.word	0x20004f4c

08003110 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <BSP_LCD_MspInit+0xac>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a27      	ldr	r2, [pc, #156]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a20      	ldr	r2, [pc, #128]	; (80031bc <BSP_LCD_MspInit+0xac>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <BSP_LCD_MspInit+0xac>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800316a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800316e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003174:	2302      	movs	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003178:	2301      	movs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	4619      	mov	r1, r3
 8003182:	480f      	ldr	r0, [pc, #60]	; (80031c0 <BSP_LCD_MspInit+0xb0>)
 8003184:	f000 fed4 	bl	8003f30 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800318c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4809      	ldr	r0, [pc, #36]	; (80031c0 <BSP_LCD_MspInit+0xb0>)
 800319a:	f000 fec9 	bl	8003f30 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800319e:	2320      	movs	r3, #32
 80031a0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80031a2:	2301      	movs	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <BSP_LCD_MspInit+0xb4>)
 80031ae:	f000 febf 	bl	8003f30 <HAL_GPIO_Init>
}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40021000 	.word	0x40021000

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 fb6c 	bl	80038ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe fd3c 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7fd ffc4 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000064 	.word	0x20000064
 8003230:	20004f58 	.word	0x20004f58

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20004f58 	.word	0x20004f58

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_Delay+0x40>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000064 	.word	0x20000064

08003290 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e033      	b.n	800330e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd ff92 	bl	80011d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d6:	f023 0302 	bic.w	r3, r3, #2
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f94a 	bl	800357c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
 80032fe:	e001      	b.n	8003304 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e113      	b.n	800355c <HAL_ADC_ConfigChannel+0x244>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d925      	bls.n	8003390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68d9      	ldr	r1, [r3, #12]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	3b1e      	subs	r3, #30
 800335a:	2207      	movs	r2, #7
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43da      	mvns	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	400a      	ands	r2, r1
 8003368:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68d9      	ldr	r1, [r3, #12]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	4603      	mov	r3, r0
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4403      	add	r3, r0
 8003382:	3b1e      	subs	r3, #30
 8003384:	409a      	lsls	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	e022      	b.n	80033d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6919      	ldr	r1, [r3, #16]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	2207      	movs	r2, #7
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	400a      	ands	r2, r1
 80033b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6919      	ldr	r1, [r3, #16]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4403      	add	r3, r0
 80033cc:	409a      	lsls	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d824      	bhi.n	8003428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b05      	subs	r3, #5
 80033f0:	221f      	movs	r2, #31
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	400a      	ands	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b05      	subs	r3, #5
 800341a:	fa00 f203 	lsl.w	r2, r0, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
 8003426:	e04c      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d824      	bhi.n	800347a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b23      	subs	r3, #35	; 0x23
 8003442:	221f      	movs	r2, #31
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43da      	mvns	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	400a      	ands	r2, r1
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	4618      	mov	r0, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3b23      	subs	r3, #35	; 0x23
 800346c:	fa00 f203 	lsl.w	r2, r0, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
 8003478:	e023      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	3b41      	subs	r3, #65	; 0x41
 800348c:	221f      	movs	r2, #31
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	400a      	ands	r2, r1
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4618      	mov	r0, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b41      	subs	r3, #65	; 0x41
 80034b6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_ADC_ConfigChannel+0x250>)
 80034c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_ADC_ConfigChannel+0x254>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10f      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1d8>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b12      	cmp	r3, #18
 80034d6:	d10b      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_ADC_ConfigChannel+0x254>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12b      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x23a>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_ADC_ConfigChannel+0x258>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <HAL_ADC_ConfigChannel+0x1f4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b11      	cmp	r3, #17
 800350a:	d122      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_ADC_ConfigChannel+0x258>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d111      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_ADC_ConfigChannel+0x25c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_ADC_ConfigChannel+0x260>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	0c9a      	lsrs	r2, r3, #18
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003544:	e002      	b.n	800354c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b01      	subs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012300 	.word	0x40012300
 800356c:	40012000 	.word	0x40012000
 8003570:	10000012 	.word	0x10000012
 8003574:	2000000c 	.word	0x2000000c
 8003578:	431bde83 	.word	0x431bde83

0800357c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <ADC_Init+0x1f0>)
 8003586:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	021a      	lsls	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	4a58      	ldr	r2, [pc, #352]	; (8003770 <ADC_Init+0x1f4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d022      	beq.n	800365a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e00f      	b.n	800367a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003678:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0202 	bic.w	r2, r2, #2
 8003688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7e1b      	ldrb	r3, [r3, #24]
 8003694:	005a      	lsls	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	3b01      	subs	r3, #1
 80036d4:	035a      	lsls	r2, r3, #13
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	e007      	b.n	80036f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	3b01      	subs	r3, #1
 800370c:	051a      	lsls	r2, r3, #20
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003732:	025a      	lsls	r2, r3, #9
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	029a      	lsls	r2, r3, #10
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40012300 	.word	0x40012300
 8003770:	0f000001 	.word	0x0f000001

08003774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <__NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff4c 	bl	8003774 <__NVIC_SetPriorityGrouping>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f6:	f7ff ff61 	bl	80037bc <__NVIC_GetPriorityGrouping>
 80038fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7ff ffb1 	bl	8003868 <NVIC_EncodePriority>
 8003906:	4602      	mov	r2, r0
 8003908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff80 	bl	8003814 <__NVIC_SetPriority>
}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff54 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e014      	b.n	8003974 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	791b      	ldrb	r3, [r3, #4]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fcb8 	bl	80012d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	d118      	bne.n	80039c6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f825 	bl	8003a10 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d4:	d118      	bne.n	8003a08 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f043 0202 	orr.w	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f85b 	bl	8003abe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	795b      	ldrb	r3, [r3, #5]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_DAC_ConfigChannel+0x20>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e036      	b.n	8003ab2 <HAL_DAC_ConfigChannel+0x8e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a58:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4013      	ands	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	22c0      	movs	r2, #192	; 0xc0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0cf      	b.n	8003c86 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_DFSDM_ChannelInit+0x3a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_DFSDM_ChannelInit+0x3a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a66      	ldr	r2, [pc, #408]	; (8003c98 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_DFSDM_ChannelInit+0x3a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_DFSDM_ChannelInit+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d106      	bne.n	8003b1c <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003b0e:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003b10:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003b12:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003b14:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003b16:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e005      	b.n	8003b28 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003b1c:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_DFSDM_ChannelInit+0x1d4>)
 8003b1e:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_DFSDM_ChannelInit+0x1d8>)
 8003b22:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003b24:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003b26:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f8c1 	bl	8003cb4 <DFSDM_GetChannelFromInstance>
 8003b32:	4603      	mov	r3, r0
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0a0      	b.n	8003c86 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd fc0f 	bl	8001368 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d125      	bne.n	8003ba8 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	791b      	ldrb	r3, [r3, #4]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003bb6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003bc6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003bcc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 020f 	bic.w	r2, r2, #15
 8003be4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003c0c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f002 0207 	and.w	r2, r2, #7
 8003c38:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c64:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f81e 	bl	8003cb4 <DFSDM_GetChannelFromInstance>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40016000 	.word	0x40016000
 8003c94:	40016020 	.word	0x40016020
 8003c98:	40016040 	.word	0x40016040
 8003c9c:	40016060 	.word	0x40016060
 8003ca0:	20000130 	.word	0x20000130
 8003ca4:	20000134 	.word	0x20000134
 8003ca8:	20000144 	.word	0x20000144
 8003cac:	20000148 	.word	0x20000148
 8003cb0:	40016400 	.word	0x40016400

08003cb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <DFSDM_GetChannelFromInstance+0x9c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <DFSDM_GetChannelFromInstance+0x18>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <DFSDM_GetChannelFromInstance+0xa0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d102      	bne.n	8003cd2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e037      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <DFSDM_GetChannelFromInstance+0xa4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <DFSDM_GetChannelFromInstance+0x2e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <DFSDM_GetChannelFromInstance+0xa8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d102      	bne.n	8003ce8 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e02c      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <DFSDM_GetChannelFromInstance+0xac>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <DFSDM_GetChannelFromInstance+0x44>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <DFSDM_GetChannelFromInstance+0xb0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d102      	bne.n	8003cfe <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e021      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <DFSDM_GetChannelFromInstance+0xb4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <DFSDM_GetChannelFromInstance+0x5a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <DFSDM_GetChannelFromInstance+0xb8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d102      	bne.n	8003d14 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e016      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <DFSDM_GetChannelFromInstance+0xbc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d102      	bne.n	8003d22 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e00f      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <DFSDM_GetChannelFromInstance+0xc0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d102      	bne.n	8003d30 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e008      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <DFSDM_GetChannelFromInstance+0xc4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d102      	bne.n	8003d3e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003d38:	2306      	movs	r3, #6
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e001      	b.n	8003d42 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003d3e:	2307      	movs	r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40016000 	.word	0x40016000
 8003d54:	40016400 	.word	0x40016400
 8003d58:	40016020 	.word	0x40016020
 8003d5c:	40016420 	.word	0x40016420
 8003d60:	40016040 	.word	0x40016040
 8003d64:	40016440 	.word	0x40016440
 8003d68:	40016060 	.word	0x40016060
 8003d6c:	40016460 	.word	0x40016460
 8003d70:	40016480 	.word	0x40016480
 8003d74:	400164a0 	.word	0x400164a0
 8003d78:	400164c0 	.word	0x400164c0

08003d7c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e081      	b.n	8003e92 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd fbf2 	bl	800158c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ddc:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	e006      	b.n	8003e04 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d104      	bne.n	8003e16 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e38:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	ea42 0103 	orr.w	r1, r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d138      	bne.n	8003f22 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e032      	b.n	8003f24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	; 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e165      	b.n	8004218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 8154 	bne.w	8004212 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d00b      	beq.n	8003f8a <HAL_GPIO_Init+0x5a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d007      	beq.n	8003f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f7e:	2b11      	cmp	r3, #17
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b12      	cmp	r3, #18
 8003f88:	d130      	bne.n	8003fec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 0201 	and.w	r2, r3, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0xfc>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b12      	cmp	r3, #18
 800402a:	d123      	bne.n	8004074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80ae 	beq.w	8004212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_GPIO_Init+0x2fc>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a5b      	ldr	r2, [pc, #364]	; (800422c <HAL_GPIO_Init+0x2fc>)
 80040c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_GPIO_Init+0x2fc>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d2:	4a57      	ldr	r2, [pc, #348]	; (8004230 <HAL_GPIO_Init+0x300>)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <HAL_GPIO_Init+0x304>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d025      	beq.n	800414a <HAL_GPIO_Init+0x21a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_GPIO_Init+0x308>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <HAL_GPIO_Init+0x216>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x30c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d019      	beq.n	8004142 <HAL_GPIO_Init+0x212>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_GPIO_Init+0x310>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_GPIO_Init+0x20e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4a      	ldr	r2, [pc, #296]	; (8004244 <HAL_GPIO_Init+0x314>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00d      	beq.n	800413a <HAL_GPIO_Init+0x20a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a49      	ldr	r2, [pc, #292]	; (8004248 <HAL_GPIO_Init+0x318>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <HAL_GPIO_Init+0x206>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a48      	ldr	r2, [pc, #288]	; (800424c <HAL_GPIO_Init+0x31c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_GPIO_Init+0x202>
 800412e:	2306      	movs	r3, #6
 8004130:	e00c      	b.n	800414c <HAL_GPIO_Init+0x21c>
 8004132:	2307      	movs	r3, #7
 8004134:	e00a      	b.n	800414c <HAL_GPIO_Init+0x21c>
 8004136:	2305      	movs	r3, #5
 8004138:	e008      	b.n	800414c <HAL_GPIO_Init+0x21c>
 800413a:	2304      	movs	r3, #4
 800413c:	e006      	b.n	800414c <HAL_GPIO_Init+0x21c>
 800413e:	2303      	movs	r3, #3
 8004140:	e004      	b.n	800414c <HAL_GPIO_Init+0x21c>
 8004142:	2302      	movs	r3, #2
 8004144:	e002      	b.n	800414c <HAL_GPIO_Init+0x21c>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_GPIO_Init+0x21c>
 800414a:	2300      	movs	r3, #0
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	f002 0203 	and.w	r2, r2, #3
 8004152:	0092      	lsls	r2, r2, #2
 8004154:	4093      	lsls	r3, r2
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800415c:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_GPIO_Init+0x300>)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	3302      	adds	r3, #2
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_GPIO_Init+0x320>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800418e:	4a30      	ldr	r2, [pc, #192]	; (8004250 <HAL_GPIO_Init+0x320>)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_GPIO_Init+0x320>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_GPIO_Init+0x320>)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_GPIO_Init+0x320>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_GPIO_Init+0x320>)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_GPIO_Init+0x320>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800420c:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_GPIO_Init+0x320>)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	f67f ae96 	bls.w	8003f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3724      	adds	r7, #36	; 0x24
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40023800 	.word	0x40023800
 8004230:	40013800 	.word	0x40013800
 8004234:	40020000 	.word	0x40020000
 8004238:	40020400 	.word	0x40020400
 800423c:	40020800 	.word	0x40020800
 8004240:	40020c00 	.word	0x40020c00
 8004244:	40021000 	.word	0x40021000
 8004248:	40021400 	.word	0x40021400
 800424c:	40021800 	.word	0x40021800
 8004250:	40013c00 	.word	0x40013c00

08004254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e001      	b.n	8004276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d006      	beq.n	80042dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f806 	bl	80042e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40013c00 	.word	0x40013c00

080042e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004300:	b08f      	sub	sp, #60	; 0x3c
 8004302:	af0a      	add	r7, sp, #40	; 0x28
 8004304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e054      	b.n	80043ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f00b fcea 	bl	800fd04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2203      	movs	r2, #3
 8004334:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fd52 	bl	8009df8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	687e      	ldr	r6, [r7, #4]
 800435c:	466d      	mov	r5, sp
 800435e:	f106 0410 	add.w	r4, r6, #16
 8004362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800436e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004372:	1d33      	adds	r3, r6, #4
 8004374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f005 fccc 	bl	8009d14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f005 fd49 	bl	8009e1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	687e      	ldr	r6, [r7, #4]
 8004390:	466d      	mov	r5, sp
 8004392:	f106 0410 	add.w	r4, r6, #16
 8004396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a6:	1d33      	adds	r3, r6, #4
 80043a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043aa:	6838      	ldr	r0, [r7, #0]
 80043ac:	f005 fe5c 	bl	800a068 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80043c2:	b590      	push	{r4, r7, lr}
 80043c4:	b089      	sub	sp, #36	; 0x24
 80043c6:	af04      	add	r7, sp, #16
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	4608      	mov	r0, r1
 80043cc:	4611      	mov	r1, r2
 80043ce:	461a      	mov	r2, r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	70fb      	strb	r3, [r7, #3]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70bb      	strb	r3, [r7, #2]
 80043d8:	4613      	mov	r3, r2
 80043da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_HCD_HC_Init+0x28>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e07f      	b.n	80044ea <HAL_HCD_HC_Init+0x128>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	333d      	adds	r3, #61	; 0x3d
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	3338      	adds	r3, #56	; 0x38
 8004416:	787a      	ldrb	r2, [r7, #1]
 8004418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	3340      	adds	r3, #64	; 0x40
 800442a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800442c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	3339      	adds	r3, #57	; 0x39
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	333f      	adds	r3, #63	; 0x3f
 8004452:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	78bb      	ldrb	r3, [r7, #2]
 800445c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004460:	b2d8      	uxtb	r0, r3
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	333a      	adds	r3, #58	; 0x3a
 8004470:	4602      	mov	r2, r0
 8004472:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004478:	2b00      	cmp	r3, #0
 800447a:	da0a      	bge.n	8004492 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	440b      	add	r3, r1
 800448a:	333b      	adds	r3, #59	; 0x3b
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e009      	b.n	80044a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	333b      	adds	r3, #59	; 0x3b
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	440b      	add	r3, r1
 80044b4:	333c      	adds	r3, #60	; 0x3c
 80044b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80044ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	787c      	ldrb	r4, [r7, #1]
 80044c2:	78ba      	ldrb	r2, [r7, #2]
 80044c4:	78f9      	ldrb	r1, [r7, #3]
 80044c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4623      	mov	r3, r4
 80044d8:	f005 ff42 	bl	800a360 <USB_HC_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd90      	pop	{r4, r7, pc}

080044f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_HCD_HC_Halt+0x1e>
 800450c:	2302      	movs	r3, #2
 800450e:	e00f      	b.n	8004530 <HAL_HCD_HC_Halt+0x3e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f006 f97e 	bl	800a822 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	70fb      	strb	r3, [r7, #3]
 800454a:	460b      	mov	r3, r1
 800454c:	70bb      	strb	r3, [r7, #2]
 800454e:	4613      	mov	r3, r2
 8004550:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	333b      	adds	r3, #59	; 0x3b
 8004562:	78ba      	ldrb	r2, [r7, #2]
 8004564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	333f      	adds	r3, #63	; 0x3f
 8004576:	787a      	ldrb	r2, [r7, #1]
 8004578:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800457a:	7c3b      	ldrb	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d114      	bne.n	80045aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	3342      	adds	r3, #66	; 0x42
 8004590:	2203      	movs	r2, #3
 8004592:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	440b      	add	r3, r1
 80045a2:	333d      	adds	r3, #61	; 0x3d
 80045a4:	7f3a      	ldrb	r2, [r7, #28]
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e009      	b.n	80045be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	440b      	add	r3, r1
 80045b8:	3342      	adds	r3, #66	; 0x42
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045be:	787b      	ldrb	r3, [r7, #1]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	f200 80d6 	bhi.w	8004772 <HAL_HCD_HC_SubmitRequest+0x23a>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	0800475d 	.word	0x0800475d
 80045d4:	08004649 	.word	0x08004649
 80045d8:	080046d3 	.word	0x080046d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80045dc:	7c3b      	ldrb	r3, [r7, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f040 80c9 	bne.w	8004776 <HAL_HCD_HC_SubmitRequest+0x23e>
 80045e4:	78bb      	ldrb	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 80c5 	bne.w	8004776 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80045ec:	8b3b      	ldrh	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	3351      	adds	r3, #81	; 0x51
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	3351      	adds	r3, #81	; 0x51
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3342      	adds	r3, #66	; 0x42
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004630:	e0a1      	b.n	8004776 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	3342      	adds	r3, #66	; 0x42
 8004642:	2202      	movs	r2, #2
 8004644:	701a      	strb	r2, [r3, #0]
      break;
 8004646:	e096      	b.n	8004776 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004648:	78bb      	ldrb	r3, [r7, #2]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d120      	bne.n	8004690 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3351      	adds	r3, #81	; 0x51
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	3342      	adds	r3, #66	; 0x42
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004678:	e07e      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	3342      	adds	r3, #66	; 0x42
 800468a:	2202      	movs	r2, #2
 800468c:	701a      	strb	r2, [r3, #0]
      break;
 800468e:	e073      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	3350      	adds	r3, #80	; 0x50
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	440b      	add	r3, r1
 80046b4:	3342      	adds	r3, #66	; 0x42
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
      break;
 80046ba:	e05d      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	440b      	add	r3, r1
 80046ca:	3342      	adds	r3, #66	; 0x42
 80046cc:	2202      	movs	r2, #2
 80046ce:	701a      	strb	r2, [r3, #0]
      break;
 80046d0:	e052      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80046d2:	78bb      	ldrb	r3, [r7, #2]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d120      	bne.n	800471a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	440b      	add	r3, r1
 80046e6:	3351      	adds	r3, #81	; 0x51
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	440b      	add	r3, r1
 80046fc:	3342      	adds	r3, #66	; 0x42
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004702:	e039      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	440b      	add	r3, r1
 8004712:	3342      	adds	r3, #66	; 0x42
 8004714:	2202      	movs	r2, #2
 8004716:	701a      	strb	r2, [r3, #0]
      break;
 8004718:	e02e      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	3350      	adds	r3, #80	; 0x50
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	440b      	add	r3, r1
 800473e:	3342      	adds	r3, #66	; 0x42
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
      break;
 8004744:	e018      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	3342      	adds	r3, #66	; 0x42
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
      break;
 800475a:	e00d      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	3342      	adds	r3, #66	; 0x42
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
      break;
 8004770:	e002      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004776:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	3344      	adds	r3, #68	; 0x44
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	8b39      	ldrh	r1, [r7, #24]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4403      	add	r3, r0
 800479c:	3348      	adds	r3, #72	; 0x48
 800479e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	335c      	adds	r3, #92	; 0x5c
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	334c      	adds	r3, #76	; 0x4c
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	440b      	add	r3, r1
 80047d6:	3339      	adds	r3, #57	; 0x39
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	440b      	add	r3, r1
 80047ea:	335d      	adds	r3, #93	; 0x5d
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	3338      	adds	r3, #56	; 0x38
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	18d1      	adds	r1, r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	f005 feb2 	bl	800a574 <USB_HC_StartXfer>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop

0800481c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f005 fbd5 	bl	8009fe2 <USB_GetMode>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 80ef 	bne.w	8004a1e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f005 fbb9 	bl	8009fbc <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80e5 	beq.w	8004a1c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f005 fbb0 	bl	8009fbc <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004866:	d104      	bne.n	8004872 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f005 fba0 	bl	8009fbc <USB_ReadInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004886:	d104      	bne.n	8004892 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f005 fb90 	bl	8009fbc <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a6:	d104      	bne.n	80048b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f005 fb80 	bl	8009fbc <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d103      	bne.n	80048ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2202      	movs	r2, #2
 80048cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f005 fb72 	bl	8009fbc <USB_ReadInterrupts>
 80048d8:	4603      	mov	r3, r0
 80048da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e2:	d115      	bne.n	8004910 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80048ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f00b fa7e 	bl	800fe00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f005 fc62 	bl	800a1d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f005 fb51 	bl	8009fbc <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004924:	d102      	bne.n	800492c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 f966 	bl	8005bf8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f005 fb43 	bl	8009fbc <USB_ReadInterrupts>
 8004936:	4603      	mov	r3, r0
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d106      	bne.n	800494e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f00b fa41 	bl	800fdc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2208      	movs	r2, #8
 800494c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f005 fb32 	bl	8009fbc <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004962:	d138      	bne.n	80049d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f005 ff49 	bl	800a800 <USB_HC_ReadInterrupt>
 800496e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e025      	b.n	80049c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d106      	bne.n	80049b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8cf 	bl	8004b4c <HCD_HC_IN_IRQHandler>
 80049ae:	e005      	b.n	80049bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fcfd 	bl	80053b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3301      	adds	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3d4      	bcc.n	8004976 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f005 faee 	bl	8009fbc <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d101      	bne.n	80049ee <HAL_HCD_IRQHandler+0x1d2>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_HCD_IRQHandler+0x1d4>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d014      	beq.n	8004a1e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0210 	bic.w	r2, r2, #16
 8004a02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 f84b 	bl	8005aa0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0210 	orr.w	r2, r2, #16
 8004a18:	619a      	str	r2, [r3, #24]
 8004a1a:	e000      	b.n	8004a1e <HAL_HCD_IRQHandler+0x202>
      return;
 8004a1c:	bf00      	nop
    }
  }
}
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_HCD_Start+0x16>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e013      	b.n	8004a62 <HAL_HCD_Start+0x3e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 f9c5 	bl	8009dd6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 fc22 	bl	800a29c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_HCD_Stop+0x16>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e00d      	b.n	8004a9c <HAL_HCD_Stop+0x32>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f006 f803 	bl	800aa98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 fbc9 	bl	800a248 <USB_ResetPort>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	335c      	adds	r3, #92	; 0x5c
 8004adc:	781b      	ldrb	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	334c      	adds	r3, #76	; 0x4c
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f005 fc0b 	bl	800a33c <USB_GetCurrentFrame>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 fbe6 	bl	800a30e <USB_GetHostSpeed>
 8004b42:	4603      	mov	r3, r0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d119      	bne.n	8004bb0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	60d3      	str	r3, [r2, #12]
 8004bae:	e0ce      	b.n	8004d4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d12c      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	440b      	add	r3, r1
 8004bea:	335d      	adds	r3, #93	; 0x5d
 8004bec:	2207      	movs	r2, #7
 8004bee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c0a:	f043 0302 	orr.w	r3, r3, #2
 8004c0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f005 fe01 	bl	800a822 <USB_HC_Halt>
 8004c20:	e095      	b.n	8004d4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d109      	bne.n	8004c4c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	2320      	movs	r3, #32
 8004c48:	6093      	str	r3, [r2, #8]
 8004c4a:	e080      	b.n	8004d4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d134      	bne.n	8004ccc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	335d      	adds	r3, #93	; 0x5d
 8004c92:	2205      	movs	r2, #5
 8004c94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f005 fdac 	bl	800a822 <USB_HC_Halt>
 8004cca:	e040      	b.n	8004d4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d134      	bne.n	8004d4e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f005 fd87 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	2310      	movs	r3, #16
 8004d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	440b      	add	r3, r1
 8004d34:	335d      	adds	r3, #93	; 0x5d
 8004d36:	2208      	movs	r2, #8
 8004d38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d46:	461a      	mov	r2, r3
 8004d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d122      	bne.n	8004dac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f005 fd46 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	461a      	mov	r2, r3
 8004da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004daa:	e300      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f040 80fd 	bne.w	8004fbe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	3348      	adds	r3, #72	; 0x48
 8004ddc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	0159      	lsls	r1, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	440b      	add	r3, r1
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004df0:	1ad1      	subs	r1, r2, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4403      	add	r3, r0
 8004e00:	334c      	adds	r3, #76	; 0x4c
 8004e02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	335d      	adds	r3, #93	; 0x5d
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3358      	adds	r3, #88	; 0x58
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	333f      	adds	r3, #63	; 0x3f
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	440b      	add	r3, r1
 8004e62:	333f      	adds	r3, #63	; 0x3f
 8004e64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d121      	bne.n	8004eae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 fcc4 	bl	800a822 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	6093      	str	r3, [r2, #8]
 8004eac:	e070      	b.n	8004f90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	333f      	adds	r3, #63	; 0x3f
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d12a      	bne.n	8004f1a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	335c      	adds	r3, #92	; 0x5c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	b2d8      	uxtb	r0, r3
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	335c      	adds	r3, #92	; 0x5c
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4601      	mov	r1, r0
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f00a ff82 	bl	800fe1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f18:	e03a      	b.n	8004f90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	333f      	adds	r3, #63	; 0x3f
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d12f      	bne.n	8004f90 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	335c      	adds	r3, #92	; 0x5c
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	3350      	adds	r3, #80	; 0x50
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f083 0301 	eor.w	r3, r3, #1
 8004f5a:	b2d8      	uxtb	r0, r3
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	3350      	adds	r3, #80	; 0x50
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	b2d8      	uxtb	r0, r3
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	440b      	add	r3, r1
 8004f82:	335c      	adds	r3, #92	; 0x5c
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4601      	mov	r1, r0
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f00a ff46 	bl	800fe1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3350      	adds	r3, #80	; 0x50
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f083 0301 	eor.w	r3, r3, #1
 8004fa6:	b2d8      	uxtb	r0, r3
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3350      	adds	r3, #80	; 0x50
 8004fb8:	4602      	mov	r2, r0
 8004fba:	701a      	strb	r2, [r3, #0]
}
 8004fbc:	e1f7      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	f040 811a 	bne.w	800520a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	440b      	add	r3, r1
 8005004:	335d      	adds	r3, #93	; 0x5d
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10a      	bne.n	8005022 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	440b      	add	r3, r1
 800501a:	335c      	adds	r3, #92	; 0x5c
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e0d9      	b.n	80051d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	440b      	add	r3, r1
 8005030:	335d      	adds	r3, #93	; 0x5d
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b05      	cmp	r3, #5
 8005036:	d10a      	bne.n	800504e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	440b      	add	r3, r1
 8005046:	335c      	adds	r3, #92	; 0x5c
 8005048:	2205      	movs	r2, #5
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e0c3      	b.n	80051d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	440b      	add	r3, r1
 800505c:	335d      	adds	r3, #93	; 0x5d
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d00a      	beq.n	800507a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	440b      	add	r3, r1
 8005072:	335d      	adds	r3, #93	; 0x5d
 8005074:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005076:	2b08      	cmp	r3, #8
 8005078:	d156      	bne.n	8005128 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	440b      	add	r3, r1
 8005088:	3358      	adds	r3, #88	; 0x58
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4403      	add	r3, r0
 800509c:	3358      	adds	r3, #88	; 0x58
 800509e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3358      	adds	r3, #88	; 0x58
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d914      	bls.n	80050e0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3358      	adds	r3, #88	; 0x58
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	335c      	adds	r3, #92	; 0x5c
 80050da:	2204      	movs	r2, #4
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e009      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	335c      	adds	r3, #92	; 0x5c
 80050f0:	2202      	movs	r2, #2
 80050f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800510a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005112:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e056      	b.n	80051d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	335d      	adds	r3, #93	; 0x5d
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d123      	bne.n	8005186 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	335c      	adds	r3, #92	; 0x5c
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005168:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005170:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e027      	b.n	80051d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	335d      	adds	r3, #93	; 0x5d
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b07      	cmp	r3, #7
 800519a:	d11c      	bne.n	80051d6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	440b      	add	r3, r1
 80051aa:	3358      	adds	r3, #88	; 0x58
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4403      	add	r3, r0
 80051be:	3358      	adds	r3, #88	; 0x58
 80051c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	335c      	adds	r3, #92	; 0x5c
 80051d2:	2204      	movs	r2, #4
 80051d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	461a      	mov	r2, r3
 80051e4:	2302      	movs	r3, #2
 80051e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	b2d8      	uxtb	r0, r3
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	440b      	add	r3, r1
 80051fa:	335c      	adds	r3, #92	; 0x5c
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	4601      	mov	r1, r0
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f00a fe0a 	bl	800fe1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005208:	e0d1      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d13e      	bne.n	800529e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	440a      	add	r2, r1
 8005236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523a:	f043 0302 	orr.w	r3, r3, #2
 800523e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3358      	adds	r3, #88	; 0x58
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4403      	add	r3, r0
 8005262:	3358      	adds	r3, #88	; 0x58
 8005264:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	335d      	adds	r3, #93	; 0x5d
 8005276:	2206      	movs	r2, #6
 8005278:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f005 facc 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	461a      	mov	r2, r3
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	6093      	str	r3, [r2, #8]
}
 800529c:	e087      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d17c      	bne.n	80053ae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	333f      	adds	r3, #63	; 0x3f
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d122      	bne.n	8005310 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	3358      	adds	r3, #88	; 0x58
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f005 fa8a 	bl	800a822 <USB_HC_Halt>
 800530e:	e045      	b.n	800539c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	440b      	add	r3, r1
 800531e:	333f      	adds	r3, #63	; 0x3f
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	333f      	adds	r3, #63	; 0x3f
 8005336:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005338:	2b02      	cmp	r3, #2
 800533a:	d12f      	bne.n	800539c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	3358      	adds	r3, #88	; 0x58
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d121      	bne.n	800539c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	335d      	adds	r3, #93	; 0x5d
 8005368:	2203      	movs	r2, #3
 800536a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f005 fa43 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a8:	461a      	mov	r2, r3
 80053aa:	2310      	movs	r3, #16
 80053ac:	6093      	str	r3, [r2, #8]
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d119      	bne.n	800541a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	2304      	movs	r3, #4
 80053f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	440a      	add	r2, r1
 800540e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005412:	f043 0302 	orr.w	r3, r3, #2
 8005416:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005418:	e33e      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d141      	bne.n	80054b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	461a      	mov	r2, r3
 800543e:	2320      	movs	r3, #32
 8005440:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	440b      	add	r3, r1
 8005450:	333d      	adds	r3, #61	; 0x3d
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 831f 	bne.w	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	333d      	adds	r3, #61	; 0x3d
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	440b      	add	r3, r1
 800547c:	335c      	adds	r3, #92	; 0x5c
 800547e:	2202      	movs	r2, #2
 8005480:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	440a      	add	r2, r1
 8005498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f005 f9b8 	bl	800a822 <USB_HC_Halt>
}
 80054b2:	e2f1      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d13f      	bne.n	800554a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	335d      	adds	r3, #93	; 0x5d
 80054da:	2204      	movs	r2, #4
 80054dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	440b      	add	r3, r1
 80054ec:	333d      	adds	r3, #61	; 0x3d
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	3358      	adds	r3, #88	; 0x58
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f005 f976 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	461a      	mov	r2, r3
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	6093      	str	r3, [r2, #8]
}
 8005548:	e2a6      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d122      	bne.n	80055a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f005 f948 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559e:	461a      	mov	r2, r3
 80055a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a4:	6093      	str	r3, [r2, #8]
}
 80055a6:	e277      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d135      	bne.n	800562a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	3358      	adds	r3, #88	; 0x58
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ec:	f043 0302 	orr.w	r3, r3, #2
 80055f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f005 f910 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	461a      	mov	r2, r3
 8005610:	2301      	movs	r3, #1
 8005612:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	335d      	adds	r3, #93	; 0x5d
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
}
 8005628:	e236      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d12b      	bne.n	8005698 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	461a      	mov	r2, r3
 800564e:	2308      	movs	r3, #8
 8005650:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4413      	add	r3, r2
 800565a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	440a      	add	r2, r1
 8005668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	4611      	mov	r1, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f005 f8d0 	bl	800a822 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	335d      	adds	r3, #93	; 0x5d
 8005692:	2205      	movs	r2, #5
 8005694:	701a      	strb	r2, [r3, #0]
}
 8005696:	e1ff      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d155      	bne.n	800575a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	3358      	adds	r3, #88	; 0x58
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	335d      	adds	r3, #93	; 0x5d
 80056d2:	2203      	movs	r2, #3
 80056d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	333d      	adds	r3, #61	; 0x3d
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d114      	bne.n	8005716 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	333c      	adds	r3, #60	; 0x3c
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	333d      	adds	r3, #61	; 0x3d
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	440a      	add	r2, r1
 800572c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f005 f86e 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005752:	461a      	mov	r2, r3
 8005754:	2310      	movs	r3, #16
 8005756:	6093      	str	r3, [r2, #8]
}
 8005758:	e19e      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d12b      	bne.n	80057c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	440a      	add	r2, r1
 8005786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	4611      	mov	r1, r2
 800579a:	4618      	mov	r0, r3
 800579c:	f005 f841 	bl	800a822 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	440b      	add	r3, r1
 80057ae:	335d      	adds	r3, #93	; 0x5d
 80057b0:	2206      	movs	r2, #6
 80057b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	461a      	mov	r2, r3
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	6093      	str	r3, [r2, #8]
}
 80057c6:	e167      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d135      	bne.n	800584c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fa:	f043 0302 	orr.w	r3, r3, #2
 80057fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f005 f809 	bl	800a822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	461a      	mov	r2, r3
 800581e:	2310      	movs	r3, #16
 8005820:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	461a      	mov	r2, r3
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	335d      	adds	r3, #93	; 0x5d
 8005846:	2208      	movs	r2, #8
 8005848:	701a      	strb	r2, [r3, #0]
}
 800584a:	e125      	b.n	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	f040 811a 	bne.w	8005a98 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	440a      	add	r2, r1
 800587a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587e:	f023 0302 	bic.w	r3, r3, #2
 8005882:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	440b      	add	r3, r1
 8005892:	335d      	adds	r3, #93	; 0x5d
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d137      	bne.n	800590a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	335c      	adds	r3, #92	; 0x5c
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	333f      	adds	r3, #63	; 0x3f
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d00b      	beq.n	80058dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	440b      	add	r3, r1
 80058d2:	333f      	adds	r3, #63	; 0x3f
 80058d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	f040 80c5 	bne.w	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	3351      	adds	r3, #81	; 0x51
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f083 0301 	eor.w	r3, r3, #1
 80058f2:	b2d8      	uxtb	r0, r3
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	440b      	add	r3, r1
 8005902:	3351      	adds	r3, #81	; 0x51
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e0ad      	b.n	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	440b      	add	r3, r1
 8005918:	335d      	adds	r3, #93	; 0x5d
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d10a      	bne.n	8005936 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	335c      	adds	r3, #92	; 0x5c
 8005930:	2202      	movs	r2, #2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e097      	b.n	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	335d      	adds	r3, #93	; 0x5d
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d10a      	bne.n	8005962 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	335c      	adds	r3, #92	; 0x5c
 800595c:	2202      	movs	r2, #2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e081      	b.n	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	440b      	add	r3, r1
 8005970:	335d      	adds	r3, #93	; 0x5d
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d10a      	bne.n	800598e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	440b      	add	r3, r1
 8005986:	335c      	adds	r3, #92	; 0x5c
 8005988:	2205      	movs	r2, #5
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e06b      	b.n	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	440b      	add	r3, r1
 800599c:	335d      	adds	r3, #93	; 0x5d
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d00a      	beq.n	80059ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	440b      	add	r3, r1
 80059b2:	335d      	adds	r3, #93	; 0x5d
 80059b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d155      	bne.n	8005a66 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	440b      	add	r3, r1
 80059c8:	3358      	adds	r3, #88	; 0x58
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4403      	add	r3, r0
 80059dc:	3358      	adds	r3, #88	; 0x58
 80059de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	3358      	adds	r3, #88	; 0x58
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d914      	bls.n	8005a20 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	3358      	adds	r3, #88	; 0x58
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	335c      	adds	r3, #92	; 0x5c
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e009      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	440b      	add	r3, r1
 8005a2e:	335c      	adds	r3, #92	; 0x5c
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a4a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	461a      	mov	r2, r3
 8005a74:	2302      	movs	r3, #2
 8005a76:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	b2d8      	uxtb	r0, r3
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	440b      	add	r3, r1
 8005a8a:	335c      	adds	r3, #92	; 0x5c
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4601      	mov	r1, r0
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f00a f9c2 	bl	800fe1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	0c5b      	lsrs	r3, r3, #17
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d003      	beq.n	8005ae4 <HCD_RXQLVL_IRQHandler+0x44>
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	f000 8082 	beq.w	8005be6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005ae2:	e083      	b.n	8005bec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d07f      	beq.n	8005bea <HCD_RXQLVL_IRQHandler+0x14a>
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	3344      	adds	r3, #68	; 0x44
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d074      	beq.n	8005bea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	440b      	add	r3, r1
 8005b12:	3344      	adds	r3, #68	; 0x44
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f004 fa25 	bl	8009f6a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3344      	adds	r3, #68	; 0x44
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	18d1      	adds	r1, r2, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4403      	add	r3, r0
 8005b44:	3344      	adds	r3, #68	; 0x44
 8005b46:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	440b      	add	r3, r1
 8005b56:	334c      	adds	r3, #76	; 0x4c
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	18d1      	adds	r1, r2, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4403      	add	r3, r0
 8005b6c:	334c      	adds	r3, #76	; 0x4c
 8005b6e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HCD_RXQLVL_IRQHandler+0x154>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d031      	beq.n	8005bea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3350      	adds	r3, #80	; 0x50
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f083 0301 	eor.w	r3, r3, #1
 8005bce:	b2d8      	uxtb	r0, r3
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	440b      	add	r3, r1
 8005bde:	3350      	adds	r3, #80	; 0x50
 8005be0:	4602      	mov	r2, r0
 8005be2:	701a      	strb	r2, [r3, #0]
      break;
 8005be4:	e001      	b.n	8005bea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005bea:	bf00      	nop
  }
}
 8005bec:	bf00      	nop
 8005bee:	3728      	adds	r7, #40	; 0x28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	1ff80000 	.word	0x1ff80000

08005bf8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d10b      	bne.n	8005c48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d102      	bne.n	8005c40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f00a f8d2 	bl	800fde4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d132      	bne.n	8005cb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d126      	bne.n	8005cb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d113      	bne.n	8005c94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c76:	d106      	bne.n	8005c86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f004 faa8 	bl	800a1d4 <USB_InitFSLSPClkSel>
 8005c84:	e011      	b.n	8005caa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f004 faa1 	bl	800a1d4 <USB_InitFSLSPClkSel>
 8005c92:	e00a      	b.n	8005caa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d106      	bne.n	8005caa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ca8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f00a f8c8 	bl	800fe40 <HAL_HCD_PortEnabled_Callback>
 8005cb0:	e002      	b.n	8005cb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f00a f8d2 	bl	800fe5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d103      	bne.n	8005cca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 0320 	orr.w	r3, r3, #32
 8005cc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6013      	str	r3, [r2, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e11f      	b.n	8005f32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fb fc88 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	; 0x24
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d44:	f001 f80e 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8005d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4a7b      	ldr	r2, [pc, #492]	; (8005f3c <HAL_I2C_Init+0x25c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d807      	bhi.n	8005d64 <HAL_I2C_Init+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_I2C_Init+0x260>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf94      	ite	ls
 8005d5c:	2301      	movls	r3, #1
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e006      	b.n	8005d72 <HAL_I2C_Init+0x92>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a77      	ldr	r2, [pc, #476]	; (8005f44 <HAL_I2C_Init+0x264>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bf94      	ite	ls
 8005d6c:	2301      	movls	r3, #1
 8005d6e:	2300      	movhi	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e0db      	b.n	8005f32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a72      	ldr	r2, [pc, #456]	; (8005f48 <HAL_I2C_Init+0x268>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0c9b      	lsrs	r3, r3, #18
 8005d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a64      	ldr	r2, [pc, #400]	; (8005f3c <HAL_I2C_Init+0x25c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d802      	bhi.n	8005db4 <HAL_I2C_Init+0xd4>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	3301      	adds	r3, #1
 8005db2:	e009      	b.n	8005dc8 <HAL_I2C_Init+0xe8>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	4a63      	ldr	r2, [pc, #396]	; (8005f4c <HAL_I2C_Init+0x26c>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4956      	ldr	r1, [pc, #344]	; (8005f3c <HAL_I2C_Init+0x25c>)
 8005de4:	428b      	cmp	r3, r1
 8005de6:	d80d      	bhi.n	8005e04 <HAL_I2C_Init+0x124>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1e59      	subs	r1, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	bf38      	it	cc
 8005e00:	2304      	movcc	r3, #4
 8005e02:	e04f      	b.n	8005ea4 <HAL_I2C_Init+0x1c4>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d111      	bne.n	8005e30 <HAL_I2C_Init+0x150>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1e58      	subs	r0, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	440b      	add	r3, r1
 8005e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf0c      	ite	eq
 8005e28:	2301      	moveq	r3, #1
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e012      	b.n	8005e56 <HAL_I2C_Init+0x176>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	1e58      	subs	r0, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	0099      	lsls	r1, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e46:	3301      	adds	r3, #1
 8005e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Init+0x17e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e022      	b.n	8005ea4 <HAL_I2C_Init+0x1c4>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <HAL_I2C_Init+0x1a4>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1e58      	subs	r0, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	440b      	add	r3, r1
 8005e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e82:	e00f      	b.n	8005ea4 <HAL_I2C_Init+0x1c4>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1e58      	subs	r0, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	0099      	lsls	r1, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	6809      	ldr	r1, [r1, #0]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6911      	ldr	r1, [r2, #16]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68d2      	ldr	r2, [r2, #12]
 8005ede:	4311      	orrs	r1, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	000186a0 	.word	0x000186a0
 8005f40:	001e847f 	.word	0x001e847f
 8005f44:	003d08ff 	.word	0x003d08ff
 8005f48:	431bde83 	.word	0x431bde83
 8005f4c:	10624dd3 	.word	0x10624dd3

08005f50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e154      	b.n	800620c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a98      	ldr	r2, [pc, #608]	; (80061dc <HAL_I2S_Init+0x28c>)
 8005f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fb fb95 	bl	80016ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f98:	f023 030f 	bic.w	r3, r3, #15
 8005f9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d06f      	beq.n	800608e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e001      	b.n	8005fc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d802      	bhi.n	8005fce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a83      	ldr	r2, [pc, #524]	; (80061e0 <HAL_I2S_Init+0x290>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_I2S_Init+0x92>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a81      	ldr	r2, [pc, #516]	; (80061e4 <HAL_I2S_Init+0x294>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d104      	bne.n	8005fec <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f001 f9a4 	bl	8007330 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	e003      	b.n	8005ff4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005fec:	2002      	movs	r0, #2
 8005fee:	f001 f99f 	bl	8007330 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ff2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffc:	d125      	bne.n	800604a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	3305      	adds	r3, #5
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	e01f      	b.n	8006068 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	3305      	adds	r3, #5
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	e00e      	b.n	8006068 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	3305      	adds	r3, #5
 8006066:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4a5f      	ldr	r2, [pc, #380]	; (80061e8 <HAL_I2S_Init+0x298>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e003      	b.n	8006096 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800608e:	2302      	movs	r3, #2
 8006090:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d902      	bls.n	80060a2 <HAL_I2S_Init+0x152>
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d907      	bls.n	80060b2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f043 0210 	orr.w	r2, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e0ac      	b.n	800620c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	ea42 0103 	orr.w	r1, r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060d0:	f023 030f 	bic.w	r3, r3, #15
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6851      	ldr	r1, [r2, #4]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6892      	ldr	r2, [r2, #8]
 80060dc:	4311      	orrs	r1, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6992      	ldr	r2, [r2, #24]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b30      	cmp	r3, #48	; 0x30
 80060fc:	d003      	beq.n	8006106 <HAL_I2S_Init+0x1b6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2bb0      	cmp	r3, #176	; 0xb0
 8006104:	d107      	bne.n	8006116 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006114:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d16e      	bne.n	80061fc <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a32      	ldr	r2, [pc, #200]	; (80061ec <HAL_I2S_Init+0x29c>)
 8006122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2d      	ldr	r2, [pc, #180]	; (80061e0 <HAL_I2S_Init+0x290>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_I2S_Init+0x1e2>
 800612e:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <HAL_I2S_Init+0x2a0>)
 8006130:	e001      	b.n	8006136 <HAL_I2S_Init+0x1e6>
 8006132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	4928      	ldr	r1, [pc, #160]	; (80061e0 <HAL_I2S_Init+0x290>)
 800613e:	428a      	cmp	r2, r1
 8006140:	d101      	bne.n	8006146 <HAL_I2S_Init+0x1f6>
 8006142:	4a2b      	ldr	r2, [pc, #172]	; (80061f0 <HAL_I2S_Init+0x2a0>)
 8006144:	e001      	b.n	800614a <HAL_I2S_Init+0x1fa>
 8006146:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800614a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800614e:	f023 030f 	bic.w	r3, r3, #15
 8006152:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <HAL_I2S_Init+0x290>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <HAL_I2S_Init+0x212>
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_I2S_Init+0x2a0>)
 8006160:	e001      	b.n	8006166 <HAL_I2S_Init+0x216>
 8006162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006166:	2202      	movs	r2, #2
 8006168:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <HAL_I2S_Init+0x290>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <HAL_I2S_Init+0x228>
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_I2S_Init+0x2a0>)
 8006176:	e001      	b.n	800617c <HAL_I2S_Init+0x22c>
 8006178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	d003      	beq.n	8006192 <HAL_I2S_Init+0x242>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	e001      	b.n	800619e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	b299      	uxth	r1, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80061b4:	4303      	orrs	r3, r0
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	430b      	orrs	r3, r1
 80061ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80061bc:	4313      	orrs	r3, r2
 80061be:	b29a      	uxth	r2, r3
 80061c0:	897b      	ldrh	r3, [r7, #10]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061ca:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a03      	ldr	r2, [pc, #12]	; (80061e0 <HAL_I2S_Init+0x290>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10e      	bne.n	80061f4 <HAL_I2S_Init+0x2a4>
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_I2S_Init+0x2a0>)
 80061d8:	e00e      	b.n	80061f8 <HAL_I2S_Init+0x2a8>
 80061da:	bf00      	nop
 80061dc:	080062cf 	.word	0x080062cf
 80061e0:	40003800 	.word	0x40003800
 80061e4:	40003c00 	.word	0x40003c00
 80061e8:	cccccccd 	.word	0xcccccccd
 80061ec:	080063e5 	.word	0x080063e5
 80061f0:	40003400 	.word	0x40003400
 80061f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f8:	897a      	ldrh	r2, [r7, #10]
 80061fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	881a      	ldrh	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10e      	bne.n	8006268 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006258:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fc fc88 	bl	8002b78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	b292      	uxth	r2, r2
 8006284:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	1c9a      	adds	r2, r3, #2
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10e      	bne.n	80062c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fc fc7b 	bl	8002bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d13a      	bne.n	8006360 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d109      	bne.n	8006308 <I2S_IRQHandler+0x3a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d102      	bne.n	8006308 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff ffb4 	bl	8006270 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d126      	bne.n	8006360 <I2S_IRQHandler+0x92>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b20      	cmp	r3, #32
 800631e:	d11f      	bne.n	8006360 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800632e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f043 0202 	orr.w	r2, r3, #2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc fc16 	bl	8002b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d136      	bne.n	80063da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d109      	bne.n	800638a <I2S_IRQHandler+0xbc>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	d102      	bne.n	800638a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ff45 	bl	8006214 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d122      	bne.n	80063da <I2S_IRQHandler+0x10c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d11b      	bne.n	80063da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	f043 0204 	orr.w	r2, r3, #4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fc fbd9 	bl	8002b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4aa2      	ldr	r2, [pc, #648]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80063fe:	4ba2      	ldr	r3, [pc, #648]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006400:	e001      	b.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a9b      	ldr	r2, [pc, #620]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d101      	bne.n	8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800641e:	e001      	b.n	8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006430:	d004      	beq.n	800643c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8099 	bne.w	800656e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d107      	bne.n	8006456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f925 	bl	80066a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9c8 	bl	8006800 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d13a      	bne.n	80064f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d035      	beq.n	80064f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a7e      	ldr	r2, [pc, #504]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800648e:	4b7e      	ldr	r3, [pc, #504]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006490:	e001      	b.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4979      	ldr	r1, [pc, #484]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800649e:	428b      	cmp	r3, r1
 80064a0:	d101      	bne.n	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80064a2:	4b79      	ldr	r3, [pc, #484]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064a4:	e001      	b.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80064a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	f043 0202 	orr.w	r2, r3, #2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fb4e 	bl	8002b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	f040 80be 	bne.w	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80b8 	beq.w	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a59      	ldr	r2, [pc, #356]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006522:	4b59      	ldr	r3, [pc, #356]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006524:	e001      	b.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4954      	ldr	r1, [pc, #336]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006532:	428b      	cmp	r3, r1
 8006534:	d101      	bne.n	800653a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006536:	4b54      	ldr	r3, [pc, #336]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006538:	e001      	b.n	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800653a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006542:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	f043 0204 	orr.w	r2, r3, #4
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fc fb10 	bl	8002b8c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800656c:	e084      	b.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d107      	bne.n	8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8be 	bl	8006704 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d107      	bne.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8fd 	bl	800679c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d12f      	bne.n	800660c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02a      	beq.n	800660c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d101      	bne.n	80065d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80065d0:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065d2:	e001      	b.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80065d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4929      	ldr	r1, [pc, #164]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065e0:	428b      	cmp	r3, r1
 80065e2:	d101      	bne.n	80065e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80065e4:	4b28      	ldr	r3, [pc, #160]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065e6:	e001      	b.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80065e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	f043 0202 	orr.w	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc fac0 	bl	8002b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b08      	cmp	r3, #8
 8006614:	d131      	bne.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02c      	beq.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a17      	ldr	r2, [pc, #92]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800662a:	4b17      	ldr	r3, [pc, #92]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800662c:	e001      	b.n	8006632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800662e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4912      	ldr	r1, [pc, #72]	; (8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800663a:	428b      	cmp	r3, r1
 800663c:	d101      	bne.n	8006642 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006640:	e001      	b.n	8006646 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006646:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800664a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800665a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006668:	f043 0204 	orr.w	r2, r3, #4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fc fa8b 	bl	8002b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006676:	e000      	b.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006678:	bf00      	nop
}
 800667a:	bf00      	nop
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40003800 	.word	0x40003800
 8006688:	40003400 	.word	0x40003400

0800668c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	1c99      	adds	r1, r3, #2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6251      	str	r1, [r2, #36]	; 0x24
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d113      	bne.n	80066fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ffc9 	bl	800668c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c99      	adds	r1, r3, #2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6251      	str	r1, [r2, #36]	; 0x24
 8006716:	8819      	ldrh	r1, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <I2SEx_TxISR_I2SExt+0x90>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <I2SEx_TxISR_I2SExt+0x22>
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <I2SEx_TxISR_I2SExt+0x94>)
 8006724:	e001      	b.n	800672a <I2SEx_TxISR_I2SExt+0x26>
 8006726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800672a:	460a      	mov	r2, r1
 800672c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d121      	bne.n	800678a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a12      	ldr	r2, [pc, #72]	; (8006794 <I2SEx_TxISR_I2SExt+0x90>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <I2SEx_TxISR_I2SExt+0x50>
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <I2SEx_TxISR_I2SExt+0x94>)
 8006752:	e001      	b.n	8006758 <I2SEx_TxISR_I2SExt+0x54>
 8006754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	490d      	ldr	r1, [pc, #52]	; (8006794 <I2SEx_TxISR_I2SExt+0x90>)
 8006760:	428b      	cmp	r3, r1
 8006762:	d101      	bne.n	8006768 <I2SEx_TxISR_I2SExt+0x64>
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <I2SEx_TxISR_I2SExt+0x94>)
 8006766:	e001      	b.n	800676c <I2SEx_TxISR_I2SExt+0x68>
 8006768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800676c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff81 	bl	800668c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40003800 	.word	0x40003800
 8006798:	40003400 	.word	0x40003400

0800679c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68d8      	ldr	r0, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	1c99      	adds	r1, r3, #2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067b4:	b282      	uxth	r2, r0
 80067b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d113      	bne.n	80067f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff4a 	bl	800668c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a20      	ldr	r2, [pc, #128]	; (8006890 <I2SEx_RxISR_I2SExt+0x90>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <I2SEx_RxISR_I2SExt+0x16>
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <I2SEx_RxISR_I2SExt+0x94>)
 8006814:	e001      	b.n	800681a <I2SEx_RxISR_I2SExt+0x1a>
 8006816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800681a:	68d8      	ldr	r0, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	1c99      	adds	r1, r3, #2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006826:	b282      	uxth	r2, r0
 8006828:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d121      	bne.n	8006886 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a12      	ldr	r2, [pc, #72]	; (8006890 <I2SEx_RxISR_I2SExt+0x90>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <I2SEx_RxISR_I2SExt+0x50>
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <I2SEx_RxISR_I2SExt+0x94>)
 800684e:	e001      	b.n	8006854 <I2SEx_RxISR_I2SExt+0x54>
 8006850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	490d      	ldr	r1, [pc, #52]	; (8006890 <I2SEx_RxISR_I2SExt+0x90>)
 800685c:	428b      	cmp	r3, r1
 800685e:	d101      	bne.n	8006864 <I2SEx_RxISR_I2SExt+0x64>
 8006860:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <I2SEx_RxISR_I2SExt+0x94>)
 8006862:	e001      	b.n	8006868 <I2SEx_RxISR_I2SExt+0x68>
 8006864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006868:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800686c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff03 	bl	800668c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40003800 	.word	0x40003800
 8006894:	40003400 	.word	0x40003400

08006898 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af02      	add	r7, sp, #8
 800689e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068a0:	f7fc fcc8 	bl	8003234 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e069      	b.n	8006984 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fa ffab 	bl	8001820 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f85e 	bl	8006990 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	021a      	lsls	r2, r3, #8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	2120      	movs	r1, #32
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f856 	bl	80069ac <QSPI_WaitFlagStateUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d137      	bne.n	800697a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006914:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	0611      	lsls	r1, r2, #24
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68d2      	ldr	r2, [r2, #12]
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	69d2      	ldr	r2, [r2, #28]
 8006928:	4311      	orrs	r1, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6a12      	ldr	r2, [r2, #32]
 800692e:	4311      	orrs	r1, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	430b      	orrs	r3, r1
 8006936:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <HAL_QSPI_Init+0xf4>)
 8006940:	4013      	ands	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6912      	ldr	r2, [r2, #16]
 8006946:	0411      	lsls	r1, r2, #16
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6952      	ldr	r2, [r2, #20]
 800694c:	4311      	orrs	r1, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6992      	ldr	r2, [r2, #24]
 8006952:	4311      	orrs	r1, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	430b      	orrs	r3, r1
 800695a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006982:	7afb      	ldrb	r3, [r7, #11]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	ffe0f8fe 	.word	0xffe0f8fe

08006990 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069bc:	e01a      	b.n	80069f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d016      	beq.n	80069f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fc fc35 	bl	8003234 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2204      	movs	r2, #4
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e8:	f043 0201 	orr.w	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e00e      	b.n	8006a12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d1d6      	bne.n	80069be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0cc      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a30:	4b68      	ldr	r3, [pc, #416]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d90c      	bls.n	8006a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b65      	ldr	r3, [pc, #404]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b63      	ldr	r3, [pc, #396]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0b8      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d020      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a70:	4b59      	ldr	r3, [pc, #356]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	4a58      	ldr	r2, [pc, #352]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a88:	4b53      	ldr	r3, [pc, #332]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4a52      	ldr	r2, [pc, #328]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a94:	4b50      	ldr	r3, [pc, #320]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	494d      	ldr	r1, [pc, #308]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d044      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d107      	bne.n	8006aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aba:	4b47      	ldr	r3, [pc, #284]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d119      	bne.n	8006afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e07f      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d003      	beq.n	8006ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d107      	bne.n	8006aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ada:	4b3f      	ldr	r3, [pc, #252]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e06f      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aea:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e067      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006afa:	4b37      	ldr	r3, [pc, #220]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f023 0203 	bic.w	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4934      	ldr	r1, [pc, #208]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b0c:	f7fc fb92 	bl	8003234 <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b14:	f7fc fb8e 	bl	8003234 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e04f      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2a:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 020c 	and.w	r2, r3, #12
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d1eb      	bne.n	8006b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b3c:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d20c      	bcs.n	8006b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4a:	4b22      	ldr	r3, [pc, #136]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b52:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e032      	b.n	8006bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b70:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4916      	ldr	r1, [pc, #88]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b8e:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	490e      	ldr	r1, [pc, #56]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ba2:	f000 f821 	bl	8006be8 <HAL_RCC_GetSysClockFreq>
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <HAL_RCC_ClockConfig+0x1c0>)
 8006bb4:	5cd3      	ldrb	r3, [r2, r3]
 8006bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8006bba:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fb f856 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40023c00 	.word	0x40023c00
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	08010650 	.word	0x08010650
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	20000060 	.word	0x20000060

08006be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bfe:	4b50      	ldr	r3, [pc, #320]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d007      	beq.n	8006c1a <HAL_RCC_GetSysClockFreq+0x32>
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d008      	beq.n	8006c20 <HAL_RCC_GetSysClockFreq+0x38>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 808d 	bne.w	8006d2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c14:	4b4b      	ldr	r3, [pc, #300]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c16:	60bb      	str	r3, [r7, #8]
       break;
 8006c18:	e08c      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c1a:	4b4b      	ldr	r3, [pc, #300]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c1c:	60bb      	str	r3, [r7, #8]
      break;
 8006c1e:	e089      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c20:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c2a:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d023      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c36:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	099b      	lsrs	r3, r3, #6
 8006c3c:	f04f 0400 	mov.w	r4, #0
 8006c40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	ea03 0501 	and.w	r5, r3, r1
 8006c4c:	ea04 0602 	and.w	r6, r4, r2
 8006c50:	4a3d      	ldr	r2, [pc, #244]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c52:	fb02 f106 	mul.w	r1, r2, r6
 8006c56:	2200      	movs	r2, #0
 8006c58:	fb02 f205 	mul.w	r2, r2, r5
 8006c5c:	440a      	add	r2, r1
 8006c5e:	493a      	ldr	r1, [pc, #232]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c60:	fba5 0101 	umull	r0, r1, r5, r1
 8006c64:	1853      	adds	r3, r2, r1
 8006c66:	4619      	mov	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f04f 0400 	mov.w	r4, #0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4623      	mov	r3, r4
 8006c72:	f7f9 fad5 	bl	8000220 <__aeabi_uldivmod>
 8006c76:	4603      	mov	r3, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	e049      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7e:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	f04f 0400 	mov.w	r4, #0
 8006c88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	ea03 0501 	and.w	r5, r3, r1
 8006c94:	ea04 0602 	and.w	r6, r4, r2
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	f04f 0400 	mov.w	r4, #0
 8006ca4:	0154      	lsls	r4, r2, #5
 8006ca6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006caa:	014b      	lsls	r3, r1, #5
 8006cac:	4619      	mov	r1, r3
 8006cae:	4622      	mov	r2, r4
 8006cb0:	1b49      	subs	r1, r1, r5
 8006cb2:	eb62 0206 	sbc.w	r2, r2, r6
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	f04f 0400 	mov.w	r4, #0
 8006cbe:	0194      	lsls	r4, r2, #6
 8006cc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006cc4:	018b      	lsls	r3, r1, #6
 8006cc6:	1a5b      	subs	r3, r3, r1
 8006cc8:	eb64 0402 	sbc.w	r4, r4, r2
 8006ccc:	f04f 0100 	mov.w	r1, #0
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	00e2      	lsls	r2, r4, #3
 8006cd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cda:	00d9      	lsls	r1, r3, #3
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4614      	mov	r4, r2
 8006ce0:	195b      	adds	r3, r3, r5
 8006ce2:	eb44 0406 	adc.w	r4, r4, r6
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	02a2      	lsls	r2, r4, #10
 8006cf0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006cf4:	0299      	lsls	r1, r3, #10
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f04f 0400 	mov.w	r4, #0
 8006d04:	461a      	mov	r2, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	f7f9 fa8a 	bl	8000220 <__aeabi_uldivmod>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	60bb      	str	r3, [r7, #8]
      break;
 8006d2c:	e002      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d30:	60bb      	str	r3, [r7, #8]
      break;
 8006d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d34:	68bb      	ldr	r3, [r7, #8]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800
 8006d44:	00f42400 	.word	0x00f42400
 8006d48:	017d7840 	.word	0x017d7840

08006d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d50:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d52:	681b      	ldr	r3, [r3, #0]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	2000000c 	.word	0x2000000c

08006d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d68:	f7ff fff0 	bl	8006d4c <HAL_RCC_GetHCLKFreq>
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	0a9b      	lsrs	r3, r3, #10
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	4a03      	ldr	r2, [pc, #12]	; (8006d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40023800 	.word	0x40023800
 8006d88:	08010660 	.word	0x08010660

08006d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d90:	f7ff ffdc 	bl	8006d4c <HAL_RCC_GetHCLKFreq>
 8006d94:	4601      	mov	r1, r0
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0b5b      	lsrs	r3, r3, #13
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4a03      	ldr	r2, [pc, #12]	; (8006db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40023800 	.word	0x40023800
 8006db0:	08010660 	.word	0x08010660

08006db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dc4:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0203 	and.w	r2, r3, #3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	08db      	lsrs	r3, r3, #3
 8006dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006df6:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <HAL_RCC_GetClockConfig+0x60>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	601a      	str	r2, [r3, #0]
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40023c00 	.word	0x40023c00

08006e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006e3c:	4b7a      	ldr	r3, [pc, #488]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4977      	ldr	r1, [pc, #476]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d010      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006e6a:	4b6f      	ldr	r3, [pc, #444]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	496b      	ldr	r1, [pc, #428]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d022      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006e98:	4b63      	ldr	r3, [pc, #396]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	4960      	ldr	r1, [pc, #384]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ec4:	4b58      	ldr	r3, [pc, #352]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	4954      	ldr	r1, [pc, #336]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006eea:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef8:	494b      	ldr	r1, [pc, #300]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f14:	d10c      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006f16:	4b44      	ldr	r3, [pc, #272]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	493f      	ldr	r1, [pc, #252]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 808a 	beq.w	8007052 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	4b39      	ldr	r3, [pc, #228]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	4a38      	ldr	r2, [pc, #224]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f4e:	4b36      	ldr	r3, [pc, #216]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f5a:	4b34      	ldr	r3, [pc, #208]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a33      	ldr	r2, [pc, #204]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f66:	f7fc f965 	bl	8003234 <HAL_GetTick>
 8006f6a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f6e:	f7fc f961 	bl	8003234 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e1d1      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f80:	4b2a      	ldr	r3, [pc, #168]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f0      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f8c:	4b26      	ldr	r3, [pc, #152]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f94:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02f      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d028      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006faa:	4b1f      	ldr	r3, [pc, #124]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fba:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fc0:	4a19      	ldr	r2, [pc, #100]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fc6:	4b18      	ldr	r3, [pc, #96]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d114      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fd2:	f7fc f92f 	bl	8003234 <HAL_GetTick>
 8006fd6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd8:	e00a      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fda:	f7fc f92b 	bl	8003234 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e199      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0ee      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007008:	d114      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800701a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701e:	4902      	ldr	r1, [pc, #8]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007020:	4313      	orrs	r3, r2
 8007022:	608b      	str	r3, [r1, #8]
 8007024:	e00c      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800
 800702c:	40007000 	.word	0x40007000
 8007030:	42470e40 	.word	0x42470e40
 8007034:	4b89      	ldr	r3, [pc, #548]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a88      	ldr	r2, [pc, #544]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800703a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800703e:	6093      	str	r3, [r2, #8]
 8007040:	4b86      	ldr	r3, [pc, #536]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800704c:	4983      	ldr	r1, [pc, #524]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800704e:	4313      	orrs	r3, r2
 8007050:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007064:	4b7e      	ldr	r3, [pc, #504]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007066:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	4976      	ldr	r1, [pc, #472]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007096:	4b71      	ldr	r3, [pc, #452]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	496d      	ldr	r1, [pc, #436]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b4:	d101      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80070c6:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	4961      	ldr	r1, [pc, #388]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d004      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	f040 80c6 	bne.w	8007278 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070ec:	4b5d      	ldr	r3, [pc, #372]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070f2:	f7fc f89f 	bl	8003234 <HAL_GetTick>
 80070f6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070f8:	e008      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070fa:	f7fc f89b 	bl	8003234 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e10b      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800710c:	4b53      	ldr	r3, [pc, #332]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f0      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007118:	4a53      	ldr	r2, [pc, #332]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d023      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800715c:	d00e      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d115      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717a:	d110      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	019b      	lsls	r3, r3, #6
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	071b      	lsls	r3, r3, #28
 8007196:	4931      	ldr	r1, [pc, #196]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d026      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d122      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071c6:	4b25      	ldr	r3, [pc, #148]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	019b      	lsls	r3, r3, #6
 80071de:	431a      	orrs	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	061b      	lsls	r3, r3, #24
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	491b      	ldr	r1, [pc, #108]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80071f4:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fa:	f023 021f 	bic.w	r2, r3, #31
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	3b01      	subs	r3, #1
 8007204:	4915      	ldr	r1, [pc, #84]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d010      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	071b      	lsls	r3, r3, #28
 8007232:	490a      	ldr	r1, [pc, #40]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007234:	4313      	orrs	r3, r2
 8007236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007240:	f7fb fff8 	bl	8003234 <HAL_GetTick>
 8007244:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007246:	e011      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007248:	f7fb fff4 	bl	8003234 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d90a      	bls.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e064      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800
 8007260:	424711e0 	.word	0x424711e0
 8007264:	42470068 	.word	0x42470068
 8007268:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800726c:	4b2f      	ldr	r3, [pc, #188]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0e7      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	4926      	ldr	r1, [pc, #152]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	491d      	ldr	r1, [pc, #116]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80072c8:	4b18      	ldr	r3, [pc, #96]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	4915      	ldr	r1, [pc, #84]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	490c      	ldr	r1, [pc, #48]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800730e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007312:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	4904      	ldr	r1, [pc, #16]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40023800 	.word	0x40023800

08007330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d003      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800734e:	2b02      	cmp	r3, #2
 8007350:	f000 8098 	beq.w	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007354:	e12d      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007356:	4b9a      	ldr	r3, [pc, #616]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007360:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007368:	d00c      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800736a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736e:	d802      	bhi.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007374:	e082      	b.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800737a:	d047      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800737c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007380:	d06f      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8007382:	e07b      	b.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007384:	4b8f      	ldr	r3, [pc, #572]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007386:	617b      	str	r3, [r7, #20]
          break;
 8007388:	e07b      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800738a:	4b8d      	ldr	r3, [pc, #564]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800738c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007398:	d109      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800739a:	4b89      	ldr	r3, [pc, #548]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	4a87      	ldr	r2, [pc, #540]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	e019      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80073ae:	4b84      	ldr	r3, [pc, #528]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ba:	d109      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80073bc:	4b80      	ldr	r3, [pc, #512]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c6:	4a80      	ldr	r2, [pc, #512]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	e008      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80073d0:	4b7b      	ldr	r3, [pc, #492]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073da:	4a7c      	ldr	r2, [pc, #496]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073e2:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e8:	099b      	lsrs	r3, r3, #6
 80073ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073f6:	4b72      	ldr	r3, [pc, #456]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fc:	0f1b      	lsrs	r3, r3, #28
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	617b      	str	r3, [r7, #20]
          break;
 800740a:	e03a      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800740c:	4b6c      	ldr	r3, [pc, #432]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007418:	d108      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800741a:	4b69      	ldr	r3, [pc, #420]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007422:	4a69      	ldr	r2, [pc, #420]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	e007      	b.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800742c:	4b64      	ldr	r3, [pc, #400]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007434:	4a65      	ldr	r2, [pc, #404]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800743c:	4b60      	ldr	r3, [pc, #384]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	099b      	lsrs	r3, r3, #6
 8007442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800744e:	4b5c      	ldr	r3, [pc, #368]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	0f1b      	lsrs	r3, r3, #28
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	617b      	str	r3, [r7, #20]
          break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007462:	4b57      	ldr	r3, [pc, #348]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746e:	d102      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007470:	4b55      	ldr	r3, [pc, #340]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007472:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007474:	e005      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007476:	4b55      	ldr	r3, [pc, #340]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007478:	617b      	str	r3, [r7, #20]
          break;
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
          break;
 8007480:	bf00      	nop
        }
      }
      break;
 8007482:	e096      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007484:	4b4e      	ldr	r3, [pc, #312]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800748e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007496:	d00c      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d802      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80074a2:	e082      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80074a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a8:	d047      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80074aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80074ae:	d06f      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80074b0:	e07b      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074b2:	4b44      	ldr	r3, [pc, #272]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b4:	617b      	str	r3, [r7, #20]
          break;
 80074b6:	e07b      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80074b8:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c6:	d109      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074c8:	4b3d      	ldr	r3, [pc, #244]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80074ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d2:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e019      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074dc:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e8:	d109      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074ea:	4b35      	ldr	r3, [pc, #212]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f4:	4a34      	ldr	r2, [pc, #208]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	e008      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074fe:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007508:	4a30      	ldr	r2, [pc, #192]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007510:	4b2b      	ldr	r3, [pc, #172]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007524:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	fbb2 f3f3 	udiv	r3, r2, r3
 8007536:	617b      	str	r3, [r7, #20]
          break;
 8007538:	e03a      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007546:	d108      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007548:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007550:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	e007      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007562:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	fb02 f303 	mul.w	r3, r2, r3
 800757a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	0f1b      	lsrs	r3, r3, #28
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
          break;
 800758e:	e00f      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759c:	d102      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075a0:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80075a2:	e005      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075a6:	617b      	str	r3, [r7, #20]
          break;
 80075a8:	e002      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
          break;
 80075ae:	bf00      	nop
        }
      }
      break;
 80075b0:	bf00      	nop
    }
  }
  return frequency;
 80075b2:	697b      	ldr	r3, [r7, #20]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40023800 	.word	0x40023800
 80075c4:	00bb8000 	.word	0x00bb8000
 80075c8:	017d7840 	.word	0x017d7840
 80075cc:	00f42400 	.word	0x00f42400

080075d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d075      	beq.n	80076d4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075e8:	4ba2      	ldr	r3, [pc, #648]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f003 030c 	and.w	r3, r3, #12
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d00c      	beq.n	800760e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075f4:	4b9f      	ldr	r3, [pc, #636]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d112      	bne.n	8007626 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007600:	4b9c      	ldr	r3, [pc, #624]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760c:	d10b      	bne.n	8007626 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800760e:	4b99      	ldr	r3, [pc, #612]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05b      	beq.n	80076d2 <HAL_RCC_OscConfig+0x102>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d157      	bne.n	80076d2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e20b      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762e:	d106      	bne.n	800763e <HAL_RCC_OscConfig+0x6e>
 8007630:	4b90      	ldr	r3, [pc, #576]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a8f      	ldr	r2, [pc, #572]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	e01d      	b.n	800767a <HAL_RCC_OscConfig+0xaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007646:	d10c      	bne.n	8007662 <HAL_RCC_OscConfig+0x92>
 8007648:	4b8a      	ldr	r3, [pc, #552]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a89      	ldr	r2, [pc, #548]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800764e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	4b87      	ldr	r3, [pc, #540]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a86      	ldr	r2, [pc, #536]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800765a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	e00b      	b.n	800767a <HAL_RCC_OscConfig+0xaa>
 8007662:	4b84      	ldr	r3, [pc, #528]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a83      	ldr	r2, [pc, #524]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	4b81      	ldr	r3, [pc, #516]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a80      	ldr	r2, [pc, #512]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007678:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d013      	beq.n	80076aa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fb fdd7 	bl	8003234 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800768a:	f7fb fdd3 	bl	8003234 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b64      	cmp	r3, #100	; 0x64
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e1d0      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769c:	4b75      	ldr	r3, [pc, #468]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0xba>
 80076a8:	e014      	b.n	80076d4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fb fdc3 	bl	8003234 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076b2:	f7fb fdbf 	bl	8003234 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b64      	cmp	r3, #100	; 0x64
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e1bc      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076c4:	4b6b      	ldr	r3, [pc, #428]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f0      	bne.n	80076b2 <HAL_RCC_OscConfig+0xe2>
 80076d0:	e000      	b.n	80076d4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d063      	beq.n	80077a8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076e0:	4b64      	ldr	r3, [pc, #400]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 030c 	and.w	r3, r3, #12
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ec:	4b61      	ldr	r3, [pc, #388]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d11c      	bne.n	8007732 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076f8:	4b5e      	ldr	r3, [pc, #376]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d116      	bne.n	8007732 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007704:	4b5b      	ldr	r3, [pc, #364]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_RCC_OscConfig+0x14c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d001      	beq.n	800771c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e190      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771c:	4b55      	ldr	r3, [pc, #340]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4952      	ldr	r1, [pc, #328]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800772c:	4313      	orrs	r3, r2
 800772e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007730:	e03a      	b.n	80077a8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800773a:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <HAL_RCC_OscConfig+0x2a8>)
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fb fd78 	bl	8003234 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007748:	f7fb fd74 	bl	8003234 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e171      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800775a:	4b46      	ldr	r3, [pc, #280]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007766:	4b43      	ldr	r3, [pc, #268]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	493f      	ldr	r1, [pc, #252]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	e015      	b.n	80077a8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800777c:	4b3e      	ldr	r3, [pc, #248]	; (8007878 <HAL_RCC_OscConfig+0x2a8>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007782:	f7fb fd57 	bl	8003234 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007788:	e008      	b.n	800779c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778a:	f7fb fd53 	bl	8003234 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d901      	bls.n	800779c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e150      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800779c:	4b35      	ldr	r3, [pc, #212]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1f0      	bne.n	800778a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d030      	beq.n	8007816 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d016      	beq.n	80077ea <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077bc:	4b2f      	ldr	r3, [pc, #188]	; (800787c <HAL_RCC_OscConfig+0x2ac>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c2:	f7fb fd37 	bl	8003234 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ca:	f7fb fd33 	bl	8003234 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e130      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 80077de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x1fa>
 80077e8:	e015      	b.n	8007816 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ea:	4b24      	ldr	r3, [pc, #144]	; (800787c <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f0:	f7fb fd20 	bl	8003234 <HAL_GetTick>
 80077f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f6:	e008      	b.n	800780a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077f8:	f7fb fd1c 	bl	8003234 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e119      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f0      	bne.n	80077f8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 809f 	beq.w	8007962 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007824:	2300      	movs	r3, #0
 8007826:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007828:	4b12      	ldr	r3, [pc, #72]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10f      	bne.n	8007854 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	4a0d      	ldr	r2, [pc, #52]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 800783e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007842:	6413      	str	r3, [r2, #64]	; 0x40
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCC_OscConfig+0x2a4>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_RCC_OscConfig+0x2b0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d120      	bne.n	80078a2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <HAL_RCC_OscConfig+0x2b0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a06      	ldr	r2, [pc, #24]	; (8007880 <HAL_RCC_OscConfig+0x2b0>)
 8007866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800786c:	f7fb fce2 	bl	8003234 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007872:	e010      	b.n	8007896 <HAL_RCC_OscConfig+0x2c6>
 8007874:	40023800 	.word	0x40023800
 8007878:	42470000 	.word	0x42470000
 800787c:	42470e80 	.word	0x42470e80
 8007880:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007884:	f7fb fcd6 	bl	8003234 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e0d3      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007896:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <HAL_RCC_OscConfig+0x478>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d106      	bne.n	80078b8 <HAL_RCC_OscConfig+0x2e8>
 80078aa:	4b68      	ldr	r3, [pc, #416]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	4a67      	ldr	r2, [pc, #412]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	6713      	str	r3, [r2, #112]	; 0x70
 80078b6:	e01c      	b.n	80078f2 <HAL_RCC_OscConfig+0x322>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b05      	cmp	r3, #5
 80078be:	d10c      	bne.n	80078da <HAL_RCC_OscConfig+0x30a>
 80078c0:	4b62      	ldr	r3, [pc, #392]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	4a61      	ldr	r2, [pc, #388]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078c6:	f043 0304 	orr.w	r3, r3, #4
 80078ca:	6713      	str	r3, [r2, #112]	; 0x70
 80078cc:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d0:	4a5e      	ldr	r2, [pc, #376]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	6713      	str	r3, [r2, #112]	; 0x70
 80078d8:	e00b      	b.n	80078f2 <HAL_RCC_OscConfig+0x322>
 80078da:	4b5c      	ldr	r3, [pc, #368]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	4a5b      	ldr	r2, [pc, #364]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	6713      	str	r3, [r2, #112]	; 0x70
 80078e6:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ea:	4a58      	ldr	r2, [pc, #352]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80078ec:	f023 0304 	bic.w	r3, r3, #4
 80078f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d015      	beq.n	8007926 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fa:	f7fb fc9b 	bl	8003234 <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007900:	e00a      	b.n	8007918 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007902:	f7fb fc97 	bl	8003234 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e092      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007918:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 800791a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0ee      	beq.n	8007902 <HAL_RCC_OscConfig+0x332>
 8007924:	e014      	b.n	8007950 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007926:	f7fb fc85 	bl	8003234 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800792c:	e00a      	b.n	8007944 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792e:	f7fb fc81 	bl	8003234 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f241 3288 	movw	r2, #5000	; 0x1388
 800793c:	4293      	cmp	r3, r2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e07c      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007944:	4b41      	ldr	r3, [pc, #260]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1ee      	bne.n	800792e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007956:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 800795c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007960:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d068      	beq.n	8007a3c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800796a:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b08      	cmp	r3, #8
 8007974:	d060      	beq.n	8007a38 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d145      	bne.n	8007a0a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797e:	4b34      	ldr	r3, [pc, #208]	; (8007a50 <HAL_RCC_OscConfig+0x480>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fb fc56 	bl	8003234 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798c:	f7fb fc52 	bl	8003234 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e04f      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69da      	ldr	r2, [r3, #28]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	3b01      	subs	r3, #1
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	061b      	lsls	r3, r3, #24
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	071b      	lsls	r3, r3, #28
 80079d6:	491d      	ldr	r1, [pc, #116]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079dc:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <HAL_RCC_OscConfig+0x480>)
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e2:	f7fb fc27 	bl	8003234 <HAL_GetTick>
 80079e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079e8:	e008      	b.n	80079fc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ea:	f7fb fc23 	bl	8003234 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e020      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fc:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <HAL_RCC_OscConfig+0x41a>
 8007a08:	e018      	b.n	8007a3c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <HAL_RCC_OscConfig+0x480>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fb fc10 	bl	8003234 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a18:	f7fb fc0c 	bl	8003234 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e009      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <HAL_RCC_OscConfig+0x47c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0x448>
 8007a36:	e001      	b.n	8007a3c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40007000 	.word	0x40007000
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	42470060 	.word	0x42470060

08007a54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e022      	b.n	8007aac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7f9 ff9b 	bl	80019b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f814 	bl	8007ab4 <HAL_SD_InitCard>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e00a      	b.n	8007aac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ab4:	b5b0      	push	{r4, r5, r7, lr}
 8007ab6:	b08e      	sub	sp, #56	; 0x38
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007ad0:	2376      	movs	r3, #118	; 0x76
 8007ad2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681d      	ldr	r5, [r3, #0]
 8007ad8:	466c      	mov	r4, sp
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007aec:	4628      	mov	r0, r5
 8007aee:	f001 fc89 	bl	8009404 <SDIO_Init>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e031      	b.n	8007b68 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <HAL_SD_InitCard+0xbc>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fcb0 	bl	8009474 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007b14:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <HAL_SD_InitCard+0xbc>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb18 	bl	8008150 <SD_PowerON>
 8007b20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e013      	b.n	8007b68 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa37 	bl	8007fb4 <SD_InitCard>
 8007b46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b70:	422580a0 	.word	0x422580a0

08007b74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b82:	0f9b      	lsrs	r3, r3, #30
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b8e:	0e9b      	lsrs	r3, r3, #26
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd4:	0d1b      	lsrs	r3, r3, #20
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf2:	0bdb      	lsrs	r3, r3, #15
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c04:	0b9b      	lsrs	r3, r3, #14
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c16:	0b5b      	lsrs	r3, r3, #13
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c28:	0b1b      	lsrs	r3, r3, #12
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d163      	bne.n	8007d0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c48:	009a      	lsls	r2, r3, #2
 8007c4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c4e:	4013      	ands	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007c54:	0f92      	lsrs	r2, r2, #30
 8007c56:	431a      	orrs	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c60:	0edb      	lsrs	r3, r3, #27
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c72:	0e1b      	lsrs	r3, r3, #24
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c84:	0d5b      	lsrs	r3, r3, #21
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c96:	0c9b      	lsrs	r3, r3, #18
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca8:	0bdb      	lsrs	r3, r3, #15
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	7e1b      	ldrb	r3, [r3, #24]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	3302      	adds	r3, #2
 8007ccc:	2201      	movs	r2, #1
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007cd6:	fb02 f203 	mul.w	r2, r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	7a1b      	ldrb	r3, [r3, #8]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	2201      	movs	r2, #1
 8007cea:	409a      	lsls	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007cf8:	0a52      	lsrs	r2, r2, #9
 8007cfa:	fb02 f203 	mul.w	r2, r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d08:	661a      	str	r2, [r3, #96]	; 0x60
 8007d0a:	e031      	b.n	8007d70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d11d      	bne.n	8007d50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	0c1b      	lsrs	r3, r3, #16
 8007d24:	431a      	orrs	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	029a      	lsls	r2, r3, #10
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60
 8007d4e:	e00f      	b.n	8007d70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a58      	ldr	r2, [pc, #352]	; (8007eb8 <HAL_SD_GetCardCSD+0x344>)
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e09d      	b.n	8007eac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d74:	0b9b      	lsrs	r3, r3, #14
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da8:	0fdb      	lsrs	r3, r3, #31
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	0f5b      	lsrs	r3, r3, #29
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	0e9b      	lsrs	r3, r3, #26
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	0d9b      	lsrs	r3, r3, #22
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	0d5b      	lsrs	r3, r3, #21
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	0bdb      	lsrs	r3, r3, #15
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	0b9b      	lsrs	r3, r3, #14
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e42:	0b5b      	lsrs	r3, r3, #13
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	0b1b      	lsrs	r3, r3, #12
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	0a9b      	lsrs	r3, r3, #10
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	004005ff 	.word	0x004005ff

08007ebc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ebc:	b5b0      	push	{r4, r5, r7, lr}
 8007ebe:	b08e      	sub	sp, #56	; 0x38
 8007ec0:	af04      	add	r7, sp, #16
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d02e      	beq.n	8007f34 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	d106      	bne.n	8007eec <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8007eea:	e029      	b.n	8007f40 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef2:	d10a      	bne.n	8007f0a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9b9 	bl	800826c <SD_WideBus_Enable>
 8007efa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
 8007f08:	e01a      	b.n	8007f40 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9f6 	bl	8008302 <SD_WideBus_Disable>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
 8007f24:	e00c      	b.n	8007f40 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	; 0x38
 8007f32:	e005      	b.n	8007f40 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e024      	b.n	8007fa6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681d      	ldr	r5, [r3, #0]
 8007f82:	466c      	mov	r4, sp
 8007f84:	f107 0318 	add.w	r3, r7, #24
 8007f88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f90:	f107 030c 	add.w	r3, r7, #12
 8007f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f96:	4628      	mov	r0, r5
 8007f98:	f001 fa34 	bl	8009404 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3728      	adds	r7, #40	; 0x28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bdb0      	pop	{r4, r5, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	004005ff 	.word	0x004005ff

08007fb4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fb4:	b5b0      	push	{r4, r5, r7, lr}
 8007fb6:	b094      	sub	sp, #80	; 0x50
 8007fb8:	af04      	add	r7, sp, #16
 8007fba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fa64 	bl	8009492 <SDIO_GetPowerState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007fd4:	e0b7      	b.n	8008146 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d02f      	beq.n	800803e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fbe3 	bl	80097ae <SDMMC_CmdSendCID>
 8007fe8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	e0a8      	b.n	8008146 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fa8e 	bl	800951c <SDIO_GetResponse>
 8008000:	4602      	mov	r2, r0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2104      	movs	r1, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fa85 	bl	800951c <SDIO_GetResponse>
 8008012:	4602      	mov	r2, r0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2108      	movs	r1, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fa7c 	bl	800951c <SDIO_GetResponse>
 8008024:	4602      	mov	r2, r0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	210c      	movs	r1, #12
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fa73 	bl	800951c <SDIO_GetResponse>
 8008036:	4602      	mov	r2, r0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	2b03      	cmp	r3, #3
 8008044:	d00d      	beq.n	8008062 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f107 020e 	add.w	r2, r7, #14
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fbe9 	bl	8009828 <SDMMC_CmdSetRelAdd>
 8008056:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SD_InitCard+0xae>
    {
      return errorstate;
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	e071      	b.n	8008146 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	2b03      	cmp	r3, #3
 8008068:	d036      	beq.n	80080d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800806a:	89fb      	ldrh	r3, [r7, #14]
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f001 fbb3 	bl	80097ea <SDMMC_CmdSendCSD>
 8008084:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <SD_InitCard+0xdc>
    {
      return errorstate;
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	e05a      	b.n	8008146 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fa40 	bl	800951c <SDIO_GetResponse>
 800809c:	4602      	mov	r2, r0
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2104      	movs	r1, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fa37 	bl	800951c <SDIO_GetResponse>
 80080ae:	4602      	mov	r2, r0
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2108      	movs	r1, #8
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fa2e 	bl	800951c <SDIO_GetResponse>
 80080c0:	4602      	mov	r2, r0
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	210c      	movs	r1, #12
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 fa25 	bl	800951c <SDIO_GetResponse>
 80080d2:	4602      	mov	r2, r0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2104      	movs	r1, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fa1c 	bl	800951c <SDIO_GetResponse>
 80080e4:	4603      	mov	r3, r0
 80080e6:	0d1a      	lsrs	r2, r3, #20
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80080ec:	f107 0310 	add.w	r3, r7, #16
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff fd3e 	bl	8007b74 <HAL_SD_GetCardCSD>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008102:	e020      	b.n	8008146 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6819      	ldr	r1, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	f04f 0400 	mov.w	r4, #0
 8008112:	461a      	mov	r2, r3
 8008114:	4623      	mov	r3, r4
 8008116:	4608      	mov	r0, r1
 8008118:	f001 fa61 	bl	80095de <SDMMC_CmdSelDesel>
 800811c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800811e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <SD_InitCard+0x174>
  {
    return errorstate;
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	e00e      	b.n	8008146 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681d      	ldr	r5, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	466c      	mov	r4, sp
 8008130:	f103 0210 	add.w	r2, r3, #16
 8008134:	ca07      	ldmia	r2, {r0, r1, r2}
 8008136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800813a:	3304      	adds	r3, #4
 800813c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800813e:	4628      	mov	r0, r5
 8008140:	f001 f960 	bl	8009404 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3740      	adds	r7, #64	; 0x40
 800814a:	46bd      	mov	sp, r7
 800814c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008150 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fa5b 	bl	8009624 <SDMMC_CmdGoIdleState>
 800816e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	e072      	b.n	8008260 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fa6e 	bl	8009660 <SDMMC_CmdOperCond>
 8008184:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00d      	beq.n	80081a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f001 fa44 	bl	8009624 <SDMMC_CmdGoIdleState>
 800819c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	e05b      	b.n	8008260 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d137      	bne.n	8008226 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 fa6e 	bl	800969e <SDMMC_CmdAppCommand>
 80081c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02d      	beq.n	8008226 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081ce:	e047      	b.n	8008260 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fa61 	bl	800969e <SDMMC_CmdAppCommand>
 80081dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	e03b      	b.n	8008260 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	491e      	ldr	r1, [pc, #120]	; (8008268 <SD_PowerON+0x118>)
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fa77 	bl	80096e2 <SDMMC_CmdAppOperCommand>
 80081f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008200:	e02e      	b.n	8008260 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f001 f987 	bl	800951c <SDIO_GetResponse>
 800820e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	0fdb      	lsrs	r3, r3, #31
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <SD_PowerON+0xcc>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <SD_PowerON+0xce>
 800821c:	2300      	movs	r3, #0
 800821e:	613b      	str	r3, [r7, #16]

    count++;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	3301      	adds	r3, #1
 8008224:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800822c:	4293      	cmp	r3, r2
 800822e:	d802      	bhi.n	8008236 <SD_PowerON+0xe6>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0cc      	beq.n	80081d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800823c:	4293      	cmp	r3, r2
 800823e:	d902      	bls.n	8008246 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008244:	e00c      	b.n	8008260 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	645a      	str	r2, [r3, #68]	; 0x44
 8008256:	e002      	b.n	800825e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	c1100000 	.word	0xc1100000

0800826c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f001 f94a 	bl	800951c <SDIO_GetResponse>
 8008288:	4603      	mov	r3, r0
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008292:	d102      	bne.n	800829a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008298:	e02f      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f879 	bl	8008398 <SD_FindSCR>
 80082a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	e023      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01c      	beq.n	80082f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c4:	041b      	lsls	r3, r3, #16
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f001 f9e8 	bl	800969e <SDMMC_CmdAppCommand>
 80082ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	e00f      	b.n	80082fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2102      	movs	r1, #2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 fa21 	bl	8009728 <SDMMC_CmdBusWidth>
 80082e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	e003      	b.n	80082fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e001      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b086      	sub	sp, #24
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 f8ff 	bl	800951c <SDIO_GetResponse>
 800831e:	4603      	mov	r3, r0
 8008320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008328:	d102      	bne.n	8008330 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800832a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800832e:	e02f      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f82e 	bl	8008398 <SD_FindSCR>
 800833c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	e023      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01c      	beq.n	800838c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f001 f99d 	bl	800969e <SDMMC_CmdAppCommand>
 8008364:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	e00f      	b.n	8008390 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f9d6 	bl	8009728 <SDMMC_CmdBusWidth>
 800837c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	e003      	b.n	8008390 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	e001      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800838c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b08f      	sub	sp, #60	; 0x3c
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083a2:	f7fa ff47 	bl	8003234 <HAL_GetTick>
 80083a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80083ac:	2300      	movs	r3, #0
 80083ae:	60bb      	str	r3, [r7, #8]
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2108      	movs	r1, #8
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f8eb 	bl	800959a <SDMMC_CmdBlockLength>
 80083c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	e0a9      	b.n	8008524 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f001 f95e 	bl	800969e <SDMMC_CmdAppCommand>
 80083e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	e09a      	b.n	8008524 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80083f4:	2308      	movs	r3, #8
 80083f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80083f8:	2330      	movs	r3, #48	; 0x30
 80083fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083fc:	2302      	movs	r3, #2
 80083fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008400:	2300      	movs	r3, #0
 8008402:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008404:	2301      	movs	r3, #1
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f107 0210 	add.w	r2, r7, #16
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f895 	bl	8009542 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f001 f9a5 	bl	800976c <SDMMC_CmdSendSCR>
 8008422:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d022      	beq.n	8008470 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	e07a      	b.n	8008524 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00e      	beq.n	800845a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f107 0208 	add.w	r2, r7, #8
 8008448:	18d4      	adds	r4, r2, r3
 800844a:	4608      	mov	r0, r1
 800844c:	f001 f805 	bl	800945a <SDIO_ReadFIFO>
 8008450:	4603      	mov	r3, r0
 8008452:	6023      	str	r3, [r4, #0]
      index++;
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	3301      	adds	r3, #1
 8008458:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800845a:	f7fa feeb 	bl	8003234 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d102      	bne.n	8008470 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800846a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800846e:	e059      	b.n	8008524 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008476:	f240 432a 	movw	r3, #1066	; 0x42a
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0d6      	beq.n	800842e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2208      	movs	r2, #8
 8008494:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008496:	2308      	movs	r3, #8
 8008498:	e044      	b.n	8008524 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2202      	movs	r2, #2
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	e037      	b.n	8008524 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2220      	movs	r2, #32
 80084c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80084ca:	2320      	movs	r3, #32
 80084cc:	e02a      	b.n	8008524 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	061a      	lsls	r2, r3, #24
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	0a1b      	lsrs	r3, r3, #8
 80084ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	0e1b      	lsrs	r3, r3, #24
 80084f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	601a      	str	r2, [r3, #0]
    scr++;
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	3304      	adds	r3, #4
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	061a      	lsls	r2, r3, #24
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800850c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008516:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	0e1b      	lsrs	r3, r3, #24
 800851c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	373c      	adds	r7, #60	; 0x3c
 8008528:	46bd      	mov	sp, r7
 800852a:	bd90      	pop	{r4, r7, pc}

0800852c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e034      	b.n	80085ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7f9 fb82 	bl	8001c60 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3308      	adds	r3, #8
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f000 fe48 	bl	80091fc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	461a      	mov	r2, r3
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	f000 feb0 	bl	80092dc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6858      	ldr	r0, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	f000 fefb 	bl	8009384 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6892      	ldr	r2, [r2, #8]
 8008596:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	6892      	ldr	r2, [r2, #8]
 80085a2:	f041 0101 	orr.w	r1, r1, #1
 80085a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e01d      	b.n	8008602 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f815 	bl	800860a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f000 f968 	bl	80088c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0201 	orr.w	r2, r2, #1
 8008634:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b06      	cmp	r3, #6
 8008646:	d007      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d122      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b02      	cmp	r3, #2
 8008688:	d11b      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0202 	mvn.w	r2, #2
 8008692:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f8ee 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 80086ae:	e005      	b.n	80086bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8e0 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f8f1 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d122      	bne.n	8008716 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d11b      	bne.n	8008716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f06f 0204 	mvn.w	r2, #4
 80086e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8c4 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 8008702:	e005      	b.n	8008710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f8b6 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f8c7 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b08      	cmp	r3, #8
 8008722:	d122      	bne.n	800876a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b08      	cmp	r3, #8
 8008730:	d11b      	bne.n	800876a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f06f 0208 	mvn.w	r2, #8
 800873a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2204      	movs	r2, #4
 8008740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f89a 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 8008756:	e005      	b.n	8008764 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f88c 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f89d 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0310 	and.w	r3, r3, #16
 8008774:	2b10      	cmp	r3, #16
 8008776:	d122      	bne.n	80087be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f003 0310 	and.w	r3, r3, #16
 8008782:	2b10      	cmp	r3, #16
 8008784:	d11b      	bne.n	80087be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f06f 0210 	mvn.w	r2, #16
 800878e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2208      	movs	r2, #8
 8008794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f870 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 80087aa:	e005      	b.n	80087b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f862 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f873 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d10e      	bne.n	80087ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d107      	bne.n	80087ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f06f 0201 	mvn.w	r2, #1
 80087e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7f8 fcb5 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d10e      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b80      	cmp	r3, #128	; 0x80
 8008804:	d107      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800880e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f903 	bl	8008a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d10e      	bne.n	8008842 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f838 	bl	80088b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b20      	cmp	r3, #32
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b20      	cmp	r3, #32
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0220 	mvn.w	r2, #32
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8cd 	bl	8008a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
	...

080088c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a40      	ldr	r2, [pc, #256]	; (80089dc <TIM_Base_SetConfig+0x114>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e6:	d00f      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a3d      	ldr	r2, [pc, #244]	; (80089e0 <TIM_Base_SetConfig+0x118>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a3c      	ldr	r2, [pc, #240]	; (80089e4 <TIM_Base_SetConfig+0x11c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a3b      	ldr	r2, [pc, #236]	; (80089e8 <TIM_Base_SetConfig+0x120>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a3a      	ldr	r2, [pc, #232]	; (80089ec <TIM_Base_SetConfig+0x124>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d108      	bne.n	800891a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2f      	ldr	r2, [pc, #188]	; (80089dc <TIM_Base_SetConfig+0x114>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d02b      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008928:	d027      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2c      	ldr	r2, [pc, #176]	; (80089e0 <TIM_Base_SetConfig+0x118>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d023      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2b      	ldr	r2, [pc, #172]	; (80089e4 <TIM_Base_SetConfig+0x11c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d01f      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <TIM_Base_SetConfig+0x120>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d01b      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a29      	ldr	r2, [pc, #164]	; (80089ec <TIM_Base_SetConfig+0x124>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d017      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a28      	ldr	r2, [pc, #160]	; (80089f0 <TIM_Base_SetConfig+0x128>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d013      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a27      	ldr	r2, [pc, #156]	; (80089f4 <TIM_Base_SetConfig+0x12c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00f      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a26      	ldr	r2, [pc, #152]	; (80089f8 <TIM_Base_SetConfig+0x130>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00b      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a25      	ldr	r2, [pc, #148]	; (80089fc <TIM_Base_SetConfig+0x134>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d007      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a24      	ldr	r2, [pc, #144]	; (8008a00 <TIM_Base_SetConfig+0x138>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a23      	ldr	r2, [pc, #140]	; (8008a04 <TIM_Base_SetConfig+0x13c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d108      	bne.n	800898c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <TIM_Base_SetConfig+0x114>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_Base_SetConfig+0xf8>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a0c      	ldr	r2, [pc, #48]	; (80089ec <TIM_Base_SetConfig+0x124>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d103      	bne.n	80089c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	615a      	str	r2, [r3, #20]
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40000400 	.word	0x40000400
 80089e4:	40000800 	.word	0x40000800
 80089e8:	40000c00 	.word	0x40000c00
 80089ec:	40010400 	.word	0x40010400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800
 80089fc:	40001800 	.word	0x40001800
 8008a00:	40001c00 	.word	0x40001c00
 8008a04:	40002000 	.word	0x40002000

08008a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e03f      	b.n	8008ac2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7f9 f814 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2224      	movs	r2, #36	; 0x24
 8008a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f829 	bl	8008acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b0e:	f023 030c 	bic.w	r3, r3, #12
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	f040 8199 	bne.w	8008e70 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4ac6      	ldr	r2, [pc, #792]	; (8008e5c <UART_SetConfig+0x390>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00f      	beq.n	8008b68 <UART_SetConfig+0x9c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4ac4      	ldr	r2, [pc, #784]	; (8008e60 <UART_SetConfig+0x394>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00a      	beq.n	8008b68 <UART_SetConfig+0x9c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4ac3      	ldr	r2, [pc, #780]	; (8008e64 <UART_SetConfig+0x398>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d005      	beq.n	8008b68 <UART_SetConfig+0x9c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4ac1      	ldr	r2, [pc, #772]	; (8008e68 <UART_SetConfig+0x39c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	f040 80bd 	bne.w	8008ce2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b68:	f7fe f910 	bl	8006d8c <HAL_RCC_GetPCLK2Freq>
 8008b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	461d      	mov	r5, r3
 8008b72:	f04f 0600 	mov.w	r6, #0
 8008b76:	46a8      	mov	r8, r5
 8008b78:	46b1      	mov	r9, r6
 8008b7a:	eb18 0308 	adds.w	r3, r8, r8
 8008b7e:	eb49 0409 	adc.w	r4, r9, r9
 8008b82:	4698      	mov	r8, r3
 8008b84:	46a1      	mov	r9, r4
 8008b86:	eb18 0805 	adds.w	r8, r8, r5
 8008b8a:	eb49 0906 	adc.w	r9, r9, r6
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ba2:	4688      	mov	r8, r1
 8008ba4:	4691      	mov	r9, r2
 8008ba6:	eb18 0005 	adds.w	r0, r8, r5
 8008baa:	eb49 0106 	adc.w	r1, r9, r6
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	f04f 0600 	mov.w	r6, #0
 8008bb8:	196b      	adds	r3, r5, r5
 8008bba:	eb46 0406 	adc.w	r4, r6, r6
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	f7f7 fb2d 	bl	8000220 <__aeabi_uldivmod>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4ba7      	ldr	r3, [pc, #668]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008bce:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	461d      	mov	r5, r3
 8008bdc:	f04f 0600 	mov.w	r6, #0
 8008be0:	46a9      	mov	r9, r5
 8008be2:	46b2      	mov	sl, r6
 8008be4:	eb19 0309 	adds.w	r3, r9, r9
 8008be8:	eb4a 040a 	adc.w	r4, sl, sl
 8008bec:	4699      	mov	r9, r3
 8008bee:	46a2      	mov	sl, r4
 8008bf0:	eb19 0905 	adds.w	r9, r9, r5
 8008bf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bf8:	f04f 0100 	mov.w	r1, #0
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c0c:	4689      	mov	r9, r1
 8008c0e:	4692      	mov	sl, r2
 8008c10:	eb19 0005 	adds.w	r0, r9, r5
 8008c14:	eb4a 0106 	adc.w	r1, sl, r6
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	461d      	mov	r5, r3
 8008c1e:	f04f 0600 	mov.w	r6, #0
 8008c22:	196b      	adds	r3, r5, r5
 8008c24:	eb46 0406 	adc.w	r4, r6, r6
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	f7f7 faf8 	bl	8000220 <__aeabi_uldivmod>
 8008c30:	4603      	mov	r3, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	461a      	mov	r2, r3
 8008c36:	4b8d      	ldr	r3, [pc, #564]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008c38:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	2164      	movs	r1, #100	; 0x64
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	3332      	adds	r3, #50	; 0x32
 8008c4a:	4a88      	ldr	r2, [pc, #544]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c58:	4498      	add	r8, r3
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	461d      	mov	r5, r3
 8008c5e:	f04f 0600 	mov.w	r6, #0
 8008c62:	46a9      	mov	r9, r5
 8008c64:	46b2      	mov	sl, r6
 8008c66:	eb19 0309 	adds.w	r3, r9, r9
 8008c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8008c6e:	4699      	mov	r9, r3
 8008c70:	46a2      	mov	sl, r4
 8008c72:	eb19 0905 	adds.w	r9, r9, r5
 8008c76:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c7a:	f04f 0100 	mov.w	r1, #0
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c8e:	4689      	mov	r9, r1
 8008c90:	4692      	mov	sl, r2
 8008c92:	eb19 0005 	adds.w	r0, r9, r5
 8008c96:	eb4a 0106 	adc.w	r1, sl, r6
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	f04f 0600 	mov.w	r6, #0
 8008ca4:	196b      	adds	r3, r5, r5
 8008ca6:	eb46 0406 	adc.w	r4, r6, r6
 8008caa:	461a      	mov	r2, r3
 8008cac:	4623      	mov	r3, r4
 8008cae:	f7f7 fab7 	bl	8000220 <__aeabi_uldivmod>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	4b6c      	ldr	r3, [pc, #432]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008cba:	fba3 1302 	umull	r1, r3, r3, r2
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	2164      	movs	r1, #100	; 0x64
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	3332      	adds	r3, #50	; 0x32
 8008ccc:	4a67      	ldr	r2, [pc, #412]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	095b      	lsrs	r3, r3, #5
 8008cd4:	f003 0207 	and.w	r2, r3, #7
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4442      	add	r2, r8
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	e27d      	b.n	80091de <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fe f83f 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8008ce6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	461d      	mov	r5, r3
 8008cec:	f04f 0600 	mov.w	r6, #0
 8008cf0:	46a8      	mov	r8, r5
 8008cf2:	46b1      	mov	r9, r6
 8008cf4:	eb18 0308 	adds.w	r3, r8, r8
 8008cf8:	eb49 0409 	adc.w	r4, r9, r9
 8008cfc:	4698      	mov	r8, r3
 8008cfe:	46a1      	mov	r9, r4
 8008d00:	eb18 0805 	adds.w	r8, r8, r5
 8008d04:	eb49 0906 	adc.w	r9, r9, r6
 8008d08:	f04f 0100 	mov.w	r1, #0
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d1c:	4688      	mov	r8, r1
 8008d1e:	4691      	mov	r9, r2
 8008d20:	eb18 0005 	adds.w	r0, r8, r5
 8008d24:	eb49 0106 	adc.w	r1, r9, r6
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	461d      	mov	r5, r3
 8008d2e:	f04f 0600 	mov.w	r6, #0
 8008d32:	196b      	adds	r3, r5, r5
 8008d34:	eb46 0406 	adc.w	r4, r6, r6
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	f7f7 fa70 	bl	8000220 <__aeabi_uldivmod>
 8008d40:	4603      	mov	r3, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	461a      	mov	r2, r3
 8008d46:	4b49      	ldr	r3, [pc, #292]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008d48:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	461d      	mov	r5, r3
 8008d56:	f04f 0600 	mov.w	r6, #0
 8008d5a:	46a9      	mov	r9, r5
 8008d5c:	46b2      	mov	sl, r6
 8008d5e:	eb19 0309 	adds.w	r3, r9, r9
 8008d62:	eb4a 040a 	adc.w	r4, sl, sl
 8008d66:	4699      	mov	r9, r3
 8008d68:	46a2      	mov	sl, r4
 8008d6a:	eb19 0905 	adds.w	r9, r9, r5
 8008d6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d72:	f04f 0100 	mov.w	r1, #0
 8008d76:	f04f 0200 	mov.w	r2, #0
 8008d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d86:	4689      	mov	r9, r1
 8008d88:	4692      	mov	sl, r2
 8008d8a:	eb19 0005 	adds.w	r0, r9, r5
 8008d8e:	eb4a 0106 	adc.w	r1, sl, r6
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	461d      	mov	r5, r3
 8008d98:	f04f 0600 	mov.w	r6, #0
 8008d9c:	196b      	adds	r3, r5, r5
 8008d9e:	eb46 0406 	adc.w	r4, r6, r6
 8008da2:	461a      	mov	r2, r3
 8008da4:	4623      	mov	r3, r4
 8008da6:	f7f7 fa3b 	bl	8000220 <__aeabi_uldivmod>
 8008daa:	4603      	mov	r3, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	461a      	mov	r2, r3
 8008db0:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008db2:	fba3 1302 	umull	r1, r3, r3, r2
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	2164      	movs	r1, #100	; 0x64
 8008dba:	fb01 f303 	mul.w	r3, r1, r3
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	3332      	adds	r3, #50	; 0x32
 8008dc4:	4a29      	ldr	r2, [pc, #164]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dd2:	4498      	add	r8, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	461d      	mov	r5, r3
 8008dd8:	f04f 0600 	mov.w	r6, #0
 8008ddc:	46a9      	mov	r9, r5
 8008dde:	46b2      	mov	sl, r6
 8008de0:	eb19 0309 	adds.w	r3, r9, r9
 8008de4:	eb4a 040a 	adc.w	r4, sl, sl
 8008de8:	4699      	mov	r9, r3
 8008dea:	46a2      	mov	sl, r4
 8008dec:	eb19 0905 	adds.w	r9, r9, r5
 8008df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008df4:	f04f 0100 	mov.w	r1, #0
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e08:	4689      	mov	r9, r1
 8008e0a:	4692      	mov	sl, r2
 8008e0c:	eb19 0005 	adds.w	r0, r9, r5
 8008e10:	eb4a 0106 	adc.w	r1, sl, r6
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	461d      	mov	r5, r3
 8008e1a:	f04f 0600 	mov.w	r6, #0
 8008e1e:	196b      	adds	r3, r5, r5
 8008e20:	eb46 0406 	adc.w	r4, r6, r6
 8008e24:	461a      	mov	r2, r3
 8008e26:	4623      	mov	r3, r4
 8008e28:	f7f7 f9fa 	bl	8000220 <__aeabi_uldivmod>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008e34:	fba3 1302 	umull	r1, r3, r3, r2
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	2164      	movs	r1, #100	; 0x64
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	3332      	adds	r3, #50	; 0x32
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <UART_SetConfig+0x3a0>)
 8008e48:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f003 0207 	and.w	r2, r3, #7
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4442      	add	r2, r8
 8008e58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e5a:	e1c0      	b.n	80091de <UART_SetConfig+0x712>
 8008e5c:	40011000 	.word	0x40011000
 8008e60:	40011400 	.word	0x40011400
 8008e64:	40011800 	.word	0x40011800
 8008e68:	40011c00 	.word	0x40011c00
 8008e6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4adc      	ldr	r2, [pc, #880]	; (80091e8 <UART_SetConfig+0x71c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00f      	beq.n	8008e9a <UART_SetConfig+0x3ce>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4adb      	ldr	r2, [pc, #876]	; (80091ec <UART_SetConfig+0x720>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00a      	beq.n	8008e9a <UART_SetConfig+0x3ce>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4ad9      	ldr	r2, [pc, #868]	; (80091f0 <UART_SetConfig+0x724>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d005      	beq.n	8008e9a <UART_SetConfig+0x3ce>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4ad8      	ldr	r2, [pc, #864]	; (80091f4 <UART_SetConfig+0x728>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	f040 80d1 	bne.w	800903c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e9a:	f7fd ff77 	bl	8006d8c <HAL_RCC_GetPCLK2Freq>
 8008e9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	469a      	mov	sl, r3
 8008ea4:	f04f 0b00 	mov.w	fp, #0
 8008ea8:	46d0      	mov	r8, sl
 8008eaa:	46d9      	mov	r9, fp
 8008eac:	eb18 0308 	adds.w	r3, r8, r8
 8008eb0:	eb49 0409 	adc.w	r4, r9, r9
 8008eb4:	4698      	mov	r8, r3
 8008eb6:	46a1      	mov	r9, r4
 8008eb8:	eb18 080a 	adds.w	r8, r8, sl
 8008ebc:	eb49 090b 	adc.w	r9, r9, fp
 8008ec0:	f04f 0100 	mov.w	r1, #0
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ecc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ed0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ed4:	4688      	mov	r8, r1
 8008ed6:	4691      	mov	r9, r2
 8008ed8:	eb1a 0508 	adds.w	r5, sl, r8
 8008edc:	eb4b 0609 	adc.w	r6, fp, r9
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	f04f 0400 	mov.w	r4, #0
 8008ef2:	0094      	lsls	r4, r2, #2
 8008ef4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ef8:	008b      	lsls	r3, r1, #2
 8008efa:	461a      	mov	r2, r3
 8008efc:	4623      	mov	r3, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	4631      	mov	r1, r6
 8008f02:	f7f7 f98d 	bl	8000220 <__aeabi_uldivmod>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4bba      	ldr	r3, [pc, #744]	; (80091f8 <UART_SetConfig+0x72c>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	f04f 0c00 	mov.w	ip, #0
 8008f20:	46d9      	mov	r9, fp
 8008f22:	46e2      	mov	sl, ip
 8008f24:	eb19 0309 	adds.w	r3, r9, r9
 8008f28:	eb4a 040a 	adc.w	r4, sl, sl
 8008f2c:	4699      	mov	r9, r3
 8008f2e:	46a2      	mov	sl, r4
 8008f30:	eb19 090b 	adds.w	r9, r9, fp
 8008f34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	4692      	mov	sl, r2
 8008f50:	eb1b 0509 	adds.w	r5, fp, r9
 8008f54:	eb4c 060a 	adc.w	r6, ip, sl
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	f04f 0300 	mov.w	r3, #0
 8008f66:	f04f 0400 	mov.w	r4, #0
 8008f6a:	0094      	lsls	r4, r2, #2
 8008f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f70:	008b      	lsls	r3, r1, #2
 8008f72:	461a      	mov	r2, r3
 8008f74:	4623      	mov	r3, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	4631      	mov	r1, r6
 8008f7a:	f7f7 f951 	bl	8000220 <__aeabi_uldivmod>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	460c      	mov	r4, r1
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b9c      	ldr	r3, [pc, #624]	; (80091f8 <UART_SetConfig+0x72c>)
 8008f86:	fba3 1302 	umull	r1, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	2164      	movs	r1, #100	; 0x64
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	3332      	adds	r3, #50	; 0x32
 8008f98:	4a97      	ldr	r2, [pc, #604]	; (80091f8 <UART_SetConfig+0x72c>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa4:	4498      	add	r8, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	469b      	mov	fp, r3
 8008faa:	f04f 0c00 	mov.w	ip, #0
 8008fae:	46d9      	mov	r9, fp
 8008fb0:	46e2      	mov	sl, ip
 8008fb2:	eb19 0309 	adds.w	r3, r9, r9
 8008fb6:	eb4a 040a 	adc.w	r4, sl, sl
 8008fba:	4699      	mov	r9, r3
 8008fbc:	46a2      	mov	sl, r4
 8008fbe:	eb19 090b 	adds.w	r9, r9, fp
 8008fc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fc6:	f04f 0100 	mov.w	r1, #0
 8008fca:	f04f 0200 	mov.w	r2, #0
 8008fce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fda:	4689      	mov	r9, r1
 8008fdc:	4692      	mov	sl, r2
 8008fde:	eb1b 0509 	adds.w	r5, fp, r9
 8008fe2:	eb4c 060a 	adc.w	r6, ip, sl
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	4619      	mov	r1, r3
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	f04f 0300 	mov.w	r3, #0
 8008ff4:	f04f 0400 	mov.w	r4, #0
 8008ff8:	0094      	lsls	r4, r2, #2
 8008ffa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ffe:	008b      	lsls	r3, r1, #2
 8009000:	461a      	mov	r2, r3
 8009002:	4623      	mov	r3, r4
 8009004:	4628      	mov	r0, r5
 8009006:	4631      	mov	r1, r6
 8009008:	f7f7 f90a 	bl	8000220 <__aeabi_uldivmod>
 800900c:	4603      	mov	r3, r0
 800900e:	460c      	mov	r4, r1
 8009010:	461a      	mov	r2, r3
 8009012:	4b79      	ldr	r3, [pc, #484]	; (80091f8 <UART_SetConfig+0x72c>)
 8009014:	fba3 1302 	umull	r1, r3, r3, r2
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	2164      	movs	r1, #100	; 0x64
 800901c:	fb01 f303 	mul.w	r3, r1, r3
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	3332      	adds	r3, #50	; 0x32
 8009026:	4a74      	ldr	r2, [pc, #464]	; (80091f8 <UART_SetConfig+0x72c>)
 8009028:	fba2 2303 	umull	r2, r3, r2, r3
 800902c:	095b      	lsrs	r3, r3, #5
 800902e:	f003 020f 	and.w	r2, r3, #15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4442      	add	r2, r8
 8009038:	609a      	str	r2, [r3, #8]
 800903a:	e0d0      	b.n	80091de <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800903c:	f7fd fe92 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8009040:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	469a      	mov	sl, r3
 8009046:	f04f 0b00 	mov.w	fp, #0
 800904a:	46d0      	mov	r8, sl
 800904c:	46d9      	mov	r9, fp
 800904e:	eb18 0308 	adds.w	r3, r8, r8
 8009052:	eb49 0409 	adc.w	r4, r9, r9
 8009056:	4698      	mov	r8, r3
 8009058:	46a1      	mov	r9, r4
 800905a:	eb18 080a 	adds.w	r8, r8, sl
 800905e:	eb49 090b 	adc.w	r9, r9, fp
 8009062:	f04f 0100 	mov.w	r1, #0
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800906e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009072:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009076:	4688      	mov	r8, r1
 8009078:	4691      	mov	r9, r2
 800907a:	eb1a 0508 	adds.w	r5, sl, r8
 800907e:	eb4b 0609 	adc.w	r6, fp, r9
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	4619      	mov	r1, r3
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	f04f 0400 	mov.w	r4, #0
 8009094:	0094      	lsls	r4, r2, #2
 8009096:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800909a:	008b      	lsls	r3, r1, #2
 800909c:	461a      	mov	r2, r3
 800909e:	4623      	mov	r3, r4
 80090a0:	4628      	mov	r0, r5
 80090a2:	4631      	mov	r1, r6
 80090a4:	f7f7 f8bc 	bl	8000220 <__aeabi_uldivmod>
 80090a8:	4603      	mov	r3, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	461a      	mov	r2, r3
 80090ae:	4b52      	ldr	r3, [pc, #328]	; (80091f8 <UART_SetConfig+0x72c>)
 80090b0:	fba3 2302 	umull	r2, r3, r3, r2
 80090b4:	095b      	lsrs	r3, r3, #5
 80090b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	469b      	mov	fp, r3
 80090be:	f04f 0c00 	mov.w	ip, #0
 80090c2:	46d9      	mov	r9, fp
 80090c4:	46e2      	mov	sl, ip
 80090c6:	eb19 0309 	adds.w	r3, r9, r9
 80090ca:	eb4a 040a 	adc.w	r4, sl, sl
 80090ce:	4699      	mov	r9, r3
 80090d0:	46a2      	mov	sl, r4
 80090d2:	eb19 090b 	adds.w	r9, r9, fp
 80090d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80090da:	f04f 0100 	mov.w	r1, #0
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090ee:	4689      	mov	r9, r1
 80090f0:	4692      	mov	sl, r2
 80090f2:	eb1b 0509 	adds.w	r5, fp, r9
 80090f6:	eb4c 060a 	adc.w	r6, ip, sl
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4619      	mov	r1, r3
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	f04f 0400 	mov.w	r4, #0
 800910c:	0094      	lsls	r4, r2, #2
 800910e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009112:	008b      	lsls	r3, r1, #2
 8009114:	461a      	mov	r2, r3
 8009116:	4623      	mov	r3, r4
 8009118:	4628      	mov	r0, r5
 800911a:	4631      	mov	r1, r6
 800911c:	f7f7 f880 	bl	8000220 <__aeabi_uldivmod>
 8009120:	4603      	mov	r3, r0
 8009122:	460c      	mov	r4, r1
 8009124:	461a      	mov	r2, r3
 8009126:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <UART_SetConfig+0x72c>)
 8009128:	fba3 1302 	umull	r1, r3, r3, r2
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	2164      	movs	r1, #100	; 0x64
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	3332      	adds	r3, #50	; 0x32
 800913a:	4a2f      	ldr	r2, [pc, #188]	; (80091f8 <UART_SetConfig+0x72c>)
 800913c:	fba2 2303 	umull	r2, r3, r2, r3
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009146:	4498      	add	r8, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	469b      	mov	fp, r3
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	46d9      	mov	r9, fp
 8009152:	46e2      	mov	sl, ip
 8009154:	eb19 0309 	adds.w	r3, r9, r9
 8009158:	eb4a 040a 	adc.w	r4, sl, sl
 800915c:	4699      	mov	r9, r3
 800915e:	46a2      	mov	sl, r4
 8009160:	eb19 090b 	adds.w	r9, r9, fp
 8009164:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009168:	f04f 0100 	mov.w	r1, #0
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009174:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009178:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800917c:	4689      	mov	r9, r1
 800917e:	4692      	mov	sl, r2
 8009180:	eb1b 0509 	adds.w	r5, fp, r9
 8009184:	eb4c 060a 	adc.w	r6, ip, sl
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4619      	mov	r1, r3
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	f04f 0400 	mov.w	r4, #0
 800919a:	0094      	lsls	r4, r2, #2
 800919c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091a0:	008b      	lsls	r3, r1, #2
 80091a2:	461a      	mov	r2, r3
 80091a4:	4623      	mov	r3, r4
 80091a6:	4628      	mov	r0, r5
 80091a8:	4631      	mov	r1, r6
 80091aa:	f7f7 f839 	bl	8000220 <__aeabi_uldivmod>
 80091ae:	4603      	mov	r3, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	461a      	mov	r2, r3
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <UART_SetConfig+0x72c>)
 80091b6:	fba3 1302 	umull	r1, r3, r3, r2
 80091ba:	095b      	lsrs	r3, r3, #5
 80091bc:	2164      	movs	r1, #100	; 0x64
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	3332      	adds	r3, #50	; 0x32
 80091c8:	4a0b      	ldr	r2, [pc, #44]	; (80091f8 <UART_SetConfig+0x72c>)
 80091ca:	fba2 2303 	umull	r2, r3, r2, r3
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	f003 020f 	and.w	r2, r3, #15
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4442      	add	r2, r8
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	e7ff      	b.n	80091de <UART_SetConfig+0x712>
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e8:	40011000 	.word	0x40011000
 80091ec:	40011400 	.word	0x40011400
 80091f0:	40011800 	.word	0x40011800
 80091f4:	40011c00 	.word	0x40011c00
 80091f8:	51eb851f 	.word	0x51eb851f

080091fc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009214:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4b2f      	ldr	r3, [pc, #188]	; (80092d8 <FSMC_NORSRAM_Init+0xdc>)
 800921a:	4013      	ands	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009226:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800922c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009232:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009238:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800923e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009244:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800924a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009250:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009256:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800925c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8009262:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009268:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800926e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b08      	cmp	r3, #8
 800927c:	d103      	bne.n	8009286 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009284:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68f9      	ldr	r1, [r7, #12]
 800928e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	d10a      	bne.n	80092b2 <FSMC_NORSRAM_Init+0xb6>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d006      	beq.n	80092c8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	ffc00480 	.word	0xffc00480

080092dc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80092fe:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800930a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009312:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800931a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	3b01      	subs	r3, #1
 8009322:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009324:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	3b02      	subs	r3, #2
 800932c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800932e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009334:	4313      	orrs	r3, r2
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6979      	ldr	r1, [r7, #20]
 8009344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009354:	d10e      	bne.n	8009374 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800935e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	3b01      	subs	r3, #1
 8009366:	051b      	lsls	r3, r3, #20
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
	...

08009384 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800939c:	d122      	bne.n	80093e4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4b15      	ldr	r3, [pc, #84]	; (8009400 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80093ba:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80093c2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80093ca:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80093d0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6979      	ldr	r1, [r7, #20]
 80093de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80093e2:	e005      	b.n	80093f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80093ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	cff00000 	.word	0xcff00000

08009404 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009404:	b084      	sub	sp, #16
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	f107 001c 	add.w	r0, r7, #28
 8009412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800941a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800941c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800941e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009422:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009426:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800942a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800942e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800943e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	b004      	add	sp, #16
 8009458:	4770      	bx	lr

0800945a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2203      	movs	r2, #3
 8009480:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009482:	2002      	movs	r0, #2
 8009484:	f7f9 fee2 	bl	800324c <HAL_Delay>
  
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0303 	and.w	r3, r3, #3
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80094cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80094d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80094d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80094e8:	f023 030f 	bic.w	r3, r3, #15
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	b2db      	uxtb	r3, r3
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3314      	adds	r3, #20
 800952a:	461a      	mov	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	4413      	add	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
}  
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009568:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800956e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009574:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800958c:	2300      	movs	r3, #0

}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b088      	sub	sp, #32
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80095a8:	2310      	movs	r3, #16
 80095aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ff74 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80095c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ca:	2110      	movs	r1, #16
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f975 	bl	80098bc <SDMMC_GetCmdResp1>
 80095d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d4:	69fb      	ldr	r3, [r7, #28]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b08a      	sub	sp, #40	; 0x28
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095ee:	2307      	movs	r3, #7
 80095f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095f2:	2340      	movs	r3, #64	; 0x40
 80095f4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fe:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009600:	f107 0310 	add.w	r3, r7, #16
 8009604:	4619      	mov	r1, r3
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff ff51 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800960c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009610:	2107      	movs	r1, #7
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f952 	bl	80098bc <SDMMC_GetCmdResp1>
 8009618:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961c:	4618      	mov	r0, r3
 800961e:	3728      	adds	r7, #40	; 0x28
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009638:	2300      	movs	r3, #0
 800963a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800963c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009642:	f107 0308 	add.w	r3, r7, #8
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff30 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f90c 	bl	800986c <SDMMC_GetCmdError>
 8009654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009656:	69fb      	ldr	r3, [r7, #28]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009668:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800966c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800966e:	2308      	movs	r3, #8
 8009670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009672:	2340      	movs	r3, #64	; 0x40
 8009674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800967a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff ff11 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 faf5 	bl	8009c7c <SDMMC_GetCmdResp7>
 8009692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009694:	69fb      	ldr	r3, [r7, #28]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b088      	sub	sp, #32
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80096ac:	2337      	movs	r3, #55	; 0x37
 80096ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fef2 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80096ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ce:	2137      	movs	r1, #55	; 0x37
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8f3 	bl	80098bc <SDMMC_GetCmdResp1>
 80096d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096d8:	69fb      	ldr	r3, [r7, #28]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3720      	adds	r7, #32
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b088      	sub	sp, #32
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80096f8:	2329      	movs	r3, #41	; 0x29
 80096fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096fc:	2340      	movs	r3, #64	; 0x40
 80096fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800970a:	f107 0308 	add.w	r3, r7, #8
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fecc 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa02 	bl	8009b20 <SDMMC_GetCmdResp3>
 800971c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800971e:	69fb      	ldr	r3, [r7, #28]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3720      	adds	r7, #32
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009736:	2306      	movs	r3, #6
 8009738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800973e:	2300      	movs	r3, #0
 8009740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fead 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009754:	f241 3288 	movw	r2, #5000	; 0x1388
 8009758:	2106      	movs	r1, #6
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f8ae 	bl	80098bc <SDMMC_GetCmdResp1>
 8009760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009762:	69fb      	ldr	r3, [r7, #28]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009778:	2333      	movs	r3, #51	; 0x33
 800977a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff fe8c 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009796:	f241 3288 	movw	r2, #5000	; 0x1388
 800979a:	2133      	movs	r1, #51	; 0x33
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f88d 	bl	80098bc <SDMMC_GetCmdResp1>
 80097a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b088      	sub	sp, #32
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80097ba:	2302      	movs	r3, #2
 80097bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80097be:	23c0      	movs	r3, #192	; 0xc0
 80097c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff fe6b 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f95b 	bl	8009a94 <SDMMC_GetCmdResp2>
 80097de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e0:	69fb      	ldr	r3, [r7, #28]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3720      	adds	r7, #32
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b088      	sub	sp, #32
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80097f8:	2309      	movs	r3, #9
 80097fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80097fc:	23c0      	movs	r3, #192	; 0xc0
 80097fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800980a:	f107 0308 	add.w	r3, r7, #8
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff fe4c 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f93c 	bl	8009a94 <SDMMC_GetCmdResp2>
 800981c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800981e:	69fb      	ldr	r3, [r7, #28]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009836:	2303      	movs	r3, #3
 8009838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009846:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fe2d 	bl	80094ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	2103      	movs	r1, #3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f99b 	bl	8009b94 <SDMMC_GetCmdResp6>
 800985e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009860:	69fb      	ldr	r3, [r7, #28]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800986c:	b490      	push	{r4, r7}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009874:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <SDMMC_GetCmdError+0x48>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a0f      	ldr	r2, [pc, #60]	; (80098b8 <SDMMC_GetCmdError+0x4c>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0a5b      	lsrs	r3, r3, #9
 8009880:	f241 3288 	movw	r2, #5000	; 0x1388
 8009884:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009888:	4623      	mov	r3, r4
 800988a:	1e5c      	subs	r4, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d102      	bne.n	8009896 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009894:	e009      	b.n	80098aa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f2      	beq.n	8009888 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	22c5      	movs	r2, #197	; 0xc5
 80098a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc90      	pop	{r4, r7}
 80098b2:	4770      	bx	lr
 80098b4:	2000000c 	.word	0x2000000c
 80098b8:	10624dd3 	.word	0x10624dd3

080098bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80098bc:	b590      	push	{r4, r7, lr}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	460b      	mov	r3, r1
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098ca:	4b6f      	ldr	r3, [pc, #444]	; (8009a88 <SDMMC_GetCmdResp1+0x1cc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a6f      	ldr	r2, [pc, #444]	; (8009a8c <SDMMC_GetCmdResp1+0x1d0>)
 80098d0:	fba2 2303 	umull	r2, r3, r2, r3
 80098d4:	0a5b      	lsrs	r3, r3, #9
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098dc:	4623      	mov	r3, r4
 80098de:	1e5c      	subs	r4, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098e8:	e0c9      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ee:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0f0      	beq.n	80098dc <SDMMC_GetCmdResp1+0x20>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1eb      	bne.n	80098dc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2204      	movs	r2, #4
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009916:	2304      	movs	r3, #4
 8009918:	e0b1      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800992c:	2301      	movs	r3, #1
 800992e:	e0a6      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	22c5      	movs	r2, #197	; 0xc5
 8009934:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fde3 	bl	8009502 <SDIO_GetCommandResponse>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	7afb      	ldrb	r3, [r7, #11]
 8009942:	4293      	cmp	r3, r2
 8009944:	d001      	beq.n	800994a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009946:	2301      	movs	r3, #1
 8009948:	e099      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800994a:	2100      	movs	r1, #0
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff fde5 	bl	800951c <SDIO_GetResponse>
 8009952:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4b4e      	ldr	r3, [pc, #312]	; (8009a90 <SDMMC_GetCmdResp1+0x1d4>)
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800995e:	2300      	movs	r3, #0
 8009960:	e08d      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	da02      	bge.n	800996e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800996c:	e087      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009978:	2340      	movs	r3, #64	; 0x40
 800997a:	e080      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009986:	2380      	movs	r3, #128	; 0x80
 8009988:	e079      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009998:	e071      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a8:	e069      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b8:	e061      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099c8:	e059      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099d8:	e051      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099e8:	e049      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099f8:	e041      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a08:	e039      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a18:	e031      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a28:	e029      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a38:	e021      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a48:	e019      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a58:	e011      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a68:	e009      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a78:	e001      	b.n	8009a7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd90      	pop	{r4, r7, pc}
 8009a86:	bf00      	nop
 8009a88:	2000000c 	.word	0x2000000c
 8009a8c:	10624dd3 	.word	0x10624dd3
 8009a90:	fdffe008 	.word	0xfdffe008

08009a94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009a94:	b490      	push	{r4, r7}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a9c:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <SDMMC_GetCmdResp2+0x84>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a1e      	ldr	r2, [pc, #120]	; (8009b1c <SDMMC_GetCmdResp2+0x88>)
 8009aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa6:	0a5b      	lsrs	r3, r3, #9
 8009aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	1e5c      	subs	r4, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009abc:	e026      	b.n	8009b0c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f0      	beq.n	8009ab0 <SDMMC_GetCmdResp2+0x1c>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1eb      	bne.n	8009ab0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009adc:	f003 0304 	and.w	r3, r3, #4
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2204      	movs	r2, #4
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aea:	2304      	movs	r3, #4
 8009aec:	e00e      	b.n	8009b0c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e003      	b.n	8009b0c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	22c5      	movs	r2, #197	; 0xc5
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc90      	pop	{r4, r7}
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	2000000c 	.word	0x2000000c
 8009b1c:	10624dd3 	.word	0x10624dd3

08009b20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009b20:	b490      	push	{r4, r7}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b28:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <SDMMC_GetCmdResp3+0x6c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <SDMMC_GetCmdResp3+0x70>)
 8009b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b32:	0a5b      	lsrs	r3, r3, #9
 8009b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b3c:	4623      	mov	r3, r4
 8009b3e:	1e5c      	subs	r4, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b48:	e01b      	b.n	8009b82 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f0      	beq.n	8009b3c <SDMMC_GetCmdResp3+0x1c>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1eb      	bne.n	8009b3c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2204      	movs	r2, #4
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b76:	2304      	movs	r3, #4
 8009b78:	e003      	b.n	8009b82 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	22c5      	movs	r2, #197	; 0xc5
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc90      	pop	{r4, r7}
 8009b8a:	4770      	bx	lr
 8009b8c:	2000000c 	.word	0x2000000c
 8009b90:	10624dd3 	.word	0x10624dd3

08009b94 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ba2:	4b34      	ldr	r3, [pc, #208]	; (8009c74 <SDMMC_GetCmdResp6+0xe0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a34      	ldr	r2, [pc, #208]	; (8009c78 <SDMMC_GetCmdResp6+0xe4>)
 8009ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bac:	0a5b      	lsrs	r3, r3, #9
 8009bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	1e5c      	subs	r4, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc2:	e052      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0f0      	beq.n	8009bb6 <SDMMC_GetCmdResp6+0x22>
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1eb      	bne.n	8009bb6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2204      	movs	r2, #4
 8009bee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	e03a      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e02f      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff fc79 	bl	8009502 <SDIO_GetCommandResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d001      	beq.n	8009c1e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e025      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	22c5      	movs	r2, #197	; 0xc5
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fc78 	bl	800951c <SDIO_GetResponse>
 8009c2c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d106      	bne.n	8009c46 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e011      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c54:	e009      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c64:	e001      	b.n	8009c6a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd90      	pop	{r4, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000000c 	.word	0x2000000c
 8009c78:	10624dd3 	.word	0x10624dd3

08009c7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009c7c:	b490      	push	{r4, r7}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c84:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <SDMMC_GetCmdResp7+0x90>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a21      	ldr	r2, [pc, #132]	; (8009d10 <SDMMC_GetCmdResp7+0x94>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	0a5b      	lsrs	r3, r3, #9
 8009c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c98:	4623      	mov	r3, r4
 8009c9a:	1e5c      	subs	r4, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ca4:	e02c      	b.n	8009d00 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009caa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0f0      	beq.n	8009c98 <SDMMC_GetCmdResp7+0x1c>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1eb      	bne.n	8009c98 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2204      	movs	r2, #4
 8009cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	e014      	b.n	8009d00 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d004      	beq.n	8009cec <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e009      	b.n	8009d00 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2240      	movs	r2, #64	; 0x40
 8009cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009cfe:	2300      	movs	r3, #0
  
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bc90      	pop	{r4, r7}
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	2000000c 	.word	0x2000000c
 8009d10:	10624dd3 	.word	0x10624dd3

08009d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d14:	b084      	sub	sp, #16
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	f107 001c 	add.w	r0, r7, #28
 8009d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d122      	bne.n	8009d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d105      	bne.n	8009d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f94a 	bl	800a000 <USB_CoreReset>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]
 8009d70:	e01a      	b.n	8009da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f93e 	bl	800a000 <USB_CoreReset>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	639a      	str	r2, [r3, #56]	; 0x38
 8009d9a:	e005      	b.n	8009da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d10b      	bne.n	8009dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f043 0206 	orr.w	r2, r3, #6
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f043 0220 	orr.w	r2, r3, #32
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dd2:	b004      	add	sp, #16
 8009dd4:	4770      	bx	lr

08009dd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f043 0201 	orr.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f023 0201 	bic.w	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e32:	78fb      	ldrb	r3, [r7, #3]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d106      	bne.n	8009e46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	60da      	str	r2, [r3, #12]
 8009e44:	e00b      	b.n	8009e5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60da      	str	r2, [r3, #12]
 8009e58:	e001      	b.n	8009e5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e003      	b.n	8009e66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e5e:	2032      	movs	r0, #50	; 0x32
 8009e60:	f7f9 f9f4 	bl	800324c <HAL_Delay>

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	019b      	lsls	r3, r3, #6
 8009e82:	f043 0220 	orr.w	r2, r3, #32
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a09      	ldr	r2, [pc, #36]	; (8009eb8 <USB_FlushTxFifo+0x48>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d901      	bls.n	8009e9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e006      	b.n	8009eaa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d0f0      	beq.n	8009e8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	00030d40 	.word	0x00030d40

08009ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2210      	movs	r2, #16
 8009ecc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4a09      	ldr	r2, [pc, #36]	; (8009efc <USB_FlushRxFifo+0x40>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d901      	bls.n	8009ee0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e006      	b.n	8009eee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0310 	and.w	r3, r3, #16
 8009ee8:	2b10      	cmp	r3, #16
 8009eea:	d0f0      	beq.n	8009ece <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	00030d40 	.word	0x00030d40

08009f00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b089      	sub	sp, #36	; 0x24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	460b      	mov	r3, r1
 8009f10:	71fb      	strb	r3, [r7, #7]
 8009f12:	4613      	mov	r3, r2
 8009f14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d11a      	bne.n	8009f5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f26:	88bb      	ldrh	r3, [r7, #4]
 8009f28:	3303      	adds	r3, #3
 8009f2a:	089b      	lsrs	r3, r3, #2
 8009f2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	e00f      	b.n	8009f54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	031a      	lsls	r2, r3, #12
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f40:	461a      	mov	r2, r3
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	3301      	adds	r3, #1
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d3eb      	bcc.n	8009f34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3724      	adds	r7, #36	; 0x24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b089      	sub	sp, #36	; 0x24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	4613      	mov	r3, r2
 8009f76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	3303      	adds	r3, #3
 8009f84:	089b      	lsrs	r3, r3, #2
 8009f86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	e00b      	b.n	8009fa6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d3ef      	bcc.n	8009f8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009fae:	69fb      	ldr	r3, [r7, #28]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f003 0301 	and.w	r3, r3, #1
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
	...

0800a000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a13      	ldr	r2, [pc, #76]	; (800a064 <USB_CoreReset+0x64>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e01b      	b.n	800a056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	daf2      	bge.n	800a00c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f043 0201 	orr.w	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <USB_CoreReset+0x64>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d901      	bls.n	800a048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e006      	b.n	800a056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b01      	cmp	r3, #1
 800a052:	d0f0      	beq.n	800a036 <USB_CoreReset+0x36>

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	00030d40 	.word	0x00030d40

0800a068 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a068:	b084      	sub	sp, #16
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	f107 001c 	add.w	r0, r7, #28
 800a076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a084:	461a      	mov	r2, r3
 800a086:	2300      	movs	r3, #0
 800a088:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d018      	beq.n	800a0e0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d10a      	bne.n	800a0ca <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0c2:	f043 0304 	orr.w	r3, r3, #4
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	e014      	b.n	800a0f4 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0d8:	f023 0304 	bic.w	r3, r3, #4
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	e009      	b.n	800a0f4 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0ee:	f023 0304 	bic.w	r3, r3, #4
 800a0f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a0f4:	2110      	movs	r1, #16
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff feba 	bl	8009e70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff fedd 	bl	8009ebc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	e015      	b.n	800a134 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a114:	461a      	mov	r2, r3
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
 800a11a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a128:	461a      	mov	r2, r3
 800a12a:	2300      	movs	r3, #0
 800a12c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d3e5      	bcc.n	800a108 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a13c:	2101      	movs	r1, #1
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f8ac 	bl	800a29c <USB_DriveVbus>

  HAL_Delay(200U);
 800a144:	20c8      	movs	r0, #200	; 0xc8
 800a146:	f7f9 f881 	bl	800324c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f04f 32ff 	mov.w	r2, #4294967295
 800a156:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <USB_HostInit+0x158>)
 800a170:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a13      	ldr	r2, [pc, #76]	; (800a1c4 <USB_HostInit+0x15c>)
 800a176:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a17a:	e009      	b.n	800a190 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a10      	ldr	r2, [pc, #64]	; (800a1c8 <USB_HostInit+0x160>)
 800a186:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <USB_HostInit+0x164>)
 800a18c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	2b00      	cmp	r3, #0
 800a194:	d105      	bne.n	800a1a2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	f043 0210 	orr.w	r2, r3, #16
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <USB_HostInit+0x168>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1ba:	b004      	add	sp, #16
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	01000200 	.word	0x01000200
 800a1c4:	00e00300 	.word	0x00e00300
 800a1c8:	00600080 	.word	0x00600080
 800a1cc:	004000e0 	.word	0x004000e0
 800a1d0:	a3200008 	.word	0xa3200008

0800a1d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a20c:	4313      	orrs	r3, r2
 800a20e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d107      	bne.n	800a226 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a21c:	461a      	mov	r2, r3
 800a21e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a222:	6053      	str	r3, [r2, #4]
 800a224:	e009      	b.n	800a23a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d106      	bne.n	800a23a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a232:	461a      	mov	r2, r3
 800a234:	f241 7370 	movw	r3, #6000	; 0x1770
 800a238:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a268:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a276:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a278:	2064      	movs	r0, #100	; 0x64
 800a27a:	f7f8 ffe7 	bl	800324c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a28c:	200a      	movs	r0, #10
 800a28e:	f7f8 ffdd 	bl	800324c <HAL_Delay>

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a2c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <USB_DriveVbus+0x44>
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d106      	bne.n	800a2e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a2da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ea:	d109      	bne.n	800a300 <USB_DriveVbus+0x64>
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a2fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	0c5b      	lsrs	r3, r3, #17
 800a32c:	f003 0303 	and.w	r3, r3, #3
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	b29b      	uxth	r3, r3
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	4608      	mov	r0, r1
 800a36a:	4611      	mov	r1, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	4603      	mov	r3, r0
 800a370:	70fb      	strb	r3, [r7, #3]
 800a372:	460b      	mov	r3, r1
 800a374:	70bb      	strb	r3, [r7, #2]
 800a376:	4613      	mov	r3, r2
 800a378:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a382:	78fb      	ldrb	r3, [r7, #3]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38e:	461a      	mov	r2, r3
 800a390:	f04f 33ff 	mov.w	r3, #4294967295
 800a394:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d87e      	bhi.n	800a49c <USB_HC_Init+0x13c>
 800a39e:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <USB_HC_Init+0x44>)
 800a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a45f 	.word	0x0800a45f
 800a3ac:	0800a3b5 	.word	0x0800a3b5
 800a3b0:	0800a421 	.word	0x0800a421
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f240 439d 	movw	r3, #1181	; 0x49d
 800a3c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a3c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da10      	bge.n	800a3f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ee:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a3f0:	e057      	b.n	800a4a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d051      	beq.n	800a4a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4413      	add	r3, r2
 800a406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	440a      	add	r2, r1
 800a414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a418:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a41c:	60d3      	str	r3, [r2, #12]
      break;
 800a41e:	e040      	b.n	800a4a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4413      	add	r3, r2
 800a428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a42c:	461a      	mov	r2, r3
 800a42e:	f240 639d 	movw	r3, #1693	; 0x69d
 800a432:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	da34      	bge.n	800a4a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	78fa      	ldrb	r2, [r7, #3]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	440a      	add	r2, r1
 800a452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a45c:	e023      	b.n	800a4a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4413      	add	r3, r2
 800a466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46a:	461a      	mov	r2, r3
 800a46c:	f240 2325 	movw	r3, #549	; 0x225
 800a470:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a472:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a476:	2b00      	cmp	r3, #0
 800a478:	da17      	bge.n	800a4aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	78fa      	ldrb	r2, [r7, #3]
 800a48a:	0151      	lsls	r1, r2, #5
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	440a      	add	r2, r1
 800a490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a494:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a498:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a49a:	e006      	b.n	800a4aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a0:	e004      	b.n	800a4ac <USB_HC_Init+0x14c>
      break;
 800a4a2:	bf00      	nop
 800a4a4:	e002      	b.n	800a4ac <USB_HC_Init+0x14c>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e000      	b.n	800a4ac <USB_HC_Init+0x14c>
      break;
 800a4aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4b2:	699a      	ldr	r2, [r3, #24]
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a4d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da03      	bge.n	800a4e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	e001      	b.n	800a4ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a4ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d103      	bne.n	800a4fa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a4f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	e001      	b.n	800a4fe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a4fe:	787b      	ldrb	r3, [r7, #1]
 800a500:	059b      	lsls	r3, r3, #22
 800a502:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a506:	78bb      	ldrb	r3, [r7, #2]
 800a508:	02db      	lsls	r3, r3, #11
 800a50a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a50e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a510:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a514:	049b      	lsls	r3, r3, #18
 800a516:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a51a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a51c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a51e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a522:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	0159      	lsls	r1, r3, #5
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	440b      	add	r3, r1
 800a530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a534:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a53a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a53c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a540:	2b03      	cmp	r3, #3
 800a542:	d10f      	bne.n	800a564 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a55e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a562:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
}
 800a566:	4618      	mov	r0, r3
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop

0800a574 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08c      	sub	sp, #48	; 0x30
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a58c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a590:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d028      	beq.n	800a5f0 <USB_HC_StartXfer+0x7c>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	791b      	ldrb	r3, [r3, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d124      	bne.n	800a5f0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10b      	bne.n	800a5c4 <USB_HC_StartXfer+0x50>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	795b      	ldrb	r3, [r3, #5]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d107      	bne.n	800a5c4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	785b      	ldrb	r3, [r3, #1]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 fa30 	bl	800aa20 <USB_DoPing>
      return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e114      	b.n	800a7ee <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d112      	bne.n	800a5f0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	6a3a      	ldr	r2, [r7, #32]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a5e8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d018      	beq.n	800a62a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	8912      	ldrh	r2, [r2, #8]
 800a600:	4413      	add	r3, r2
 800a602:	3b01      	subs	r3, #1
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	8912      	ldrh	r2, [r2, #8]
 800a608:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a60e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a610:	8b7b      	ldrh	r3, [r7, #26]
 800a612:	429a      	cmp	r2, r3
 800a614:	d90b      	bls.n	800a62e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a616:	8b7b      	ldrh	r3, [r7, #26]
 800a618:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a61a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	8912      	ldrh	r2, [r2, #8]
 800a620:	fb02 f203 	mul.w	r2, r2, r3
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	611a      	str	r2, [r3, #16]
 800a628:	e001      	b.n	800a62e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a62a:	2301      	movs	r3, #1
 800a62c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	78db      	ldrb	r3, [r3, #3]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d006      	beq.n	800a644 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	8912      	ldrh	r2, [r2, #8]
 800a63c:	fb02 f203 	mul.w	r2, r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a64c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a64e:	04d9      	lsls	r1, r3, #19
 800a650:	4b69      	ldr	r3, [pc, #420]	; (800a7f8 <USB_HC_StartXfer+0x284>)
 800a652:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a654:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	7a9b      	ldrb	r3, [r3, #10]
 800a65a:	075b      	lsls	r3, r3, #29
 800a65c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a660:	69f9      	ldr	r1, [r7, #28]
 800a662:	0148      	lsls	r0, r1, #5
 800a664:	6a39      	ldr	r1, [r7, #32]
 800a666:	4401      	add	r1, r0
 800a668:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a66c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a66e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d009      	beq.n	800a68a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	68d9      	ldr	r1, [r3, #12]
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	4413      	add	r3, r2
 800a682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a686:	460a      	mov	r2, r1
 800a688:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf0c      	ite	eq
 800a69a:	2301      	moveq	r3, #1
 800a69c:	2300      	movne	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	6a3a      	ldr	r2, [r7, #32]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	7e7b      	ldrb	r3, [r7, #25]
 800a6d2:	075b      	lsls	r3, r3, #29
 800a6d4:	69f9      	ldr	r1, [r7, #28]
 800a6d6:	0148      	lsls	r0, r1, #5
 800a6d8:	6a39      	ldr	r1, [r7, #32]
 800a6da:	4401      	add	r1, r0
 800a6dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a42      	ldr	r2, [pc, #264]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a6f4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6f6:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fe:	4a3f      	ldr	r2, [pc, #252]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a700:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	78db      	ldrb	r3, [r3, #3]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d006      	beq.n	800a718 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a70a:	4b3c      	ldr	r3, [pc, #240]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a712:	4a3a      	ldr	r2, [pc, #232]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e005      	b.n	800a724 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a718:	4b38      	ldr	r3, [pc, #224]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a720:	4a36      	ldr	r2, [pc, #216]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a722:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a724:	4b35      	ldr	r3, [pc, #212]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a72c:	4a33      	ldr	r2, [pc, #204]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a72e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	4413      	add	r3, r2
 800a738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a73c:	461a      	mov	r2, r3
 800a73e:	4b2f      	ldr	r3, [pc, #188]	; (800a7fc <USB_HC_StartXfer+0x288>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	e04f      	b.n	800a7ee <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	78db      	ldrb	r3, [r3, #3]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d14a      	bne.n	800a7ec <USB_HC_StartXfer+0x278>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d046      	beq.n	800a7ec <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	79db      	ldrb	r3, [r3, #7]
 800a762:	2b03      	cmp	r3, #3
 800a764:	d830      	bhi.n	800a7c8 <USB_HC_StartXfer+0x254>
 800a766:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <USB_HC_StartXfer+0x1f8>)
 800a768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76c:	0800a77d 	.word	0x0800a77d
 800a770:	0800a7a1 	.word	0x0800a7a1
 800a774:	0800a77d 	.word	0x0800a77d
 800a778:	0800a7a1 	.word	0x0800a7a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	3303      	adds	r3, #3
 800a782:	089b      	lsrs	r3, r3, #2
 800a784:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a786:	8afa      	ldrh	r2, [r7, #22]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	429a      	cmp	r2, r3
 800a790:	d91c      	bls.n	800a7cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f043 0220 	orr.w	r2, r3, #32
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a79e:	e015      	b.n	800a7cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	3303      	adds	r3, #3
 800a7a6:	089b      	lsrs	r3, r3, #2
 800a7a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a7aa:	8afa      	ldrh	r2, [r7, #22]
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d90a      	bls.n	800a7d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a7c6:	e003      	b.n	800a7d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a7c8:	bf00      	nop
 800a7ca:	e002      	b.n	800a7d2 <USB_HC_StartXfer+0x25e>
        break;
 800a7cc:	bf00      	nop
 800a7ce:	e000      	b.n	800a7d2 <USB_HC_StartXfer+0x25e>
        break;
 800a7d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	68d9      	ldr	r1, [r3, #12]
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	785a      	ldrb	r2, [r3, #1]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	b298      	uxth	r0, r3
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff fb8a 	bl	8009f00 <USB_WritePacket>
  }

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3728      	adds	r7, #40	; 0x28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	1ff80000 	.word	0x1ff80000
 800a7fc:	20000168 	.word	0x20000168

0800a800 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	b29b      	uxth	r3, r3
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a822:	b480      	push	{r7}
 800a824:	b087      	sub	sp, #28
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	4413      	add	r3, r2
 800a842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	0c9b      	lsrs	r3, r3, #18
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <USB_HC_Halt+0x3a>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d16c      	bne.n	800a936 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4413      	add	r3, r2
 800a864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	440a      	add	r2, r1
 800a872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a87a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d143      	bne.n	800a910 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	0151      	lsls	r1, r2, #5
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	440a      	add	r2, r1
 800a89e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	0151      	lsls	r1, r2, #5
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	440a      	add	r2, r1
 800a8be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	0151      	lsls	r1, r2, #5
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	440a      	add	r2, r1
 800a8de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	617b      	str	r3, [r7, #20]
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8f4:	d81d      	bhi.n	800a932 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a90c:	d0ec      	beq.n	800a8e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a90e:	e080      	b.n	800aa12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	4413      	add	r3, r2
 800a918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	0151      	lsls	r1, r2, #5
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	440a      	add	r2, r1
 800a926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a92a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a92e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a930:	e06f      	b.n	800aa12 <USB_HC_Halt+0x1f0>
          break;
 800a932:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a934:	e06d      	b.n	800aa12 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	015a      	lsls	r2, r3, #5
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	4413      	add	r3, r2
 800a93e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	0151      	lsls	r1, r2, #5
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	440a      	add	r2, r1
 800a94c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a954:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d143      	bne.n	800a9ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a984:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	0151      	lsls	r1, r2, #5
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	440a      	add	r2, r1
 800a99c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9d2:	d81d      	bhi.n	800aa10 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ea:	d0ec      	beq.n	800a9c6 <USB_HC_Halt+0x1a4>
 800a9ec:	e011      	b.n	800aa12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	0151      	lsls	r1, r2, #5
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	440a      	add	r2, r1
 800aa04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa0c:	6013      	str	r3, [r2, #0]
 800aa0e:	e000      	b.n	800aa12 <USB_HC_Halt+0x1f0>
          break;
 800aa10:	bf00      	nop
    }
  }

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aa34:	2301      	movs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	04da      	lsls	r2, r3, #19
 800aa3c:	4b15      	ldr	r3, [pc, #84]	; (800aa94 <USB_DoPing+0x74>)
 800aa3e:	4013      	ands	r3, r2
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	0151      	lsls	r1, r2, #5
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	440a      	add	r2, r1
 800aa48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	461a      	mov	r2, r3
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	1ff80000 	.word	0x1ff80000

0800aa98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff f9a5 	bl	8009df8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800aaae:	2110      	movs	r1, #16
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff f9dd 	bl	8009e70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff fa00 	bl	8009ebc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	613b      	str	r3, [r7, #16]
 800aac0:	e01f      	b.n	800ab02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aad8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aae0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aae8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3301      	adds	r3, #1
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b0f      	cmp	r3, #15
 800ab06:	d9dc      	bls.n	800aac2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	613b      	str	r3, [r7, #16]
 800ab0c:	e034      	b.n	800ab78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	015a      	lsls	r2, r3, #5
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	4413      	add	r3, r2
 800ab16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab42:	461a      	mov	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab54:	d80c      	bhi.n	800ab70 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab6c:	d0ec      	beq.n	800ab48 <USB_StopHost+0xb0>
 800ab6e:	e000      	b.n	800ab72 <USB_StopHost+0xda>
        break;
 800ab70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	3301      	adds	r3, #1
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b0f      	cmp	r3, #15
 800ab7c:	d9c7      	bls.n	800ab0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab84:	461a      	mov	r2, r3
 800ab86:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff f91e 	bl	8009dd6 <USB_EnableGlobalInt>

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aba4:	b590      	push	{r4, r7, lr}
 800aba6:	b089      	sub	sp, #36	; 0x24
 800aba8:	af04      	add	r7, sp, #16
 800abaa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800abac:	2301      	movs	r3, #1
 800abae:	2202      	movs	r2, #2
 800abb0:	2102      	movs	r1, #2
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fcb4 	bl	800b520 <USBH_FindInterface>
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	2bff      	cmp	r3, #255	; 0xff
 800abc0:	d002      	beq.n	800abc8 <USBH_CDC_InterfaceInit+0x24>
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d901      	bls.n	800abcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800abc8:	2302      	movs	r3, #2
 800abca:	e13d      	b.n	800ae48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fc89 	bl	800b4e8 <USBH_SelectInterface>
 800abd6:	4603      	mov	r3, r0
 800abd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800abe0:	2302      	movs	r3, #2
 800abe2:	e131      	b.n	800ae48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800abea:	2050      	movs	r0, #80	; 0x50
 800abec:	f005 fb62 	bl	80102b4 <malloc>
 800abf0:	4603      	mov	r3, r0
 800abf2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ac04:	2302      	movs	r3, #2
 800ac06:	e11f      	b.n	800ae48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ac08:	2250      	movs	r2, #80	; 0x50
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	68b8      	ldr	r0, [r7, #8]
 800ac0e:	f005 fb6c 	bl	80102ea <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	211a      	movs	r1, #26
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b25b      	sxtb	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	da15      	bge.n	800ac56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	211a      	movs	r1, #26
 800ac30:	fb01 f303 	mul.w	r3, r1, r3
 800ac34:	4413      	add	r3, r2
 800ac36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	211a      	movs	r1, #26
 800ac46:	fb01 f303 	mul.w	r3, r1, r3
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ac50:	881a      	ldrh	r2, [r3, #0]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f002 f890 	bl	800cd82 <USBH_AllocPipe>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	7819      	ldrb	r1, [r3, #0]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	7858      	ldrb	r0, [r3, #1]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	8952      	ldrh	r2, [r2, #10]
 800ac82:	9202      	str	r2, [sp, #8]
 800ac84:	2203      	movs	r2, #3
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	4623      	mov	r3, r4
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f002 f848 	bl	800cd24 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f005 fa59 	bl	8010154 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800aca2:	2300      	movs	r3, #0
 800aca4:	2200      	movs	r2, #0
 800aca6:	210a      	movs	r1, #10
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc39 	bl	800b520 <USBH_FindInterface>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	2bff      	cmp	r3, #255	; 0xff
 800acb6:	d002      	beq.n	800acbe <USBH_CDC_InterfaceInit+0x11a>
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d901      	bls.n	800acc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800acbe:	2302      	movs	r3, #2
 800acc0:	e0c2      	b.n	800ae48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	211a      	movs	r1, #26
 800acc8:	fb01 f303 	mul.w	r3, r1, r3
 800accc:	4413      	add	r3, r2
 800acce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b25b      	sxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da16      	bge.n	800ad08 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	211a      	movs	r1, #26
 800ace0:	fb01 f303 	mul.w	r3, r1, r3
 800ace4:	4413      	add	r3, r2
 800ace6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	211a      	movs	r1, #26
 800acf6:	fb01 f303 	mul.w	r3, r1, r3
 800acfa:	4413      	add	r3, r2
 800acfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ad00:	881a      	ldrh	r2, [r3, #0]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	835a      	strh	r2, [r3, #26]
 800ad06:	e015      	b.n	800ad34 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	211a      	movs	r1, #26
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ad18:	781a      	ldrb	r2, [r3, #0]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	211a      	movs	r1, #26
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ad2e:	881a      	ldrh	r2, [r3, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	211a      	movs	r1, #26
 800ad3a:	fb01 f303 	mul.w	r3, r1, r3
 800ad3e:	4413      	add	r3, r2
 800ad40:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da16      	bge.n	800ad7a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	211a      	movs	r1, #26
 800ad52:	fb01 f303 	mul.w	r3, r1, r3
 800ad56:	4413      	add	r3, r2
 800ad58:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	211a      	movs	r1, #26
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ad72:	881a      	ldrh	r2, [r3, #0]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	835a      	strh	r2, [r3, #26]
 800ad78:	e015      	b.n	800ada6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	211a      	movs	r1, #26
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	4413      	add	r3, r2
 800ad86:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	211a      	movs	r1, #26
 800ad96:	fb01 f303 	mul.w	r3, r1, r3
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ada0:	881a      	ldrh	r2, [r3, #0]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	7b9b      	ldrb	r3, [r3, #14]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 ffe8 	bl	800cd82 <USBH_AllocPipe>
 800adb2:	4603      	mov	r3, r0
 800adb4:	461a      	mov	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	7bdb      	ldrb	r3, [r3, #15]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 ffde 	bl	800cd82 <USBH_AllocPipe>
 800adc6:	4603      	mov	r3, r0
 800adc8:	461a      	mov	r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	7b59      	ldrb	r1, [r3, #13]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	7b98      	ldrb	r0, [r3, #14]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	8b12      	ldrh	r2, [r2, #24]
 800ade6:	9202      	str	r2, [sp, #8]
 800ade8:	2202      	movs	r2, #2
 800adea:	9201      	str	r2, [sp, #4]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	4623      	mov	r3, r4
 800adf0:	4602      	mov	r2, r0
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 ff96 	bl	800cd24 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	7b19      	ldrb	r1, [r3, #12]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	7bd8      	ldrb	r0, [r3, #15]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	8b52      	ldrh	r2, [r2, #26]
 800ae10:	9202      	str	r2, [sp, #8]
 800ae12:	2202      	movs	r2, #2
 800ae14:	9201      	str	r2, [sp, #4]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4623      	mov	r3, r4
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 ff81 	bl	800cd24 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	7b5b      	ldrb	r3, [r3, #13]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f005 f98e 	bl	8010154 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	7b1b      	ldrb	r3, [r3, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f005 f987 	bl	8010154 <USBH_LL_SetToggle>

  return USBH_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}

0800ae50 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 ff76 	bl	800cd62 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 ffa1 	bl	800cdc4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	7b1b      	ldrb	r3, [r3, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00e      	beq.n	800aeae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	7b1b      	ldrb	r3, [r3, #12]
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 ff63 	bl	800cd62 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	7b1b      	ldrb	r3, [r3, #12]
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 ff8e 	bl	800cdc4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	7b5b      	ldrb	r3, [r3, #13]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00e      	beq.n	800aed4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7b5b      	ldrb	r3, [r3, #13]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 ff50 	bl	800cd62 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	7b5b      	ldrb	r3, [r3, #13]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 ff7b 	bl	800cdc4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f005 f9eb 	bl	80102c4 <free>
    phost->pActiveClass->pData = 0U;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aef4:	2200      	movs	r2, #0
 800aef6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3340      	adds	r3, #64	; 0x40
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f8b1 	bl	800b082 <GetLineCoding>
 800af20:	4603      	mov	r3, r0
 800af22:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af30:	2102      	movs	r1, #2
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800af36:	7afb      	ldrb	r3, [r7, #11]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800af60:	2b04      	cmp	r3, #4
 800af62:	d877      	bhi.n	800b054 <USBH_CDC_Process+0x114>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <USBH_CDC_Process+0x2c>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af81 	.word	0x0800af81
 800af70:	0800af87 	.word	0x0800af87
 800af74:	0800afb7 	.word	0x0800afb7
 800af78:	0800b02b 	.word	0x0800b02b
 800af7c:	0800b039 	.word	0x0800b039
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73fb      	strb	r3, [r7, #15]
      break;
 800af84:	e06d      	b.n	800b062 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f897 	bl	800b0c0 <SetLineCoding>
 800af92:	4603      	mov	r3, r0
 800af94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d104      	bne.n	800afa6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800afa4:	e058      	b.n	800b058 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d055      	beq.n	800b058 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2204      	movs	r2, #4
 800afb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800afb4:	e050      	b.n	800b058 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	3340      	adds	r3, #64	; 0x40
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f860 	bl	800b082 <GetLineCoding>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d126      	bne.n	800b01a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afde:	791b      	ldrb	r3, [r3, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d13b      	bne.n	800b05c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d133      	bne.n	800b05c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800affe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b000:	429a      	cmp	r2, r3
 800b002:	d12b      	bne.n	800b05c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b00c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b00e:	429a      	cmp	r2, r3
 800b010:	d124      	bne.n	800b05c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f984 	bl	800b320 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b018:	e020      	b.n	800b05c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d01d      	beq.n	800b05c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2204      	movs	r2, #4
 800b024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b028:	e018      	b.n	800b05c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f867 	bl	800b0fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f8f8 	bl	800b226 <CDC_ProcessReception>
      break;
 800b036:	e014      	b.n	800b062 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b038:	2100      	movs	r1, #0
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 f94f 	bl	800c2de <USBH_ClrFeature>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b052:	e005      	b.n	800b060 <USBH_CDC_Process+0x120>

    default:
      break;
 800b054:	bf00      	nop
 800b056:	e004      	b.n	800b062 <USBH_CDC_Process+0x122>
      break;
 800b058:	bf00      	nop
 800b05a:	e002      	b.n	800b062 <USBH_CDC_Process+0x122>
      break;
 800b05c:	bf00      	nop
 800b05e:	e000      	b.n	800b062 <USBH_CDC_Process+0x122>
      break;
 800b060:	bf00      	nop

  }

  return status;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	22a1      	movs	r2, #161	; 0xa1
 800b090:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2221      	movs	r2, #33	; 0x21
 800b096:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2207      	movs	r2, #7
 800b0a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2207      	movs	r2, #7
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 faf4 	bl	800c69e <USBH_CtlReq>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2221      	movs	r2, #33	; 0x21
 800b0ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2207      	movs	r2, #7
 800b0e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2207      	movs	r2, #7
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 fad5 	bl	800c69e <USBH_CtlReq>
 800b0f4:	4603      	mov	r3, r0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af02      	add	r7, sp, #8
 800b104:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b110:	2300      	movs	r3, #0
 800b112:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d002      	beq.n	800b124 <CDC_ProcessTransmission+0x26>
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d025      	beq.n	800b16e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800b122:	e07c      	b.n	800b21e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	8b12      	ldrh	r2, [r2, #24]
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d90c      	bls.n	800b14a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	69d9      	ldr	r1, [r3, #28]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	8b1a      	ldrh	r2, [r3, #24]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	7b58      	ldrb	r0, [r3, #13]
 800b13c:	2301      	movs	r3, #1
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4603      	mov	r3, r0
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 fdab 	bl	800cc9e <USBH_BulkSendData>
 800b148:	e00c      	b.n	800b164 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	7b58      	ldrb	r0, [r3, #13]
 800b158:	2301      	movs	r3, #1
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4603      	mov	r3, r0
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 fd9d 	bl	800cc9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b16c:	e057      	b.n	800b21e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	7b5b      	ldrb	r3, [r3, #13]
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f004 ffc3 	bl	8010100 <USBH_LL_GetURBState>
 800b17a:	4603      	mov	r3, r0
 800b17c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d136      	bne.n	800b1f2 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	8b12      	ldrh	r2, [r2, #24]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d90e      	bls.n	800b1ae <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	8b12      	ldrh	r2, [r2, #24]
 800b198:	1a9a      	subs	r2, r3, r2
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	8b12      	ldrh	r2, [r2, #24]
 800b1a6:	441a      	add	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	61da      	str	r2, [r3, #28]
 800b1ac:	e002      	b.n	800b1b4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d004      	beq.n	800b1c6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b1c4:	e006      	b.n	800b1d4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f892 	bl	800b2f8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2204      	movs	r2, #4
 800b1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f001 ffca 	bl	800d184 <osMessageQueuePut>
      break;
 800b1f0:	e014      	b.n	800b21c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800b1f2:	7afb      	ldrb	r3, [r7, #11]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d111      	bne.n	800b21c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2204      	movs	r2, #4
 800b204:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b214:	2300      	movs	r3, #0
 800b216:	2200      	movs	r2, #0
 800b218:	f001 ffb4 	bl	800d184 <osMessageQueuePut>
      break;
 800b21c:	bf00      	nop
  }
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b238:	2300      	movs	r3, #0
 800b23a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b242:	2b03      	cmp	r3, #3
 800b244:	d002      	beq.n	800b24c <CDC_ProcessReception+0x26>
 800b246:	2b04      	cmp	r3, #4
 800b248:	d00e      	beq.n	800b268 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b24a:	e051      	b.n	800b2f0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6a19      	ldr	r1, [r3, #32]
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	8b5a      	ldrh	r2, [r3, #26]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	7b1b      	ldrb	r3, [r3, #12]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fd45 	bl	800cce8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2204      	movs	r2, #4
 800b262:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b266:	e043      	b.n	800b2f0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	7b1b      	ldrb	r3, [r3, #12]
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f004 ff46 	bl	8010100 <USBH_LL_GetURBState>
 800b274:	4603      	mov	r3, r0
 800b276:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b278:	7cfb      	ldrb	r3, [r7, #19]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d137      	bne.n	800b2ee <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	7b1b      	ldrb	r3, [r3, #12]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f004 fea9 	bl	800ffdc <USBH_LL_GetLastXferSize>
 800b28a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	429a      	cmp	r2, r3
 800b294:	d016      	beq.n	800b2c4 <CDC_ProcessReception+0x9e>
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	8b5b      	ldrh	r3, [r3, #26]
 800b29a:	461a      	mov	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d910      	bls.n	800b2c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1ad2      	subs	r2, r2, r3
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	6a1a      	ldr	r2, [r3, #32]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2203      	movs	r2, #3
 800b2be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b2c2:	e006      	b.n	800b2d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f81d 	bl	800b30c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2204      	movs	r2, #4
 800b2d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f001 ff4b 	bl	800d184 <osMessageQueuePut>
      break;
 800b2ee:	bf00      	nop
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4613      	mov	r3, r2
 800b340:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b348:	2302      	movs	r3, #2
 800b34a:	e044      	b.n	800b3d6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	79fa      	ldrb	r2, [r7, #7]
 800b350:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f841 	bl	800b3ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b398:	2200      	movs	r2, #0
 800b39a:	2104      	movs	r1, #4
 800b39c:	2010      	movs	r0, #16
 800b39e:	f001 fe6b 	bl	800d078 <osMessageQueueNew>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <USBH_Init+0xac>)
 800b3ac:	4a0d      	ldr	r2, [pc, #52]	; (800b3e4 <USBH_Init+0xb0>)
 800b3ae:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <USBH_Init+0xac>)
 800b3b2:	2280      	movs	r2, #128	; 0x80
 800b3b4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <USBH_Init+0xac>)
 800b3b8:	2218      	movs	r2, #24
 800b3ba:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b3bc:	4a08      	ldr	r2, [pc, #32]	; (800b3e0 <USBH_Init+0xac>)
 800b3be:	68f9      	ldr	r1, [r7, #12]
 800b3c0:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <USBH_Init+0xb4>)
 800b3c2:	f001 fdb3 	bl	800cf2c <osThreadNew>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f004 fd52 	bl	800fe78 <USBH_LL_Init>

  return USBH_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20004f5c 	.word	0x20004f5c
 800b3e4:	080104a4 	.word	0x080104a4
 800b3e8:	0800c055 	.word	0x0800c055

0800b3ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	e009      	b.n	800b412 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	33e0      	adds	r3, #224	; 0xe0
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	2200      	movs	r2, #0
 800b40a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3301      	adds	r3, #1
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b0e      	cmp	r3, #14
 800b416:	d9f2      	bls.n	800b3fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b418:	2300      	movs	r3, #0
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e009      	b.n	800b432 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b438:	d3f1      	bcc.n	800b41e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2240      	movs	r2, #64	; 0x40
 800b45e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d016      	beq.n	800b4d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10e      	bne.n	800b4d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b4b8:	1c59      	adds	r1, r3, #1
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	33de      	adds	r3, #222	; 0xde
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
 800b4ce:	e004      	b.n	800b4da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	73fb      	strb	r3, [r7, #15]
 800b4d4:	e001      	b.n	800b4da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	429a      	cmp	r2, r3
 800b502:	d204      	bcs.n	800b50e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	78fa      	ldrb	r2, [r7, #3]
 800b508:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b50c:	e001      	b.n	800b512 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b50e:	2302      	movs	r3, #2
 800b510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	4608      	mov	r0, r1
 800b52a:	4611      	mov	r1, r2
 800b52c:	461a      	mov	r2, r3
 800b52e:	4603      	mov	r3, r0
 800b530:	70fb      	strb	r3, [r7, #3]
 800b532:	460b      	mov	r3, r1
 800b534:	70bb      	strb	r3, [r7, #2]
 800b536:	4613      	mov	r3, r2
 800b538:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b53e:	2300      	movs	r3, #0
 800b540:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b548:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b54a:	e025      	b.n	800b598 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	221a      	movs	r2, #26
 800b550:	fb02 f303 	mul.w	r3, r2, r3
 800b554:	3308      	adds	r3, #8
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	4413      	add	r3, r2
 800b55a:	3302      	adds	r3, #2
 800b55c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	795b      	ldrb	r3, [r3, #5]
 800b562:	78fa      	ldrb	r2, [r7, #3]
 800b564:	429a      	cmp	r2, r3
 800b566:	d002      	beq.n	800b56e <USBH_FindInterface+0x4e>
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	2bff      	cmp	r3, #255	; 0xff
 800b56c:	d111      	bne.n	800b592 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b572:	78ba      	ldrb	r2, [r7, #2]
 800b574:	429a      	cmp	r2, r3
 800b576:	d002      	beq.n	800b57e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b578:	78bb      	ldrb	r3, [r7, #2]
 800b57a:	2bff      	cmp	r3, #255	; 0xff
 800b57c:	d109      	bne.n	800b592 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b582:	787a      	ldrb	r2, [r7, #1]
 800b584:	429a      	cmp	r2, r3
 800b586:	d002      	beq.n	800b58e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b588:	787b      	ldrb	r3, [r7, #1]
 800b58a:	2bff      	cmp	r3, #255	; 0xff
 800b58c:	d101      	bne.n	800b592 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	e006      	b.n	800b5a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	3301      	adds	r3, #1
 800b596:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d9d6      	bls.n	800b54c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b59e:	23ff      	movs	r3, #255	; 0xff
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f004 fc9b 	bl	800fef0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f004 fdb2 	bl	8010126 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af04      	add	r7, sp, #16
 800b5d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d102      	bne.n	800b5ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2203      	movs	r2, #3
 800b5ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b0b      	cmp	r3, #11
 800b5f6:	f200 823c 	bhi.w	800ba72 <USBH_Process+0x4a6>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <USBH_Process+0x34>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b631 	.word	0x0800b631
 800b604:	0800b67f 	.word	0x0800b67f
 800b608:	0800b703 	.word	0x0800b703
 800b60c:	0800b9f1 	.word	0x0800b9f1
 800b610:	0800ba73 	.word	0x0800ba73
 800b614:	0800b7c3 	.word	0x0800b7c3
 800b618:	0800b97b 	.word	0x0800b97b
 800b61c:	0800b815 	.word	0x0800b815
 800b620:	0800b851 	.word	0x0800b851
 800b624:	0800b88b 	.word	0x0800b88b
 800b628:	0800b8d3 	.word	0x0800b8d3
 800b62c:	0800b9d9 	.word	0x0800b9d9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 821c 	beq.w	800ba76 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b644:	20c8      	movs	r0, #200	; 0xc8
 800b646:	f004 fdb8 	bl	80101ba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f004 fcab 	bl	800ffa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b674:	2300      	movs	r3, #0
 800b676:	2200      	movs	r2, #0
 800b678:	f001 fd84 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b67c:	e1fb      	b.n	800ba76 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b684:	2b01      	cmp	r3, #1
 800b686:	d107      	bne.n	800b698 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	701a      	strb	r2, [r3, #0]
 800b696:	e025      	b.n	800b6e4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b69e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6a2:	d914      	bls.n	800b6ce <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d903      	bls.n	800b6c6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	220d      	movs	r2, #13
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	e00e      	b.n	800b6e4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
 800b6cc:	e00a      	b.n	800b6e4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b6d4:	f103 020a 	add.w	r2, r3, #10
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b6de:	200a      	movs	r0, #10
 800b6e0:	f004 fd6b 	bl	80101ba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f001 fd42 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b700:	e1c0      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b712:	2104      	movs	r1, #4
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b718:	2064      	movs	r0, #100	; 0x64
 800b71a:	f004 fd4e 	bl	80101ba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f004 fc1c 	bl	800ff5c <USBH_LL_GetSpeed>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2205      	movs	r2, #5
 800b732:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b734:	2100      	movs	r1, #0
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 fb23 	bl	800cd82 <USBH_AllocPipe>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b744:	2180      	movs	r1, #128	; 0x80
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 fb1b 	bl	800cd82 <USBH_AllocPipe>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7919      	ldrb	r1, [r3, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b768:	b292      	uxth	r2, r2
 800b76a:	9202      	str	r2, [sp, #8]
 800b76c:	2200      	movs	r2, #0
 800b76e:	9201      	str	r2, [sp, #4]
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	4603      	mov	r3, r0
 800b774:	2280      	movs	r2, #128	; 0x80
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 fad4 	bl	800cd24 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7959      	ldrb	r1, [r3, #5]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b790:	b292      	uxth	r2, r2
 800b792:	9202      	str	r2, [sp, #8]
 800b794:	2200      	movs	r2, #0
 800b796:	9201      	str	r2, [sp, #4]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4603      	mov	r3, r0
 800b79c:	2200      	movs	r2, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 fac0 	bl	800cd24 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f001 fce2 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b7c0:	e160      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f964 	bl	800ba90 <USBH_HandleEnum>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 8152 	bne.w	800ba7a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d103      	bne.n	800b7f0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2207      	movs	r2, #7
 800b7f4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2205      	movs	r2, #5
 800b7fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	f001 fcb9 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b812:	e132      	b.n	800ba7a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 812f 	beq.w	800ba7e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b826:	2101      	movs	r1, #1
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2208      	movs	r2, #8
 800b830:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2205      	movs	r2, #5
 800b836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b846:	2300      	movs	r3, #0
 800b848:	2200      	movs	r2, #0
 800b84a:	f001 fc9b 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800b84e:	e116      	b.n	800ba7e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b856:	b29b      	uxth	r3, r3
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fcf8 	bl	800c250 <USBH_SetCfg>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2209      	movs	r2, #9
 800b86a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b880:	2300      	movs	r3, #0
 800b882:	2200      	movs	r2, #0
 800b884:	f001 fc7e 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b888:	e0fc      	b.n	800ba84 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b890:	f003 0320 	and.w	r3, r3, #32
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00a      	beq.n	800b8ae <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b898:	2101      	movs	r1, #1
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fcfb 	bl	800c296 <USBH_SetFeature>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	701a      	strb	r2, [r3, #0]
 800b8ac:	e002      	b.n	800b8b4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f001 fc5a 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b8d0:	e0d8      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d03f      	beq.n	800b95c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73fb      	strb	r3, [r7, #15]
 800b8e8:	e016      	b.n	800b918 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b8ea:	7bfa      	ldrb	r2, [r7, #15]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	32de      	adds	r2, #222	; 0xde
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	791a      	ldrb	r2, [r3, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d108      	bne.n	800b912 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b900:	7bfa      	ldrb	r2, [r7, #15]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	32de      	adds	r2, #222	; 0xde
 800b906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b910:	e005      	b.n	800b91e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	3301      	adds	r3, #1
 800b916:	73fb      	strb	r3, [r7, #15]
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0e5      	beq.n	800b8ea <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b924:	2b00      	cmp	r3, #0
 800b926:	d016      	beq.n	800b956 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d109      	bne.n	800b94e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2206      	movs	r2, #6
 800b93e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b946:	2103      	movs	r1, #3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	4798      	blx	r3
 800b94c:	e006      	b.n	800b95c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	220d      	movs	r2, #13
 800b952:	701a      	strb	r2, [r3, #0]
 800b954:	e002      	b.n	800b95c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	220d      	movs	r2, #13
 800b95a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2205      	movs	r2, #5
 800b960:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b970:	2300      	movs	r3, #0
 800b972:	2200      	movs	r2, #0
 800b974:	f001 fc06 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b978:	e084      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d017      	beq.n	800b9b4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
 800b990:	4603      	mov	r3, r0
 800b992:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	220b      	movs	r2, #11
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	e00a      	b.n	800b9ba <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d106      	bne.n	800b9ba <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	220d      	movs	r2, #13
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	e002      	b.n	800b9ba <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	220d      	movs	r2, #13
 800b9b8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2205      	movs	r2, #5
 800b9be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f001 fbd7 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800b9d6:	e055      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d04f      	beq.n	800ba82 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	4798      	blx	r3
      }
      break;
 800b9ee:	e048      	b.n	800ba82 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7ff fcf7 	bl	800b3ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d005      	beq.n	800ba32 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba2c:	2105      	movs	r1, #5
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d107      	bne.n	800ba4e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff fdb0 	bl	800b5ac <USBH_Start>
 800ba4c:	e002      	b.n	800ba54 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f004 fa4e 	bl	800fef0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba68:	2300      	movs	r3, #0
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f001 fb8a 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      break;
 800ba70:	e008      	b.n	800ba84 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ba72:	bf00      	nop
 800ba74:	e006      	b.n	800ba84 <USBH_Process+0x4b8>
      break;
 800ba76:	bf00      	nop
 800ba78:	e004      	b.n	800ba84 <USBH_Process+0x4b8>
      break;
 800ba7a:	bf00      	nop
 800ba7c:	e002      	b.n	800ba84 <USBH_Process+0x4b8>
    break;
 800ba7e:	bf00      	nop
 800ba80:	e000      	b.n	800ba84 <USBH_Process+0x4b8>
      break;
 800ba82:	bf00      	nop
  }
  return USBH_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop

0800ba90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af04      	add	r7, sp, #16
 800ba96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	785b      	ldrb	r3, [r3, #1]
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	f200 8208 	bhi.w	800beba <USBH_HandleEnum+0x42a>
 800baaa:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <USBH_HandleEnum+0x20>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bad1 	.word	0x0800bad1
 800bab4:	0800bb8f 	.word	0x0800bb8f
 800bab8:	0800bbf9 	.word	0x0800bbf9
 800babc:	0800bc87 	.word	0x0800bc87
 800bac0:	0800bcf1 	.word	0x0800bcf1
 800bac4:	0800bd61 	.word	0x0800bd61
 800bac8:	0800bdfd 	.word	0x0800bdfd
 800bacc:	0800be7b 	.word	0x0800be7b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bad0:	2108      	movs	r1, #8
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 faec 	bl	800c0b0 <USBH_Get_DevDesc>
 800bad8:	4603      	mov	r3, r0
 800bada:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d130      	bne.n	800bb44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	7919      	ldrb	r1, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb06:	b292      	uxth	r2, r2
 800bb08:	9202      	str	r2, [sp, #8]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	9201      	str	r2, [sp, #4]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	4603      	mov	r3, r0
 800bb12:	2280      	movs	r2, #128	; 0x80
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 f905 	bl	800cd24 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	7959      	ldrb	r1, [r3, #5]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb2e:	b292      	uxth	r2, r2
 800bb30:	9202      	str	r2, [sp, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	9201      	str	r2, [sp, #4]
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 f8f1 	bl	800cd24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb42:	e1bc      	b.n	800bebe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	f040 81b9 	bne.w	800bebe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb52:	3301      	adds	r3, #1
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb62:	2b03      	cmp	r3, #3
 800bb64:	d903      	bls.n	800bb6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	220d      	movs	r2, #13
 800bb6a:	701a      	strb	r2, [r3, #0]
      break;
 800bb6c:	e1a7      	b.n	800bebe <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	795b      	ldrb	r3, [r3, #5]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 f925 	bl	800cdc4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	791b      	ldrb	r3, [r3, #4]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f001 f91f 	bl	800cdc4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	701a      	strb	r2, [r3, #0]
      break;
 800bb8c:	e197      	b.n	800bebe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bb8e:	2112      	movs	r1, #18
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fa8d 	bl	800c0b0 <USBH_Get_DevDesc>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d103      	bne.n	800bba8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bba6:	e18c      	b.n	800bec2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	f040 8189 	bne.w	800bec2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d903      	bls.n	800bbd2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	220d      	movs	r2, #13
 800bbce:	701a      	strb	r2, [r3, #0]
      break;
 800bbd0:	e177      	b.n	800bec2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	795b      	ldrb	r3, [r3, #5]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 f8f3 	bl	800cdc4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	791b      	ldrb	r3, [r3, #4]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f001 f8ed 	bl	800cdc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
      break;
 800bbf6:	e164      	b.n	800bec2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fb04 	bl	800c208 <USBH_SetAddress>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d132      	bne.n	800bc70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc0a:	2002      	movs	r0, #2
 800bc0c:	f004 fad5 	bl	80101ba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7919      	ldrb	r1, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc32:	b292      	uxth	r2, r2
 800bc34:	9202      	str	r2, [sp, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	9201      	str	r2, [sp, #4]
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2280      	movs	r2, #128	; 0x80
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 f86f 	bl	800cd24 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7959      	ldrb	r1, [r3, #5]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	9202      	str	r2, [sp, #8]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	9201      	str	r2, [sp, #4]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	4603      	mov	r3, r0
 800bc66:	2200      	movs	r2, #0
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 f85b 	bl	800cd24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bc6e:	e12a      	b.n	800bec6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc70:	7bbb      	ldrb	r3, [r7, #14]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	f040 8127 	bne.w	800bec6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	220d      	movs	r2, #13
 800bc7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	705a      	strb	r2, [r3, #1]
      break;
 800bc84:	e11f      	b.n	800bec6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bc86:	2109      	movs	r1, #9
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fa39 	bl	800c100 <USBH_Get_CfgDesc>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d103      	bne.n	800bca0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2204      	movs	r2, #4
 800bc9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc9e:	e114      	b.n	800beca <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	f040 8111 	bne.w	800beca <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcae:	3301      	adds	r3, #1
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d903      	bls.n	800bcca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	220d      	movs	r2, #13
 800bcc6:	701a      	strb	r2, [r3, #0]
      break;
 800bcc8:	e0ff      	b.n	800beca <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	795b      	ldrb	r3, [r3, #5]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f001 f877 	bl	800cdc4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	791b      	ldrb	r3, [r3, #4]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 f871 	bl	800cdc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	701a      	strb	r2, [r3, #0]
      break;
 800bcee:	e0ec      	b.n	800beca <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fa01 	bl	800c100 <USBH_Get_CfgDesc>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd02:	7bbb      	ldrb	r3, [r7, #14]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d103      	bne.n	800bd10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2205      	movs	r2, #5
 800bd0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd0e:	e0de      	b.n	800bece <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	f040 80db 	bne.w	800bece <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd1e:	3301      	adds	r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d903      	bls.n	800bd3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	220d      	movs	r2, #13
 800bd36:	701a      	strb	r2, [r3, #0]
      break;
 800bd38:	e0c9      	b.n	800bece <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	795b      	ldrb	r3, [r3, #5]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f001 f83f 	bl	800cdc4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	791b      	ldrb	r3, [r3, #4]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f839 	bl	800cdc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
      break;
 800bd5e:	e0b6      	b.n	800bece <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d036      	beq.n	800bdd8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bd76:	23ff      	movs	r3, #255	; 0xff
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f9e5 	bl	800c148 <USBH_Get_StringDesc>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d111      	bne.n	800bdac <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2206      	movs	r2, #6
 800bd8c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2205      	movs	r2, #5
 800bd92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bda2:	2300      	movs	r3, #0
 800bda4:	2200      	movs	r2, #0
 800bda6:	f001 f9ed 	bl	800d184 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bdaa:	e092      	b.n	800bed2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	f040 808f 	bne.w	800bed2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2205      	movs	r2, #5
 800bdbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f001 f9d7 	bl	800d184 <osMessageQueuePut>
      break;
 800bdd6:	e07c      	b.n	800bed2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2206      	movs	r2, #6
 800bddc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2205      	movs	r2, #5
 800bde2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f001 f9c5 	bl	800d184 <osMessageQueuePut>
      break;
 800bdfa:	e06a      	b.n	800bed2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be02:	2b00      	cmp	r3, #0
 800be04:	d027      	beq.n	800be56 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be12:	23ff      	movs	r3, #255	; 0xff
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f997 	bl	800c148 <USBH_Get_StringDesc>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2207      	movs	r2, #7
 800be28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800be2a:	e054      	b.n	800bed6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d151      	bne.n	800bed6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2207      	movs	r2, #7
 800be36:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2205      	movs	r2, #5
 800be3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be4c:	2300      	movs	r3, #0
 800be4e:	2200      	movs	r2, #0
 800be50:	f001 f998 	bl	800d184 <osMessageQueuePut>
      break;
 800be54:	e03f      	b.n	800bed6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2207      	movs	r2, #7
 800be5a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2205      	movs	r2, #5
 800be60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be70:	2300      	movs	r3, #0
 800be72:	2200      	movs	r2, #0
 800be74:	f001 f986 	bl	800d184 <osMessageQueuePut>
      break;
 800be78:	e02d      	b.n	800bed6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be80:	2b00      	cmp	r3, #0
 800be82:	d017      	beq.n	800beb4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be90:	23ff      	movs	r3, #255	; 0xff
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f958 	bl	800c148 <USBH_Get_StringDesc>
 800be98:	4603      	mov	r3, r0
 800be9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d102      	bne.n	800bea8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bea6:	e018      	b.n	800beda <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d115      	bne.n	800beda <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
      break;
 800beb2:	e012      	b.n	800beda <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
      break;
 800beb8:	e00f      	b.n	800beda <USBH_HandleEnum+0x44a>

    default:
      break;
 800beba:	bf00      	nop
 800bebc:	e00e      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bebe:	bf00      	nop
 800bec0:	e00c      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bec2:	bf00      	nop
 800bec4:	e00a      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bec6:	bf00      	nop
 800bec8:	e008      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800beca:	bf00      	nop
 800becc:	e006      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bece:	bf00      	nop
 800bed0:	e004      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bed2:	bf00      	nop
 800bed4:	e002      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800bed6:	bf00      	nop
 800bed8:	e000      	b.n	800bedc <USBH_HandleEnum+0x44c>
      break;
 800beda:	bf00      	nop
  }
  return Status;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop

0800bee8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f804 	bl	800bf2a <USBH_HandleSof>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b0b      	cmp	r3, #11
 800bf3a:	d10a      	bne.n	800bf52 <USBH_HandleSof+0x28>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
  }
}
 800bf52:	bf00      	nop
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b082      	sub	sp, #8
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2200      	movs	r2, #0
 800bf82:	f001 f8ff 	bl	800d184 <osMessageQueuePut>
#endif
#endif

  return;
 800bf86:	bf00      	nop
}
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf9e:	bf00      	nop
}
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f001 f8cf 	bl	800d184 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f003 ff88 	bl	800ff26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	791b      	ldrb	r3, [r3, #4]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fed1 	bl	800cdc4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	795b      	ldrb	r3, [r3, #5]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fecb 	bl	800cdc4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c042:	2300      	movs	r3, #0
 800c044:	2200      	movs	r2, #0
 800c046:	f001 f89d 	bl	800d184 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c068:	f04f 33ff 	mov.w	r3, #4294967295
 800c06c:	2200      	movs	r2, #0
 800c06e:	f001 f8fd 	bl	800d26c <osMessageQueueGet>
 800c072:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f0      	bne.n	800c05c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff faa6 	bl	800b5cc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c080:	e7ec      	b.n	800c05c <USBH_Process_OS+0x8>

0800c082 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f001 f86f 	bl	800d184 <osMessageQueuePut>
#endif

  return USBH_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f864 	bl	800c19e <USBH_GetDescriptor>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	b292      	uxth	r2, r2
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f000 f918 	bl	800c326 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af02      	add	r7, sp, #8
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	331c      	adds	r3, #28
 800c110:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c112:	887b      	ldrh	r3, [r7, #2]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c11c:	2100      	movs	r1, #0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f83d 	bl	800c19e <USBH_GetDescriptor>
 800c124:	4603      	mov	r3, r0
 800c126:	72fb      	strb	r3, [r7, #11]
 800c128:	7afb      	ldrb	r3, [r7, #11]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d107      	bne.n	800c13e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c134:	887a      	ldrh	r2, [r7, #2]
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 f964 	bl	800c406 <USBH_ParseCfgDesc>
  }

  return status;
 800c13e:	7afb      	ldrb	r3, [r7, #11]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	607a      	str	r2, [r7, #4]
 800c152:	461a      	mov	r2, r3
 800c154:	460b      	mov	r3, r1
 800c156:	72fb      	strb	r3, [r7, #11]
 800c158:	4613      	mov	r3, r2
 800c15a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c15c:	7afb      	ldrb	r3, [r7, #11]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c164:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c16c:	893b      	ldrh	r3, [r7, #8]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	460b      	mov	r3, r1
 800c172:	2100      	movs	r1, #0
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f812 	bl	800c19e <USBH_GetDescriptor>
 800c17a:	4603      	mov	r3, r0
 800c17c:	75fb      	strb	r3, [r7, #23]
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d107      	bne.n	800c194 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c18a:	893a      	ldrh	r2, [r7, #8]
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 fa37 	bl	800c602 <USBH_ParseStringDesc>
  }

  return status;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	607b      	str	r3, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	72fb      	strb	r3, [r7, #11]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	789b      	ldrb	r3, [r3, #2]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d11c      	bne.n	800c1f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2206      	movs	r2, #6
 800c1c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	893a      	ldrh	r2, [r7, #8]
 800c1ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c1d0:	893b      	ldrh	r3, [r7, #8]
 800c1d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1da:	d104      	bne.n	800c1e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f240 4209 	movw	r2, #1033	; 0x409
 800c1e2:	829a      	strh	r2, [r3, #20]
 800c1e4:	e002      	b.n	800c1ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8b3a      	ldrh	r2, [r7, #24]
 800c1f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c1f2:	8b3b      	ldrh	r3, [r7, #24]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 fa50 	bl	800c69e <USBH_CtlReq>
 800c1fe:	4603      	mov	r3, r0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	789b      	ldrb	r3, [r3, #2]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d10f      	bne.n	800c23c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2205      	movs	r2, #5
 800c226:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c23c:	2200      	movs	r2, #0
 800c23e:	2100      	movs	r1, #0
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fa2c 	bl	800c69e <USBH_CtlReq>
 800c246:	4603      	mov	r3, r0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	460b      	mov	r3, r1
 800c25a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	789b      	ldrb	r3, [r3, #2]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d10e      	bne.n	800c282 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2209      	movs	r2, #9
 800c26e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	887a      	ldrh	r2, [r7, #2]
 800c274:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c282:	2200      	movs	r2, #0
 800c284:	2100      	movs	r1, #0
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa09 	bl	800c69e <USBH_CtlReq>
 800c28c:	4603      	mov	r3, r0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b082      	sub	sp, #8
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	789b      	ldrb	r3, [r3, #2]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d10f      	bne.n	800c2ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2203      	movs	r2, #3
 800c2b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f9e5 	bl	800c69e <USBH_CtlReq>
 800c2d4:	4603      	mov	r3, r0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	789b      	ldrb	r3, [r3, #2]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d10f      	bne.n	800c312 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2202      	movs	r2, #2
 800c2f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	b29a      	uxth	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c312:	2200      	movs	r2, #0
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f9c1 	bl	800c69e <USBH_CtlReq>
 800c31c:	4603      	mov	r3, r0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c326:	b480      	push	{r7}
 800c328:	b085      	sub	sp, #20
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	4613      	mov	r3, r2
 800c332:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	781a      	ldrb	r2, [r3, #0]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	785a      	ldrb	r2, [r3, #1]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3302      	adds	r3, #2
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	3303      	adds	r3, #3
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	021b      	lsls	r3, r3, #8
 800c356:	b29b      	uxth	r3, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	791a      	ldrb	r2, [r3, #4]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	795a      	ldrb	r2, [r3, #5]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	799a      	ldrb	r2, [r3, #6]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	79da      	ldrb	r2, [r3, #7]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	2b08      	cmp	r3, #8
 800c384:	d939      	bls.n	800c3fa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	3308      	adds	r3, #8
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	3309      	adds	r3, #9
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	b29b      	uxth	r3, r3
 800c39a:	4313      	orrs	r3, r2
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	330a      	adds	r3, #10
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	330b      	adds	r3, #11
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	021b      	lsls	r3, r3, #8
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	330d      	adds	r3, #13
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	7b9a      	ldrb	r2, [r3, #14]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	7bda      	ldrb	r2, [r3, #15]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	7c1a      	ldrb	r2, [r3, #16]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	7c5a      	ldrb	r2, [r3, #17]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	745a      	strb	r2, [r3, #17]
  }
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b08a      	sub	sp, #40	; 0x28
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	4613      	mov	r3, r2
 800c412:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c418:	2300      	movs	r3, #0
 800c41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c41e:	2300      	movs	r3, #0
 800c420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	785a      	ldrb	r2, [r3, #1]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	3302      	adds	r3, #2
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	3303      	adds	r3, #3
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	b29b      	uxth	r3, r3
 800c448:	021b      	lsls	r3, r3, #8
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	4313      	orrs	r3, r2
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	791a      	ldrb	r2, [r3, #4]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	795a      	ldrb	r2, [r3, #5]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	799a      	ldrb	r2, [r3, #6]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	79da      	ldrb	r2, [r3, #7]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	7a1a      	ldrb	r2, [r3, #8]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c47c:	88fb      	ldrh	r3, [r7, #6]
 800c47e:	2b09      	cmp	r3, #9
 800c480:	d95f      	bls.n	800c542 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c482:	2309      	movs	r3, #9
 800c484:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c48a:	e051      	b.n	800c530 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c48c:	f107 0316 	add.w	r3, r7, #22
 800c490:	4619      	mov	r1, r3
 800c492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c494:	f000 f8e8 	bl	800c668 <USBH_GetNextDesc>
 800c498:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	d146      	bne.n	800c530 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c4a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4a6:	221a      	movs	r2, #26
 800c4a8:	fb02 f303 	mul.w	r3, r2, r3
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4b8:	69f8      	ldr	r0, [r7, #28]
 800c4ba:	f000 f846 	bl	800c54a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4c8:	e022      	b.n	800c510 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4ca:	f107 0316 	add.w	r3, r7, #22
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4d2:	f000 f8c9 	bl	800c668 <USBH_GetNextDesc>
 800c4d6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	785b      	ldrb	r3, [r3, #1]
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	d117      	bne.n	800c510 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c4e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c4e8:	3201      	adds	r2, #1
 800c4ea:	00d2      	lsls	r2, r2, #3
 800c4ec:	211a      	movs	r1, #26
 800c4ee:	fb01 f303 	mul.w	r3, r1, r3
 800c4f2:	4413      	add	r3, r2
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c4fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c500:	69b8      	ldr	r0, [r7, #24]
 800c502:	f000 f851 	bl	800c5a8 <USBH_ParseEPDesc>
            ep_ix++;
 800c506:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c50a:	3301      	adds	r3, #1
 800c50c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	791b      	ldrb	r3, [r3, #4]
 800c514:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c518:	429a      	cmp	r2, r3
 800c51a:	d204      	bcs.n	800c526 <USBH_ParseCfgDesc+0x120>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	885a      	ldrh	r2, [r3, #2]
 800c520:	8afb      	ldrh	r3, [r7, #22]
 800c522:	429a      	cmp	r2, r3
 800c524:	d8d1      	bhi.n	800c4ca <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c52a:	3301      	adds	r3, #1
 800c52c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c534:	2b01      	cmp	r3, #1
 800c536:	d804      	bhi.n	800c542 <USBH_ParseCfgDesc+0x13c>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	885a      	ldrh	r2, [r3, #2]
 800c53c:	8afb      	ldrh	r3, [r7, #22]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d8a4      	bhi.n	800c48c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c542:	bf00      	nop
 800c544:	3728      	adds	r7, #40	; 0x28
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781a      	ldrb	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	785a      	ldrb	r2, [r3, #1]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	789a      	ldrb	r2, [r3, #2]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	78da      	ldrb	r2, [r3, #3]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	791a      	ldrb	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	795a      	ldrb	r2, [r3, #5]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	799a      	ldrb	r2, [r3, #6]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	79da      	ldrb	r2, [r3, #7]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	7a1a      	ldrb	r2, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	721a      	strb	r2, [r3, #8]
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	785a      	ldrb	r2, [r3, #1]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	789a      	ldrb	r2, [r3, #2]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	78da      	ldrb	r2, [r3, #3]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	3305      	adds	r3, #5
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	021b      	lsls	r3, r3, #8
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	799a      	ldrb	r2, [r3, #6]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	719a      	strb	r2, [r3, #6]
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c602:	b480      	push	{r7}
 800c604:	b087      	sub	sp, #28
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4613      	mov	r3, r2
 800c60e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3301      	adds	r3, #1
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b03      	cmp	r3, #3
 800c618:	d120      	bne.n	800c65c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	1e9a      	subs	r2, r3, #2
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	4293      	cmp	r3, r2
 800c624:	bf28      	it	cs
 800c626:	4613      	movcs	r3, r2
 800c628:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3302      	adds	r3, #2
 800c62e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c630:	2300      	movs	r3, #0
 800c632:	82fb      	strh	r3, [r7, #22]
 800c634:	e00b      	b.n	800c64e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c636:	8afb      	ldrh	r3, [r7, #22]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	781a      	ldrb	r2, [r3, #0]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	3301      	adds	r3, #1
 800c646:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c648:	8afb      	ldrh	r3, [r7, #22]
 800c64a:	3302      	adds	r3, #2
 800c64c:	82fb      	strh	r3, [r7, #22]
 800c64e:	8afa      	ldrh	r2, [r7, #22]
 800c650:	8abb      	ldrh	r3, [r7, #20]
 800c652:	429a      	cmp	r2, r3
 800c654:	d3ef      	bcc.n	800c636 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2200      	movs	r2, #0
 800c65a:	701a      	strb	r2, [r3, #0]
  }
}
 800c65c:	bf00      	nop
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	881a      	ldrh	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4413      	add	r3, r2
 800c67e:	b29a      	uxth	r2, r3
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c690:	68fb      	ldr	r3, [r7, #12]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b086      	sub	sp, #24
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	789b      	ldrb	r3, [r3, #2]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d002      	beq.n	800c6be <USBH_CtlReq+0x20>
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d01d      	beq.n	800c6f8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c6bc:	e043      	b.n	800c746 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	88fa      	ldrh	r2, [r7, #6]
 800c6c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2203      	movs	r2, #3
 800c6de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f000 fd47 	bl	800d184 <osMessageQueuePut>
      break;
 800c6f6:	e026      	b.n	800c746 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 f829 	bl	800c750 <USBH_HandleControl>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <USBH_CtlReq+0x70>
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d106      	bne.n	800c71c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	761a      	strb	r2, [r3, #24]
 800c71a:	e005      	b.n	800c728 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c71c:	7dfb      	ldrb	r3, [r7, #23]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d102      	bne.n	800c728 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2201      	movs	r2, #1
 800c726:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2203      	movs	r2, #3
 800c72c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c73c:	2300      	movs	r3, #0
 800c73e:	2200      	movs	r2, #0
 800c740:	f000 fd20 	bl	800d184 <osMessageQueuePut>
      break;
 800c744:	bf00      	nop
  }
  return status;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af02      	add	r7, sp, #8
 800c756:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c75c:	2300      	movs	r3, #0
 800c75e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7e1b      	ldrb	r3, [r3, #24]
 800c764:	3b01      	subs	r3, #1
 800c766:	2b0a      	cmp	r3, #10
 800c768:	f200 822b 	bhi.w	800cbc2 <USBH_HandleControl+0x472>
 800c76c:	a201      	add	r2, pc, #4	; (adr r2, 800c774 <USBH_HandleControl+0x24>)
 800c76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c772:	bf00      	nop
 800c774:	0800c7a1 	.word	0x0800c7a1
 800c778:	0800c7bb 	.word	0x0800c7bb
 800c77c:	0800c85d 	.word	0x0800c85d
 800c780:	0800c883 	.word	0x0800c883
 800c784:	0800c90f 	.word	0x0800c90f
 800c788:	0800c93b 	.word	0x0800c93b
 800c78c:	0800c9fd 	.word	0x0800c9fd
 800c790:	0800ca1f 	.word	0x0800ca1f
 800c794:	0800cab1 	.word	0x0800cab1
 800c798:	0800cad9 	.word	0x0800cad9
 800c79c:	0800cb6b 	.word	0x0800cb6b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f103 0110 	add.w	r1, r3, #16
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	795b      	ldrb	r3, [r3, #5]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fa19 	bl	800cbe4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	761a      	strb	r2, [r3, #24]
      break;
 800c7b8:	e20e      	b.n	800cbd8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	795b      	ldrb	r3, [r3, #5]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f003 fc9d 	bl	8010100 <USBH_LL_GetURBState>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c7ca:	7bbb      	ldrb	r3, [r7, #14]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d12c      	bne.n	800c82a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7c1b      	ldrb	r3, [r3, #16]
 800c7d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	8adb      	ldrh	r3, [r3, #22]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00a      	beq.n	800c7f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c7e2:	7b7b      	ldrb	r3, [r7, #13]
 800c7e4:	2b80      	cmp	r3, #128	; 0x80
 800c7e6:	d103      	bne.n	800c7f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	761a      	strb	r2, [r3, #24]
 800c7ee:	e00d      	b.n	800c80c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	761a      	strb	r2, [r3, #24]
 800c7f6:	e009      	b.n	800c80c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c7f8:	7b7b      	ldrb	r3, [r7, #13]
 800c7fa:	2b80      	cmp	r3, #128	; 0x80
 800c7fc:	d103      	bne.n	800c806 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2209      	movs	r2, #9
 800c802:	761a      	strb	r2, [r3, #24]
 800c804:	e002      	b.n	800c80c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2207      	movs	r2, #7
 800c80a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2203      	movs	r2, #3
 800c810:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c820:	2300      	movs	r3, #0
 800c822:	2200      	movs	r2, #0
 800c824:	f000 fcae 	bl	800d184 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c828:	e1cd      	b.n	800cbc6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d003      	beq.n	800c838 <USBH_HandleControl+0xe8>
 800c830:	7bbb      	ldrb	r3, [r7, #14]
 800c832:	2b02      	cmp	r3, #2
 800c834:	f040 81c7 	bne.w	800cbc6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	220b      	movs	r2, #11
 800c83c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2203      	movs	r2, #3
 800c842:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c852:	2300      	movs	r3, #0
 800c854:	2200      	movs	r2, #0
 800c856:	f000 fc95 	bl	800d184 <osMessageQueuePut>
      break;
 800c85a:	e1b4      	b.n	800cbc6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6899      	ldr	r1, [r3, #8]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	899a      	ldrh	r2, [r3, #12]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	791b      	ldrb	r3, [r3, #4]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f9f4 	bl	800cc62 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2204      	movs	r2, #4
 800c87e:	761a      	strb	r2, [r3, #24]
      break;
 800c880:	e1aa      	b.n	800cbd8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	791b      	ldrb	r3, [r3, #4]
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f003 fc39 	bl	8010100 <USBH_LL_GetURBState>
 800c88e:	4603      	mov	r3, r0
 800c890:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d110      	bne.n	800c8ba <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2209      	movs	r2, #9
 800c89c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2203      	movs	r2, #3
 800c8a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f000 fc65 	bl	800d184 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b05      	cmp	r3, #5
 800c8be:	d110      	bne.n	800c8e2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2203      	movs	r2, #3
 800c8c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8d8:	2300      	movs	r3, #0
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f000 fc52 	bl	800d184 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c8e0:	e173      	b.n	800cbca <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	2b04      	cmp	r3, #4
 800c8e6:	f040 8170 	bne.w	800cbca <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	220b      	movs	r2, #11
 800c8ee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c904:	2300      	movs	r3, #0
 800c906:	2200      	movs	r2, #0
 800c908:	f000 fc3c 	bl	800d184 <osMessageQueuePut>
      break;
 800c90c:	e15d      	b.n	800cbca <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6899      	ldr	r1, [r3, #8]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	899a      	ldrh	r2, [r3, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	7958      	ldrb	r0, [r3, #5]
 800c91a:	2301      	movs	r3, #1
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	4603      	mov	r3, r0
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f979 	bl	800cc18 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2206      	movs	r2, #6
 800c936:	761a      	strb	r2, [r3, #24]
      break;
 800c938:	e14e      	b.n	800cbd8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	795b      	ldrb	r3, [r3, #5]
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f003 fbdd 	bl	8010100 <USBH_LL_GetURBState>
 800c946:	4603      	mov	r3, r0
 800c948:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d111      	bne.n	800c974 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2207      	movs	r2, #7
 800c954:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2203      	movs	r2, #3
 800c95a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c96a:	2300      	movs	r3, #0
 800c96c:	2200      	movs	r2, #0
 800c96e:	f000 fc09 	bl	800d184 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c972:	e12c      	b.n	800cbce <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	2b05      	cmp	r3, #5
 800c978:	d113      	bne.n	800c9a2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	220c      	movs	r2, #12
 800c97e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c980:	2303      	movs	r3, #3
 800c982:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2203      	movs	r2, #3
 800c988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c998:	2300      	movs	r3, #0
 800c99a:	2200      	movs	r2, #0
 800c99c:	f000 fbf2 	bl	800d184 <osMessageQueuePut>
      break;
 800c9a0:	e115      	b.n	800cbce <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c9a2:	7bbb      	ldrb	r3, [r7, #14]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d111      	bne.n	800c9cc <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2205      	movs	r2, #5
 800c9ac:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2203      	movs	r2, #3
 800c9b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f000 fbdd 	bl	800d184 <osMessageQueuePut>
      break;
 800c9ca:	e100      	b.n	800cbce <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	f040 80fd 	bne.w	800cbce <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	220b      	movs	r2, #11
 800c9d8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c9da:	2302      	movs	r3, #2
 800c9dc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f000 fbc5 	bl	800d184 <osMessageQueuePut>
      break;
 800c9fa:	e0e8      	b.n	800cbce <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	791b      	ldrb	r3, [r3, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	2100      	movs	r1, #0
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f92c 	bl	800cc62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2208      	movs	r2, #8
 800ca1a:	761a      	strb	r2, [r3, #24]

      break;
 800ca1c:	e0dc      	b.n	800cbd8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	791b      	ldrb	r3, [r3, #4]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f003 fb6b 	bl	8010100 <USBH_LL_GetURBState>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca2e:	7bbb      	ldrb	r3, [r7, #14]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d113      	bne.n	800ca5c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	220d      	movs	r2, #13
 800ca38:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2203      	movs	r2, #3
 800ca42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca52:	2300      	movs	r3, #0
 800ca54:	2200      	movs	r2, #0
 800ca56:	f000 fb95 	bl	800d184 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ca5a:	e0ba      	b.n	800cbd2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d111      	bne.n	800ca86 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	220b      	movs	r2, #11
 800ca66:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f000 fb80 	bl	800d184 <osMessageQueuePut>
      break;
 800ca84:	e0a5      	b.n	800cbd2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800ca86:	7bbb      	ldrb	r3, [r7, #14]
 800ca88:	2b05      	cmp	r3, #5
 800ca8a:	f040 80a2 	bne.w	800cbd2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2203      	movs	r2, #3
 800ca96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800caa6:	2300      	movs	r3, #0
 800caa8:	2200      	movs	r2, #0
 800caaa:	f000 fb6b 	bl	800d184 <osMessageQueuePut>
      break;
 800caae:	e090      	b.n	800cbd2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	795a      	ldrb	r2, [r3, #5]
 800cab4:	2301      	movs	r3, #1
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f8aa 	bl	800cc18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	220a      	movs	r2, #10
 800cad4:	761a      	strb	r2, [r3, #24]
      break;
 800cad6:	e07f      	b.n	800cbd8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	795b      	ldrb	r3, [r3, #5]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f003 fb0e 	bl	8010100 <USBH_LL_GetURBState>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d113      	bne.n	800cb16 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	220d      	movs	r2, #13
 800caf6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2203      	movs	r2, #3
 800cafc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f000 fb38 	bl	800d184 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cb14:	e05f      	b.n	800cbd6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb16:	7bbb      	ldrb	r3, [r7, #14]
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d111      	bne.n	800cb40 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2209      	movs	r2, #9
 800cb20:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2203      	movs	r2, #3
 800cb26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb36:	2300      	movs	r3, #0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f000 fb23 	bl	800d184 <osMessageQueuePut>
      break;
 800cb3e:	e04a      	b.n	800cbd6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	2b04      	cmp	r3, #4
 800cb44:	d147      	bne.n	800cbd6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	220b      	movs	r2, #11
 800cb4a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2203      	movs	r2, #3
 800cb50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb60:	2300      	movs	r3, #0
 800cb62:	2200      	movs	r2, #0
 800cb64:	f000 fb0e 	bl	800d184 <osMessageQueuePut>
      break;
 800cb68:	e035      	b.n	800cbd6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7e5b      	ldrb	r3, [r3, #25]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	765a      	strb	r2, [r3, #25]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7e5b      	ldrb	r3, [r3, #25]
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d806      	bhi.n	800cb8c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cb8a:	e025      	b.n	800cbd8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb92:	2106      	movs	r1, #6
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	795b      	ldrb	r3, [r3, #5]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f90d 	bl	800cdc4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	791b      	ldrb	r3, [r3, #4]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f907 	bl	800cdc4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc0:	e00a      	b.n	800cbd8 <USBH_HandleControl+0x488>

    default:
      break;
 800cbc2:	bf00      	nop
 800cbc4:	e008      	b.n	800cbd8 <USBH_HandleControl+0x488>
      break;
 800cbc6:	bf00      	nop
 800cbc8:	e006      	b.n	800cbd8 <USBH_HandleControl+0x488>
      break;
 800cbca:	bf00      	nop
 800cbcc:	e004      	b.n	800cbd8 <USBH_HandleControl+0x488>
      break;
 800cbce:	bf00      	nop
 800cbd0:	e002      	b.n	800cbd8 <USBH_HandleControl+0x488>
      break;
 800cbd2:	bf00      	nop
 800cbd4:	e000      	b.n	800cbd8 <USBH_HandleControl+0x488>
      break;
 800cbd6:	bf00      	nop
  }

  return status;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop

0800cbe4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af04      	add	r7, sp, #16
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cbf2:	79f9      	ldrb	r1, [r7, #7]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	9302      	str	r3, [sp, #8]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	2300      	movs	r3, #0
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	2300      	movs	r3, #0
 800cc06:	2200      	movs	r2, #0
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f003 fa48 	bl	801009e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b088      	sub	sp, #32
 800cc1c:	af04      	add	r7, sp, #16
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	4611      	mov	r1, r2
 800cc24:	461a      	mov	r2, r3
 800cc26:	460b      	mov	r3, r1
 800cc28:	80fb      	strh	r3, [r7, #6]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d001      	beq.n	800cc3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc3c:	7979      	ldrb	r1, [r7, #5]
 800cc3e:	7e3b      	ldrb	r3, [r7, #24]
 800cc40:	9303      	str	r3, [sp, #12]
 800cc42:	88fb      	ldrh	r3, [r7, #6]
 800cc44:	9302      	str	r3, [sp, #8]
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2200      	movs	r2, #0
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f003 fa23 	bl	801009e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b088      	sub	sp, #32
 800cc66:	af04      	add	r7, sp, #16
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	461a      	mov	r2, r3
 800cc70:	460b      	mov	r3, r1
 800cc72:	80fb      	strh	r3, [r7, #6]
 800cc74:	4613      	mov	r3, r2
 800cc76:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc78:	7979      	ldrb	r1, [r7, #5]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	9302      	str	r3, [sp, #8]
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	2301      	movs	r3, #1
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f003 fa05 	bl	801009e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cc94:	2300      	movs	r3, #0

}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b088      	sub	sp, #32
 800cca2:	af04      	add	r7, sp, #16
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	4611      	mov	r1, r2
 800ccaa:	461a      	mov	r2, r3
 800ccac:	460b      	mov	r3, r1
 800ccae:	80fb      	strh	r3, [r7, #6]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ccc2:	7979      	ldrb	r1, [r7, #5]
 800ccc4:	7e3b      	ldrb	r3, [r7, #24]
 800ccc6:	9303      	str	r3, [sp, #12]
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	9302      	str	r3, [sp, #8]
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f003 f9e0 	bl	801009e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af04      	add	r7, sp, #16
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	80fb      	strh	r3, [r7, #6]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ccfe:	7979      	ldrb	r1, [r7, #5]
 800cd00:	2300      	movs	r3, #0
 800cd02:	9303      	str	r3, [sp, #12]
 800cd04:	88fb      	ldrh	r3, [r7, #6]
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2302      	movs	r3, #2
 800cd12:	2201      	movs	r2, #1
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f003 f9c2 	bl	801009e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af04      	add	r7, sp, #16
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	4611      	mov	r1, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	4603      	mov	r3, r0
 800cd34:	70fb      	strb	r3, [r7, #3]
 800cd36:	460b      	mov	r3, r1
 800cd38:	70bb      	strb	r3, [r7, #2]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd3e:	7878      	ldrb	r0, [r7, #1]
 800cd40:	78ba      	ldrb	r2, [r7, #2]
 800cd42:	78f9      	ldrb	r1, [r7, #3]
 800cd44:	8b3b      	ldrh	r3, [r7, #24]
 800cd46:	9302      	str	r3, [sp, #8]
 800cd48:	7d3b      	ldrb	r3, [r7, #20]
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	7c3b      	ldrb	r3, [r7, #16]
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	4603      	mov	r3, r0
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f003 f955 	bl	8010002 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f003 f974 	bl	8010060 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f836 	bl	800ce00 <USBH_GetFreePipe>
 800cd94:	4603      	mov	r3, r0
 800cd96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cd98:	89fb      	ldrh	r3, [r7, #14]
 800cd9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d00a      	beq.n	800cdb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800cda2:	78fa      	ldrb	r2, [r7, #3]
 800cda4:	89fb      	ldrh	r3, [r7, #14]
 800cda6:	f003 030f 	and.w	r3, r3, #15
 800cdaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cdae:	6879      	ldr	r1, [r7, #4]
 800cdb0:	33e0      	adds	r3, #224	; 0xe0
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	440b      	add	r3, r1
 800cdb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cdb8:	89fb      	ldrh	r3, [r7, #14]
 800cdba:	b2db      	uxtb	r3, r3
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	2b0a      	cmp	r3, #10
 800cdd4:	d80d      	bhi.n	800cdf2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	33e0      	adds	r3, #224	; 0xe0
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	685a      	ldr	r2, [r3, #4]
 800cde2:	78fb      	ldrb	r3, [r7, #3]
 800cde4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cde8:	6879      	ldr	r1, [r7, #4]
 800cdea:	33e0      	adds	r3, #224	; 0xe0
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	440b      	add	r3, r1
 800cdf0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
 800ce10:	e00f      	b.n	800ce32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	33e0      	adds	r3, #224	; 0xe0
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	e007      	b.n	800ce3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	73fb      	strb	r3, [r7, #15]
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	2b0a      	cmp	r3, #10
 800ce36:	d9ec      	bls.n	800ce12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ce4c:	bf00      	nop
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
	...

0800ce58 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce5e:	f3ef 8305 	mrs	r3, IPSR
 800ce62:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10f      	bne.n	800ce8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce6e:	607b      	str	r3, [r7, #4]
  return(result);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d105      	bne.n	800ce82 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce76:	f3ef 8311 	mrs	r3, BASEPRI
 800ce7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <osKernelInitialize+0x3a>
 800ce82:	4b0e      	ldr	r3, [pc, #56]	; (800cebc <osKernelInitialize+0x64>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d103      	bne.n	800ce92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ce8a:	f06f 0305 	mvn.w	r3, #5
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e00c      	b.n	800ceac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce92:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <osKernelInitialize+0x64>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce9a:	4b08      	ldr	r3, [pc, #32]	; (800cebc <osKernelInitialize+0x64>)
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
 800cea4:	e002      	b.n	800ceac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cea6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ceac:	68fb      	ldr	r3, [r7, #12]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	2000016c 	.word	0x2000016c

0800cec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cec6:	f3ef 8305 	mrs	r3, IPSR
 800ceca:	60bb      	str	r3, [r7, #8]
  return(result);
 800cecc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10f      	bne.n	800cef2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ced2:	f3ef 8310 	mrs	r3, PRIMASK
 800ced6:	607b      	str	r3, [r7, #4]
  return(result);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d105      	bne.n	800ceea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cede:	f3ef 8311 	mrs	r3, BASEPRI
 800cee2:	603b      	str	r3, [r7, #0]
  return(result);
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <osKernelStart+0x3a>
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <osKernelStart+0x68>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d103      	bne.n	800cefa <osKernelStart+0x3a>
    stat = osErrorISR;
 800cef2:	f06f 0305 	mvn.w	r3, #5
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	e010      	b.n	800cf1c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cefa:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <osKernelStart+0x68>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d109      	bne.n	800cf16 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf02:	f7ff ffa1 	bl	800ce48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <osKernelStart+0x68>)
 800cf08:	2202      	movs	r2, #2
 800cf0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf0c:	f001 fa38 	bl	800e380 <vTaskStartScheduler>
      stat = osOK;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e002      	b.n	800cf1c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cf16:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	2000016c 	.word	0x2000016c

0800cf2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b090      	sub	sp, #64	; 0x40
 800cf30:	af04      	add	r7, sp, #16
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3c:	f3ef 8305 	mrs	r3, IPSR
 800cf40:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f040 808f 	bne.w	800d068 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf4a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf4e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d105      	bne.n	800cf62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf56:	f3ef 8311 	mrs	r3, BASEPRI
 800cf5a:	617b      	str	r3, [r7, #20]
  return(result);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <osThreadNew+0x3e>
 800cf62:	4b44      	ldr	r3, [pc, #272]	; (800d074 <osThreadNew+0x148>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d07e      	beq.n	800d068 <osThreadNew+0x13c>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d07b      	beq.n	800d068 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cf70:	2380      	movs	r3, #128	; 0x80
 800cf72:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cf74:	2318      	movs	r3, #24
 800cf76:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cf7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d045      	beq.n	800d014 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <osThreadNew+0x6a>
        name = attr->name;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	699b      	ldr	r3, [r3, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d008      	beq.n	800cfbc <osThreadNew+0x90>
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	2b38      	cmp	r3, #56	; 0x38
 800cfae:	d805      	bhi.n	800cfbc <osThreadNew+0x90>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <osThreadNew+0x94>
        return (NULL);
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e054      	b.n	800d06a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	695b      	ldr	r3, [r3, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	089b      	lsrs	r3, r3, #2
 800cfce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00e      	beq.n	800cff6 <osThreadNew+0xca>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	2b5b      	cmp	r3, #91	; 0x5b
 800cfde:	d90a      	bls.n	800cff6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <osThreadNew+0xca>
        mem = 1;
 800cff0:	2301      	movs	r3, #1
 800cff2:	623b      	str	r3, [r7, #32]
 800cff4:	e010      	b.n	800d018 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10c      	bne.n	800d018 <osThreadNew+0xec>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <osThreadNew+0xec>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <osThreadNew+0xec>
          mem = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	623b      	str	r3, [r7, #32]
 800d012:	e001      	b.n	800d018 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d110      	bne.n	800d040 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d026:	9202      	str	r2, [sp, #8]
 800d028:	9301      	str	r3, [sp, #4]
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f001 f805 	bl	800e044 <xTaskCreateStatic>
 800d03a:	4603      	mov	r3, r0
 800d03c:	613b      	str	r3, [r7, #16]
 800d03e:	e013      	b.n	800d068 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d110      	bne.n	800d068 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	b29a      	uxth	r2, r3
 800d04a:	f107 0310 	add.w	r3, r7, #16
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f001 f84d 	bl	800e0f8 <xTaskCreate>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b01      	cmp	r3, #1
 800d062:	d001      	beq.n	800d068 <osThreadNew+0x13c>
          hTask = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d068:	693b      	ldr	r3, [r7, #16]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3730      	adds	r7, #48	; 0x30
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	2000016c 	.word	0x2000016c

0800d078 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af02      	add	r7, sp, #8
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d088:	f3ef 8305 	mrs	r3, IPSR
 800d08c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d08e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d090:	2b00      	cmp	r3, #0
 800d092:	d170      	bne.n	800d176 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d094:	f3ef 8310 	mrs	r3, PRIMASK
 800d098:	617b      	str	r3, [r7, #20]
  return(result);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d105      	bne.n	800d0ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0a0:	f3ef 8311 	mrs	r3, BASEPRI
 800d0a4:	613b      	str	r3, [r7, #16]
  return(result);
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <osMessageQueueNew+0x3c>
 800d0ac:	4b34      	ldr	r3, [pc, #208]	; (800d180 <osMessageQueueNew+0x108>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d060      	beq.n	800d176 <osMessageQueueNew+0xfe>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d05d      	beq.n	800d176 <osMessageQueueNew+0xfe>
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d05a      	beq.n	800d176 <osMessageQueueNew+0xfe>
    mem = -1;
 800d0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d029      	beq.n	800d120 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d012      	beq.n	800d0fa <osMessageQueueNew+0x82>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	2b4f      	cmp	r3, #79	; 0x4f
 800d0da:	d90e      	bls.n	800d0fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00a      	beq.n	800d0fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	695a      	ldr	r2, [r3, #20]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68b9      	ldr	r1, [r7, #8]
 800d0ec:	fb01 f303 	mul.w	r3, r1, r3
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d302      	bcc.n	800d0fa <osMessageQueueNew+0x82>
        mem = 1;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	623b      	str	r3, [r7, #32]
 800d0f8:	e014      	b.n	800d124 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d110      	bne.n	800d124 <osMessageQueueNew+0xac>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10c      	bne.n	800d124 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d108      	bne.n	800d124 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d104      	bne.n	800d124 <osMessageQueueNew+0xac>
          mem = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	623b      	str	r3, [r7, #32]
 800d11e:	e001      	b.n	800d124 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d10c      	bne.n	800d144 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	691a      	ldr	r2, [r3, #16]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6899      	ldr	r1, [r3, #8]
 800d132:	2300      	movs	r3, #0
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	460b      	mov	r3, r1
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 fa58 	bl	800d5f0 <xQueueGenericCreateStatic>
 800d140:	6278      	str	r0, [r7, #36]	; 0x24
 800d142:	e008      	b.n	800d156 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d105      	bne.n	800d156 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d14a:	2200      	movs	r2, #0
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 fac1 	bl	800d6d6 <xQueueGenericCreate>
 800d154:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00c      	beq.n	800d176 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <osMessageQueueNew+0xf2>
        name = attr->name;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	61fb      	str	r3, [r7, #28]
 800d168:	e001      	b.n	800d16e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d16e:	69f9      	ldr	r1, [r7, #28]
 800d170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d172:	f000 ff0b 	bl	800df8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3728      	adds	r7, #40	; 0x28
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	2000016c 	.word	0x2000016c

0800d184 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d184:	b580      	push	{r7, lr}
 800d186:	b08a      	sub	sp, #40	; 0x28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	603b      	str	r3, [r7, #0]
 800d190:	4613      	mov	r3, r2
 800d192:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d198:	2300      	movs	r3, #0
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d19c:	f3ef 8305 	mrs	r3, IPSR
 800d1a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800d1a2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10f      	bne.n	800d1c8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d105      	bne.n	800d1c0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1b4:	f3ef 8311 	mrs	r3, BASEPRI
 800d1b8:	617b      	str	r3, [r7, #20]
  return(result);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d02c      	beq.n	800d21a <osMessageQueuePut+0x96>
 800d1c0:	4b28      	ldr	r3, [pc, #160]	; (800d264 <osMessageQueuePut+0xe0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d128      	bne.n	800d21a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <osMessageQueuePut+0x56>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <osMessageQueuePut+0x56>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d1da:	f06f 0303 	mvn.w	r3, #3
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1e0:	e039      	b.n	800d256 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1e6:	f107 0210 	add.w	r2, r7, #16
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	68b9      	ldr	r1, [r7, #8]
 800d1ee:	6a38      	ldr	r0, [r7, #32]
 800d1f0:	f000 fbce 	bl	800d990 <xQueueGenericSendFromISR>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d003      	beq.n	800d202 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d1fa:	f06f 0302 	mvn.w	r3, #2
 800d1fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d200:	e029      	b.n	800d256 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d026      	beq.n	800d256 <osMessageQueuePut+0xd2>
 800d208:	4b17      	ldr	r3, [pc, #92]	; (800d268 <osMessageQueuePut+0xe4>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d218:	e01d      	b.n	800d256 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <osMessageQueuePut+0xa2>
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d103      	bne.n	800d22e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d226:	f06f 0303 	mvn.w	r3, #3
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
 800d22c:	e014      	b.n	800d258 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d22e:	2300      	movs	r3, #0
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68b9      	ldr	r1, [r7, #8]
 800d234:	6a38      	ldr	r0, [r7, #32]
 800d236:	f000 fab1 	bl	800d79c <xQueueGenericSend>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d00b      	beq.n	800d258 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d246:	f06f 0301 	mvn.w	r3, #1
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24
 800d24c:	e004      	b.n	800d258 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d24e:	f06f 0302 	mvn.w	r3, #2
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
 800d254:	e000      	b.n	800d258 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d256:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3728      	adds	r7, #40	; 0x28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	2000016c 	.word	0x2000016c
 800d268:	e000ed04 	.word	0xe000ed04

0800d26c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d27e:	2300      	movs	r3, #0
 800d280:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d282:	f3ef 8305 	mrs	r3, IPSR
 800d286:	61fb      	str	r3, [r7, #28]
  return(result);
 800d288:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10f      	bne.n	800d2ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d28e:	f3ef 8310 	mrs	r3, PRIMASK
 800d292:	61bb      	str	r3, [r7, #24]
  return(result);
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d105      	bne.n	800d2a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d29a:	f3ef 8311 	mrs	r3, BASEPRI
 800d29e:	617b      	str	r3, [r7, #20]
  return(result);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d02c      	beq.n	800d300 <osMessageQueueGet+0x94>
 800d2a6:	4b28      	ldr	r3, [pc, #160]	; (800d348 <osMessageQueueGet+0xdc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d128      	bne.n	800d300 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <osMessageQueueGet+0x54>
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <osMessageQueueGet+0x54>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d2c0:	f06f 0303 	mvn.w	r3, #3
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2c6:	e038      	b.n	800d33a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2cc:	f107 0310 	add.w	r3, r7, #16
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	68b9      	ldr	r1, [r7, #8]
 800d2d4:	6a38      	ldr	r0, [r7, #32]
 800d2d6:	f000 fccb 	bl	800dc70 <xQueueReceiveFromISR>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d003      	beq.n	800d2e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d2e0:	f06f 0302 	mvn.w	r3, #2
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2e6:	e028      	b.n	800d33a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d025      	beq.n	800d33a <osMessageQueueGet+0xce>
 800d2ee:	4b17      	ldr	r3, [pc, #92]	; (800d34c <osMessageQueueGet+0xe0>)
 800d2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2fe:	e01c      	b.n	800d33a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <osMessageQueueGet+0xa0>
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d103      	bne.n	800d314 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d30c:	f06f 0303 	mvn.w	r3, #3
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
 800d312:	e013      	b.n	800d33c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	6a38      	ldr	r0, [r7, #32]
 800d31a:	f000 fbcd 	bl	800dab8 <xQueueReceive>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b01      	cmp	r3, #1
 800d322:	d00b      	beq.n	800d33c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d32a:	f06f 0301 	mvn.w	r3, #1
 800d32e:	627b      	str	r3, [r7, #36]	; 0x24
 800d330:	e004      	b.n	800d33c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d332:	f06f 0302 	mvn.w	r3, #2
 800d336:	627b      	str	r3, [r7, #36]	; 0x24
 800d338:	e000      	b.n	800d33c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d33a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3728      	adds	r7, #40	; 0x28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	2000016c 	.word	0x2000016c
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a07      	ldr	r2, [pc, #28]	; (800d37c <vApplicationGetIdleTaskMemory+0x2c>)
 800d360:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	4a06      	ldr	r2, [pc, #24]	; (800d380 <vApplicationGetIdleTaskMemory+0x30>)
 800d366:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2280      	movs	r2, #128	; 0x80
 800d36c:	601a      	str	r2, [r3, #0]
}
 800d36e:	bf00      	nop
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	20000170 	.word	0x20000170
 800d380:	200001cc 	.word	0x200001cc

0800d384 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4a07      	ldr	r2, [pc, #28]	; (800d3b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d394:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	4a06      	ldr	r2, [pc, #24]	; (800d3b4 <vApplicationGetTimerTaskMemory+0x30>)
 800d39a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3a2:	601a      	str	r2, [r3, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	200003cc 	.word	0x200003cc
 800d3b4:	20000428 	.word	0x20000428

0800d3b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f103 0208 	add.w	r2, r3, #8
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f103 0208 	add.w	r2, r3, #8
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f103 0208 	add.w	r2, r3, #8
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d406:	bf00      	nop
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d412:	b480      	push	{r7}
 800d414:	b085      	sub	sp, #20
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
}
 800d44e:	bf00      	nop
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d45a:	b480      	push	{r7}
 800d45c:	b085      	sub	sp, #20
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d470:	d103      	bne.n	800d47a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	e00c      	b.n	800d494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3308      	adds	r3, #8
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e002      	b.n	800d488 <vListInsert+0x2e>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	429a      	cmp	r2, r3
 800d492:	d2f6      	bcs.n	800d482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	601a      	str	r2, [r3, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	6892      	ldr	r2, [r2, #8]
 800d4e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	6852      	ldr	r2, [r2, #4]
 800d4ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d103      	bne.n	800d500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	1e5a      	subs	r2, r3, #1
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d109      	bne.n	800d548 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	60bb      	str	r3, [r7, #8]
 800d546:	e7fe      	b.n	800d546 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d548:	f002 f898 	bl	800f67c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d554:	68f9      	ldr	r1, [r7, #12]
 800d556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d558:	fb01 f303 	mul.w	r3, r1, r3
 800d55c:	441a      	add	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d578:	3b01      	subs	r3, #1
 800d57a:	68f9      	ldr	r1, [r7, #12]
 800d57c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d57e:	fb01 f303 	mul.w	r3, r1, r3
 800d582:	441a      	add	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	22ff      	movs	r2, #255	; 0xff
 800d58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	22ff      	movs	r2, #255	; 0xff
 800d594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d114      	bne.n	800d5c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d01a      	beq.n	800d5dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3310      	adds	r3, #16
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 f968 	bl	800e880 <xTaskRemoveFromEventList>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d012      	beq.n	800d5dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d5b6:	4b0d      	ldr	r3, [pc, #52]	; (800d5ec <xQueueGenericReset+0xcc>)
 800d5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	e009      	b.n	800d5dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3310      	adds	r3, #16
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fef3 	bl	800d3b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3324      	adds	r3, #36	; 0x24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff feee 	bl	800d3b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d5dc:	f002 f87c 	bl	800f6d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d5e0:	2301      	movs	r3, #1
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	e000ed04 	.word	0xe000ed04

0800d5f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08e      	sub	sp, #56	; 0x38
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
 800d5fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d109      	bne.n	800d618 <xQueueGenericCreateStatic+0x28>
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	62bb      	str	r3, [r7, #40]	; 0x28
 800d616:	e7fe      	b.n	800d616 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d109      	bne.n	800d632 <xQueueGenericCreateStatic+0x42>
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
 800d630:	e7fe      	b.n	800d630 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <xQueueGenericCreateStatic+0x4e>
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <xQueueGenericCreateStatic+0x52>
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <xQueueGenericCreateStatic+0x54>
 800d642:	2300      	movs	r3, #0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d109      	bne.n	800d65c <xQueueGenericCreateStatic+0x6c>
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	623b      	str	r3, [r7, #32]
 800d65a:	e7fe      	b.n	800d65a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d102      	bne.n	800d668 <xQueueGenericCreateStatic+0x78>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d101      	bne.n	800d66c <xQueueGenericCreateStatic+0x7c>
 800d668:	2301      	movs	r3, #1
 800d66a:	e000      	b.n	800d66e <xQueueGenericCreateStatic+0x7e>
 800d66c:	2300      	movs	r3, #0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <xQueueGenericCreateStatic+0x96>
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	61fb      	str	r3, [r7, #28]
 800d684:	e7fe      	b.n	800d684 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d686:	2350      	movs	r3, #80	; 0x50
 800d688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	2b50      	cmp	r3, #80	; 0x50
 800d68e:	d009      	beq.n	800d6a4 <xQueueGenericCreateStatic+0xb4>
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	e7fe      	b.n	800d6a2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d6a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00d      	beq.n	800d6cc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	68b9      	ldr	r1, [r7, #8]
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f000 f844 	bl	800d754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3730      	adds	r7, #48	; 0x30
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b08a      	sub	sp, #40	; 0x28
 800d6da:	af02      	add	r7, sp, #8
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d109      	bne.n	800d6fe <xQueueGenericCreate+0x28>
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d704:	2300      	movs	r3, #0
 800d706:	61fb      	str	r3, [r7, #28]
 800d708:	e004      	b.n	800d714 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	fb02 f303 	mul.w	r3, r2, r3
 800d712:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	3350      	adds	r3, #80	; 0x50
 800d718:	4618      	mov	r0, r3
 800d71a:	f002 f8c9 	bl	800f8b0 <pvPortMalloc>
 800d71e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d011      	beq.n	800d74a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	3350      	adds	r3, #80	; 0x50
 800d72e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d738:	79fa      	ldrb	r2, [r7, #7]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	4613      	mov	r3, r2
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 f805 	bl	800d754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d74a:	69bb      	ldr	r3, [r7, #24]
	}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3720      	adds	r7, #32
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d103      	bne.n	800d770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	69ba      	ldr	r2, [r7, #24]
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	e002      	b.n	800d776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d782:	2101      	movs	r1, #1
 800d784:	69b8      	ldr	r0, [r7, #24]
 800d786:	f7ff fecb 	bl	800d520 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08e      	sub	sp, #56	; 0x38
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d109      	bne.n	800d7cc <xQueueGenericSend+0x30>
 800d7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7ca:	e7fe      	b.n	800d7ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d103      	bne.n	800d7da <xQueueGenericSend+0x3e>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <xQueueGenericSend+0x42>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e000      	b.n	800d7e0 <xQueueGenericSend+0x44>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d109      	bne.n	800d7f8 <xQueueGenericSend+0x5c>
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f6:	e7fe      	b.n	800d7f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d103      	bne.n	800d806 <xQueueGenericSend+0x6a>
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d802:	2b01      	cmp	r3, #1
 800d804:	d101      	bne.n	800d80a <xQueueGenericSend+0x6e>
 800d806:	2301      	movs	r3, #1
 800d808:	e000      	b.n	800d80c <xQueueGenericSend+0x70>
 800d80a:	2300      	movs	r3, #0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d109      	bne.n	800d824 <xQueueGenericSend+0x88>
 800d810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	623b      	str	r3, [r7, #32]
 800d822:	e7fe      	b.n	800d822 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d824:	f001 f9e2 	bl	800ebec <xTaskGetSchedulerState>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <xQueueGenericSend+0x98>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <xQueueGenericSend+0x9c>
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <xQueueGenericSend+0x9e>
 800d838:	2300      	movs	r3, #0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d109      	bne.n	800d852 <xQueueGenericSend+0xb6>
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	61fb      	str	r3, [r7, #28]
 800d850:	e7fe      	b.n	800d850 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d852:	f001 ff13 	bl	800f67c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	429a      	cmp	r2, r3
 800d860:	d302      	bcc.n	800d868 <xQueueGenericSend+0xcc>
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d129      	bne.n	800d8bc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	68b9      	ldr	r1, [r7, #8]
 800d86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d86e:	f000 fa7c 	bl	800dd6a <prvCopyDataToQueue>
 800d872:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d010      	beq.n	800d89e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	3324      	adds	r3, #36	; 0x24
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fffd 	bl	800e880 <xTaskRemoveFromEventList>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d013      	beq.n	800d8b4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d88c:	4b3f      	ldr	r3, [pc, #252]	; (800d98c <xQueueGenericSend+0x1f0>)
 800d88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	e00a      	b.n	800d8b4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d007      	beq.n	800d8b4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d8a4:	4b39      	ldr	r3, [pc, #228]	; (800d98c <xQueueGenericSend+0x1f0>)
 800d8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d8b4:	f001 ff10 	bl	800f6d8 <vPortExitCritical>
				return pdPASS;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e063      	b.n	800d984 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d103      	bne.n	800d8ca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8c2:	f001 ff09 	bl	800f6d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e05c      	b.n	800d984 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8d0:	f107 0314 	add.w	r3, r7, #20
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f001 f835 	bl	800e944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8de:	f001 fefb 	bl	800f6d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8e2:	f000 fdb1 	bl	800e448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8e6:	f001 fec9 	bl	800f67c <vPortEnterCritical>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8f0:	b25b      	sxtb	r3, r3
 800d8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f6:	d103      	bne.n	800d900 <xQueueGenericSend+0x164>
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d906:	b25b      	sxtb	r3, r3
 800d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90c:	d103      	bne.n	800d916 <xQueueGenericSend+0x17a>
 800d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d916:	f001 fedf 	bl	800f6d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d91a:	1d3a      	adds	r2, r7, #4
 800d91c:	f107 0314 	add.w	r3, r7, #20
 800d920:	4611      	mov	r1, r2
 800d922:	4618      	mov	r0, r3
 800d924:	f001 f824 	bl	800e970 <xTaskCheckForTimeOut>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d124      	bne.n	800d978 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d92e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d930:	f000 fb13 	bl	800df5a <prvIsQueueFull>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d018      	beq.n	800d96c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	3310      	adds	r3, #16
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	4611      	mov	r1, r2
 800d942:	4618      	mov	r0, r3
 800d944:	f000 ff4e 	bl	800e7e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d94a:	f000 fa9e 	bl	800de8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d94e:	f000 fd89 	bl	800e464 <xTaskResumeAll>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	f47f af7c 	bne.w	800d852 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <xQueueGenericSend+0x1f0>)
 800d95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	e772      	b.n	800d852 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d96e:	f000 fa8c 	bl	800de8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d972:	f000 fd77 	bl	800e464 <xTaskResumeAll>
 800d976:	e76c      	b.n	800d852 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d97a:	f000 fa86 	bl	800de8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d97e:	f000 fd71 	bl	800e464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d984:	4618      	mov	r0, r3
 800d986:	3738      	adds	r7, #56	; 0x38
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	e000ed04 	.word	0xe000ed04

0800d990 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08e      	sub	sp, #56	; 0x38
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d109      	bne.n	800d9bc <xQueueGenericSendFromISR+0x2c>
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ba:	e7fe      	b.n	800d9ba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <xQueueGenericSendFromISR+0x3a>
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <xQueueGenericSendFromISR+0x3e>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e000      	b.n	800d9d0 <xQueueGenericSendFromISR+0x40>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d109      	bne.n	800d9e8 <xQueueGenericSendFromISR+0x58>
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	623b      	str	r3, [r7, #32]
 800d9e6:	e7fe      	b.n	800d9e6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d103      	bne.n	800d9f6 <xQueueGenericSendFromISR+0x66>
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d101      	bne.n	800d9fa <xQueueGenericSendFromISR+0x6a>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e000      	b.n	800d9fc <xQueueGenericSendFromISR+0x6c>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d109      	bne.n	800da14 <xQueueGenericSendFromISR+0x84>
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	e7fe      	b.n	800da12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da14:	f001 ff0e 	bl	800f834 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800da18:	f3ef 8211 	mrs	r2, BASEPRI
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	61ba      	str	r2, [r7, #24]
 800da2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800da30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d302      	bcc.n	800da46 <xQueueGenericSendFromISR+0xb6>
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b02      	cmp	r3, #2
 800da44:	d12c      	bne.n	800daa0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	68b9      	ldr	r1, [r7, #8]
 800da54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da56:	f000 f988 	bl	800dd6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800da5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da62:	d112      	bne.n	800da8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d016      	beq.n	800da9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	3324      	adds	r3, #36	; 0x24
 800da70:	4618      	mov	r0, r3
 800da72:	f000 ff05 	bl	800e880 <xTaskRemoveFromEventList>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00e      	beq.n	800da9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00b      	beq.n	800da9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2201      	movs	r2, #1
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	e007      	b.n	800da9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da8e:	3301      	adds	r3, #1
 800da90:	b2db      	uxtb	r3, r3
 800da92:	b25a      	sxtb	r2, r3
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800da9a:	2301      	movs	r3, #1
 800da9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800da9e:	e001      	b.n	800daa4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	637b      	str	r3, [r7, #52]	; 0x34
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800daae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3738      	adds	r7, #56	; 0x38
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08c      	sub	sp, #48	; 0x30
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d109      	bne.n	800dae6 <xQueueReceive+0x2e>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	623b      	str	r3, [r7, #32]
 800dae4:	e7fe      	b.n	800dae4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <xQueueReceive+0x3c>
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <xQueueReceive+0x40>
 800daf4:	2301      	movs	r3, #1
 800daf6:	e000      	b.n	800dafa <xQueueReceive+0x42>
 800daf8:	2300      	movs	r3, #0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d109      	bne.n	800db12 <xQueueReceive+0x5a>
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	e7fe      	b.n	800db10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db12:	f001 f86b 	bl	800ebec <xTaskGetSchedulerState>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <xQueueReceive+0x6a>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d101      	bne.n	800db26 <xQueueReceive+0x6e>
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <xQueueReceive+0x70>
 800db26:	2300      	movs	r3, #0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d109      	bne.n	800db40 <xQueueReceive+0x88>
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	61bb      	str	r3, [r7, #24]
 800db3e:	e7fe      	b.n	800db3e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db40:	f001 fd9c 	bl	800f67c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01f      	beq.n	800db90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db54:	f000 f973 	bl	800de3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	1e5a      	subs	r2, r3, #1
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00f      	beq.n	800db88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	3310      	adds	r3, #16
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 fe87 	bl	800e880 <xTaskRemoveFromEventList>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d007      	beq.n	800db88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db78:	4b3c      	ldr	r3, [pc, #240]	; (800dc6c <xQueueReceive+0x1b4>)
 800db7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db88:	f001 fda6 	bl	800f6d8 <vPortExitCritical>
				return pdPASS;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e069      	b.n	800dc64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db96:	f001 fd9f 	bl	800f6d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e062      	b.n	800dc64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dba4:	f107 0310 	add.w	r3, r7, #16
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fecb 	bl	800e944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbb2:	f001 fd91 	bl	800f6d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbb6:	f000 fc47 	bl	800e448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbba:	f001 fd5f 	bl	800f67c <vPortEnterCritical>
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbc4:	b25b      	sxtb	r3, r3
 800dbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbca:	d103      	bne.n	800dbd4 <xQueueReceive+0x11c>
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbda:	b25b      	sxtb	r3, r3
 800dbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe0:	d103      	bne.n	800dbea <xQueueReceive+0x132>
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbea:	f001 fd75 	bl	800f6d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbee:	1d3a      	adds	r2, r7, #4
 800dbf0:	f107 0310 	add.w	r3, r7, #16
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 feba 	bl	800e970 <xTaskCheckForTimeOut>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d123      	bne.n	800dc4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc04:	f000 f993 	bl	800df2e <prvIsQueueEmpty>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d017      	beq.n	800dc3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	3324      	adds	r3, #36	; 0x24
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 fde4 	bl	800e7e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc1e:	f000 f934 	bl	800de8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc22:	f000 fc1f 	bl	800e464 <xTaskResumeAll>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d189      	bne.n	800db40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <xQueueReceive+0x1b4>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	e780      	b.n	800db40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc40:	f000 f923 	bl	800de8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc44:	f000 fc0e 	bl	800e464 <xTaskResumeAll>
 800dc48:	e77a      	b.n	800db40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc4c:	f000 f91d 	bl	800de8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc50:	f000 fc08 	bl	800e464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc56:	f000 f96a 	bl	800df2e <prvIsQueueEmpty>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f43f af6f 	beq.w	800db40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3730      	adds	r7, #48	; 0x30
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	e000ed04 	.word	0xe000ed04

0800dc70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08e      	sub	sp, #56	; 0x38
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d109      	bne.n	800dc9a <xQueueReceiveFromISR+0x2a>
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	623b      	str	r3, [r7, #32]
 800dc98:	e7fe      	b.n	800dc98 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d103      	bne.n	800dca8 <xQueueReceiveFromISR+0x38>
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <xQueueReceiveFromISR+0x3c>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e000      	b.n	800dcae <xQueueReceiveFromISR+0x3e>
 800dcac:	2300      	movs	r3, #0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d109      	bne.n	800dcc6 <xQueueReceiveFromISR+0x56>
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e7fe      	b.n	800dcc4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcc6:	f001 fdb5 	bl	800f834 <vPortValidateInterruptPriority>
	__asm volatile
 800dcca:	f3ef 8211 	mrs	r2, BASEPRI
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	61ba      	str	r2, [r7, #24]
 800dce0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dce2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d02f      	beq.n	800dd52 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcfc:	68b9      	ldr	r1, [r7, #8]
 800dcfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd00:	f000 f89d 	bl	800de3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	1e5a      	subs	r2, r3, #1
 800dd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd14:	d112      	bne.n	800dd3c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d016      	beq.n	800dd4c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	3310      	adds	r3, #16
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 fdac 	bl	800e880 <xTaskRemoveFromEventList>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00e      	beq.n	800dd4c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00b      	beq.n	800dd4c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	e007      	b.n	800dd4c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd40:	3301      	adds	r3, #1
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	b25a      	sxtb	r2, r3
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd50:	e001      	b.n	800dd56 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	637b      	str	r3, [r7, #52]	; 0x34
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3738      	adds	r7, #56	; 0x38
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b086      	sub	sp, #24
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	60f8      	str	r0, [r7, #12]
 800dd72:	60b9      	str	r1, [r7, #8]
 800dd74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd76:	2300      	movs	r3, #0
 800dd78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10d      	bne.n	800dda4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d14d      	bne.n	800de2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 ff47 	bl	800ec28 <xTaskPriorityDisinherit>
 800dd9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	609a      	str	r2, [r3, #8]
 800dda2:	e043      	b.n	800de2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d119      	bne.n	800ddde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6858      	ldr	r0, [r3, #4]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	f002 fa8d 	bl	80102d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc2:	441a      	add	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d32b      	bcc.n	800de2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	605a      	str	r2, [r3, #4]
 800dddc:	e026      	b.n	800de2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	68d8      	ldr	r0, [r3, #12]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde6:	461a      	mov	r2, r3
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	f002 fa73 	bl	80102d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	425b      	negs	r3, r3
 800ddf8:	441a      	add	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	429a      	cmp	r2, r3
 800de08:	d207      	bcs.n	800de1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	689a      	ldr	r2, [r3, #8]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de12:	425b      	negs	r3, r3
 800de14:	441a      	add	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d105      	bne.n	800de2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d002      	beq.n	800de2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	3b01      	subs	r3, #1
 800de2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de34:	697b      	ldr	r3, [r7, #20]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d018      	beq.n	800de82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	441a      	add	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68da      	ldr	r2, [r3, #12]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	429a      	cmp	r2, r3
 800de68:	d303      	bcc.n	800de72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68d9      	ldr	r1, [r3, #12]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7a:	461a      	mov	r2, r3
 800de7c:	6838      	ldr	r0, [r7, #0]
 800de7e:	f002 fa29 	bl	80102d4 <memcpy>
	}
}
 800de82:	bf00      	nop
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b084      	sub	sp, #16
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de92:	f001 fbf3 	bl	800f67c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de9e:	e011      	b.n	800dec4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d012      	beq.n	800dece <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3324      	adds	r3, #36	; 0x24
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fce7 	bl	800e880 <xTaskRemoveFromEventList>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800deb8:	f000 fdba 	bl	800ea30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	3b01      	subs	r3, #1
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dce9      	bgt.n	800dea0 <prvUnlockQueue+0x16>
 800decc:	e000      	b.n	800ded0 <prvUnlockQueue+0x46>
					break;
 800dece:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	22ff      	movs	r2, #255	; 0xff
 800ded4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ded8:	f001 fbfe 	bl	800f6d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dedc:	f001 fbce 	bl	800f67c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dee6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dee8:	e011      	b.n	800df0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d012      	beq.n	800df18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3310      	adds	r3, #16
 800def6:	4618      	mov	r0, r3
 800def8:	f000 fcc2 	bl	800e880 <xTaskRemoveFromEventList>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df02:	f000 fd95 	bl	800ea30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df06:	7bbb      	ldrb	r3, [r7, #14]
 800df08:	3b01      	subs	r3, #1
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df12:	2b00      	cmp	r3, #0
 800df14:	dce9      	bgt.n	800deea <prvUnlockQueue+0x60>
 800df16:	e000      	b.n	800df1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	22ff      	movs	r2, #255	; 0xff
 800df1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df22:	f001 fbd9 	bl	800f6d8 <vPortExitCritical>
}
 800df26:	bf00      	nop
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b084      	sub	sp, #16
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df36:	f001 fba1 	bl	800f67c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d102      	bne.n	800df48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df42:	2301      	movs	r3, #1
 800df44:	60fb      	str	r3, [r7, #12]
 800df46:	e001      	b.n	800df4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df48:	2300      	movs	r3, #0
 800df4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df4c:	f001 fbc4 	bl	800f6d8 <vPortExitCritical>

	return xReturn;
 800df50:	68fb      	ldr	r3, [r7, #12]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df62:	f001 fb8b 	bl	800f67c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6e:	429a      	cmp	r2, r3
 800df70:	d102      	bne.n	800df78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df72:	2301      	movs	r3, #1
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	e001      	b.n	800df7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df7c:	f001 fbac 	bl	800f6d8 <vPortExitCritical>

	return xReturn;
 800df80:	68fb      	ldr	r3, [r7, #12]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
	...

0800df8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df96:	2300      	movs	r3, #0
 800df98:	60fb      	str	r3, [r7, #12]
 800df9a:	e014      	b.n	800dfc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df9c:	4a0e      	ldr	r2, [pc, #56]	; (800dfd8 <vQueueAddToRegistry+0x4c>)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10b      	bne.n	800dfc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfa8:	490b      	ldr	r1, [pc, #44]	; (800dfd8 <vQueueAddToRegistry+0x4c>)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfb2:	4a09      	ldr	r2, [pc, #36]	; (800dfd8 <vQueueAddToRegistry+0x4c>)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	4413      	add	r3, r2
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfbe:	e005      	b.n	800dfcc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b07      	cmp	r3, #7
 800dfca:	d9e7      	bls.n	800df9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfcc:	bf00      	nop
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	20004f80 	.word	0x20004f80

0800dfdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfec:	f001 fb46 	bl	800f67c <vPortEnterCritical>
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dff6:	b25b      	sxtb	r3, r3
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d103      	bne.n	800e006 <vQueueWaitForMessageRestricted+0x2a>
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e00c:	b25b      	sxtb	r3, r3
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e012:	d103      	bne.n	800e01c <vQueueWaitForMessageRestricted+0x40>
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2200      	movs	r2, #0
 800e018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e01c:	f001 fb5c 	bl	800f6d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	2b00      	cmp	r3, #0
 800e026:	d106      	bne.n	800e036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	3324      	adds	r3, #36	; 0x24
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	4618      	mov	r0, r3
 800e032:	f000 fbfb 	bl	800e82c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e036:	6978      	ldr	r0, [r7, #20]
 800e038:	f7ff ff27 	bl	800de8a <prvUnlockQueue>
	}
 800e03c:	bf00      	nop
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08e      	sub	sp, #56	; 0x38
 800e048:	af04      	add	r7, sp, #16
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e054:	2b00      	cmp	r3, #0
 800e056:	d109      	bne.n	800e06c <xTaskCreateStatic+0x28>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	623b      	str	r3, [r7, #32]
 800e06a:	e7fe      	b.n	800e06a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d109      	bne.n	800e086 <xTaskCreateStatic+0x42>
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	61fb      	str	r3, [r7, #28]
 800e084:	e7fe      	b.n	800e084 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e086:	235c      	movs	r3, #92	; 0x5c
 800e088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2b5c      	cmp	r3, #92	; 0x5c
 800e08e:	d009      	beq.n	800e0a4 <xTaskCreateStatic+0x60>
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	61bb      	str	r3, [r7, #24]
 800e0a2:	e7fe      	b.n	800e0a2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e0a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d01e      	beq.n	800e0ea <xTaskCreateStatic+0xa6>
 800e0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d01b      	beq.n	800e0ea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	2202      	movs	r2, #2
 800e0c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9303      	str	r3, [sp, #12]
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	9302      	str	r3, [sp, #8]
 800e0cc:	f107 0314 	add.w	r3, r7, #20
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	68b9      	ldr	r1, [r7, #8]
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f000 f850 	bl	800e182 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0e4:	f000 f8dc 	bl	800e2a0 <prvAddNewTaskToReadyList>
 800e0e8:	e001      	b.n	800e0ee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0ee:	697b      	ldr	r3, [r7, #20]
	}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3728      	adds	r7, #40	; 0x28
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af04      	add	r7, sp, #16
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	4613      	mov	r3, r2
 800e106:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e108:	88fb      	ldrh	r3, [r7, #6]
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f001 fbcf 	bl	800f8b0 <pvPortMalloc>
 800e112:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e11a:	205c      	movs	r0, #92	; 0x5c
 800e11c:	f001 fbc8 	bl	800f8b0 <pvPortMalloc>
 800e120:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	697a      	ldr	r2, [r7, #20]
 800e12c:	631a      	str	r2, [r3, #48]	; 0x30
 800e12e:	e005      	b.n	800e13c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e130:	6978      	ldr	r0, [r7, #20]
 800e132:	f001 fc7f 	bl	800fa34 <vPortFree>
 800e136:	e001      	b.n	800e13c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e138:	2300      	movs	r3, #0
 800e13a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d017      	beq.n	800e172 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e14a:	88fa      	ldrh	r2, [r7, #6]
 800e14c:	2300      	movs	r3, #0
 800e14e:	9303      	str	r3, [sp, #12]
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	9302      	str	r3, [sp, #8]
 800e154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	68b9      	ldr	r1, [r7, #8]
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f000 f80e 	bl	800e182 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e166:	69f8      	ldr	r0, [r7, #28]
 800e168:	f000 f89a 	bl	800e2a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e16c:	2301      	movs	r3, #1
 800e16e:	61bb      	str	r3, [r7, #24]
 800e170:	e002      	b.n	800e178 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295
 800e176:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e178:	69bb      	ldr	r3, [r7, #24]
	}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3720      	adds	r7, #32
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b088      	sub	sp, #32
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
 800e18e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	461a      	mov	r2, r3
 800e19a:	21a5      	movs	r1, #165	; 0xa5
 800e19c:	f002 f8a5 	bl	80102ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4413      	add	r3, r2
 800e1b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	f023 0307 	bic.w	r3, r3, #7
 800e1b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d009      	beq.n	800e1d8 <prvInitialiseNewTask+0x56>
 800e1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	e7fe      	b.n	800e1d6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d01f      	beq.n	800e21e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1de:	2300      	movs	r3, #0
 800e1e0:	61fb      	str	r3, [r7, #28]
 800e1e2:	e012      	b.n	800e20a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	7819      	ldrb	r1, [r3, #0]
 800e1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	3334      	adds	r3, #52	; 0x34
 800e1f4:	460a      	mov	r2, r1
 800e1f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d006      	beq.n	800e212 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	3301      	adds	r3, #1
 800e208:	61fb      	str	r3, [r7, #28]
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	2b0f      	cmp	r3, #15
 800e20e:	d9e9      	bls.n	800e1e4 <prvInitialiseNewTask+0x62>
 800e210:	e000      	b.n	800e214 <prvInitialiseNewTask+0x92>
			{
				break;
 800e212:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e21c:	e003      	b.n	800e226 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	2200      	movs	r2, #0
 800e222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	2b37      	cmp	r3, #55	; 0x37
 800e22a:	d901      	bls.n	800e230 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e22c:	2337      	movs	r3, #55	; 0x37
 800e22e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e234:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e23a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23e:	2200      	movs	r2, #0
 800e240:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	3304      	adds	r3, #4
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff f8d6 	bl	800d3f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	3318      	adds	r3, #24
 800e250:	4618      	mov	r0, r3
 800e252:	f7ff f8d1 	bl	800d3f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e25a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e26a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	2200      	movs	r2, #0
 800e270:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	2200      	movs	r2, #0
 800e276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e27a:	683a      	ldr	r2, [r7, #0]
 800e27c:	68f9      	ldr	r1, [r7, #12]
 800e27e:	69b8      	ldr	r0, [r7, #24]
 800e280:	f001 f8d8 	bl	800f434 <pxPortInitialiseStack>
 800e284:	4602      	mov	r2, r0
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e296:	bf00      	nop
 800e298:	3720      	adds	r7, #32
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
	...

0800e2a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2a8:	f001 f9e8 	bl	800f67c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2ac:	4b2d      	ldr	r3, [pc, #180]	; (800e364 <prvAddNewTaskToReadyList+0xc4>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	4a2c      	ldr	r2, [pc, #176]	; (800e364 <prvAddNewTaskToReadyList+0xc4>)
 800e2b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2b6:	4b2c      	ldr	r3, [pc, #176]	; (800e368 <prvAddNewTaskToReadyList+0xc8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d109      	bne.n	800e2d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2be:	4a2a      	ldr	r2, [pc, #168]	; (800e368 <prvAddNewTaskToReadyList+0xc8>)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2c4:	4b27      	ldr	r3, [pc, #156]	; (800e364 <prvAddNewTaskToReadyList+0xc4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d110      	bne.n	800e2ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2cc:	f000 fbd4 	bl	800ea78 <prvInitialiseTaskLists>
 800e2d0:	e00d      	b.n	800e2ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2d2:	4b26      	ldr	r3, [pc, #152]	; (800e36c <prvAddNewTaskToReadyList+0xcc>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d109      	bne.n	800e2ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2da:	4b23      	ldr	r3, [pc, #140]	; (800e368 <prvAddNewTaskToReadyList+0xc8>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d802      	bhi.n	800e2ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2e8:	4a1f      	ldr	r2, [pc, #124]	; (800e368 <prvAddNewTaskToReadyList+0xc8>)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2ee:	4b20      	ldr	r3, [pc, #128]	; (800e370 <prvAddNewTaskToReadyList+0xd0>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	4a1e      	ldr	r2, [pc, #120]	; (800e370 <prvAddNewTaskToReadyList+0xd0>)
 800e2f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2f8:	4b1d      	ldr	r3, [pc, #116]	; (800e370 <prvAddNewTaskToReadyList+0xd0>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e304:	4b1b      	ldr	r3, [pc, #108]	; (800e374 <prvAddNewTaskToReadyList+0xd4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d903      	bls.n	800e314 <prvAddNewTaskToReadyList+0x74>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e310:	4a18      	ldr	r2, [pc, #96]	; (800e374 <prvAddNewTaskToReadyList+0xd4>)
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4a15      	ldr	r2, [pc, #84]	; (800e378 <prvAddNewTaskToReadyList+0xd8>)
 800e322:	441a      	add	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3304      	adds	r3, #4
 800e328:	4619      	mov	r1, r3
 800e32a:	4610      	mov	r0, r2
 800e32c:	f7ff f871 	bl	800d412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e330:	f001 f9d2 	bl	800f6d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e334:	4b0d      	ldr	r3, [pc, #52]	; (800e36c <prvAddNewTaskToReadyList+0xcc>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00e      	beq.n	800e35a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <prvAddNewTaskToReadyList+0xc8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e346:	429a      	cmp	r2, r3
 800e348:	d207      	bcs.n	800e35a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e34a:	4b0c      	ldr	r3, [pc, #48]	; (800e37c <prvAddNewTaskToReadyList+0xdc>)
 800e34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	20000cfc 	.word	0x20000cfc
 800e368:	20000828 	.word	0x20000828
 800e36c:	20000d08 	.word	0x20000d08
 800e370:	20000d18 	.word	0x20000d18
 800e374:	20000d04 	.word	0x20000d04
 800e378:	2000082c 	.word	0x2000082c
 800e37c:	e000ed04 	.word	0xe000ed04

0800e380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b08a      	sub	sp, #40	; 0x28
 800e384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e38e:	463a      	mov	r2, r7
 800e390:	1d39      	adds	r1, r7, #4
 800e392:	f107 0308 	add.w	r3, r7, #8
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe ffda 	bl	800d350 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	9202      	str	r2, [sp, #8]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	460a      	mov	r2, r1
 800e3ae:	4920      	ldr	r1, [pc, #128]	; (800e430 <vTaskStartScheduler+0xb0>)
 800e3b0:	4820      	ldr	r0, [pc, #128]	; (800e434 <vTaskStartScheduler+0xb4>)
 800e3b2:	f7ff fe47 	bl	800e044 <xTaskCreateStatic>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	4b1f      	ldr	r3, [pc, #124]	; (800e438 <vTaskStartScheduler+0xb8>)
 800e3ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3bc:	4b1e      	ldr	r3, [pc, #120]	; (800e438 <vTaskStartScheduler+0xb8>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	617b      	str	r3, [r7, #20]
 800e3c8:	e001      	b.n	800e3ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d102      	bne.n	800e3da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e3d4:	f000 fce8 	bl	800eda8 <xTimerCreateTimerTask>
 800e3d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d115      	bne.n	800e40c <vTaskStartScheduler+0x8c>
 800e3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <vTaskStartScheduler+0xbc>)
 800e3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3fa:	4b11      	ldr	r3, [pc, #68]	; (800e440 <vTaskStartScheduler+0xc0>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e400:	4b10      	ldr	r3, [pc, #64]	; (800e444 <vTaskStartScheduler+0xc4>)
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e406:	f001 f89b 	bl	800f540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e40a:	e00d      	b.n	800e428 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e412:	d109      	bne.n	800e428 <vTaskStartScheduler+0xa8>
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	e7fe      	b.n	800e426 <vTaskStartScheduler+0xa6>
}
 800e428:	bf00      	nop
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	080104b0 	.word	0x080104b0
 800e434:	0800ea49 	.word	0x0800ea49
 800e438:	20000d20 	.word	0x20000d20
 800e43c:	20000d1c 	.word	0x20000d1c
 800e440:	20000d08 	.word	0x20000d08
 800e444:	20000d00 	.word	0x20000d00

0800e448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e448:	b480      	push	{r7}
 800e44a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e44c:	4b04      	ldr	r3, [pc, #16]	; (800e460 <vTaskSuspendAll+0x18>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3301      	adds	r3, #1
 800e452:	4a03      	ldr	r2, [pc, #12]	; (800e460 <vTaskSuspendAll+0x18>)
 800e454:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e456:	bf00      	nop
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr
 800e460:	20000d24 	.word	0x20000d24

0800e464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e46e:	2300      	movs	r3, #0
 800e470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e472:	4b41      	ldr	r3, [pc, #260]	; (800e578 <xTaskResumeAll+0x114>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d109      	bne.n	800e48e <xTaskResumeAll+0x2a>
 800e47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	e7fe      	b.n	800e48c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e48e:	f001 f8f5 	bl	800f67c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e492:	4b39      	ldr	r3, [pc, #228]	; (800e578 <xTaskResumeAll+0x114>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3b01      	subs	r3, #1
 800e498:	4a37      	ldr	r2, [pc, #220]	; (800e578 <xTaskResumeAll+0x114>)
 800e49a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e49c:	4b36      	ldr	r3, [pc, #216]	; (800e578 <xTaskResumeAll+0x114>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d162      	bne.n	800e56a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4a4:	4b35      	ldr	r3, [pc, #212]	; (800e57c <xTaskResumeAll+0x118>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d05e      	beq.n	800e56a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4ac:	e02f      	b.n	800e50e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ae:	4b34      	ldr	r3, [pc, #208]	; (800e580 <xTaskResumeAll+0x11c>)
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3318      	adds	r3, #24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff f806 	bl	800d4cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff f801 	bl	800d4cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ce:	4b2d      	ldr	r3, [pc, #180]	; (800e584 <xTaskResumeAll+0x120>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d903      	bls.n	800e4de <xTaskResumeAll+0x7a>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4da:	4a2a      	ldr	r2, [pc, #168]	; (800e584 <xTaskResumeAll+0x120>)
 800e4dc:	6013      	str	r3, [r2, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4a27      	ldr	r2, [pc, #156]	; (800e588 <xTaskResumeAll+0x124>)
 800e4ec:	441a      	add	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f7fe ff8c 	bl	800d412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	4b23      	ldr	r3, [pc, #140]	; (800e58c <xTaskResumeAll+0x128>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e504:	429a      	cmp	r2, r3
 800e506:	d302      	bcc.n	800e50e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e508:	4b21      	ldr	r3, [pc, #132]	; (800e590 <xTaskResumeAll+0x12c>)
 800e50a:	2201      	movs	r2, #1
 800e50c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e50e:	4b1c      	ldr	r3, [pc, #112]	; (800e580 <xTaskResumeAll+0x11c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1cb      	bne.n	800e4ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e51c:	f000 fb46 	bl	800ebac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e520:	4b1c      	ldr	r3, [pc, #112]	; (800e594 <xTaskResumeAll+0x130>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d010      	beq.n	800e54e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e52c:	f000 f846 	bl	800e5bc <xTaskIncrementTick>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d002      	beq.n	800e53c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e536:	4b16      	ldr	r3, [pc, #88]	; (800e590 <xTaskResumeAll+0x12c>)
 800e538:	2201      	movs	r2, #1
 800e53a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3b01      	subs	r3, #1
 800e540:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1f1      	bne.n	800e52c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e548:	4b12      	ldr	r3, [pc, #72]	; (800e594 <xTaskResumeAll+0x130>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e54e:	4b10      	ldr	r3, [pc, #64]	; (800e590 <xTaskResumeAll+0x12c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d009      	beq.n	800e56a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e556:	2301      	movs	r3, #1
 800e558:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e55a:	4b0f      	ldr	r3, [pc, #60]	; (800e598 <xTaskResumeAll+0x134>)
 800e55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e56a:	f001 f8b5 	bl	800f6d8 <vPortExitCritical>

	return xAlreadyYielded;
 800e56e:	68bb      	ldr	r3, [r7, #8]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20000d24 	.word	0x20000d24
 800e57c:	20000cfc 	.word	0x20000cfc
 800e580:	20000cbc 	.word	0x20000cbc
 800e584:	20000d04 	.word	0x20000d04
 800e588:	2000082c 	.word	0x2000082c
 800e58c:	20000828 	.word	0x20000828
 800e590:	20000d10 	.word	0x20000d10
 800e594:	20000d0c 	.word	0x20000d0c
 800e598:	e000ed04 	.word	0xe000ed04

0800e59c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <xTaskGetTickCount+0x1c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5a8:	687b      	ldr	r3, [r7, #4]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	20000d00 	.word	0x20000d00

0800e5bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5c6:	4b4e      	ldr	r3, [pc, #312]	; (800e700 <xTaskIncrementTick+0x144>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f040 8088 	bne.w	800e6e0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5d0:	4b4c      	ldr	r3, [pc, #304]	; (800e704 <xTaskIncrementTick+0x148>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5d8:	4a4a      	ldr	r2, [pc, #296]	; (800e704 <xTaskIncrementTick+0x148>)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d11f      	bne.n	800e624 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5e4:	4b48      	ldr	r3, [pc, #288]	; (800e708 <xTaskIncrementTick+0x14c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <xTaskIncrementTick+0x46>
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	e7fe      	b.n	800e600 <xTaskIncrementTick+0x44>
 800e602:	4b41      	ldr	r3, [pc, #260]	; (800e708 <xTaskIncrementTick+0x14c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	4b40      	ldr	r3, [pc, #256]	; (800e70c <xTaskIncrementTick+0x150>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a3e      	ldr	r2, [pc, #248]	; (800e708 <xTaskIncrementTick+0x14c>)
 800e60e:	6013      	str	r3, [r2, #0]
 800e610:	4a3e      	ldr	r2, [pc, #248]	; (800e70c <xTaskIncrementTick+0x150>)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	4b3e      	ldr	r3, [pc, #248]	; (800e710 <xTaskIncrementTick+0x154>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3301      	adds	r3, #1
 800e61c:	4a3c      	ldr	r2, [pc, #240]	; (800e710 <xTaskIncrementTick+0x154>)
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	f000 fac4 	bl	800ebac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e624:	4b3b      	ldr	r3, [pc, #236]	; (800e714 <xTaskIncrementTick+0x158>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	693a      	ldr	r2, [r7, #16]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d349      	bcc.n	800e6c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62e:	4b36      	ldr	r3, [pc, #216]	; (800e708 <xTaskIncrementTick+0x14c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d104      	bne.n	800e642 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e638:	4b36      	ldr	r3, [pc, #216]	; (800e714 <xTaskIncrementTick+0x158>)
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295
 800e63e:	601a      	str	r2, [r3, #0]
					break;
 800e640:	e03f      	b.n	800e6c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e642:	4b31      	ldr	r3, [pc, #196]	; (800e708 <xTaskIncrementTick+0x14c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	429a      	cmp	r2, r3
 800e658:	d203      	bcs.n	800e662 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e65a:	4a2e      	ldr	r2, [pc, #184]	; (800e714 <xTaskIncrementTick+0x158>)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e660:	e02f      	b.n	800e6c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3304      	adds	r3, #4
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe ff30 	bl	800d4cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	3318      	adds	r3, #24
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe ff27 	bl	800d4cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e682:	4b25      	ldr	r3, [pc, #148]	; (800e718 <xTaskIncrementTick+0x15c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	429a      	cmp	r2, r3
 800e688:	d903      	bls.n	800e692 <xTaskIncrementTick+0xd6>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	4a22      	ldr	r2, [pc, #136]	; (800e718 <xTaskIncrementTick+0x15c>)
 800e690:	6013      	str	r3, [r2, #0]
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e696:	4613      	mov	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4a1f      	ldr	r2, [pc, #124]	; (800e71c <xTaskIncrementTick+0x160>)
 800e6a0:	441a      	add	r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f7fe feb2 	bl	800d412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b2:	4b1b      	ldr	r3, [pc, #108]	; (800e720 <xTaskIncrementTick+0x164>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d3b8      	bcc.n	800e62e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6c0:	e7b5      	b.n	800e62e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6c2:	4b17      	ldr	r3, [pc, #92]	; (800e720 <xTaskIncrementTick+0x164>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	4914      	ldr	r1, [pc, #80]	; (800e71c <xTaskIncrementTick+0x160>)
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	440b      	add	r3, r1
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d907      	bls.n	800e6ea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	e004      	b.n	800e6ea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e6e0:	4b10      	ldr	r3, [pc, #64]	; (800e724 <xTaskIncrementTick+0x168>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	4a0f      	ldr	r2, [pc, #60]	; (800e724 <xTaskIncrementTick+0x168>)
 800e6e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <xTaskIncrementTick+0x16c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e6f6:	697b      	ldr	r3, [r7, #20]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20000d24 	.word	0x20000d24
 800e704:	20000d00 	.word	0x20000d00
 800e708:	20000cb4 	.word	0x20000cb4
 800e70c:	20000cb8 	.word	0x20000cb8
 800e710:	20000d14 	.word	0x20000d14
 800e714:	20000d1c 	.word	0x20000d1c
 800e718:	20000d04 	.word	0x20000d04
 800e71c:	2000082c 	.word	0x2000082c
 800e720:	20000828 	.word	0x20000828
 800e724:	20000d0c 	.word	0x20000d0c
 800e728:	20000d10 	.word	0x20000d10

0800e72c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e732:	4b27      	ldr	r3, [pc, #156]	; (800e7d0 <vTaskSwitchContext+0xa4>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d003      	beq.n	800e742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e73a:	4b26      	ldr	r3, [pc, #152]	; (800e7d4 <vTaskSwitchContext+0xa8>)
 800e73c:	2201      	movs	r2, #1
 800e73e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e740:	e040      	b.n	800e7c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <vTaskSwitchContext+0xa8>)
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e748:	4b23      	ldr	r3, [pc, #140]	; (800e7d8 <vTaskSwitchContext+0xac>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	60fb      	str	r3, [r7, #12]
 800e74e:	e00f      	b.n	800e770 <vTaskSwitchContext+0x44>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d109      	bne.n	800e76a <vTaskSwitchContext+0x3e>
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	607b      	str	r3, [r7, #4]
 800e768:	e7fe      	b.n	800e768 <vTaskSwitchContext+0x3c>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	491a      	ldr	r1, [pc, #104]	; (800e7dc <vTaskSwitchContext+0xb0>)
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	440b      	add	r3, r1
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d0e5      	beq.n	800e750 <vTaskSwitchContext+0x24>
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	4613      	mov	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4a13      	ldr	r2, [pc, #76]	; (800e7dc <vTaskSwitchContext+0xb0>)
 800e790:	4413      	add	r3, r2
 800e792:	60bb      	str	r3, [r7, #8]
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	605a      	str	r2, [r3, #4]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d104      	bne.n	800e7b4 <vTaskSwitchContext+0x88>
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	605a      	str	r2, [r3, #4]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	4a09      	ldr	r2, [pc, #36]	; (800e7e0 <vTaskSwitchContext+0xb4>)
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	4a06      	ldr	r2, [pc, #24]	; (800e7d8 <vTaskSwitchContext+0xac>)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6013      	str	r3, [r2, #0]
}
 800e7c4:	bf00      	nop
 800e7c6:	3714      	adds	r7, #20
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	20000d24 	.word	0x20000d24
 800e7d4:	20000d10 	.word	0x20000d10
 800e7d8:	20000d04 	.word	0x20000d04
 800e7dc:	2000082c 	.word	0x2000082c
 800e7e0:	20000828 	.word	0x20000828

0800e7e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d109      	bne.n	800e808 <vTaskPlaceOnEventList+0x24>
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	60fb      	str	r3, [r7, #12]
 800e806:	e7fe      	b.n	800e806 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e808:	4b07      	ldr	r3, [pc, #28]	; (800e828 <vTaskPlaceOnEventList+0x44>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3318      	adds	r3, #24
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7fe fe22 	bl	800d45a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e816:	2101      	movs	r1, #1
 800e818:	6838      	ldr	r0, [r7, #0]
 800e81a:	f000 fa71 	bl	800ed00 <prvAddCurrentTaskToDelayedList>
}
 800e81e:	bf00      	nop
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20000828 	.word	0x20000828

0800e82c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d109      	bne.n	800e852 <vTaskPlaceOnEventListRestricted+0x26>
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	617b      	str	r3, [r7, #20]
 800e850:	e7fe      	b.n	800e850 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e852:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <vTaskPlaceOnEventListRestricted+0x50>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3318      	adds	r3, #24
 800e858:	4619      	mov	r1, r3
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7fe fdd9 	bl	800d412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d002      	beq.n	800e86c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e866:	f04f 33ff 	mov.w	r3, #4294967295
 800e86a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	68b8      	ldr	r0, [r7, #8]
 800e870:	f000 fa46 	bl	800ed00 <prvAddCurrentTaskToDelayedList>
	}
 800e874:	bf00      	nop
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20000828 	.word	0x20000828

0800e880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <xTaskRemoveFromEventList+0x2a>
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	e7fe      	b.n	800e8a8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	3318      	adds	r3, #24
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe fe0c 	bl	800d4cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8b4:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <xTaskRemoveFromEventList+0xac>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d11d      	bne.n	800e8f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fe03 	bl	800d4cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ca:	4b19      	ldr	r3, [pc, #100]	; (800e930 <xTaskRemoveFromEventList+0xb0>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d903      	bls.n	800e8da <xTaskRemoveFromEventList+0x5a>
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d6:	4a16      	ldr	r2, [pc, #88]	; (800e930 <xTaskRemoveFromEventList+0xb0>)
 800e8d8:	6013      	str	r3, [r2, #0]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8de:	4613      	mov	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4a13      	ldr	r2, [pc, #76]	; (800e934 <xTaskRemoveFromEventList+0xb4>)
 800e8e8:	441a      	add	r2, r3
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	f7fe fd8e 	bl	800d412 <vListInsertEnd>
 800e8f6:	e005      	b.n	800e904 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	3318      	adds	r3, #24
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	480e      	ldr	r0, [pc, #56]	; (800e938 <xTaskRemoveFromEventList+0xb8>)
 800e900:	f7fe fd87 	bl	800d412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e908:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <xTaskRemoveFromEventList+0xbc>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90e:	429a      	cmp	r2, r3
 800e910:	d905      	bls.n	800e91e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e912:	2301      	movs	r3, #1
 800e914:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e916:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <xTaskRemoveFromEventList+0xc0>)
 800e918:	2201      	movs	r2, #1
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	e001      	b.n	800e922 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e922:	697b      	ldr	r3, [r7, #20]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20000d24 	.word	0x20000d24
 800e930:	20000d04 	.word	0x20000d04
 800e934:	2000082c 	.word	0x2000082c
 800e938:	20000cbc 	.word	0x20000cbc
 800e93c:	20000828 	.word	0x20000828
 800e940:	20000d10 	.word	0x20000d10

0800e944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <vTaskInternalSetTimeOutState+0x24>)
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <vTaskInternalSetTimeOutState+0x28>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	605a      	str	r2, [r3, #4]
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	20000d14 	.word	0x20000d14
 800e96c:	20000d00 	.word	0x20000d00

0800e970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d109      	bne.n	800e994 <xTaskCheckForTimeOut+0x24>
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	e7fe      	b.n	800e992 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d109      	bne.n	800e9ae <xTaskCheckForTimeOut+0x3e>
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	e7fe      	b.n	800e9ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e9ae:	f000 fe65 	bl	800f67c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ea28 <xTaskCheckForTimeOut+0xb8>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	69ba      	ldr	r2, [r7, #24]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ca:	d102      	bne.n	800e9d2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	e023      	b.n	800ea1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	4b15      	ldr	r3, [pc, #84]	; (800ea2c <xTaskCheckForTimeOut+0xbc>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d007      	beq.n	800e9ee <xTaskCheckForTimeOut+0x7e>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d302      	bcc.n	800e9ee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	61fb      	str	r3, [r7, #28]
 800e9ec:	e015      	b.n	800ea1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d20b      	bcs.n	800ea10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff ff9d 	bl	800e944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	61fb      	str	r3, [r7, #28]
 800ea0e:	e004      	b.n	800ea1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2200      	movs	r2, #0
 800ea14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea16:	2301      	movs	r3, #1
 800ea18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea1a:	f000 fe5d 	bl	800f6d8 <vPortExitCritical>

	return xReturn;
 800ea1e:	69fb      	ldr	r3, [r7, #28]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3720      	adds	r7, #32
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20000d00 	.word	0x20000d00
 800ea2c:	20000d14 	.word	0x20000d14

0800ea30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea30:	b480      	push	{r7}
 800ea32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea34:	4b03      	ldr	r3, [pc, #12]	; (800ea44 <vTaskMissedYield+0x14>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	bf00      	nop
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	20000d10 	.word	0x20000d10

0800ea48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea50:	f000 f852 	bl	800eaf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <prvIdleTask+0x28>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d9f9      	bls.n	800ea50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea5c:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <prvIdleTask+0x2c>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea6c:	e7f0      	b.n	800ea50 <prvIdleTask+0x8>
 800ea6e:	bf00      	nop
 800ea70:	2000082c 	.word	0x2000082c
 800ea74:	e000ed04 	.word	0xe000ed04

0800ea78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea7e:	2300      	movs	r3, #0
 800ea80:	607b      	str	r3, [r7, #4]
 800ea82:	e00c      	b.n	800ea9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	4613      	mov	r3, r2
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4a12      	ldr	r2, [pc, #72]	; (800ead8 <prvInitialiseTaskLists+0x60>)
 800ea90:	4413      	add	r3, r2
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fc90 	bl	800d3b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	607b      	str	r3, [r7, #4]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b37      	cmp	r3, #55	; 0x37
 800eaa2:	d9ef      	bls.n	800ea84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eaa4:	480d      	ldr	r0, [pc, #52]	; (800eadc <prvInitialiseTaskLists+0x64>)
 800eaa6:	f7fe fc87 	bl	800d3b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaaa:	480d      	ldr	r0, [pc, #52]	; (800eae0 <prvInitialiseTaskLists+0x68>)
 800eaac:	f7fe fc84 	bl	800d3b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eab0:	480c      	ldr	r0, [pc, #48]	; (800eae4 <prvInitialiseTaskLists+0x6c>)
 800eab2:	f7fe fc81 	bl	800d3b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eab6:	480c      	ldr	r0, [pc, #48]	; (800eae8 <prvInitialiseTaskLists+0x70>)
 800eab8:	f7fe fc7e 	bl	800d3b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eabc:	480b      	ldr	r0, [pc, #44]	; (800eaec <prvInitialiseTaskLists+0x74>)
 800eabe:	f7fe fc7b 	bl	800d3b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eac2:	4b0b      	ldr	r3, [pc, #44]	; (800eaf0 <prvInitialiseTaskLists+0x78>)
 800eac4:	4a05      	ldr	r2, [pc, #20]	; (800eadc <prvInitialiseTaskLists+0x64>)
 800eac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eac8:	4b0a      	ldr	r3, [pc, #40]	; (800eaf4 <prvInitialiseTaskLists+0x7c>)
 800eaca:	4a05      	ldr	r2, [pc, #20]	; (800eae0 <prvInitialiseTaskLists+0x68>)
 800eacc:	601a      	str	r2, [r3, #0]
}
 800eace:	bf00      	nop
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	2000082c 	.word	0x2000082c
 800eadc:	20000c8c 	.word	0x20000c8c
 800eae0:	20000ca0 	.word	0x20000ca0
 800eae4:	20000cbc 	.word	0x20000cbc
 800eae8:	20000cd0 	.word	0x20000cd0
 800eaec:	20000ce8 	.word	0x20000ce8
 800eaf0:	20000cb4 	.word	0x20000cb4
 800eaf4:	20000cb8 	.word	0x20000cb8

0800eaf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eafe:	e019      	b.n	800eb34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb00:	f000 fdbc 	bl	800f67c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb04:	4b0f      	ldr	r3, [pc, #60]	; (800eb44 <prvCheckTasksWaitingTermination+0x4c>)
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe fcdb 	bl	800d4cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb16:	4b0c      	ldr	r3, [pc, #48]	; (800eb48 <prvCheckTasksWaitingTermination+0x50>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	4a0a      	ldr	r2, [pc, #40]	; (800eb48 <prvCheckTasksWaitingTermination+0x50>)
 800eb1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb20:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <prvCheckTasksWaitingTermination+0x54>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	4a09      	ldr	r2, [pc, #36]	; (800eb4c <prvCheckTasksWaitingTermination+0x54>)
 800eb28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb2a:	f000 fdd5 	bl	800f6d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f80e 	bl	800eb50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb34:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <prvCheckTasksWaitingTermination+0x54>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1e1      	bne.n	800eb00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb3c:	bf00      	nop
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	20000cd0 	.word	0x20000cd0
 800eb48:	20000cfc 	.word	0x20000cfc
 800eb4c:	20000ce4 	.word	0x20000ce4

0800eb50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d108      	bne.n	800eb74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 ff64 	bl	800fa34 <vPortFree>
				vPortFree( pxTCB );
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 ff61 	bl	800fa34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb72:	e017      	b.n	800eba4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d103      	bne.n	800eb86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 ff58 	bl	800fa34 <vPortFree>
	}
 800eb84:	e00e      	b.n	800eba4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d009      	beq.n	800eba4 <prvDeleteTCB+0x54>
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e7fe      	b.n	800eba2 <prvDeleteTCB+0x52>
	}
 800eba4:	bf00      	nop
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebb2:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <prvResetNextTaskUnblockTime+0x38>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d104      	bne.n	800ebc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	; (800ebe8 <prvResetNextTaskUnblockTime+0x3c>)
 800ebbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebc4:	e008      	b.n	800ebd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebc6:	4b07      	ldr	r3, [pc, #28]	; (800ebe4 <prvResetNextTaskUnblockTime+0x38>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	4a04      	ldr	r2, [pc, #16]	; (800ebe8 <prvResetNextTaskUnblockTime+0x3c>)
 800ebd6:	6013      	str	r3, [r2, #0]
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	20000cb4 	.word	0x20000cb4
 800ebe8:	20000d1c 	.word	0x20000d1c

0800ebec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ebf2:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <xTaskGetSchedulerState+0x34>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d102      	bne.n	800ec00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	607b      	str	r3, [r7, #4]
 800ebfe:	e008      	b.n	800ec12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec00:	4b08      	ldr	r3, [pc, #32]	; (800ec24 <xTaskGetSchedulerState+0x38>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec08:	2302      	movs	r3, #2
 800ec0a:	607b      	str	r3, [r7, #4]
 800ec0c:	e001      	b.n	800ec12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec12:	687b      	ldr	r3, [r7, #4]
	}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	20000d08 	.word	0x20000d08
 800ec24:	20000d24 	.word	0x20000d24

0800ec28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d054      	beq.n	800ece8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec3e:	4b2d      	ldr	r3, [pc, #180]	; (800ecf4 <xTaskPriorityDisinherit+0xcc>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d009      	beq.n	800ec5c <xTaskPriorityDisinherit+0x34>
 800ec48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	60fb      	str	r3, [r7, #12]
 800ec5a:	e7fe      	b.n	800ec5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d109      	bne.n	800ec78 <xTaskPriorityDisinherit+0x50>
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	60bb      	str	r3, [r7, #8]
 800ec76:	e7fe      	b.n	800ec76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	1e5a      	subs	r2, r3, #1
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d02c      	beq.n	800ece8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d128      	bne.n	800ece8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	3304      	adds	r3, #4
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe fc16 	bl	800d4cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb8:	4b0f      	ldr	r3, [pc, #60]	; (800ecf8 <xTaskPriorityDisinherit+0xd0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d903      	bls.n	800ecc8 <xTaskPriorityDisinherit+0xa0>
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	4a0c      	ldr	r2, [pc, #48]	; (800ecf8 <xTaskPriorityDisinherit+0xd0>)
 800ecc6:	6013      	str	r3, [r2, #0]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eccc:	4613      	mov	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	4a09      	ldr	r2, [pc, #36]	; (800ecfc <xTaskPriorityDisinherit+0xd4>)
 800ecd6:	441a      	add	r2, r3
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4610      	mov	r0, r2
 800ece0:	f7fe fb97 	bl	800d412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ece4:	2301      	movs	r3, #1
 800ece6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ece8:	697b      	ldr	r3, [r7, #20]
	}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20000828 	.word	0x20000828
 800ecf8:	20000d04 	.word	0x20000d04
 800ecfc:	2000082c 	.word	0x2000082c

0800ed00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed0a:	4b21      	ldr	r3, [pc, #132]	; (800ed90 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed10:	4b20      	ldr	r3, [pc, #128]	; (800ed94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3304      	adds	r3, #4
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe fbd8 	bl	800d4cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d10a      	bne.n	800ed3a <prvAddCurrentTaskToDelayedList+0x3a>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d007      	beq.n	800ed3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3304      	adds	r3, #4
 800ed30:	4619      	mov	r1, r3
 800ed32:	4819      	ldr	r0, [pc, #100]	; (800ed98 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed34:	f7fe fb6d 	bl	800d412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed38:	e026      	b.n	800ed88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4413      	add	r3, r2
 800ed40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed42:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d209      	bcs.n	800ed66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed52:	4b12      	ldr	r3, [pc, #72]	; (800ed9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	4b0f      	ldr	r3, [pc, #60]	; (800ed94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7fe fb7b 	bl	800d45a <vListInsert>
}
 800ed64:	e010      	b.n	800ed88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed66:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4619      	mov	r1, r3
 800ed72:	4610      	mov	r0, r2
 800ed74:	f7fe fb71 	bl	800d45a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed78:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d202      	bcs.n	800ed88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ed82:	4a08      	ldr	r2, [pc, #32]	; (800eda4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	6013      	str	r3, [r2, #0]
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20000d00 	.word	0x20000d00
 800ed94:	20000828 	.word	0x20000828
 800ed98:	20000ce8 	.word	0x20000ce8
 800ed9c:	20000cb8 	.word	0x20000cb8
 800eda0:	20000cb4 	.word	0x20000cb4
 800eda4:	20000d1c 	.word	0x20000d1c

0800eda8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	; 0x28
 800edac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edae:	2300      	movs	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edb2:	f000 faff 	bl	800f3b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edb6:	4b1c      	ldr	r3, [pc, #112]	; (800ee28 <xTimerCreateTimerTask+0x80>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d021      	beq.n	800ee02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edc6:	1d3a      	adds	r2, r7, #4
 800edc8:	f107 0108 	add.w	r1, r7, #8
 800edcc:	f107 030c 	add.w	r3, r7, #12
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fe fad7 	bl	800d384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	9202      	str	r2, [sp, #8]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	2302      	movs	r3, #2
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	2300      	movs	r3, #0
 800ede6:	460a      	mov	r2, r1
 800ede8:	4910      	ldr	r1, [pc, #64]	; (800ee2c <xTimerCreateTimerTask+0x84>)
 800edea:	4811      	ldr	r0, [pc, #68]	; (800ee30 <xTimerCreateTimerTask+0x88>)
 800edec:	f7ff f92a 	bl	800e044 <xTaskCreateStatic>
 800edf0:	4602      	mov	r2, r0
 800edf2:	4b10      	ldr	r3, [pc, #64]	; (800ee34 <xTimerCreateTimerTask+0x8c>)
 800edf4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800edf6:	4b0f      	ldr	r3, [pc, #60]	; (800ee34 <xTimerCreateTimerTask+0x8c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800edfe:	2301      	movs	r3, #1
 800ee00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d109      	bne.n	800ee1c <xTimerCreateTimerTask+0x74>
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	613b      	str	r3, [r7, #16]
 800ee1a:	e7fe      	b.n	800ee1a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ee1c:	697b      	ldr	r3, [r7, #20]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20000d58 	.word	0x20000d58
 800ee2c:	080104b8 	.word	0x080104b8
 800ee30:	0800ef69 	.word	0x0800ef69
 800ee34:	20000d5c 	.word	0x20000d5c

0800ee38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08a      	sub	sp, #40	; 0x28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d109      	bne.n	800ee64 <xTimerGenericCommand+0x2c>
 800ee50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee54:	f383 8811 	msr	BASEPRI, r3
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	623b      	str	r3, [r7, #32]
 800ee62:	e7fe      	b.n	800ee62 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ee64:	4b19      	ldr	r3, [pc, #100]	; (800eecc <xTimerGenericCommand+0x94>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d02a      	beq.n	800eec2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	dc18      	bgt.n	800eeb0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee7e:	f7ff feb5 	bl	800ebec <xTaskGetSchedulerState>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	d109      	bne.n	800ee9c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee88:	4b10      	ldr	r3, [pc, #64]	; (800eecc <xTimerGenericCommand+0x94>)
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	f107 0110 	add.w	r1, r7, #16
 800ee90:	2300      	movs	r3, #0
 800ee92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee94:	f7fe fc82 	bl	800d79c <xQueueGenericSend>
 800ee98:	6278      	str	r0, [r7, #36]	; 0x24
 800ee9a:	e012      	b.n	800eec2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee9c:	4b0b      	ldr	r3, [pc, #44]	; (800eecc <xTimerGenericCommand+0x94>)
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	f107 0110 	add.w	r1, r7, #16
 800eea4:	2300      	movs	r3, #0
 800eea6:	2200      	movs	r2, #0
 800eea8:	f7fe fc78 	bl	800d79c <xQueueGenericSend>
 800eeac:	6278      	str	r0, [r7, #36]	; 0x24
 800eeae:	e008      	b.n	800eec2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eeb0:	4b06      	ldr	r3, [pc, #24]	; (800eecc <xTimerGenericCommand+0x94>)
 800eeb2:	6818      	ldr	r0, [r3, #0]
 800eeb4:	f107 0110 	add.w	r1, r7, #16
 800eeb8:	2300      	movs	r3, #0
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	f7fe fd68 	bl	800d990 <xQueueGenericSendFromISR>
 800eec0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3728      	adds	r7, #40	; 0x28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	20000d58 	.word	0x20000d58

0800eed0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af02      	add	r7, sp, #8
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeda:	4b22      	ldr	r3, [pc, #136]	; (800ef64 <prvProcessExpiredTimer+0x94>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	3304      	adds	r3, #4
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fe faef 	bl	800d4cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eef4:	f003 0304 	and.w	r3, r3, #4
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d021      	beq.n	800ef40 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	699a      	ldr	r2, [r3, #24]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	18d1      	adds	r1, r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	6978      	ldr	r0, [r7, #20]
 800ef0a:	f000 f8d1 	bl	800f0b0 <prvInsertTimerInActiveList>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d01e      	beq.n	800ef52 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef14:	2300      	movs	r3, #0
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	2300      	movs	r3, #0
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	6978      	ldr	r0, [r7, #20]
 800ef20:	f7ff ff8a 	bl	800ee38 <xTimerGenericCommand>
 800ef24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d112      	bne.n	800ef52 <prvProcessExpiredTimer+0x82>
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e7fe      	b.n	800ef3e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef46:	f023 0301 	bic.w	r3, r3, #1
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	6978      	ldr	r0, [r7, #20]
 800ef58:	4798      	blx	r3
}
 800ef5a:	bf00      	nop
 800ef5c:	3718      	adds	r7, #24
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20000d50 	.word	0x20000d50

0800ef68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef70:	f107 0308 	add.w	r3, r7, #8
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 f857 	bl	800f028 <prvGetNextExpireTime>
 800ef7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f000 f803 	bl	800ef8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ef86:	f000 f8d5 	bl	800f134 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef8a:	e7f1      	b.n	800ef70 <prvTimerTask+0x8>

0800ef8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ef96:	f7ff fa57 	bl	800e448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef9a:	f107 0308 	add.w	r3, r7, #8
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f866 	bl	800f070 <prvSampleTimeNow>
 800efa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d130      	bne.n	800f00e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10a      	bne.n	800efc8 <prvProcessTimerOrBlockTask+0x3c>
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d806      	bhi.n	800efc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800efba:	f7ff fa53 	bl	800e464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800efbe:	68f9      	ldr	r1, [r7, #12]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff ff85 	bl	800eed0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800efc6:	e024      	b.n	800f012 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d008      	beq.n	800efe0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800efce:	4b13      	ldr	r3, [pc, #76]	; (800f01c <prvProcessTimerOrBlockTask+0x90>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <prvProcessTimerOrBlockTask+0x50>
 800efd8:	2301      	movs	r3, #1
 800efda:	e000      	b.n	800efde <prvProcessTimerOrBlockTask+0x52>
 800efdc:	2300      	movs	r3, #0
 800efde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800efe0:	4b0f      	ldr	r3, [pc, #60]	; (800f020 <prvProcessTimerOrBlockTask+0x94>)
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	4619      	mov	r1, r3
 800efee:	f7fe fff5 	bl	800dfdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eff2:	f7ff fa37 	bl	800e464 <xTaskResumeAll>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10a      	bne.n	800f012 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800effc:	4b09      	ldr	r3, [pc, #36]	; (800f024 <prvProcessTimerOrBlockTask+0x98>)
 800effe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	f3bf 8f6f 	isb	sy
}
 800f00c:	e001      	b.n	800f012 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f00e:	f7ff fa29 	bl	800e464 <xTaskResumeAll>
}
 800f012:	bf00      	nop
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	20000d54 	.word	0x20000d54
 800f020:	20000d58 	.word	0x20000d58
 800f024:	e000ed04 	.word	0xe000ed04

0800f028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f030:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <prvGetNextExpireTime+0x44>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d101      	bne.n	800f03e <prvGetNextExpireTime+0x16>
 800f03a:	2201      	movs	r2, #1
 800f03c:	e000      	b.n	800f040 <prvGetNextExpireTime+0x18>
 800f03e:	2200      	movs	r2, #0
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d105      	bne.n	800f058 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f04c:	4b07      	ldr	r3, [pc, #28]	; (800f06c <prvGetNextExpireTime+0x44>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	60fb      	str	r3, [r7, #12]
 800f056:	e001      	b.n	800f05c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f058:	2300      	movs	r3, #0
 800f05a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f05c:	68fb      	ldr	r3, [r7, #12]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3714      	adds	r7, #20
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	20000d50 	.word	0x20000d50

0800f070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f078:	f7ff fa90 	bl	800e59c <xTaskGetTickCount>
 800f07c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f07e:	4b0b      	ldr	r3, [pc, #44]	; (800f0ac <prvSampleTimeNow+0x3c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	429a      	cmp	r2, r3
 800f086:	d205      	bcs.n	800f094 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f088:	f000 f930 	bl	800f2ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	e002      	b.n	800f09a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f09a:	4a04      	ldr	r2, [pc, #16]	; (800f0ac <prvSampleTimeNow+0x3c>)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20000d60 	.word	0x20000d60

0800f0b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d812      	bhi.n	800f0fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	1ad2      	subs	r2, r2, r3
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d302      	bcc.n	800f0ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	617b      	str	r3, [r7, #20]
 800f0e8:	e01b      	b.n	800f122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f0ea:	4b10      	ldr	r3, [pc, #64]	; (800f12c <prvInsertTimerInActiveList+0x7c>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	f7fe f9b0 	bl	800d45a <vListInsert>
 800f0fa:	e012      	b.n	800f122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d206      	bcs.n	800f112 <prvInsertTimerInActiveList+0x62>
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d302      	bcc.n	800f112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f10c:	2301      	movs	r3, #1
 800f10e:	617b      	str	r3, [r7, #20]
 800f110:	e007      	b.n	800f122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <prvInsertTimerInActiveList+0x80>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3304      	adds	r3, #4
 800f11a:	4619      	mov	r1, r3
 800f11c:	4610      	mov	r0, r2
 800f11e:	f7fe f99c 	bl	800d45a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f122:	697b      	ldr	r3, [r7, #20]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	20000d54 	.word	0x20000d54
 800f130:	20000d50 	.word	0x20000d50

0800f134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08e      	sub	sp, #56	; 0x38
 800f138:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f13a:	e0c6      	b.n	800f2ca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	da17      	bge.n	800f172 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f142:	1d3b      	adds	r3, r7, #4
 800f144:	3304      	adds	r3, #4
 800f146:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d109      	bne.n	800f162 <prvProcessReceivedCommands+0x2e>
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	61fb      	str	r3, [r7, #28]
 800f160:	e7fe      	b.n	800f160 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f168:	6850      	ldr	r0, [r2, #4]
 800f16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f16c:	6892      	ldr	r2, [r2, #8]
 800f16e:	4611      	mov	r1, r2
 800f170:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f2c0 80a7 	blt.w	800f2c8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d004      	beq.n	800f190 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f188:	3304      	adds	r3, #4
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fe f99e 	bl	800d4cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f190:	463b      	mov	r3, r7
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff ff6c 	bl	800f070 <prvSampleTimeNow>
 800f198:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b09      	cmp	r3, #9
 800f19e:	f200 8094 	bhi.w	800f2ca <prvProcessReceivedCommands+0x196>
 800f1a2:	a201      	add	r2, pc, #4	; (adr r2, 800f1a8 <prvProcessReceivedCommands+0x74>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1d1 	.word	0x0800f1d1
 800f1ac:	0800f1d1 	.word	0x0800f1d1
 800f1b0:	0800f1d1 	.word	0x0800f1d1
 800f1b4:	0800f243 	.word	0x0800f243
 800f1b8:	0800f257 	.word	0x0800f257
 800f1bc:	0800f29f 	.word	0x0800f29f
 800f1c0:	0800f1d1 	.word	0x0800f1d1
 800f1c4:	0800f1d1 	.word	0x0800f1d1
 800f1c8:	0800f243 	.word	0x0800f243
 800f1cc:	0800f257 	.word	0x0800f257
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1d6:	f043 0301 	orr.w	r3, r3, #1
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e6:	699b      	ldr	r3, [r3, #24]
 800f1e8:	18d1      	adds	r1, r2, r3
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1f0:	f7ff ff5e 	bl	800f0b0 <prvInsertTimerInActiveList>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d067      	beq.n	800f2ca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d05c      	beq.n	800f2ca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	441a      	add	r2, r3
 800f218:	2300      	movs	r3, #0
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	2300      	movs	r3, #0
 800f21e:	2100      	movs	r1, #0
 800f220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f222:	f7ff fe09 	bl	800ee38 <xTimerGenericCommand>
 800f226:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d14d      	bne.n	800f2ca <prvProcessReceivedCommands+0x196>
 800f22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f232:	f383 8811 	msr	BASEPRI, r3
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	61bb      	str	r3, [r7, #24]
 800f240:	e7fe      	b.n	800f240 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f248:	f023 0301 	bic.w	r3, r3, #1
 800f24c:	b2da      	uxtb	r2, r3
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f254:	e039      	b.n	800f2ca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f25c:	f043 0301 	orr.w	r3, r3, #1
 800f260:	b2da      	uxtb	r2, r3
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <prvProcessReceivedCommands+0x156>
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	617b      	str	r3, [r7, #20]
 800f288:	e7fe      	b.n	800f288 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	699a      	ldr	r2, [r3, #24]
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	18d1      	adds	r1, r2, r3
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f298:	f7ff ff0a 	bl	800f0b0 <prvInsertTimerInActiveList>
					break;
 800f29c:	e015      	b.n	800f2ca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2a4:	f003 0302 	and.w	r3, r3, #2
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ae:	f000 fbc1 	bl	800fa34 <vPortFree>
 800f2b2:	e00a      	b.n	800f2ca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ba:	f023 0301 	bic.w	r3, r3, #1
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f2c6:	e000      	b.n	800f2ca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f2c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2ca:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <prvProcessReceivedCommands+0x1b4>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	1d39      	adds	r1, r7, #4
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fbf0 	bl	800dab8 <xQueueReceive>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f47f af2e 	bne.w	800f13c <prvProcessReceivedCommands+0x8>
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	3730      	adds	r7, #48	; 0x30
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	20000d58 	.word	0x20000d58

0800f2ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2f2:	e047      	b.n	800f384 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2f4:	4b2d      	ldr	r3, [pc, #180]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2fe:	4b2b      	ldr	r3, [pc, #172]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3304      	adds	r3, #4
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7fe f8dd 	bl	800d4cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6a1b      	ldr	r3, [r3, #32]
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d02d      	beq.n	800f384 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	4413      	add	r3, r2
 800f330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	429a      	cmp	r2, r3
 800f338:	d90e      	bls.n	800f358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f346:	4b19      	ldr	r3, [pc, #100]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3304      	adds	r3, #4
 800f34e:	4619      	mov	r1, r3
 800f350:	4610      	mov	r0, r2
 800f352:	f7fe f882 	bl	800d45a <vListInsert>
 800f356:	e015      	b.n	800f384 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f358:	2300      	movs	r3, #0
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	2300      	movs	r3, #0
 800f35e:	693a      	ldr	r2, [r7, #16]
 800f360:	2100      	movs	r1, #0
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fd68 	bl	800ee38 <xTimerGenericCommand>
 800f368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d109      	bne.n	800f384 <prvSwitchTimerLists+0x98>
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	e7fe      	b.n	800f382 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f384:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1b2      	bne.n	800f2f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f38e:	4b07      	ldr	r3, [pc, #28]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f394:	4b06      	ldr	r3, [pc, #24]	; (800f3b0 <prvSwitchTimerLists+0xc4>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a04      	ldr	r2, [pc, #16]	; (800f3ac <prvSwitchTimerLists+0xc0>)
 800f39a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f39c:	4a04      	ldr	r2, [pc, #16]	; (800f3b0 <prvSwitchTimerLists+0xc4>)
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	6013      	str	r3, [r2, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20000d50 	.word	0x20000d50
 800f3b0:	20000d54 	.word	0x20000d54

0800f3b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f3ba:	f000 f95f 	bl	800f67c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f3be:	4b15      	ldr	r3, [pc, #84]	; (800f414 <prvCheckForValidListAndQueue+0x60>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d120      	bne.n	800f408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f3c6:	4814      	ldr	r0, [pc, #80]	; (800f418 <prvCheckForValidListAndQueue+0x64>)
 800f3c8:	f7fd fff6 	bl	800d3b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f3cc:	4813      	ldr	r0, [pc, #76]	; (800f41c <prvCheckForValidListAndQueue+0x68>)
 800f3ce:	f7fd fff3 	bl	800d3b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f3d2:	4b13      	ldr	r3, [pc, #76]	; (800f420 <prvCheckForValidListAndQueue+0x6c>)
 800f3d4:	4a10      	ldr	r2, [pc, #64]	; (800f418 <prvCheckForValidListAndQueue+0x64>)
 800f3d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f3d8:	4b12      	ldr	r3, [pc, #72]	; (800f424 <prvCheckForValidListAndQueue+0x70>)
 800f3da:	4a10      	ldr	r2, [pc, #64]	; (800f41c <prvCheckForValidListAndQueue+0x68>)
 800f3dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	4b11      	ldr	r3, [pc, #68]	; (800f428 <prvCheckForValidListAndQueue+0x74>)
 800f3e4:	4a11      	ldr	r2, [pc, #68]	; (800f42c <prvCheckForValidListAndQueue+0x78>)
 800f3e6:	2110      	movs	r1, #16
 800f3e8:	200a      	movs	r0, #10
 800f3ea:	f7fe f901 	bl	800d5f0 <xQueueGenericCreateStatic>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	4b08      	ldr	r3, [pc, #32]	; (800f414 <prvCheckForValidListAndQueue+0x60>)
 800f3f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f3f4:	4b07      	ldr	r3, [pc, #28]	; (800f414 <prvCheckForValidListAndQueue+0x60>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d005      	beq.n	800f408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f3fc:	4b05      	ldr	r3, [pc, #20]	; (800f414 <prvCheckForValidListAndQueue+0x60>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	490b      	ldr	r1, [pc, #44]	; (800f430 <prvCheckForValidListAndQueue+0x7c>)
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe fdc2 	bl	800df8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f408:	f000 f966 	bl	800f6d8 <vPortExitCritical>
}
 800f40c:	bf00      	nop
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	20000d58 	.word	0x20000d58
 800f418:	20000d28 	.word	0x20000d28
 800f41c:	20000d3c 	.word	0x20000d3c
 800f420:	20000d50 	.word	0x20000d50
 800f424:	20000d54 	.word	0x20000d54
 800f428:	20000e04 	.word	0x20000e04
 800f42c:	20000d64 	.word	0x20000d64
 800f430:	080104c0 	.word	0x080104c0

0800f434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	3b04      	subs	r3, #4
 800f444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f44c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3b04      	subs	r3, #4
 800f452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f023 0201 	bic.w	r2, r3, #1
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	3b04      	subs	r3, #4
 800f462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f464:	4a0c      	ldr	r2, [pc, #48]	; (800f498 <pxPortInitialiseStack+0x64>)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3b14      	subs	r3, #20
 800f46e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	3b04      	subs	r3, #4
 800f47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f06f 0202 	mvn.w	r2, #2
 800f482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3b20      	subs	r3, #32
 800f488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f48a:	68fb      	ldr	r3, [r7, #12]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3714      	adds	r7, #20
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr
 800f498:	0800f49d 	.word	0x0800f49d

0800f49c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4a6:	4b11      	ldr	r3, [pc, #68]	; (800f4ec <prvTaskExitError+0x50>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ae:	d009      	beq.n	800f4c4 <prvTaskExitError+0x28>
 800f4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	60fb      	str	r3, [r7, #12]
 800f4c2:	e7fe      	b.n	800f4c2 <prvTaskExitError+0x26>
 800f4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c8:	f383 8811 	msr	BASEPRI, r3
 800f4cc:	f3bf 8f6f 	isb	sy
 800f4d0:	f3bf 8f4f 	dsb	sy
 800f4d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4d6:	bf00      	nop
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d0fc      	beq.n	800f4d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f4de:	bf00      	nop
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	20000088 	.word	0x20000088

0800f4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f4f0:	4b07      	ldr	r3, [pc, #28]	; (800f510 <pxCurrentTCBConst2>)
 800f4f2:	6819      	ldr	r1, [r3, #0]
 800f4f4:	6808      	ldr	r0, [r1, #0]
 800f4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4fa:	f380 8809 	msr	PSP, r0
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f04f 0000 	mov.w	r0, #0
 800f506:	f380 8811 	msr	BASEPRI, r0
 800f50a:	4770      	bx	lr
 800f50c:	f3af 8000 	nop.w

0800f510 <pxCurrentTCBConst2>:
 800f510:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f514:	bf00      	nop
 800f516:	bf00      	nop

0800f518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f518:	4808      	ldr	r0, [pc, #32]	; (800f53c <prvPortStartFirstTask+0x24>)
 800f51a:	6800      	ldr	r0, [r0, #0]
 800f51c:	6800      	ldr	r0, [r0, #0]
 800f51e:	f380 8808 	msr	MSP, r0
 800f522:	f04f 0000 	mov.w	r0, #0
 800f526:	f380 8814 	msr	CONTROL, r0
 800f52a:	b662      	cpsie	i
 800f52c:	b661      	cpsie	f
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	df00      	svc	0
 800f538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f53a:	bf00      	nop
 800f53c:	e000ed08 	.word	0xe000ed08

0800f540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f546:	4b44      	ldr	r3, [pc, #272]	; (800f658 <xPortStartScheduler+0x118>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a44      	ldr	r2, [pc, #272]	; (800f65c <xPortStartScheduler+0x11c>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d109      	bne.n	800f564 <xPortStartScheduler+0x24>
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	e7fe      	b.n	800f562 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f564:	4b3c      	ldr	r3, [pc, #240]	; (800f658 <xPortStartScheduler+0x118>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a3d      	ldr	r2, [pc, #244]	; (800f660 <xPortStartScheduler+0x120>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d109      	bne.n	800f582 <xPortStartScheduler+0x42>
 800f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	e7fe      	b.n	800f580 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f582:	4b38      	ldr	r3, [pc, #224]	; (800f664 <xPortStartScheduler+0x124>)
 800f584:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	22ff      	movs	r2, #255	; 0xff
 800f592:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f59c:	78fb      	ldrb	r3, [r7, #3]
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	4b30      	ldr	r3, [pc, #192]	; (800f668 <xPortStartScheduler+0x128>)
 800f5a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5aa:	4b30      	ldr	r3, [pc, #192]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5ac:	2207      	movs	r2, #7
 800f5ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5b0:	e009      	b.n	800f5c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f5b2:	4b2e      	ldr	r3, [pc, #184]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	4a2c      	ldr	r2, [pc, #176]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5c6:	78fb      	ldrb	r3, [r7, #3]
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ce:	2b80      	cmp	r3, #128	; 0x80
 800f5d0:	d0ef      	beq.n	800f5b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f5d2:	4b26      	ldr	r3, [pc, #152]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f1c3 0307 	rsb	r3, r3, #7
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	d009      	beq.n	800f5f2 <xPortStartScheduler+0xb2>
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60bb      	str	r3, [r7, #8]
 800f5f0:	e7fe      	b.n	800f5f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f5f2:	4b1e      	ldr	r3, [pc, #120]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	021b      	lsls	r3, r3, #8
 800f5f8:	4a1c      	ldr	r2, [pc, #112]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f5fc:	4b1b      	ldr	r3, [pc, #108]	; (800f66c <xPortStartScheduler+0x12c>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f604:	4a19      	ldr	r2, [pc, #100]	; (800f66c <xPortStartScheduler+0x12c>)
 800f606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	b2da      	uxtb	r2, r3
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f610:	4b17      	ldr	r3, [pc, #92]	; (800f670 <xPortStartScheduler+0x130>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a16      	ldr	r2, [pc, #88]	; (800f670 <xPortStartScheduler+0x130>)
 800f616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f61a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f61c:	4b14      	ldr	r3, [pc, #80]	; (800f670 <xPortStartScheduler+0x130>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a13      	ldr	r2, [pc, #76]	; (800f670 <xPortStartScheduler+0x130>)
 800f622:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f628:	f000 f8d6 	bl	800f7d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f62c:	4b11      	ldr	r3, [pc, #68]	; (800f674 <xPortStartScheduler+0x134>)
 800f62e:	2200      	movs	r2, #0
 800f630:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f632:	f000 f8f5 	bl	800f820 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f636:	4b10      	ldr	r3, [pc, #64]	; (800f678 <xPortStartScheduler+0x138>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a0f      	ldr	r2, [pc, #60]	; (800f678 <xPortStartScheduler+0x138>)
 800f63c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f640:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f642:	f7ff ff69 	bl	800f518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f646:	f7ff f871 	bl	800e72c <vTaskSwitchContext>
	prvTaskExitError();
 800f64a:	f7ff ff27 	bl	800f49c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	e000ed00 	.word	0xe000ed00
 800f65c:	410fc271 	.word	0x410fc271
 800f660:	410fc270 	.word	0x410fc270
 800f664:	e000e400 	.word	0xe000e400
 800f668:	20000e54 	.word	0x20000e54
 800f66c:	20000e58 	.word	0x20000e58
 800f670:	e000ed20 	.word	0xe000ed20
 800f674:	20000088 	.word	0x20000088
 800f678:	e000ef34 	.word	0xe000ef34

0800f67c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f694:	4b0e      	ldr	r3, [pc, #56]	; (800f6d0 <vPortEnterCritical+0x54>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3301      	adds	r3, #1
 800f69a:	4a0d      	ldr	r2, [pc, #52]	; (800f6d0 <vPortEnterCritical+0x54>)
 800f69c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f69e:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <vPortEnterCritical+0x54>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d10e      	bne.n	800f6c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6a6:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <vPortEnterCritical+0x58>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d009      	beq.n	800f6c4 <vPortEnterCritical+0x48>
 800f6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b4:	f383 8811 	msr	BASEPRI, r3
 800f6b8:	f3bf 8f6f 	isb	sy
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	603b      	str	r3, [r7, #0]
 800f6c2:	e7fe      	b.n	800f6c2 <vPortEnterCritical+0x46>
	}
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr
 800f6d0:	20000088 	.word	0x20000088
 800f6d4:	e000ed04 	.word	0xe000ed04

0800f6d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f6de:	4b11      	ldr	r3, [pc, #68]	; (800f724 <vPortExitCritical+0x4c>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <vPortExitCritical+0x22>
 800f6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	607b      	str	r3, [r7, #4]
 800f6f8:	e7fe      	b.n	800f6f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <vPortExitCritical+0x4c>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	4a08      	ldr	r2, [pc, #32]	; (800f724 <vPortExitCritical+0x4c>)
 800f702:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f704:	4b07      	ldr	r3, [pc, #28]	; (800f724 <vPortExitCritical+0x4c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d104      	bne.n	800f716 <vPortExitCritical+0x3e>
 800f70c:	2300      	movs	r3, #0
 800f70e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f716:	bf00      	nop
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	20000088 	.word	0x20000088
	...

0800f730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f730:	f3ef 8009 	mrs	r0, PSP
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	4b15      	ldr	r3, [pc, #84]	; (800f790 <pxCurrentTCBConst>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	f01e 0f10 	tst.w	lr, #16
 800f740:	bf08      	it	eq
 800f742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74a:	6010      	str	r0, [r2, #0]
 800f74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f754:	f380 8811 	msr	BASEPRI, r0
 800f758:	f3bf 8f4f 	dsb	sy
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f7fe ffe4 	bl	800e72c <vTaskSwitchContext>
 800f764:	f04f 0000 	mov.w	r0, #0
 800f768:	f380 8811 	msr	BASEPRI, r0
 800f76c:	bc09      	pop	{r0, r3}
 800f76e:	6819      	ldr	r1, [r3, #0]
 800f770:	6808      	ldr	r0, [r1, #0]
 800f772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f776:	f01e 0f10 	tst.w	lr, #16
 800f77a:	bf08      	it	eq
 800f77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f780:	f380 8809 	msr	PSP, r0
 800f784:	f3bf 8f6f 	isb	sy
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	f3af 8000 	nop.w

0800f790 <pxCurrentTCBConst>:
 800f790:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f794:	bf00      	nop
 800f796:	bf00      	nop

0800f798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7b0:	f7fe ff04 	bl	800e5bc <xTaskIncrementTick>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7ba:	4b06      	ldr	r3, [pc, #24]	; (800f7d4 <SysTick_Handler+0x3c>)
 800f7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f7cc:	bf00      	nop
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	e000ed04 	.word	0xe000ed04

0800f7d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f7d8:	b480      	push	{r7}
 800f7da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f7dc:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <vPortSetupTimerInterrupt+0x34>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f7e2:	4b0b      	ldr	r3, [pc, #44]	; (800f810 <vPortSetupTimerInterrupt+0x38>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f7e8:	4b0a      	ldr	r3, [pc, #40]	; (800f814 <vPortSetupTimerInterrupt+0x3c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a0a      	ldr	r2, [pc, #40]	; (800f818 <vPortSetupTimerInterrupt+0x40>)
 800f7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f7f2:	099b      	lsrs	r3, r3, #6
 800f7f4:	4a09      	ldr	r2, [pc, #36]	; (800f81c <vPortSetupTimerInterrupt+0x44>)
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f7fa:	4b04      	ldr	r3, [pc, #16]	; (800f80c <vPortSetupTimerInterrupt+0x34>)
 800f7fc:	2207      	movs	r2, #7
 800f7fe:	601a      	str	r2, [r3, #0]
}
 800f800:	bf00      	nop
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	e000e010 	.word	0xe000e010
 800f810:	e000e018 	.word	0xe000e018
 800f814:	2000000c 	.word	0x2000000c
 800f818:	10624dd3 	.word	0x10624dd3
 800f81c:	e000e014 	.word	0xe000e014

0800f820 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f820:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f830 <vPortEnableVFP+0x10>
 800f824:	6801      	ldr	r1, [r0, #0]
 800f826:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f82a:	6001      	str	r1, [r0, #0]
 800f82c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f82e:	bf00      	nop
 800f830:	e000ed88 	.word	0xe000ed88

0800f834 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f83a:	f3ef 8305 	mrs	r3, IPSR
 800f83e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b0f      	cmp	r3, #15
 800f844:	d913      	bls.n	800f86e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f846:	4a16      	ldr	r2, [pc, #88]	; (800f8a0 <vPortValidateInterruptPriority+0x6c>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4413      	add	r3, r2
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f850:	4b14      	ldr	r3, [pc, #80]	; (800f8a4 <vPortValidateInterruptPriority+0x70>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	7afa      	ldrb	r2, [r7, #11]
 800f856:	429a      	cmp	r2, r3
 800f858:	d209      	bcs.n	800f86e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	607b      	str	r3, [r7, #4]
 800f86c:	e7fe      	b.n	800f86c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f86e:	4b0e      	ldr	r3, [pc, #56]	; (800f8a8 <vPortValidateInterruptPriority+0x74>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f876:	4b0d      	ldr	r3, [pc, #52]	; (800f8ac <vPortValidateInterruptPriority+0x78>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d909      	bls.n	800f892 <vPortValidateInterruptPriority+0x5e>
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	603b      	str	r3, [r7, #0]
 800f890:	e7fe      	b.n	800f890 <vPortValidateInterruptPriority+0x5c>
	}
 800f892:	bf00      	nop
 800f894:	3714      	adds	r7, #20
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	e000e3f0 	.word	0xe000e3f0
 800f8a4:	20000e54 	.word	0x20000e54
 800f8a8:	e000ed0c 	.word	0xe000ed0c
 800f8ac:	20000e58 	.word	0x20000e58

0800f8b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b08a      	sub	sp, #40	; 0x28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f8bc:	f7fe fdc4 	bl	800e448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f8c0:	4b57      	ldr	r3, [pc, #348]	; (800fa20 <pvPortMalloc+0x170>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f8c8:	f000 f90c 	bl	800fae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f8cc:	4b55      	ldr	r3, [pc, #340]	; (800fa24 <pvPortMalloc+0x174>)
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f040 808c 	bne.w	800f9f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d01c      	beq.n	800f91a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f8e0:	2208      	movs	r2, #8
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f003 0307 	and.w	r3, r3, #7
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d013      	beq.n	800f91a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f023 0307 	bic.w	r3, r3, #7
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f003 0307 	and.w	r3, r3, #7
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <pvPortMalloc+0x6a>
 800f906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	617b      	str	r3, [r7, #20]
 800f918:	e7fe      	b.n	800f918 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d068      	beq.n	800f9f2 <pvPortMalloc+0x142>
 800f920:	4b41      	ldr	r3, [pc, #260]	; (800fa28 <pvPortMalloc+0x178>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	429a      	cmp	r2, r3
 800f928:	d863      	bhi.n	800f9f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f92a:	4b40      	ldr	r3, [pc, #256]	; (800fa2c <pvPortMalloc+0x17c>)
 800f92c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f92e:	4b3f      	ldr	r3, [pc, #252]	; (800fa2c <pvPortMalloc+0x17c>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f934:	e004      	b.n	800f940 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	429a      	cmp	r2, r3
 800f948:	d903      	bls.n	800f952 <pvPortMalloc+0xa2>
 800f94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1f1      	bne.n	800f936 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f952:	4b33      	ldr	r3, [pc, #204]	; (800fa20 <pvPortMalloc+0x170>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f958:	429a      	cmp	r2, r3
 800f95a:	d04a      	beq.n	800f9f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f95c:	6a3b      	ldr	r3, [r7, #32]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2208      	movs	r2, #8
 800f962:	4413      	add	r3, r2
 800f964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	6a3b      	ldr	r3, [r7, #32]
 800f96c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	685a      	ldr	r2, [r3, #4]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	1ad2      	subs	r2, r2, r3
 800f976:	2308      	movs	r3, #8
 800f978:	005b      	lsls	r3, r3, #1
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d91e      	bls.n	800f9bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4413      	add	r3, r2
 800f984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	f003 0307 	and.w	r3, r3, #7
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d009      	beq.n	800f9a4 <pvPortMalloc+0xf4>
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	613b      	str	r3, [r7, #16]
 800f9a2:	e7fe      	b.n	800f9a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	685a      	ldr	r2, [r3, #4]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	1ad2      	subs	r2, r2, r3
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9b6:	69b8      	ldr	r0, [r7, #24]
 800f9b8:	f000 f8f6 	bl	800fba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9bc:	4b1a      	ldr	r3, [pc, #104]	; (800fa28 <pvPortMalloc+0x178>)
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	1ad3      	subs	r3, r2, r3
 800f9c6:	4a18      	ldr	r2, [pc, #96]	; (800fa28 <pvPortMalloc+0x178>)
 800f9c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9ca:	4b17      	ldr	r3, [pc, #92]	; (800fa28 <pvPortMalloc+0x178>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	4b18      	ldr	r3, [pc, #96]	; (800fa30 <pvPortMalloc+0x180>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d203      	bcs.n	800f9de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9d6:	4b14      	ldr	r3, [pc, #80]	; (800fa28 <pvPortMalloc+0x178>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a15      	ldr	r2, [pc, #84]	; (800fa30 <pvPortMalloc+0x180>)
 800f9dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	4b10      	ldr	r3, [pc, #64]	; (800fa24 <pvPortMalloc+0x174>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	431a      	orrs	r2, r3
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f9f2:	f7fe fd37 	bl	800e464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	f003 0307 	and.w	r3, r3, #7
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <pvPortMalloc+0x164>
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	60fb      	str	r3, [r7, #12]
 800fa12:	e7fe      	b.n	800fa12 <pvPortMalloc+0x162>
	return pvReturn;
 800fa14:	69fb      	ldr	r3, [r7, #28]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3728      	adds	r7, #40	; 0x28
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20004a64 	.word	0x20004a64
 800fa24:	20004a70 	.word	0x20004a70
 800fa28:	20004a68 	.word	0x20004a68
 800fa2c:	20004a5c 	.word	0x20004a5c
 800fa30:	20004a6c 	.word	0x20004a6c

0800fa34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d046      	beq.n	800fad4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fa46:	2308      	movs	r3, #8
 800fa48:	425b      	negs	r3, r3
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	4b20      	ldr	r3, [pc, #128]	; (800fadc <vPortFree+0xa8>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d109      	bne.n	800fa76 <vPortFree+0x42>
 800fa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	e7fe      	b.n	800fa74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d009      	beq.n	800fa92 <vPortFree+0x5e>
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	60bb      	str	r3, [r7, #8]
 800fa90:	e7fe      	b.n	800fa90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	685a      	ldr	r2, [r3, #4]
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <vPortFree+0xa8>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d019      	beq.n	800fad4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d115      	bne.n	800fad4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <vPortFree+0xa8>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	43db      	mvns	r3, r3
 800fab2:	401a      	ands	r2, r3
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fab8:	f7fe fcc6 	bl	800e448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	685a      	ldr	r2, [r3, #4]
 800fac0:	4b07      	ldr	r3, [pc, #28]	; (800fae0 <vPortFree+0xac>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4413      	add	r3, r2
 800fac6:	4a06      	ldr	r2, [pc, #24]	; (800fae0 <vPortFree+0xac>)
 800fac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800faca:	6938      	ldr	r0, [r7, #16]
 800facc:	f000 f86c 	bl	800fba8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fad0:	f7fe fcc8 	bl	800e464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fad4:	bf00      	nop
 800fad6:	3718      	adds	r7, #24
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	20004a70 	.word	0x20004a70
 800fae0:	20004a68 	.word	0x20004a68

0800fae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fae4:	b480      	push	{r7}
 800fae6:	b085      	sub	sp, #20
 800fae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800faea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800faee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800faf0:	4b27      	ldr	r3, [pc, #156]	; (800fb90 <prvHeapInit+0xac>)
 800faf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00c      	beq.n	800fb18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3307      	adds	r3, #7
 800fb02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f023 0307 	bic.w	r3, r3, #7
 800fb0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	4a1f      	ldr	r2, [pc, #124]	; (800fb90 <prvHeapInit+0xac>)
 800fb14:	4413      	add	r3, r2
 800fb16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb1c:	4a1d      	ldr	r2, [pc, #116]	; (800fb94 <prvHeapInit+0xb0>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb22:	4b1c      	ldr	r3, [pc, #112]	; (800fb94 <prvHeapInit+0xb0>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fb30:	2208      	movs	r2, #8
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	1a9b      	subs	r3, r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f023 0307 	bic.w	r3, r3, #7
 800fb3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	4a15      	ldr	r2, [pc, #84]	; (800fb98 <prvHeapInit+0xb4>)
 800fb44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fb46:	4b14      	ldr	r3, [pc, #80]	; (800fb98 <prvHeapInit+0xb4>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb4e:	4b12      	ldr	r3, [pc, #72]	; (800fb98 <prvHeapInit+0xb4>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2200      	movs	r2, #0
 800fb54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	1ad2      	subs	r2, r2, r3
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb64:	4b0c      	ldr	r3, [pc, #48]	; (800fb98 <prvHeapInit+0xb4>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4a0a      	ldr	r2, [pc, #40]	; (800fb9c <prvHeapInit+0xb8>)
 800fb72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	4a09      	ldr	r2, [pc, #36]	; (800fba0 <prvHeapInit+0xbc>)
 800fb7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb7c:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <prvHeapInit+0xc0>)
 800fb7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb82:	601a      	str	r2, [r3, #0]
}
 800fb84:	bf00      	nop
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	20000e5c 	.word	0x20000e5c
 800fb94:	20004a5c 	.word	0x20004a5c
 800fb98:	20004a64 	.word	0x20004a64
 800fb9c:	20004a6c 	.word	0x20004a6c
 800fba0:	20004a68 	.word	0x20004a68
 800fba4:	20004a70 	.word	0x20004a70

0800fba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fbb0:	4b28      	ldr	r3, [pc, #160]	; (800fc54 <prvInsertBlockIntoFreeList+0xac>)
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e002      	b.n	800fbbc <prvInsertBlockIntoFreeList+0x14>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	60fb      	str	r3, [r7, #12]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d8f7      	bhi.n	800fbb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	68ba      	ldr	r2, [r7, #8]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d108      	bne.n	800fbea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	441a      	add	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	441a      	add	r2, r3
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d118      	bne.n	800fc30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	4b15      	ldr	r3, [pc, #84]	; (800fc58 <prvInsertBlockIntoFreeList+0xb0>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d00d      	beq.n	800fc26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	685a      	ldr	r2, [r3, #4]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	441a      	add	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	e008      	b.n	800fc38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc26:	4b0c      	ldr	r3, [pc, #48]	; (800fc58 <prvInsertBlockIntoFreeList+0xb0>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	e003      	b.n	800fc38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d002      	beq.n	800fc46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc46:	bf00      	nop
 800fc48:	3714      	adds	r7, #20
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	20004a5c 	.word	0x20004a5c
 800fc58:	20004a64 	.word	0x20004a64

0800fc5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fc60:	2201      	movs	r2, #1
 800fc62:	490e      	ldr	r1, [pc, #56]	; (800fc9c <MX_USB_HOST_Init+0x40>)
 800fc64:	480e      	ldr	r0, [pc, #56]	; (800fca0 <MX_USB_HOST_Init+0x44>)
 800fc66:	f7fb fb65 	bl	800b334 <USBH_Init>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d001      	beq.n	800fc74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fc70:	f7f1 fa82 	bl	8001178 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fc74:	490b      	ldr	r1, [pc, #44]	; (800fca4 <MX_USB_HOST_Init+0x48>)
 800fc76:	480a      	ldr	r0, [pc, #40]	; (800fca0 <MX_USB_HOST_Init+0x44>)
 800fc78:	f7fb fc0c 	bl	800b494 <USBH_RegisterClass>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d001      	beq.n	800fc86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fc82:	f7f1 fa79 	bl	8001178 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fc86:	4806      	ldr	r0, [pc, #24]	; (800fca0 <MX_USB_HOST_Init+0x44>)
 800fc88:	f7fb fc90 	bl	800b5ac <USBH_Start>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fc92:	f7f1 fa71 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fc96:	bf00      	nop
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	0800fca9 	.word	0x0800fca9
 800fca0:	20004fc0 	.word	0x20004fc0
 800fca4:	20000068 	.word	0x20000068

0800fca8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fcb4:	78fb      	ldrb	r3, [r7, #3]
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	d819      	bhi.n	800fcf0 <USBH_UserProcess+0x48>
 800fcbc:	a201      	add	r2, pc, #4	; (adr r2, 800fcc4 <USBH_UserProcess+0x1c>)
 800fcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc2:	bf00      	nop
 800fcc4:	0800fcf1 	.word	0x0800fcf1
 800fcc8:	0800fce1 	.word	0x0800fce1
 800fccc:	0800fcf1 	.word	0x0800fcf1
 800fcd0:	0800fce9 	.word	0x0800fce9
 800fcd4:	0800fcd9 	.word	0x0800fcd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fcd8:	4b09      	ldr	r3, [pc, #36]	; (800fd00 <USBH_UserProcess+0x58>)
 800fcda:	2203      	movs	r2, #3
 800fcdc:	701a      	strb	r2, [r3, #0]
  break;
 800fcde:	e008      	b.n	800fcf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fce0:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <USBH_UserProcess+0x58>)
 800fce2:	2202      	movs	r2, #2
 800fce4:	701a      	strb	r2, [r3, #0]
  break;
 800fce6:	e004      	b.n	800fcf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fce8:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <USBH_UserProcess+0x58>)
 800fcea:	2201      	movs	r2, #1
 800fcec:	701a      	strb	r2, [r3, #0]
  break;
 800fcee:	e000      	b.n	800fcf2 <USBH_UserProcess+0x4a>

  default:
  break;
 800fcf0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fcf2:	bf00      	nop
 800fcf4:	370c      	adds	r7, #12
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	20004a74 	.word	0x20004a74

0800fd04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08a      	sub	sp, #40	; 0x28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd0c:	f107 0314 	add.w	r3, r7, #20
 800fd10:	2200      	movs	r2, #0
 800fd12:	601a      	str	r2, [r3, #0]
 800fd14:	605a      	str	r2, [r3, #4]
 800fd16:	609a      	str	r2, [r3, #8]
 800fd18:	60da      	str	r2, [r3, #12]
 800fd1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd24:	d147      	bne.n	800fdb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd26:	2300      	movs	r3, #0
 800fd28:	613b      	str	r3, [r7, #16]
 800fd2a:	4b25      	ldr	r3, [pc, #148]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2e:	4a24      	ldr	r2, [pc, #144]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd30:	f043 0301 	orr.w	r3, r3, #1
 800fd34:	6313      	str	r3, [r2, #48]	; 0x30
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	613b      	str	r3, [r7, #16]
 800fd40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800fd42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800fd50:	f107 0314 	add.w	r3, r7, #20
 800fd54:	4619      	mov	r1, r3
 800fd56:	481b      	ldr	r0, [pc, #108]	; (800fdc4 <HAL_HCD_MspInit+0xc0>)
 800fd58:	f7f4 f8ea 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800fd5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fd60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd62:	2302      	movs	r3, #2
 800fd64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd6e:	230a      	movs	r3, #10
 800fd70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd72:	f107 0314 	add.w	r3, r7, #20
 800fd76:	4619      	mov	r1, r3
 800fd78:	4812      	ldr	r0, [pc, #72]	; (800fdc4 <HAL_HCD_MspInit+0xc0>)
 800fd7a:	f7f4 f8d9 	bl	8003f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd7e:	4b10      	ldr	r3, [pc, #64]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd82:	4a0f      	ldr	r2, [pc, #60]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd88:	6353      	str	r3, [r2, #52]	; 0x34
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	60fb      	str	r3, [r7, #12]
 800fd8e:	4b0c      	ldr	r3, [pc, #48]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd92:	4a0b      	ldr	r2, [pc, #44]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd98:	6453      	str	r3, [r2, #68]	; 0x44
 800fd9a:	4b09      	ldr	r3, [pc, #36]	; (800fdc0 <HAL_HCD_MspInit+0xbc>)
 800fd9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fda6:	2200      	movs	r2, #0
 800fda8:	2100      	movs	r1, #0
 800fdaa:	2043      	movs	r0, #67	; 0x43
 800fdac:	f7f3 fd9a 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fdb0:	2043      	movs	r0, #67	; 0x43
 800fdb2:	f7f3 fdb3 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fdb6:	bf00      	nop
 800fdb8:	3728      	adds	r7, #40	; 0x28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	40023800 	.word	0x40023800
 800fdc4:	40020000 	.word	0x40020000

0800fdc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fc f895 	bl	800bf06 <USBH_LL_IncTimer>
}
 800fddc:	bf00      	nop
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fc f8d9 	bl	800bfaa <USBH_LL_Connect>
}
 800fdf8:	bf00      	nop
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fc f8ee 	bl	800bff0 <USBH_LL_Disconnect>
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fc f925 	bl	800c082 <USBH_LL_NotifyURBChange>
#endif
}
 800fe38:	bf00      	nop
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fc f883 	bl	800bf5a <USBH_LL_PortEnabled>
}
 800fe54:	bf00      	nop
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fc f88f 	bl	800bf8e <USBH_LL_PortDisabled>
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d12a      	bne.n	800fee0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fe8a:	4a18      	ldr	r2, [pc, #96]	; (800feec <USBH_LL_Init+0x74>)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a15      	ldr	r2, [pc, #84]	; (800feec <USBH_LL_Init+0x74>)
 800fe96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe9a:	4b14      	ldr	r3, [pc, #80]	; (800feec <USBH_LL_Init+0x74>)
 800fe9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fea0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800fea2:	4b12      	ldr	r3, [pc, #72]	; (800feec <USBH_LL_Init+0x74>)
 800fea4:	220c      	movs	r2, #12
 800fea6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fea8:	4b10      	ldr	r3, [pc, #64]	; (800feec <USBH_LL_Init+0x74>)
 800feaa:	2201      	movs	r2, #1
 800feac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800feae:	4b0f      	ldr	r3, [pc, #60]	; (800feec <USBH_LL_Init+0x74>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800feb4:	4b0d      	ldr	r3, [pc, #52]	; (800feec <USBH_LL_Init+0x74>)
 800feb6:	2202      	movs	r2, #2
 800feb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800feba:	4b0c      	ldr	r3, [pc, #48]	; (800feec <USBH_LL_Init+0x74>)
 800febc:	2200      	movs	r2, #0
 800febe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fec0:	480a      	ldr	r0, [pc, #40]	; (800feec <USBH_LL_Init+0x74>)
 800fec2:	f7f4 fa1c 	bl	80042fe <HAL_HCD_Init>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fecc:	f7f1 f954 	bl	8001178 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fed0:	4806      	ldr	r0, [pc, #24]	; (800feec <USBH_LL_Init+0x74>)
 800fed2:	f7f4 fe1f 	bl	8004b14 <HAL_HCD_GetCurrentFrame>
 800fed6:	4603      	mov	r3, r0
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7fc f804 	bl	800bee8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	200053a4 	.word	0x200053a4

0800fef0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fefc:	2300      	movs	r3, #0
 800fefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7f4 fd8c 	bl	8004a24 <HAL_HCD_Start>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff10:	7bfb      	ldrb	r3, [r7, #15]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f000 f95c 	bl	80101d0 <USBH_Get_USB_Status>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7f4 fd94 	bl	8004a6a <HAL_HCD_Stop>
 800ff42:	4603      	mov	r3, r0
 800ff44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff46:	7bfb      	ldrb	r3, [r7, #15]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 f941 	bl	80101d0 <USBH_Get_USB_Status>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3710      	adds	r7, #16
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ff64:	2301      	movs	r3, #1
 800ff66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f4 fdde 	bl	8004b30 <HAL_HCD_GetCurrentSpeed>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d007      	beq.n	800ff8a <USBH_LL_GetSpeed+0x2e>
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d302      	bcc.n	800ff84 <USBH_LL_GetSpeed+0x28>
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d006      	beq.n	800ff90 <USBH_LL_GetSpeed+0x34>
 800ff82:	e008      	b.n	800ff96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ff84:	2300      	movs	r3, #0
 800ff86:	73fb      	strb	r3, [r7, #15]
    break;
 800ff88:	e008      	b.n	800ff9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff8e:	e005      	b.n	800ff9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ff90:	2302      	movs	r3, #2
 800ff92:	73fb      	strb	r3, [r7, #15]
    break;
 800ff94:	e002      	b.n	800ff9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ff96:	2301      	movs	r3, #1
 800ff98:	73fb      	strb	r3, [r7, #15]
    break;
 800ff9a:	bf00      	nop
  }
  return  speed;
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f4 fd71 	bl	8004aa4 <HAL_HCD_ResetPort>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffc6:	7bfb      	ldrb	r3, [r7, #15]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 f901 	bl	80101d0 <USBH_Get_USB_Status>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffee:	78fa      	ldrb	r2, [r7, #3]
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f4 fd79 	bl	8004aea <HAL_HCD_HC_GetXferCount>
 800fff8:	4603      	mov	r3, r0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010002:	b590      	push	{r4, r7, lr}
 8010004:	b089      	sub	sp, #36	; 0x24
 8010006:	af04      	add	r7, sp, #16
 8010008:	6078      	str	r0, [r7, #4]
 801000a:	4608      	mov	r0, r1
 801000c:	4611      	mov	r1, r2
 801000e:	461a      	mov	r2, r3
 8010010:	4603      	mov	r3, r0
 8010012:	70fb      	strb	r3, [r7, #3]
 8010014:	460b      	mov	r3, r1
 8010016:	70bb      	strb	r3, [r7, #2]
 8010018:	4613      	mov	r3, r2
 801001a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801002a:	787c      	ldrb	r4, [r7, #1]
 801002c:	78ba      	ldrb	r2, [r7, #2]
 801002e:	78f9      	ldrb	r1, [r7, #3]
 8010030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010032:	9302      	str	r3, [sp, #8]
 8010034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	4623      	mov	r3, r4
 8010042:	f7f4 f9be 	bl	80043c2 <HAL_HCD_HC_Init>
 8010046:	4603      	mov	r3, r0
 8010048:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f8bf 	bl	80101d0 <USBH_Get_USB_Status>
 8010052:	4603      	mov	r3, r0
 8010054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010056:	7bbb      	ldrb	r3, [r7, #14]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3714      	adds	r7, #20
 801005c:	46bd      	mov	sp, r7
 801005e:	bd90      	pop	{r4, r7, pc}

08010060 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	460b      	mov	r3, r1
 801006a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801007a:	78fa      	ldrb	r2, [r7, #3]
 801007c:	4611      	mov	r1, r2
 801007e:	4618      	mov	r0, r3
 8010080:	f7f4 fa37 	bl	80044f2 <HAL_HCD_HC_Halt>
 8010084:	4603      	mov	r3, r0
 8010086:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f8a0 	bl	80101d0 <USBH_Get_USB_Status>
 8010090:	4603      	mov	r3, r0
 8010092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010094:	7bbb      	ldrb	r3, [r7, #14]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801009e:	b590      	push	{r4, r7, lr}
 80100a0:	b089      	sub	sp, #36	; 0x24
 80100a2:	af04      	add	r7, sp, #16
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	4608      	mov	r0, r1
 80100a8:	4611      	mov	r1, r2
 80100aa:	461a      	mov	r2, r3
 80100ac:	4603      	mov	r3, r0
 80100ae:	70fb      	strb	r3, [r7, #3]
 80100b0:	460b      	mov	r3, r1
 80100b2:	70bb      	strb	r3, [r7, #2]
 80100b4:	4613      	mov	r3, r2
 80100b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100bc:	2300      	movs	r3, #0
 80100be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100c6:	787c      	ldrb	r4, [r7, #1]
 80100c8:	78ba      	ldrb	r2, [r7, #2]
 80100ca:	78f9      	ldrb	r1, [r7, #3]
 80100cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100d0:	9303      	str	r3, [sp, #12]
 80100d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100d4:	9302      	str	r3, [sp, #8]
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	4623      	mov	r3, r4
 80100e2:	f7f4 fa29 	bl	8004538 <HAL_HCD_HC_SubmitRequest>
 80100e6:	4603      	mov	r3, r0
 80100e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80100ea:	7bfb      	ldrb	r3, [r7, #15]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 f86f 	bl	80101d0 <USBH_Get_USB_Status>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3714      	adds	r7, #20
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd90      	pop	{r4, r7, pc}

08010100 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	460b      	mov	r3, r1
 801010a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010112:	78fa      	ldrb	r2, [r7, #3]
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7f4 fcd2 	bl	8004ac0 <HAL_HCD_HC_GetURBState>
 801011c:	4603      	mov	r3, r0
}
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	460b      	mov	r3, r1
 8010130:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010138:	2b01      	cmp	r3, #1
 801013a:	d103      	bne.n	8010144 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801013c:	78fb      	ldrb	r3, [r7, #3]
 801013e:	4618      	mov	r0, r3
 8010140:	f000 f872 	bl	8010228 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010144:	20c8      	movs	r0, #200	; 0xc8
 8010146:	f7f3 f881 	bl	800324c <HAL_Delay>
  return USBH_OK;
 801014a:	2300      	movs	r3, #0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	460b      	mov	r3, r1
 801015e:	70fb      	strb	r3, [r7, #3]
 8010160:	4613      	mov	r3, r2
 8010162:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801016a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801016c:	78fa      	ldrb	r2, [r7, #3]
 801016e:	68f9      	ldr	r1, [r7, #12]
 8010170:	4613      	mov	r3, r2
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	4413      	add	r3, r2
 8010176:	00db      	lsls	r3, r3, #3
 8010178:	440b      	add	r3, r1
 801017a:	333b      	adds	r3, #59	; 0x3b
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010182:	78fa      	ldrb	r2, [r7, #3]
 8010184:	68f9      	ldr	r1, [r7, #12]
 8010186:	4613      	mov	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	4413      	add	r3, r2
 801018c:	00db      	lsls	r3, r3, #3
 801018e:	440b      	add	r3, r1
 8010190:	3350      	adds	r3, #80	; 0x50
 8010192:	78ba      	ldrb	r2, [r7, #2]
 8010194:	701a      	strb	r2, [r3, #0]
 8010196:	e009      	b.n	80101ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010198:	78fa      	ldrb	r2, [r7, #3]
 801019a:	68f9      	ldr	r1, [r7, #12]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	3351      	adds	r3, #81	; 0x51
 80101a8:	78ba      	ldrb	r2, [r7, #2]
 80101aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7f3 f842 	bl	800324c <HAL_Delay>
}
 80101c8:	bf00      	nop
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	4603      	mov	r3, r0
 80101d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101da:	2300      	movs	r3, #0
 80101dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	d817      	bhi.n	8010214 <USBH_Get_USB_Status+0x44>
 80101e4:	a201      	add	r2, pc, #4	; (adr r2, 80101ec <USBH_Get_USB_Status+0x1c>)
 80101e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ea:	bf00      	nop
 80101ec:	080101fd 	.word	0x080101fd
 80101f0:	08010203 	.word	0x08010203
 80101f4:	08010209 	.word	0x08010209
 80101f8:	0801020f 	.word	0x0801020f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010200:	e00b      	b.n	801021a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010202:	2302      	movs	r3, #2
 8010204:	73fb      	strb	r3, [r7, #15]
    break;
 8010206:	e008      	b.n	801021a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010208:	2301      	movs	r3, #1
 801020a:	73fb      	strb	r3, [r7, #15]
    break;
 801020c:	e005      	b.n	801021a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801020e:	2302      	movs	r3, #2
 8010210:	73fb      	strb	r3, [r7, #15]
    break;
 8010212:	e002      	b.n	801021a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010214:	2302      	movs	r3, #2
 8010216:	73fb      	strb	r3, [r7, #15]
    break;
 8010218:	bf00      	nop
  }
  return usb_status;
 801021a:	7bfb      	ldrb	r3, [r7, #15]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3714      	adds	r7, #20
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801023c:	2301      	movs	r3, #1
 801023e:	73fb      	strb	r3, [r7, #15]
 8010240:	e001      	b.n	8010246 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010242:	2300      	movs	r3, #0
 8010244:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8010246:	7bfb      	ldrb	r3, [r7, #15]
 8010248:	461a      	mov	r2, r3
 801024a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801024e:	4803      	ldr	r0, [pc, #12]	; (801025c <MX_DriverVbusFS+0x34>)
 8010250:	f7f4 f818 	bl	8004284 <HAL_GPIO_WritePin>
}
 8010254:	bf00      	nop
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	40021800 	.word	0x40021800

08010260 <__errno>:
 8010260:	4b01      	ldr	r3, [pc, #4]	; (8010268 <__errno+0x8>)
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	2000008c 	.word	0x2000008c

0801026c <__libc_init_array>:
 801026c:	b570      	push	{r4, r5, r6, lr}
 801026e:	4e0d      	ldr	r6, [pc, #52]	; (80102a4 <__libc_init_array+0x38>)
 8010270:	4c0d      	ldr	r4, [pc, #52]	; (80102a8 <__libc_init_array+0x3c>)
 8010272:	1ba4      	subs	r4, r4, r6
 8010274:	10a4      	asrs	r4, r4, #2
 8010276:	2500      	movs	r5, #0
 8010278:	42a5      	cmp	r5, r4
 801027a:	d109      	bne.n	8010290 <__libc_init_array+0x24>
 801027c:	4e0b      	ldr	r6, [pc, #44]	; (80102ac <__libc_init_array+0x40>)
 801027e:	4c0c      	ldr	r4, [pc, #48]	; (80102b0 <__libc_init_array+0x44>)
 8010280:	f000 f8f6 	bl	8010470 <_init>
 8010284:	1ba4      	subs	r4, r4, r6
 8010286:	10a4      	asrs	r4, r4, #2
 8010288:	2500      	movs	r5, #0
 801028a:	42a5      	cmp	r5, r4
 801028c:	d105      	bne.n	801029a <__libc_init_array+0x2e>
 801028e:	bd70      	pop	{r4, r5, r6, pc}
 8010290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010294:	4798      	blx	r3
 8010296:	3501      	adds	r5, #1
 8010298:	e7ee      	b.n	8010278 <__libc_init_array+0xc>
 801029a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801029e:	4798      	blx	r3
 80102a0:	3501      	adds	r5, #1
 80102a2:	e7f2      	b.n	801028a <__libc_init_array+0x1e>
 80102a4:	0801259c 	.word	0x0801259c
 80102a8:	0801259c 	.word	0x0801259c
 80102ac:	0801259c 	.word	0x0801259c
 80102b0:	080125a0 	.word	0x080125a0

080102b4 <malloc>:
 80102b4:	4b02      	ldr	r3, [pc, #8]	; (80102c0 <malloc+0xc>)
 80102b6:	4601      	mov	r1, r0
 80102b8:	6818      	ldr	r0, [r3, #0]
 80102ba:	f000 b86d 	b.w	8010398 <_malloc_r>
 80102be:	bf00      	nop
 80102c0:	2000008c 	.word	0x2000008c

080102c4 <free>:
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <free+0xc>)
 80102c6:	4601      	mov	r1, r0
 80102c8:	6818      	ldr	r0, [r3, #0]
 80102ca:	f000 b817 	b.w	80102fc <_free_r>
 80102ce:	bf00      	nop
 80102d0:	2000008c 	.word	0x2000008c

080102d4 <memcpy>:
 80102d4:	b510      	push	{r4, lr}
 80102d6:	1e43      	subs	r3, r0, #1
 80102d8:	440a      	add	r2, r1
 80102da:	4291      	cmp	r1, r2
 80102dc:	d100      	bne.n	80102e0 <memcpy+0xc>
 80102de:	bd10      	pop	{r4, pc}
 80102e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e8:	e7f7      	b.n	80102da <memcpy+0x6>

080102ea <memset>:
 80102ea:	4402      	add	r2, r0
 80102ec:	4603      	mov	r3, r0
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d100      	bne.n	80102f4 <memset+0xa>
 80102f2:	4770      	bx	lr
 80102f4:	f803 1b01 	strb.w	r1, [r3], #1
 80102f8:	e7f9      	b.n	80102ee <memset+0x4>
	...

080102fc <_free_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4605      	mov	r5, r0
 8010300:	2900      	cmp	r1, #0
 8010302:	d045      	beq.n	8010390 <_free_r+0x94>
 8010304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010308:	1f0c      	subs	r4, r1, #4
 801030a:	2b00      	cmp	r3, #0
 801030c:	bfb8      	it	lt
 801030e:	18e4      	addlt	r4, r4, r3
 8010310:	f000 f8ac 	bl	801046c <__malloc_lock>
 8010314:	4a1f      	ldr	r2, [pc, #124]	; (8010394 <_free_r+0x98>)
 8010316:	6813      	ldr	r3, [r2, #0]
 8010318:	4610      	mov	r0, r2
 801031a:	b933      	cbnz	r3, 801032a <_free_r+0x2e>
 801031c:	6063      	str	r3, [r4, #4]
 801031e:	6014      	str	r4, [r2, #0]
 8010320:	4628      	mov	r0, r5
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f000 b8a2 	b.w	801046e <__malloc_unlock>
 801032a:	42a3      	cmp	r3, r4
 801032c:	d90c      	bls.n	8010348 <_free_r+0x4c>
 801032e:	6821      	ldr	r1, [r4, #0]
 8010330:	1862      	adds	r2, r4, r1
 8010332:	4293      	cmp	r3, r2
 8010334:	bf04      	itt	eq
 8010336:	681a      	ldreq	r2, [r3, #0]
 8010338:	685b      	ldreq	r3, [r3, #4]
 801033a:	6063      	str	r3, [r4, #4]
 801033c:	bf04      	itt	eq
 801033e:	1852      	addeq	r2, r2, r1
 8010340:	6022      	streq	r2, [r4, #0]
 8010342:	6004      	str	r4, [r0, #0]
 8010344:	e7ec      	b.n	8010320 <_free_r+0x24>
 8010346:	4613      	mov	r3, r2
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	b10a      	cbz	r2, 8010350 <_free_r+0x54>
 801034c:	42a2      	cmp	r2, r4
 801034e:	d9fa      	bls.n	8010346 <_free_r+0x4a>
 8010350:	6819      	ldr	r1, [r3, #0]
 8010352:	1858      	adds	r0, r3, r1
 8010354:	42a0      	cmp	r0, r4
 8010356:	d10b      	bne.n	8010370 <_free_r+0x74>
 8010358:	6820      	ldr	r0, [r4, #0]
 801035a:	4401      	add	r1, r0
 801035c:	1858      	adds	r0, r3, r1
 801035e:	4282      	cmp	r2, r0
 8010360:	6019      	str	r1, [r3, #0]
 8010362:	d1dd      	bne.n	8010320 <_free_r+0x24>
 8010364:	6810      	ldr	r0, [r2, #0]
 8010366:	6852      	ldr	r2, [r2, #4]
 8010368:	605a      	str	r2, [r3, #4]
 801036a:	4401      	add	r1, r0
 801036c:	6019      	str	r1, [r3, #0]
 801036e:	e7d7      	b.n	8010320 <_free_r+0x24>
 8010370:	d902      	bls.n	8010378 <_free_r+0x7c>
 8010372:	230c      	movs	r3, #12
 8010374:	602b      	str	r3, [r5, #0]
 8010376:	e7d3      	b.n	8010320 <_free_r+0x24>
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	1821      	adds	r1, r4, r0
 801037c:	428a      	cmp	r2, r1
 801037e:	bf04      	itt	eq
 8010380:	6811      	ldreq	r1, [r2, #0]
 8010382:	6852      	ldreq	r2, [r2, #4]
 8010384:	6062      	str	r2, [r4, #4]
 8010386:	bf04      	itt	eq
 8010388:	1809      	addeq	r1, r1, r0
 801038a:	6021      	streq	r1, [r4, #0]
 801038c:	605c      	str	r4, [r3, #4]
 801038e:	e7c7      	b.n	8010320 <_free_r+0x24>
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	bf00      	nop
 8010394:	20004a78 	.word	0x20004a78

08010398 <_malloc_r>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	1ccd      	adds	r5, r1, #3
 801039c:	f025 0503 	bic.w	r5, r5, #3
 80103a0:	3508      	adds	r5, #8
 80103a2:	2d0c      	cmp	r5, #12
 80103a4:	bf38      	it	cc
 80103a6:	250c      	movcc	r5, #12
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	4606      	mov	r6, r0
 80103ac:	db01      	blt.n	80103b2 <_malloc_r+0x1a>
 80103ae:	42a9      	cmp	r1, r5
 80103b0:	d903      	bls.n	80103ba <_malloc_r+0x22>
 80103b2:	230c      	movs	r3, #12
 80103b4:	6033      	str	r3, [r6, #0]
 80103b6:	2000      	movs	r0, #0
 80103b8:	bd70      	pop	{r4, r5, r6, pc}
 80103ba:	f000 f857 	bl	801046c <__malloc_lock>
 80103be:	4a21      	ldr	r2, [pc, #132]	; (8010444 <_malloc_r+0xac>)
 80103c0:	6814      	ldr	r4, [r2, #0]
 80103c2:	4621      	mov	r1, r4
 80103c4:	b991      	cbnz	r1, 80103ec <_malloc_r+0x54>
 80103c6:	4c20      	ldr	r4, [pc, #128]	; (8010448 <_malloc_r+0xb0>)
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	b91b      	cbnz	r3, 80103d4 <_malloc_r+0x3c>
 80103cc:	4630      	mov	r0, r6
 80103ce:	f000 f83d 	bl	801044c <_sbrk_r>
 80103d2:	6020      	str	r0, [r4, #0]
 80103d4:	4629      	mov	r1, r5
 80103d6:	4630      	mov	r0, r6
 80103d8:	f000 f838 	bl	801044c <_sbrk_r>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d124      	bne.n	801042a <_malloc_r+0x92>
 80103e0:	230c      	movs	r3, #12
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	4630      	mov	r0, r6
 80103e6:	f000 f842 	bl	801046e <__malloc_unlock>
 80103ea:	e7e4      	b.n	80103b6 <_malloc_r+0x1e>
 80103ec:	680b      	ldr	r3, [r1, #0]
 80103ee:	1b5b      	subs	r3, r3, r5
 80103f0:	d418      	bmi.n	8010424 <_malloc_r+0x8c>
 80103f2:	2b0b      	cmp	r3, #11
 80103f4:	d90f      	bls.n	8010416 <_malloc_r+0x7e>
 80103f6:	600b      	str	r3, [r1, #0]
 80103f8:	50cd      	str	r5, [r1, r3]
 80103fa:	18cc      	adds	r4, r1, r3
 80103fc:	4630      	mov	r0, r6
 80103fe:	f000 f836 	bl	801046e <__malloc_unlock>
 8010402:	f104 000b 	add.w	r0, r4, #11
 8010406:	1d23      	adds	r3, r4, #4
 8010408:	f020 0007 	bic.w	r0, r0, #7
 801040c:	1ac3      	subs	r3, r0, r3
 801040e:	d0d3      	beq.n	80103b8 <_malloc_r+0x20>
 8010410:	425a      	negs	r2, r3
 8010412:	50e2      	str	r2, [r4, r3]
 8010414:	e7d0      	b.n	80103b8 <_malloc_r+0x20>
 8010416:	428c      	cmp	r4, r1
 8010418:	684b      	ldr	r3, [r1, #4]
 801041a:	bf16      	itet	ne
 801041c:	6063      	strne	r3, [r4, #4]
 801041e:	6013      	streq	r3, [r2, #0]
 8010420:	460c      	movne	r4, r1
 8010422:	e7eb      	b.n	80103fc <_malloc_r+0x64>
 8010424:	460c      	mov	r4, r1
 8010426:	6849      	ldr	r1, [r1, #4]
 8010428:	e7cc      	b.n	80103c4 <_malloc_r+0x2c>
 801042a:	1cc4      	adds	r4, r0, #3
 801042c:	f024 0403 	bic.w	r4, r4, #3
 8010430:	42a0      	cmp	r0, r4
 8010432:	d005      	beq.n	8010440 <_malloc_r+0xa8>
 8010434:	1a21      	subs	r1, r4, r0
 8010436:	4630      	mov	r0, r6
 8010438:	f000 f808 	bl	801044c <_sbrk_r>
 801043c:	3001      	adds	r0, #1
 801043e:	d0cf      	beq.n	80103e0 <_malloc_r+0x48>
 8010440:	6025      	str	r5, [r4, #0]
 8010442:	e7db      	b.n	80103fc <_malloc_r+0x64>
 8010444:	20004a78 	.word	0x20004a78
 8010448:	20004a7c 	.word	0x20004a7c

0801044c <_sbrk_r>:
 801044c:	b538      	push	{r3, r4, r5, lr}
 801044e:	4c06      	ldr	r4, [pc, #24]	; (8010468 <_sbrk_r+0x1c>)
 8010450:	2300      	movs	r3, #0
 8010452:	4605      	mov	r5, r0
 8010454:	4608      	mov	r0, r1
 8010456:	6023      	str	r3, [r4, #0]
 8010458:	f7f1 fd74 	bl	8001f44 <_sbrk>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_sbrk_r+0x1a>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	b103      	cbz	r3, 8010466 <_sbrk_r+0x1a>
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	20005668 	.word	0x20005668

0801046c <__malloc_lock>:
 801046c:	4770      	bx	lr

0801046e <__malloc_unlock>:
 801046e:	4770      	bx	lr

08010470 <_init>:
 8010470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010472:	bf00      	nop
 8010474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010476:	bc08      	pop	{r3}
 8010478:	469e      	mov	lr, r3
 801047a:	4770      	bx	lr

0801047c <_fini>:
 801047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047e:	bf00      	nop
 8010480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010482:	bc08      	pop	{r3}
 8010484:	469e      	mov	lr, r3
 8010486:	4770      	bx	lr
