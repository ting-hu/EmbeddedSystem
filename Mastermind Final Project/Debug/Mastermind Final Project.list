
Mastermind Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002088  0800cbc8  0800cbc8  0001cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec50  0800ec50  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec58  0800ec58  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec58  0800ec58  0001ec58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec5c  0800ec5c  0001ec5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ec60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb0  200000ec  0800ed4c  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c9c  0800ed4c  00020c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f443  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005615  00000000  00000000  0004f55f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002388  00000000  00000000  00054b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002148  00000000  00000000  00056f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a9b2  00000000  00000000  00059048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020653  00000000  00000000  000839fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb97c  00000000  00000000  000a404d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f9c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009930  00000000  00000000  0018fa44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000ec 	.word	0x200000ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cbb0 	.word	0x0800cbb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000f0 	.word	0x200000f0
 8000214:	0800cbb0 	.word	0x0800cbb0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  for (int i = 0; i <10; i++ )
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e014      	b.n	800054e <main+0x36>
  {
	  for (int j = 0; j < 4; j++)
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	e00b      	b.n	8000542 <main+0x2a>
	  {
		  newColorMap[i][j] = LCD_COLOR_WHITE;
 800052a:	4966      	ldr	r1, [pc, #408]	; (80006c4 <main+0x1ac>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	009a      	lsls	r2, r3, #2
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4413      	add	r3, r2
 8000534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000538:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for (int j = 0; j < 4; j++)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	3301      	adds	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2b03      	cmp	r3, #3
 8000546:	ddf0      	ble.n	800052a <main+0x12>
  for (int i = 0; i <10; i++ )
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b09      	cmp	r3, #9
 8000552:	dde7      	ble.n	8000524 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f002 fdb2 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f8c4 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 fbde 	bl	8000d1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000560:	f000 f97c 	bl	800085c <MX_ADC1_Init>
  MX_DAC_Init();
 8000564:	f000 f9cc 	bl	8000900 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000568:	f000 f9f4 	bl	8000954 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 800056c:	f000 fa2a 	bl	80009c4 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000570:	f000 fa92 	bl	8000a98 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000574:	f000 fd12 	bl	8000f9c <MX_FSMC_Init>
  MX_I2S2_Init();
 8000578:	f000 faf2 	bl	8000b60 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 800057c:	f000 fb1e 	bl	8000bbc <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000580:	f000 fb48 	bl	8000c14 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000584:	f000 fb76 	bl	8000c74 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000588:	f000 fb9e 	bl	8000cc8 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 800058c:	f00b ff0c 	bl	800c3a8 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8000590:	f000 fab8 	bl	8000b04 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000594:	f000 f946 	bl	8000824 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // LCD Setup
   BSP_LCD_Init();
 8000598:	f002 fa9b 	bl	8002ad2 <BSP_LCD_Init>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 800059c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005a0:	f002 fb56 	bl	8002c50 <BSP_LCD_Clear>

   BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005a4:	2100      	movs	r1, #0
 80005a6:	2000      	movs	r0, #0
 80005a8:	f002 f8de 	bl	8002768 <BSP_PB_Init>

   BSP_LCD_SetFont(&Font24);
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <main+0x1b0>)
 80005ae:	f002 fb3f 	bl	8002c30 <BSP_LCD_SetFont>

   BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80005b2:	f24a 1045 	movw	r0, #41285	; 0xa145
 80005b6:	f002 fb1b 	bl	8002bf0 <BSP_LCD_SetTextColor>
   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005be:	f002 fb27 	bl	8002c10 <BSP_LCD_SetBackColor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005c2:	f00b ff17 	bl	800c3f4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (drawScreen)
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <main+0x1b4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f9      	beq.n	80005c2 <main+0xaa>
    {
    	if (clearScreen)
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <main+0x1b8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <main+0xc4>
    	{

    		clearScreen = false;
 80005d6:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <main+0x1b8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]

    	}

    	if (screenNum == 1)
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <main+0x1bc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d06b      	beq.n	80006bc <main+0x1a4>
    	{

    	}
    	else if (screenNum == 2)
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <main+0x1bc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d167      	bne.n	80006bc <main+0x1a4>
    	{
    		for (int i = 0; i <10; i++ )
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	e061      	b.n	80006b6 <main+0x19e>
    		{
    			for (int j = 0; j < 4; j++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	e058      	b.n	80006aa <main+0x192>
    			{
    				if (currentColorMap[i][j] != newColorMap[i][j])
 80005f8:	4937      	ldr	r1, [pc, #220]	; (80006d8 <main+0x1c0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	009a      	lsls	r2, r3, #2
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4413      	add	r3, r2
 8000602:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000606:	482f      	ldr	r0, [pc, #188]	; (80006c4 <main+0x1ac>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0099      	lsls	r1, r3, #2
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	440b      	add	r3, r1
 8000610:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000614:	429a      	cmp	r2, r3
 8000616:	d045      	beq.n	80006a4 <main+0x18c>
    				{
    					BSP_LCD_SetTextColor(newColorMap[i][j]);
 8000618:	492a      	ldr	r1, [pc, #168]	; (80006c4 <main+0x1ac>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	009a      	lsls	r2, r3, #2
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fae2 	bl	8002bf0 <BSP_LCD_SetTextColor>
    					BSP_LCD_FillCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 800062c:	492b      	ldr	r1, [pc, #172]	; (80006dc <main+0x1c4>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	009a      	lsls	r2, r3, #2
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800063a:	b298      	uxth	r0, r3
 800063c:	4928      	ldr	r1, [pc, #160]	; (80006e0 <main+0x1c8>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	009a      	lsls	r2, r3, #2
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800064a:	b29b      	uxth	r3, r3
 800064c:	2208      	movs	r2, #8
 800064e:	b292      	uxth	r2, r2
 8000650:	4619      	mov	r1, r3
 8000652:	f002 fc45 	bl	8002ee0 <BSP_LCD_FillCircle>
    					currentColorMap[i][j] = newColorMap[i][j];
 8000656:	491b      	ldr	r1, [pc, #108]	; (80006c4 <main+0x1ac>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	009a      	lsls	r2, r3, #2
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	4413      	add	r3, r2
 8000660:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8000664:	491c      	ldr	r1, [pc, #112]	; (80006d8 <main+0x1c0>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	009a      	lsls	r2, r3, #2
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	4602      	mov	r2, r0
 8000670:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000674:	2000      	movs	r0, #0
 8000676:	f002 fabb 	bl	8002bf0 <BSP_LCD_SetTextColor>
    					BSP_LCD_DrawCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 800067a:	4918      	ldr	r1, [pc, #96]	; (80006dc <main+0x1c4>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	009a      	lsls	r2, r3, #2
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	4413      	add	r3, r2
 8000684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000688:	b298      	uxth	r0, r3
 800068a:	4915      	ldr	r1, [pc, #84]	; (80006e0 <main+0x1c8>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	009a      	lsls	r2, r3, #2
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	4413      	add	r3, r2
 8000694:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000698:	b29b      	uxth	r3, r3
 800069a:	2208      	movs	r2, #8
 800069c:	b292      	uxth	r2, r2
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 fb62 	bl	8002d68 <BSP_LCD_DrawCircle>
    			for (int j = 0; j < 4; j++)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	dda3      	ble.n	80005f8 <main+0xe0>
    		for (int i = 0; i <10; i++ )
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	dd9a      	ble.n	80005f2 <main+0xda>
    	else if (screenNum == 3)
    	{

    	}

    	drawScreen = false;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <main+0x1b4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 80006c2:	e77e      	b.n	80005c2 <main+0xaa>
 80006c4:	200003f4 	.word	0x200003f4
 80006c8:	20000050 	.word	0x20000050
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000004 	.word	0x20000004
 80006d8:	200001fc 	.word	0x200001fc
 80006dc:	0800cbcc 	.word	0x0800cbcc
 80006e0:	0800cc6c 	.word	0x0800cc6c

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0aa      	sub	sp, #168	; 0xa8
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00c f99a 	bl	800ca2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2258      	movs	r2, #88	; 0x58
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00c f98b 	bl	800ca2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <SystemClock_Config+0x138>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a3f      	ldr	r2, [pc, #252]	; (800081c <SystemClock_Config+0x138>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <SystemClock_Config+0x138>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <SystemClock_Config+0x13c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a39      	ldr	r2, [pc, #228]	; (8000820 <SystemClock_Config+0x13c>)
 800073c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SystemClock_Config+0x13c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800074e:	2303      	movs	r3, #3
 8000750:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000752:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000756:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2310      	movs	r3, #16
 8000760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000772:	230f      	movs	r3, #15
 8000774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000778:	2390      	movs	r3, #144	; 0x90
 800077a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000794:	4618      	mov	r0, r3
 8000796:	f006 fe63 	bl	8007460 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a0:	f000 fcae 	bl	8001100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 f8a6 	bl	8006910 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ca:	f000 fc99 	bl	8001100 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80007ce:	f240 1371 	movw	r3, #369	; 0x171
 80007d2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80007d8:	230c      	movs	r3, #12
 80007da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80007ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80007f2:	2300      	movs	r3, #0
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fa50 	bl	8006ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800080e:	f000 fc77 	bl	8001100 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	37a8      	adds	r7, #168	; 0xa8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2017      	movs	r0, #23
 800082e:	f003 f826 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000832:	2017      	movs	r0, #23
 8000834:	f003 f83f 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2028      	movs	r0, #40	; 0x28
 800083e:	f003 f81e 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000842:	2028      	movs	r0, #40	; 0x28
 8000844:	f003 f837 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2006      	movs	r0, #6
 800084e:	f003 f816 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000852:	2006      	movs	r0, #6
 8000854:	f003 f82f 	bl	80038b6 <HAL_NVIC_EnableIRQ>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_ADC1_Init+0x98>)
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_ADC1_Init+0xa0>)
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008bc:	f002 fc92 	bl	80031e4 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fc1b 	bl	8001100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008dc:	f002 fcc6 	bl	800326c <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008e6:	f000 fc0b 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000034c 	.word	0x2000034c
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_DAC_Init+0x4c>)
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_DAC_Init+0x50>)
 8000912:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_DAC_Init+0x4c>)
 8000916:	f002 ffe8 	bl	80038ea <HAL_DAC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000920:	f000 fbee 	bl	8001100 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_DAC_Init+0x4c>)
 8000934:	f002 fffb 	bl	800392e <HAL_DAC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800093e:	f000 fbdf 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000394 	.word	0x20000394
 8000950:	40007400 	.word	0x40007400

08000954 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_DFSDM1_Init+0x68>)
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <MX_DFSDM1_Init+0x6c>)
 800095c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000960:	2201      	movs	r2, #1
 8000962:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_DFSDM1_Init+0x68>)
 800096c:	2202      	movs	r2, #2
 800096e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_DFSDM1_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000984:	2202      	movs	r2, #2
 8000986:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_DFSDM1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DFSDM1_Init+0x68>)
 8000996:	2201      	movs	r2, #1
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_DFSDM1_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_DFSDM1_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_DFSDM1_Init+0x68>)
 80009a8:	f003 f80e 	bl	80039c8 <HAL_DFSDM_ChannelInit>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80009b2:	f000 fba5 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000170 	.word	0x20000170
 80009c0:	40016020 	.word	0x40016020

080009c4 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <MX_DFSDM2_Init+0xc8>)
 80009cc:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009dc:	2202      	movs	r2, #2
 80009de:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_DFSDM2_Init+0xc4>)
 8000a18:	f002 ffd6 	bl	80039c8 <HAL_DFSDM_ChannelInit>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000a22:	f000 fb6d 	bl	8001100 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a28:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <MX_DFSDM2_Init+0xd0>)
 8000a2a:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_DFSDM2_Init+0xcc>)
 8000a76:	f002 ffa7 	bl	80039c8 <HAL_DFSDM_ChannelInit>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000a80:	f000 fb3e 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000314 	.word	0x20000314
 8000a8c:	40016420 	.word	0x40016420
 8000a90:	2000024c 	.word	0x2000024c
 8000a94:	400164e0 	.word	0x400164e0

08000a98 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_FMPI2C1_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <MX_FMPI2C1_Init+0x68>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ad4:	f003 f8cc 	bl	8003c70 <HAL_FMPI2C_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000ade:	f000 fb0f 	bl	8001100 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_FMPI2C1_Init+0x60>)
 8000ae6:	f003 f952 	bl	8003d8e <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f000 fb06 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200003a8 	.word	0x200003a8
 8000afc:	40006000 	.word	0x40006000
 8000b00:	00303d5b 	.word	0x00303d5b

08000b04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <MX_I2C2_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_I2C2_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_I2C2_Init+0x50>)
 8000b42:	f005 f847 	bl	8005bd4 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 fad8 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	40005800 	.word	0x40005800
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <MX_I2S2_Init+0x58>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b88:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b8c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2S2_Init+0x54>)
 8000ba2:	f005 f94f 	bl	8005e44 <HAL_I2S_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000bac:	f000 faa8 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000558 	.word	0x20000558
 8000bb8:	40003800 	.word	0x40003800

08000bbc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <MX_QUADSPI_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_QUADSPI_Init+0x50>)
 8000bf8:	f005 fdc8 	bl	800678c <HAL_QSPI_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c02:	f000 fa7d 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200005a0 	.word	0x200005a0
 8000c10:	a0001000 	.word	0xa0001000

08000c14 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_SDIO_SD_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c44:	f006 fe4e 	bl	80078e4 <HAL_SD_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000c4e:	f000 fa57 	bl	8001100 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_SDIO_SD_Init+0x58>)
 8000c58:	f007 f878 	bl	8007d4c <HAL_SD_ConfigWideBusOperation>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 fa4d 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000494 	.word	0x20000494
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_UART10_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_UART10_Init+0x4c>)
 8000cac:	f007 fbca 	bl	8008444 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 fa23 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000284 	.word	0x20000284
 8000cc4:	40011c00 	.word	0x40011c00

08000cc8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART6_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART6_UART_Init+0x4c>)
 8000d00:	f007 fba0 	bl	8008444 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f9f9 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000518 	.word	0x20000518
 8000d18:	40011400 	.word	0x40011400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	4b91      	ldr	r3, [pc, #580]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a90      	ldr	r2, [pc, #576]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b8e      	ldr	r3, [pc, #568]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	4b8a      	ldr	r3, [pc, #552]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a89      	ldr	r2, [pc, #548]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b87      	ldr	r3, [pc, #540]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b83      	ldr	r3, [pc, #524]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a82      	ldr	r2, [pc, #520]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b80      	ldr	r3, [pc, #512]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a7b      	ldr	r2, [pc, #492]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b79      	ldr	r3, [pc, #484]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b75      	ldr	r3, [pc, #468]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a74      	ldr	r2, [pc, #464]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b72      	ldr	r3, [pc, #456]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a6d      	ldr	r2, [pc, #436]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b6b      	ldr	r3, [pc, #428]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a5f      	ldr	r2, [pc, #380]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <MX_GPIO_Init+0x260>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2138      	movs	r1, #56	; 0x38
 8000e16:	485a      	ldr	r0, [pc, #360]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000e18:	f003 f9ae 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4858      	ldr	r0, [pc, #352]	; (8000f84 <MX_GPIO_Init+0x268>)
 8000e22:	f003 f9a9 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e2c:	4856      	ldr	r0, [pc, #344]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000e2e:	f003 f9a3 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	4854      	ldr	r0, [pc, #336]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000e3a:	f003 f99d 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	484a      	ldr	r0, [pc, #296]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000e56:	f002 ffe5 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000e5a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4849      	ldr	r0, [pc, #292]	; (8000f94 <MX_GPIO_Init+0x278>)
 8000e70:	f002 ffd8 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000e74:	2302      	movs	r3, #2
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	483f      	ldr	r0, [pc, #252]	; (8000f84 <MX_GPIO_Init+0x268>)
 8000e88:	f002 ffcc 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000e8c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483d      	ldr	r0, [pc, #244]	; (8000f98 <MX_GPIO_Init+0x27c>)
 8000ea2:	f002 ffbf 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4831      	ldr	r0, [pc, #196]	; (8000f84 <MX_GPIO_Init+0x268>)
 8000ebe:	f002 ffb1 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000ee0:	f002 ffa0 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000ee4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4822      	ldr	r0, [pc, #136]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000efe:	f002 ff91 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000f1c:	f002 ff82 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000f36:	f002 ff75 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000f3a:	2330      	movs	r3, #48	; 0x30
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000f56:	f002 ff65 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000f70:	f002 ff58 	bl	8003e24 <HAL_GPIO_Init>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	10110000 	.word	0x10110000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40020000 	.word	0x40020000

08000f9c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fb6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <MX_FSMC_Init+0x15c>)
 8000fc0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fd4:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fe0:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fec:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000fee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <MX_FSMC_Init+0x158>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001000:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <MX_FSMC_Init+0x158>)
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <MX_FSMC_Init+0x158>)
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <MX_FSMC_Init+0x158>)
 800100e:	2200      	movs	r2, #0
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <MX_FSMC_Init+0x158>)
 8001014:	2200      	movs	r2, #0
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <MX_FSMC_Init+0x158>)
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800101e:	230f      	movs	r3, #15
 8001020:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001022:	230f      	movs	r3, #15
 8001024:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001026:	23ff      	movs	r3, #255	; 0xff
 8001028:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800102a:	230f      	movs	r3, #15
 800102c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800102e:	2310      	movs	r3, #16
 8001030:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001032:	2311      	movs	r3, #17
 8001034:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MX_FSMC_Init+0x158>)
 8001042:	f007 f9bb 	bl	80083bc <HAL_SRAM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 800104c:	f000 f858 	bl	8001100 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_FSMC_Init+0x160>)
 8001052:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001056:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MX_FSMC_Init+0x160>)
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <MX_FSMC_Init+0x15c>)
 800105c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_FSMC_Init+0x160>)
 8001060:	2204      	movs	r2, #4
 8001062:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_FSMC_Init+0x160>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_FSMC_Init+0x160>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_FSMC_Init+0x160>)
 8001072:	2210      	movs	r2, #16
 8001074:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_FSMC_Init+0x160>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_FSMC_Init+0x160>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_FSMC_Init+0x160>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_FSMC_Init+0x160>)
 800108a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_FSMC_Init+0x160>)
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_FSMC_Init+0x160>)
 8001098:	2200      	movs	r2, #0
 800109a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_FSMC_Init+0x160>)
 800109e:	2200      	movs	r2, #0
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_FSMC_Init+0x160>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_FSMC_Init+0x160>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_FSMC_Init+0x160>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_FSMC_Init+0x160>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010ba:	230f      	movs	r3, #15
 80010bc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010be:	230f      	movs	r3, #15
 80010c0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010c6:	230f      	movs	r3, #15
 80010c8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010ca:	2310      	movs	r3, #16
 80010cc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010ce:	2311      	movs	r3, #17
 80010d0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_FSMC_Init+0x160>)
 80010de:	f007 f96d 	bl	80083bc <HAL_SRAM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 80010e8:	f000 f80a 	bl	8001100 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002c4 	.word	0x200002c4
 80010f8:	a0000104 	.word	0xa0000104
 80010fc:	20000444 	.word	0x20000444

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <HAL_MspInit+0x4c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x4c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_ADC_MspInit+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d15b      	bne.n	800123a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80011f2:	2311      	movs	r3, #17
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <HAL_ADC_MspInit+0xec>)
 8001206:	f002 fe0d 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800120a:	2326      	movs	r3, #38	; 0x26
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <HAL_ADC_MspInit+0xf0>)
 800121e:	f002 fe01 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <HAL_ADC_MspInit+0xf4>)
 8001236:	f002 fdf5 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3730      	adds	r7, #48	; 0x30
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012000 	.word	0x40012000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_DAC_MspInit+0x7c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d127      	bne.n	80012ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 8001284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_DAC_MspInit+0x80>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80012b2:	2310      	movs	r3, #16
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_DAC_MspInit+0x84>)
 80012c6:	f002 fdad 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40007400 	.word	0x40007400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a77      	ldr	r2, [pc, #476]	; (80014dc <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00e      	beq.n	8001320 <HAL_DFSDM_ChannelMspInit+0x40>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a76      	ldr	r2, [pc, #472]	; (80014e0 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d009      	beq.n	8001320 <HAL_DFSDM_ChannelMspInit+0x40>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a74      	ldr	r2, [pc, #464]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d004      	beq.n	8001320 <HAL_DFSDM_ChannelMspInit+0x40>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a73      	ldr	r2, [pc, #460]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x208>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d154      	bne.n	80013ca <HAL_DFSDM_ChannelMspInit+0xea>
 8001320:	4b72      	ldr	r3, [pc, #456]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d150      	bne.n	80013ca <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	4a6f      	ldr	r2, [pc, #444]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001336:	6453      	str	r3, [r2, #68]	; 0x44
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a68      	ldr	r2, [pc, #416]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a61      	ldr	r2, [pc, #388]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800137c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800138e:	2306      	movs	r3, #6
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4856      	ldr	r0, [pc, #344]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x214>)
 800139a:	f002 fd43 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800139e:	2340      	movs	r3, #64	; 0x40
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013ae:	2306      	movs	r3, #6
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	484f      	ldr	r0, [pc, #316]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0x218>)
 80013ba:	f002 fd33 	bl	8003e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80013c8:	e084      	b.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a43      	ldr	r2, [pc, #268]	; (80014dc <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d07f      	beq.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <HAL_DFSDM_ChannelMspInit+0x200>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d07a      	beq.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a40      	ldr	r2, [pc, #256]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x204>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d075      	beq.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x208>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d070      	beq.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d16c      	bne.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800147a:	2307      	movs	r3, #7
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	481b      	ldr	r0, [pc, #108]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001486:	f002 fccd 	bl	8003e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800148a:	2304      	movs	r3, #4
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800149a:	2303      	movs	r3, #3
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0x218>)
 80014a6:	f002 fcbd 	bl	8003e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80014ba:	2306      	movs	r3, #6
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <HAL_DFSDM_ChannelMspInit+0x220>)
 80014c6:	f002 fcad 	bl	8003e24 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40016000 	.word	0x40016000
 80014e0:	40016020 	.word	0x40016020
 80014e4:	40016040 	.word	0x40016040
 80014e8:	40016060 	.word	0x40016060
 80014ec:	20000108 	.word	0x20000108
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	2000010c 	.word	0x2000010c
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_FMPI2C_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001552:	2304      	movs	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_FMPI2C_MspInit+0x8c>)
 800155e:	f002 fc61 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 800156c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_FMPI2C_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40006000 	.word	0x40006000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800

08001594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_I2C_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_I2C_MspInit+0x8c>)
 80015f0:	f002 fc18 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_I2C_MspInit+0x88>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40005800 	.word	0x40005800
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400

08001624 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_I2S_MspInit+0x15c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 8097 	bne.w	8001776 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_I2S_MspInit+0x160>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_I2S_MspInit+0x160>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_I2S_MspInit+0x160>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_I2S_MspInit+0x160>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a45      	ldr	r2, [pc, #276]	; (8001784 <HAL_I2S_MspInit+0x160>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_I2S_MspInit+0x160>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_I2S_MspInit+0x160>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <HAL_I2S_MspInit+0x160>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <HAL_I2S_MspInit+0x160>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a37      	ldr	r2, [pc, #220]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a30      	ldr	r2, [pc, #192]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_I2S_MspInit+0x160>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80016d4:	2304      	movs	r3, #4
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80016e4:	2306      	movs	r3, #6
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4826      	ldr	r0, [pc, #152]	; (8001788 <HAL_I2S_MspInit+0x164>)
 80016f0:	f002 fb98 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80016f4:	2308      	movs	r3, #8
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001704:	2305      	movs	r3, #5
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <HAL_I2S_MspInit+0x164>)
 8001710:	f002 fb88 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001714:	2308      	movs	r3, #8
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001724:	2305      	movs	r3, #5
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_I2S_MspInit+0x168>)
 8001730:	f002 fb78 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001734:	2308      	movs	r3, #8
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001744:	2305      	movs	r3, #5
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <HAL_I2S_MspInit+0x16c>)
 8001750:	f002 fb68 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001766:	2305      	movs	r3, #5
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_I2S_MspInit+0x170>)
 8001772:	f002 fb57 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40003800 	.word	0x40003800
 8001784:	40023800 	.word	0x40023800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a56      	ldr	r2, [pc, #344]	; (8001910 <HAL_QSPI_MspInit+0x178>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	f040 80a6 	bne.w	8001908 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	4b54      	ldr	r3, [pc, #336]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	4a53      	ldr	r2, [pc, #332]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6393      	str	r3, [r2, #56]	; 0x38
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 80017fe:	f043 0320 	orr.w	r3, r3, #32
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a3e      	ldr	r2, [pc, #248]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_QSPI_MspInit+0x17c>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001864:	2304      	movs	r3, #4
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001874:	2309      	movs	r3, #9
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <HAL_QSPI_MspInit+0x180>)
 8001880:	f002 fad0 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001896:	230a      	movs	r3, #10
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	481e      	ldr	r0, [pc, #120]	; (800191c <HAL_QSPI_MspInit+0x184>)
 80018a2:	f002 fabf 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80018a6:	2304      	movs	r3, #4
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018b6:	2309      	movs	r3, #9
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4619      	mov	r1, r3
 80018c0:	4817      	ldr	r0, [pc, #92]	; (8001920 <HAL_QSPI_MspInit+0x188>)
 80018c2:	f002 faaf 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018d8:	2309      	movs	r3, #9
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <HAL_QSPI_MspInit+0x18c>)
 80018e4:	f002 fa9e 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018f8:	230a      	movs	r3, #10
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <HAL_QSPI_MspInit+0x190>)
 8001904:	f002 fa8e 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	a0001000 	.word	0xa0001000
 8001914:	40023800 	.word	0x40023800
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40020400 	.word	0x40020400
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021800 	.word	0x40021800

0800192c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_SD_MspInit+0xc0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d14a      	bne.n	80019e4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_SD_MspInit+0xc4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019b2:	230c      	movs	r3, #12
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <HAL_SD_MspInit+0xc8>)
 80019be:	f002 fa31 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80019c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019c6:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019d4:	230c      	movs	r3, #12
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HAL_SD_MspInit+0xcc>)
 80019e0:	f002 fa20 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020800 	.word	0x40020800

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <HAL_UART_MspInit+0xec>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12d      	bne.n	8001a7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a31      	ldr	r2, [pc, #196]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001a56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001a68:	230b      	movs	r3, #11
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481f      	ldr	r0, [pc, #124]	; (8001af0 <HAL_UART_MspInit+0xf4>)
 8001a74:	f002 f9d6 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a78:	e031      	b.n	8001ade <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0xf8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d12c      	bne.n	8001ade <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	6453      	str	r3, [r2, #68]	; 0x44
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0xf0>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001abc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0xf4>)
 8001ada:	f002 f9a3 	bl	8003e24 <HAL_GPIO_Init>
}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	; 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40011c00 	.word	0x40011c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40021800 	.word	0x40021800
 8001af4:	40011400 	.word	0x40011400

08001af8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_FSMC_MspInit+0xc8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d151      	bne.n	8001bb8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_FSMC_MspInit+0xc8>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6393      	str	r3, [r2, #56]	; 0x38
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001b36:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001b3a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b48:	230c      	movs	r3, #12
 8001b4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <HAL_FSMC_MspInit+0xd0>)
 8001b52:	f002 f967 	bl	8003e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001b56:	f240 433f 	movw	r3, #1087	; 0x43f
 8001b5a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4816      	ldr	r0, [pc, #88]	; (8001bcc <HAL_FSMC_MspInit+0xd4>)
 8001b72:	f002 f957 	bl	8003e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001b76:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b7a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b88:	230c      	movs	r3, #12
 8001b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <HAL_FSMC_MspInit+0xd8>)
 8001b92:	f002 f947 	bl	8003e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001b96:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001b9a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <HAL_FSMC_MspInit+0xdc>)
 8001bb2:	f002 f937 	bl	8003e24 <HAL_GPIO_Init>
 8001bb6:	e000      	b.n	8001bba <HAL_FSMC_MspInit+0xc2>
    return;
 8001bb8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000110 	.word	0x20000110
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001be0:	f7ff ff8a 	bl	8001af8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f001 fa8e 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f002 faad 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001c52:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001c56:	f000 ffcb 	bl	8002bf0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(100, 100, 20);
 8001c5a:	2214      	movs	r2, #20
 8001c5c:	2164      	movs	r1, #100	; 0x64
 8001c5e:	2064      	movs	r0, #100	; 0x64
 8001c60:	f001 f93e 	bl	8002ee0 <BSP_LCD_FillCircle>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001c64:	2101      	movs	r1, #1
 8001c66:	480c      	ldr	r0, [pc, #48]	; (8001c98 <EXTI0_IRQHandler+0x50>)
 8001c68:	f002 fa6e 	bl	8004148 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <EXTI0_IRQHandler+0x4c>
  {
	  currentCol++;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <EXTI0_IRQHandler+0x54>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <EXTI0_IRQHandler+0x54>)
 8001c7a:	6013      	str	r3, [r2, #0]

	  if (currentCol == 4)
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <EXTI0_IRQHandler+0x54>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d107      	bne.n	8001c94 <EXTI0_IRQHandler+0x4c>
	  {
		  currentCol = 0;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <EXTI0_IRQHandler+0x54>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
		  gameRound++;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <EXTI0_IRQHandler+0x58>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <EXTI0_IRQHandler+0x58>)
 8001c92:	6013      	str	r3, [r2, #0]
	  }

  }

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	20000118 	.word	0x20000118
 8001ca0:	20000114 	.word	0x20000114

08001ca4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ca8:	2040      	movs	r0, #64	; 0x40
 8001caa:	f002 fa7f 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001cae:	2080      	movs	r0, #128	; 0x80
 8001cb0:	f002 fa7c 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb8:	f002 fa78 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6))
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	4821      	ldr	r0, [pc, #132]	; (8001d44 <EXTI9_5_IRQHandler+0xa0>)
 8001cc0:	f002 fa42 	bl	8004148 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <EXTI9_5_IRQHandler+0x44>
  {

	  newColorMap[gameRound][currentCol] = LCD_COLOR_GREEN;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <EXTI9_5_IRQHandler+0xa4>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <EXTI9_5_IRQHandler+0xa8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	491f      	ldr	r1, [pc, #124]	; (8001d50 <EXTI9_5_IRQHandler+0xac>)
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  drawScreen = true;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <EXTI9_5_IRQHandler+0xb0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
	  	  drawScreen = true;

  }

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ce6:	e02a      	b.n	8001d3e <EXTI9_5_IRQHandler+0x9a>
  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7))
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <EXTI9_5_IRQHandler+0xa0>)
 8001cec:	f002 fa2c 	bl	8004148 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00e      	beq.n	8001d14 <EXTI9_5_IRQHandler+0x70>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_YELLOW;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <EXTI9_5_IRQHandler+0xa4>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <EXTI9_5_IRQHandler+0xa8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4914      	ldr	r1, [pc, #80]	; (8001d50 <EXTI9_5_IRQHandler+0xac>)
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	  drawScreen = true;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <EXTI9_5_IRQHandler+0xb0>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
}
 8001d12:	e014      	b.n	8001d3e <EXTI9_5_IRQHandler+0x9a>
  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <EXTI9_5_IRQHandler+0xb4>)
 8001d1a:	f002 fa15 	bl	8004148 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <EXTI9_5_IRQHandler+0x9a>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_BLACK;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <EXTI9_5_IRQHandler+0xa4>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <EXTI9_5_IRQHandler+0xa8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4908      	ldr	r1, [pc, #32]	; (8001d50 <EXTI9_5_IRQHandler+0xac>)
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	  drawScreen = true;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <EXTI9_5_IRQHandler+0xb0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021400 	.word	0x40021400
 8001d48:	20000114 	.word	0x20000114
 8001d4c:	20000118 	.word	0x20000118
 8001d50:	200003f4 	.word	0x200003f4
 8001d54:	20000008 	.word	0x20000008
 8001d58:	40020400 	.word	0x40020400

08001d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d64:	f002 fa22 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d6c:	f002 fa1e 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d74:	f002 fa1a 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10))
 8001d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7c:	4822      	ldr	r0, [pc, #136]	; (8001e08 <EXTI15_10_IRQHandler+0xac>)
 8001d7e:	f002 f9e3 	bl	8004148 <HAL_GPIO_ReadPin>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <EXTI15_10_IRQHandler+0x48>
  {

	  newColorMap[gameRound][currentCol] = LCD_COLOR_BLUE;
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <EXTI15_10_IRQHandler+0xb0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4920      	ldr	r1, [pc, #128]	; (8001e14 <EXTI15_10_IRQHandler+0xb8>)
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	221f      	movs	r2, #31
 8001d98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	  	  drawScreen = true;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <EXTI15_10_IRQHandler+0xbc>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
	  	  }

  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da2:	e02f      	b.n	8001e04 <EXTI15_10_IRQHandler+0xa8>
  else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13))
 8001da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da8:	481c      	ldr	r0, [pc, #112]	; (8001e1c <EXTI15_10_IRQHandler+0xc0>)
 8001daa:	f002 f9cd 	bl	8004148 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <EXTI15_10_IRQHandler+0x76>
	  newColorMap[gameRound][currentCol] = LCD_COLOR_RED;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <EXTI15_10_IRQHandler+0xb0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4915      	ldr	r1, [pc, #84]	; (8001e14 <EXTI15_10_IRQHandler+0xb8>)
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001dc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	  	  drawScreen = true;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <EXTI15_10_IRQHandler+0xbc>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	e018      	b.n	8001e04 <EXTI15_10_IRQHandler+0xa8>
  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8001dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <EXTI15_10_IRQHandler+0xc4>)
 8001dd8:	f002 f9b6 	bl	8004148 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <EXTI15_10_IRQHandler+0xa8>
	  currentCol++;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001dea:	6013      	str	r3, [r2, #0]
	  	  if (currentCol == 4)
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <EXTI15_10_IRQHandler+0xa8>
	  		  currentCol = 0;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <EXTI15_10_IRQHandler+0xb4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
	  		  gameRound++;
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <EXTI15_10_IRQHandler+0xb0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a02      	ldr	r2, [pc, #8]	; (8001e0c <EXTI15_10_IRQHandler+0xb0>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	20000114 	.word	0x20000114
 8001e10:	20000118 	.word	0x20000118
 8001e14:	200003f4 	.word	0x200003f4
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	40021800 	.word	0x40021800
 8001e20:	40020000 	.word	0x40020000

08001e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <OTG_FS_IRQHandler+0x10>)
 8001e2a:	f002 fc71 	bl	8004710 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200009d4 	.word	0x200009d4

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f00a fda6 	bl	800c9b8 <__errno>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	230c      	movs	r3, #12
 8001e70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20050000 	.word	0x20050000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	2000011c 	.word	0x2000011c
 8001ea0:	20000ca0 	.word	0x20000ca0

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <SystemInit+0x28>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <SystemInit+0x28>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SystemInit+0x28>)
 8001eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ed6:	e003      	b.n	8001ee0 <LoopCopyDataInit>

08001ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ede:	3104      	adds	r1, #4

08001ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ee8:	d3f6      	bcc.n	8001ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eec:	e002      	b.n	8001ef4 <LoopFillZerobss>

08001eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ef0:	f842 3b04 	str.w	r3, [r2], #4

08001ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ef8:	d3f9      	bcc.n	8001eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffd3 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f00a fd61 	bl	800c9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7fe fb09 	bl	8000518 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001f0c:	0800ec60 	.word	0x0800ec60
  ldr  r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f14:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001f18:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001f1c:	20000c9c 	.word	0x20000c9c

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>

08001f22 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f28:	f000 fd6e 	bl	8002a08 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2010      	movs	r0, #16
 8001f32:	f000 f9e4 	bl	80022fe <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001f36:	200a      	movs	r0, #10
 8001f38:	f000 fd8d 	bl	8002a56 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2001      	movs	r0, #1
 8001f42:	f000 f9dc 	bl	80022fe <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001f46:	20c8      	movs	r0, #200	; 0xc8
 8001f48:	f000 fd85 	bl	8002a56 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2011      	movs	r0, #17
 8001f52:	f000 f9d4 	bl	80022fe <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001f56:	2078      	movs	r0, #120	; 0x78
 8001f58:	f000 fd7d 	bl	8002a56 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001f60:	463b      	mov	r3, r7
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	2036      	movs	r0, #54	; 0x36
 8001f68:	f000 f9c9 	bl	80022fe <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001f6c:	2305      	movs	r3, #5
 8001f6e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001f70:	463b      	mov	r3, r7
 8001f72:	2201      	movs	r2, #1
 8001f74:	4619      	mov	r1, r3
 8001f76:	203a      	movs	r0, #58	; 0x3a
 8001f78:	f000 f9c1 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2021      	movs	r0, #33	; 0x21
 8001f82:	f000 f9bc 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001f92:	23ef      	movs	r3, #239	; 0xef
 8001f94:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001f96:	463b      	mov	r3, r7
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	202a      	movs	r0, #42	; 0x2a
 8001f9e:	f000 f9ae 	bl	80022fe <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001fae:	23ef      	movs	r3, #239	; 0xef
 8001fb0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	202b      	movs	r0, #43	; 0x2b
 8001fba:	f000 f9a0 	bl	80022fe <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001fca:	2333      	movs	r3, #51	; 0x33
 8001fcc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001fce:	2333      	movs	r3, #51	; 0x33
 8001fd0:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	20b2      	movs	r0, #178	; 0xb2
 8001fda:	f000 f990 	bl	80022fe <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001fde:	2335      	movs	r3, #53	; 0x35
 8001fe0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	20b7      	movs	r0, #183	; 0xb7
 8001fea:	f000 f988 	bl	80022fe <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001fee:	231f      	movs	r3, #31
 8001ff0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	20bb      	movs	r0, #187	; 0xbb
 8001ffa:	f000 f980 	bl	80022fe <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001ffe:	232c      	movs	r3, #44	; 0x2c
 8002000:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002002:	463b      	mov	r3, r7
 8002004:	2201      	movs	r2, #1
 8002006:	4619      	mov	r1, r3
 8002008:	20c0      	movs	r0, #192	; 0xc0
 800200a:	f000 f978 	bl	80022fe <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800200e:	2301      	movs	r3, #1
 8002010:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002012:	23c3      	movs	r3, #195	; 0xc3
 8002014:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002016:	463b      	mov	r3, r7
 8002018:	2202      	movs	r2, #2
 800201a:	4619      	mov	r1, r3
 800201c:	20c2      	movs	r0, #194	; 0xc2
 800201e:	f000 f96e 	bl	80022fe <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002022:	2320      	movs	r3, #32
 8002024:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002026:	463b      	mov	r3, r7
 8002028:	2201      	movs	r2, #1
 800202a:	4619      	mov	r1, r3
 800202c:	20c4      	movs	r0, #196	; 0xc4
 800202e:	f000 f966 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002032:	230f      	movs	r3, #15
 8002034:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002036:	463b      	mov	r3, r7
 8002038:	2201      	movs	r2, #1
 800203a:	4619      	mov	r1, r3
 800203c:	20c6      	movs	r0, #198	; 0xc6
 800203e:	f000 f95e 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002042:	23a4      	movs	r3, #164	; 0xa4
 8002044:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002046:	23a1      	movs	r3, #161	; 0xa1
 8002048:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800204a:	463b      	mov	r3, r7
 800204c:	2201      	movs	r2, #1
 800204e:	4619      	mov	r1, r3
 8002050:	20d0      	movs	r0, #208	; 0xd0
 8002052:	f000 f954 	bl	80022fe <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002056:	23d0      	movs	r3, #208	; 0xd0
 8002058:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800205a:	2308      	movs	r3, #8
 800205c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800205e:	2311      	movs	r3, #17
 8002060:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002062:	2308      	movs	r3, #8
 8002064:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002066:	230c      	movs	r3, #12
 8002068:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800206a:	2315      	movs	r3, #21
 800206c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800206e:	2339      	movs	r3, #57	; 0x39
 8002070:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002072:	2333      	movs	r3, #51	; 0x33
 8002074:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002076:	2350      	movs	r3, #80	; 0x50
 8002078:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800207a:	2336      	movs	r3, #54	; 0x36
 800207c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800207e:	2313      	movs	r3, #19
 8002080:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002082:	2314      	movs	r3, #20
 8002084:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002086:	2329      	movs	r3, #41	; 0x29
 8002088:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800208a:	232d      	movs	r3, #45	; 0x2d
 800208c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800208e:	463b      	mov	r3, r7
 8002090:	220e      	movs	r2, #14
 8002092:	4619      	mov	r1, r3
 8002094:	20e0      	movs	r0, #224	; 0xe0
 8002096:	f000 f932 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800209a:	23d0      	movs	r3, #208	; 0xd0
 800209c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800209e:	2308      	movs	r3, #8
 80020a0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80020a2:	2310      	movs	r3, #16
 80020a4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80020a6:	2308      	movs	r3, #8
 80020a8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80020aa:	2306      	movs	r3, #6
 80020ac:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80020ae:	2306      	movs	r3, #6
 80020b0:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80020b2:	2339      	movs	r3, #57	; 0x39
 80020b4:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80020b6:	2344      	movs	r3, #68	; 0x44
 80020b8:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80020ba:	2351      	movs	r3, #81	; 0x51
 80020bc:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80020be:	230b      	movs	r3, #11
 80020c0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80020c2:	2316      	movs	r3, #22
 80020c4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80020c6:	2314      	movs	r3, #20
 80020c8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80020ca:	232f      	movs	r3, #47	; 0x2f
 80020cc:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80020ce:	2331      	movs	r3, #49	; 0x31
 80020d0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80020d2:	463b      	mov	r3, r7
 80020d4:	220e      	movs	r2, #14
 80020d6:	4619      	mov	r1, r3
 80020d8:	20e1      	movs	r0, #225	; 0xe1
 80020da:	f000 f910 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80020de:	f000 f847 	bl	8002170 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80020e2:	2300      	movs	r3, #0
 80020e4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80020e6:	463b      	mov	r3, r7
 80020e8:	2201      	movs	r2, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	2035      	movs	r0, #53	; 0x35
 80020ee:	f000 f906 	bl	80022fe <ST7789H2_WriteReg>

}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002108:	2300      	movs	r3, #0
 800210a:	723b      	strb	r3, [r7, #8]
 800210c:	e025      	b.n	800215a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d120      	bne.n	8002156 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002114:	2300      	movs	r3, #0
 8002116:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002118:	2300      	movs	r3, #0
 800211a:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 800211c:	2301      	movs	r3, #1
 800211e:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002120:	23f0      	movs	r3, #240	; 0xf0
 8002122:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002124:	2300      	movs	r3, #0
 8002126:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002128:	2300      	movs	r3, #0
 800212a:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	2206      	movs	r2, #6
 8002132:	4619      	mov	r1, r3
 8002134:	2033      	movs	r0, #51	; 0x33
 8002136:	f000 f8e2 	bl	80022fe <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800213a:	2300      	movs	r3, #0
 800213c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800213e:	2350      	movs	r3, #80	; 0x50
 8002140:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2202      	movs	r2, #2
 8002148:	4619      	mov	r1, r3
 800214a:	2037      	movs	r0, #55	; 0x37
 800214c:	f000 f8d7 	bl	80022fe <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	723b      	strb	r3, [r7, #8]
 8002154:	e001      	b.n	800215a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002156:	2360      	movs	r3, #96	; 0x60
 8002158:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	2036      	movs	r0, #54	; 0x36
 8002164:	f000 f8cb 	bl	80022fe <ST7789H2_WriteReg>
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	2029      	movs	r0, #41	; 0x29
 800217a:	f000 f8c0 	bl	80022fe <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2011      	movs	r0, #17
 8002184:	f000 f8bb 	bl	80022fe <ST7789H2_WriteReg>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002192:	23fe      	movs	r3, #254	; 0xfe
 8002194:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2201      	movs	r2, #1
 800219a:	4619      	mov	r1, r3
 800219c:	20bd      	movs	r0, #189	; 0xbd
 800219e:	f000 f8ae 	bl	80022fe <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2010      	movs	r0, #16
 80021a8:	f000 f8a9 	bl	80022fe <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80021ac:	200a      	movs	r0, #10
 80021ae:	f000 fc52 	bl	8002a56 <LCD_IO_Delay>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80021be:	23f0      	movs	r3, #240	; 0xf0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80021ce:	23f0      	movs	r3, #240	; 0xf0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021de:	f000 fc13 	bl	8002a08 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80021e2:	2004      	movs	r0, #4
 80021e4:	f000 f8ad 	bl	8002342 <ST7789H2_ReadReg>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29b      	uxth	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	460a      	mov	r2, r1
 80021fa:	80fb      	strh	r3, [r7, #6]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002200:	2300      	movs	r3, #0
 8002202:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800220a:	2300      	movs	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3b11      	subs	r3, #17
 8002214:	b2db      	uxtb	r3, r3
 8002216:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2204      	movs	r2, #4
 800221e:	4619      	mov	r1, r3
 8002220:	202a      	movs	r0, #42	; 0x2a
 8002222:	f000 f86c 	bl	80022fe <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3b11      	subs	r3, #17
 800223a:	b2db      	uxtb	r3, r3
 800223c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	2204      	movs	r2, #4
 8002244:	4619      	mov	r1, r3
 8002246:	202b      	movs	r0, #43	; 0x2b
 8002248:	f000 f859 	bl	80022fe <ST7789H2_WriteReg>
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
 800225e:	460b      	mov	r3, r1
 8002260:	80bb      	strh	r3, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002266:	88ba      	ldrh	r2, [r7, #4]
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ffbf 	bl	80021f0 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	202c      	movs	r0, #44	; 0x2c
 8002278:	f000 f841 	bl	80022fe <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fbc8 	bl	8002a14 <LCD_IO_WriteData>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	80fb      	strh	r3, [r7, #6]
 8002298:	4613      	mov	r3, r2
 800229a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ffa4 	bl	80021f0 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80022a8:	88ba      	ldrh	r2, [r7, #4]
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f9bd 	bl	800262e <ST7789H2_ReadPixel_rgb888>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	733a      	strb	r2, [r7, #12]
 80022ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80022be:	737a      	strb	r2, [r7, #13]
 80022c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80022c4:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80022c6:	7b3b      	ldrb	r3, [r7, #12]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80022cc:	7b7b      	ldrb	r3, [r7, #13]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80022d2:	7bbb      	ldrb	r3, [r7, #14]
 80022d4:	08db      	lsrs	r3, r3, #3
 80022d6:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	02db      	lsls	r3, r3, #11
 80022de:	b29a      	uxth	r2, r3
 80022e0:	7dbb      	ldrb	r3, [r7, #22]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	7d7b      	ldrb	r3, [r7, #21]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80022f4:	8a7b      	ldrh	r3, [r7, #18]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	6039      	str	r1, [r7, #0]
 8002308:	71fb      	strb	r3, [r7, #7]
 800230a:	4613      	mov	r3, r2
 800230c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fb8c 	bl	8002a2e <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e00a      	b.n	8002332 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fb74 	bl	8002a14 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3f0      	bcc.n	800231c <ST7789H2_WriteReg+0x1e>
  }
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fb6d 	bl	8002a2e <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002354:	f000 fb78 	bl	8002a48 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002358:	f000 fb76 	bl	8002a48 <LCD_IO_ReadData>
 800235c:	4603      	mov	r3, r0
 800235e:	b2db      	uxtb	r3, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002368:	b490      	push	{r4, r7}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4623      	mov	r3, r4
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	4603      	mov	r3, r0
 800237c:	80bb      	strh	r3, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]
 8002382:	4613      	mov	r3, r2
 8002384:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2bef      	cmp	r3, #239	; 0xef
 800238a:	d803      	bhi.n	8002394 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <ST7789H2_SetDisplayWindow+0x94>)
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	8013      	strh	r3, [r2, #0]
 8002392:	e002      	b.n	800239a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <ST7789H2_SetDisplayWindow+0x94>)
 8002396:	2200      	movs	r2, #0
 8002398:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	2bef      	cmp	r3, #239	; 0xef
 800239e:	d803      	bhi.n	80023a8 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80023a0:	4a17      	ldr	r2, [pc, #92]	; (8002400 <ST7789H2_SetDisplayWindow+0x98>)
 80023a2:	88bb      	ldrh	r3, [r7, #4]
 80023a4:	8013      	strh	r3, [r2, #0]
 80023a6:	e002      	b.n	80023ae <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <ST7789H2_SetDisplayWindow+0x98>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4413      	add	r3, r2
 80023b4:	2bf0      	cmp	r3, #240	; 0xf0
 80023b6:	dc08      	bgt.n	80023ca <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	4413      	add	r3, r2
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <ST7789H2_SetDisplayWindow+0x9c>)
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e002      	b.n	80023d0 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <ST7789H2_SetDisplayWindow+0x9c>)
 80023cc:	22ef      	movs	r2, #239	; 0xef
 80023ce:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80023d0:	883a      	ldrh	r2, [r7, #0]
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	2bf0      	cmp	r3, #240	; 0xf0
 80023d8:	dc08      	bgt.n	80023ec <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80023da:	883a      	ldrh	r2, [r7, #0]
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <ST7789H2_SetDisplayWindow+0xa0>)
 80023e8:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80023ea:	e002      	b.n	80023f2 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <ST7789H2_SetDisplayWindow+0xa0>)
 80023ee:	22ef      	movs	r2, #239	; 0xef
 80023f0:	801a      	strh	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc90      	pop	{r4, r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000120 	.word	0x20000120
 8002400:	20000122 	.word	0x20000122
 8002404:	20000048 	.word	0x20000048
 8002408:	2000004a 	.word	0x2000004a

0800240c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	4603      	mov	r3, r0
 8002420:	80bb      	strh	r3, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
 8002426:	4613      	mov	r3, r2
 8002428:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fedb 	bl	80021f0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	202c      	movs	r0, #44	; 0x2c
 8002440:	f7ff ff5d 	bl	80022fe <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002444:	2300      	movs	r3, #0
 8002446:	81fb      	strh	r3, [r7, #14]
 8002448:	e006      	b.n	8002458 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fae1 	bl	8002a14 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	3301      	adds	r3, #1
 8002456:	81fb      	strh	r3, [r7, #14]
 8002458:	89fa      	ldrh	r2, [r7, #14]
 800245a:	883b      	ldrh	r3, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3f4      	bcc.n	800244a <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	4604      	mov	r4, r0
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4623      	mov	r3, r4
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	4603      	mov	r3, r0
 800247c:	80bb      	strh	r3, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]
 8002482:	4613      	mov	r3, r2
 8002484:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	88bb      	ldrh	r3, [r7, #4]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fead 	bl	80021f0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	202c      	movs	r0, #44	; 0x2c
 800249c:	f7ff ff2f 	bl	80022fe <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	81fb      	strh	r3, [r7, #14]
 80024a4:	e00b      	b.n	80024be <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	4413      	add	r3, r2
 80024ac:	b299      	uxth	r1, r3
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	88bb      	ldrh	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fece 	bl	8002254 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	3301      	adds	r3, #1
 80024bc:	81fb      	strh	r3, [r7, #14]
 80024be:	89fa      	ldrh	r2, [r7, #14]
 80024c0:	883b      	ldrh	r3, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3ef      	bcc.n	80024a6 <ST7789H2_DrawVLine+0x3e>
  }
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
	...

080024d0 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	603a      	str	r2, [r7, #0]
 80024da:	80fb      	strh	r3, [r7, #6]
 80024dc:	460b      	mov	r3, r1
 80024de:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <ST7789H2_DrawBitmap+0xdc>)
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <ST7789H2_DrawBitmap+0xe0>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <ST7789H2_DrawBitmap+0xe4>)
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <ST7789H2_DrawBitmap+0xe8>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b29b      	uxth	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	3302      	adds	r3, #2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	3304      	adds	r3, #4
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	461a      	mov	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	330a      	adds	r3, #10
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	461a      	mov	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4413      	add	r3, r2
 8002554:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002556:	88ba      	ldrh	r2, [r7, #4]
 8002558:	89bb      	ldrh	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e01d      	b.n	800259c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fe3f 	bl	80021f0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b299      	uxth	r1, r3
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4413      	add	r3, r2
 8002588:	89fa      	ldrh	r2, [r7, #14]
 800258a:	88f8      	ldrh	r0, [r7, #6]
 800258c:	f000 f898 	bl	80026c0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3301      	adds	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b01      	subs	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	88bb      	ldrh	r3, [r7, #4]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8dd      	bhi.n	8002560 <ST7789H2_DrawBitmap+0x90>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000048 	.word	0x20000048
 80025b0:	20000120 	.word	0x20000120
 80025b4:	2000004a 	.word	0x2000004a
 80025b8:	20000122 	.word	0x20000122

080025bc <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4604      	mov	r4, r0
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	80fb      	strh	r3, [r7, #6]
 80025ce:	4603      	mov	r3, r0
 80025d0:	80bb      	strh	r3, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	807b      	strh	r3, [r7, #2]
 80025d6:	4613      	mov	r3, r2
 80025d8:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e019      	b.n	8002618 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fdff 	bl	80021f0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	b299      	uxth	r1, r3
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	4413      	add	r3, r2
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	f000 f85a 	bl	80026c0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3301      	adds	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	88ba      	ldrh	r2, [r7, #4]
 800261a:	883b      	ldrh	r3, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4293      	cmp	r3, r2
 8002624:	d3de      	bcc.n	80025e4 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}

0800262e <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	460a      	mov	r2, r1
 8002638:	80fb      	strh	r3, [r7, #6]
 800263a:	4613      	mov	r3, r2
 800263c:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800263e:	88ba      	ldrh	r2, [r7, #4]
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fdd3 	bl	80021f0 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	202e      	movs	r0, #46	; 0x2e
 8002650:	f7ff fe55 	bl	80022fe <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002654:	f000 f9f8 	bl	8002a48 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002658:	f000 f9f6 	bl	8002a48 <LCD_IO_ReadData>
 800265c:	4603      	mov	r3, r0
 800265e:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002660:	f000 f9f2 	bl	8002a48 <LCD_IO_ReadData>
 8002664:	4603      	mov	r3, r0
 8002666:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002668:	8afb      	ldrh	r3, [r7, #22]
 800266a:	121b      	asrs	r3, r3, #8
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002682:	8abb      	ldrh	r3, [r7, #20]
 8002684:	121b      	asrs	r3, r3, #8
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f023 0303 	bic.w	r3, r3, #3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4611      	mov	r1, r2
 800269c:	8019      	strh	r1, [r3, #0]
 800269e:	3302      	adds	r3, #2
 80026a0:	0c12      	lsrs	r2, r2, #16
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	2300      	movs	r3, #0
 80026a6:	7c3a      	ldrb	r2, [r7, #16]
 80026a8:	f362 0307 	bfi	r3, r2, #0, #8
 80026ac:	7c7a      	ldrb	r2, [r7, #17]
 80026ae:	f362 230f 	bfi	r3, r2, #8, #8
 80026b2:	7cba      	ldrb	r2, [r7, #18]
 80026b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	4603      	mov	r3, r0
 80026ca:	81fb      	strh	r3, [r7, #14]
 80026cc:	460b      	mov	r3, r1
 80026ce:	81bb      	strh	r3, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	202c      	movs	r0, #44	; 0x2c
 80026e2:	f7ff fe0c 	bl	80022fe <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e02a      	b.n	8002742 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <ST7789H2_DrawRGBHLine+0x98>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d321      	bcc.n	800273c <ST7789H2_DrawRGBHLine+0x7c>
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <ST7789H2_DrawRGBHLine+0x9c>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	89ba      	ldrh	r2, [r7, #12]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d31c      	bcc.n	800273c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <ST7789H2_DrawRGBHLine+0xa0>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4293      	cmp	r3, r2
 800270c:	d816      	bhi.n	800273c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <ST7789H2_DrawRGBHLine+0xa4>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	89ba      	ldrh	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d811      	bhi.n	800273c <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002718:	897a      	ldrh	r2, [r7, #10]
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	4413      	add	r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f96f 	bl	8002a14 <LCD_IO_WriteData>
      }      
      i++;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3301      	adds	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	897a      	ldrh	r2, [r7, #10]
 8002744:	89fb      	ldrh	r3, [r7, #14]
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4293      	cmp	r3, r2
 800274e:	d3cd      	bcc.n	80026ec <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002750:	bf00      	nop
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000120 	.word	0x20000120
 800275c:	20000122 	.word	0x20000122
 8002760:	20000048 	.word	0x20000048
 8002764:	2000004a 	.word	0x2000004a

08002768 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	460a      	mov	r2, r1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	4613      	mov	r3, r2
 8002776:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <BSP_PB_Init+0xa0>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <BSP_PB_Init+0xa0>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <BSP_PB_Init+0xa0>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d111      	bne.n	80027be <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800279a:	2301      	movs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80027a2:	2302      	movs	r3, #2
 80027a4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <BSP_PB_Init+0xa4>)
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	f107 020c 	add.w	r2, r7, #12
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fb33 	bl	8003e24 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80027be:	79bb      	ldrb	r3, [r7, #6]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d11d      	bne.n	8002800 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027c4:	2301      	movs	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80027c8:	2302      	movs	r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <BSP_PB_Init+0xa8>)
 80027d2:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a0d      	ldr	r2, [pc, #52]	; (800280c <BSP_PB_Init+0xa4>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fb1e 	bl	8003e24 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80027e8:	2306      	movs	r3, #6
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	210f      	movs	r1, #15
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 f844 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80027f6:	2306      	movs	r3, #6
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f85b 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  }
}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	2000004c 	.word	0x2000004c
 8002810:	10110000 	.word	0x10110000

08002814 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a39      	ldr	r2, [pc, #228]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6393      	str	r3, [r2, #56]	; 0x38
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 800285c:	f043 0310 	orr.w	r3, r3, #16
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 8002894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <FMC_BANK3_MspInit+0xf4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80028b2:	230c      	movs	r3, #12
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80028b6:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80028ba:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4812      	ldr	r0, [pc, #72]	; (800290c <FMC_BANK3_MspInit+0xf8>)
 80028c4:	f001 faae 	bl	8003e24 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80028c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028cc:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	480e      	ldr	r0, [pc, #56]	; (8002910 <FMC_BANK3_MspInit+0xfc>)
 80028d6:	f001 faa5 	bl	8003e24 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80028da:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80028de:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	480b      	ldr	r0, [pc, #44]	; (8002914 <FMC_BANK3_MspInit+0x100>)
 80028e8:	f001 fa9c 	bl	8003e24 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80028ec:	f240 433f 	movw	r3, #1087	; 0x43f
 80028f0:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4807      	ldr	r0, [pc, #28]	; (8002918 <FMC_BANK3_MspInit+0x104>)
 80028fa:	f001 fa93 	bl	8003e24 <HAL_GPIO_Init>
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021400 	.word	0x40021400
 8002918:	40021800 	.word	0x40021800

0800291c <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 800291c:	b580      	push	{r7, lr}
 800291e:	b09c      	sub	sp, #112	; 0x70
 8002920:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002922:	f7ff ff77 	bl	8002814 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002926:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800292a:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <FMC_BANK3_Init+0x8c>)
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002930:	2303      	movs	r3, #3
 8002932:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002938:	2304      	movs	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 800293c:	2301      	movs	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002940:	2302      	movs	r3, #2
 8002942:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 800294c:	2304      	movs	r3, #4
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002958:	2310      	movs	r3, #16
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002968:	2300      	movs	r3, #0
 800296a:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002988:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 800298a:	2300      	movs	r3, #0
 800298c:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800298e:	2300      	movs	r3, #0
 8002990:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002992:	1d3a      	adds	r2, r7, #4
 8002994:	1d39      	adds	r1, r7, #4
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	4618      	mov	r0, r3
 800299c:	f005 fd0e 	bl	80083bc <HAL_SRAM_Init>
}
 80029a0:	bf00      	nop
 80029a2:	3770      	adds	r7, #112	; 0x70
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	a0000104 	.word	0xa0000104

080029ac <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80029b6:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029be:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80029d8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80029dc:	79fa      	ldrb	r2, [r7, #7]
 80029de:	b292      	uxth	r2, r2
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 80029f6:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80029fa:	885b      	ldrh	r3, [r3, #2]
 80029fc:	b29b      	uxth	r3, r3
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002a0c:	f7ff ff86 	bl	800291c <FMC_BANK3_Init>
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ffc3 	bl	80029ac <FMC_BANK3_WriteData>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffc7 	bl	80029ce <FMC_BANK3_WriteReg>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002a4c:	f7ff ffd1 	bl	80029f2 <FMC_BANK3_ReadData>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb9e 	bl	80031a0 <HAL_Delay>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002a74:	f000 f80e 	bl	8002a94 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002a88:	f000 f80b 	bl	8002aa2 <BSP_AUDIO_OUT_Error_CallBack>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002ab8:	f000 f804 	bl	8002ac4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 f804 	bl	8002ae4 <BSP_LCD_InitEx>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002af0:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <BSP_LCD_InitEx+0xc0>)
 8002af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af6:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <BSP_LCD_InitEx+0xc0>)
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <BSP_LCD_InitEx+0xc4>)
 8002afc:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <BSP_LCD_InitEx+0xc0>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002b04:	f000 fa7e 	bl	8003004 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	4827      	ldr	r0, [pc, #156]	; (8002bac <BSP_LCD_InitEx+0xc8>)
 8002b0e:	f001 fb33 	bl	8004178 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b18:	4825      	ldr	r0, [pc, #148]	; (8002bb0 <BSP_LCD_InitEx+0xcc>)
 8002b1a:	f001 fb2d 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f000 fb3e 	bl	80031a0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2a:	4821      	ldr	r0, [pc, #132]	; (8002bb0 <BSP_LCD_InitEx+0xcc>)
 8002b2c:	f001 fb24 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002b30:	200a      	movs	r0, #10
 8002b32:	f000 fb35 	bl	80031a0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b3c:	481c      	ldr	r0, [pc, #112]	; (8002bb0 <BSP_LCD_InitEx+0xcc>)
 8002b3e:	f001 fb1b 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002b42:	2014      	movs	r0, #20
 8002b44:	f000 fb2c 	bl	80031a0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <BSP_LCD_InitEx+0xcc>)
 8002b50:	f001 fb12 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002b54:	200a      	movs	r0, #10
 8002b56:	f000 fb23 	bl	80031a0 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <BSP_LCD_InitEx+0xd0>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b85      	cmp	r3, #133	; 0x85
 8002b64:	d118      	bne.n	8002b98 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <BSP_LCD_InitEx+0xd4>)
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <BSP_LCD_InitEx+0xd0>)
 8002b6a:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <BSP_LCD_InitEx+0xd4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7ff fabd 	bl	80020fa <ST7789H2_SetOrientation>
 8002b80:	e005      	b.n	8002b8e <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d102      	bne.n	8002b8e <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f7ff fab6 	bl	80020fa <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <BSP_LCD_InitEx+0xd8>)
 8002b90:	f000 f84e 	bl	8002c30 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200005ec 	.word	0x200005ec
 8002ba8:	20000050 	.word	0x20000050
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	20000010 	.word	0x20000010
 8002bb8:	20000124 	.word	0x20000124
 8002bbc:	20000058 	.word	0x20000058

08002bc0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <BSP_LCD_GetXSize+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	4798      	blx	r3
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000124 	.word	0x20000124

08002bd8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <BSP_LCD_GetYSize+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	4798      	blx	r3
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000124 	.word	0x20000124

08002bf0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4a03      	ldr	r2, [pc, #12]	; (8002c0c <BSP_LCD_SetTextColor+0x1c>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	200005ec 	.word	0x200005ec

08002c10 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <BSP_LCD_SetBackColor+0x1c>)
 8002c1e:	6053      	str	r3, [r2, #4]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	200005ec 	.word	0x200005ec

08002c30 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <BSP_LCD_SetFont+0x1c>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6093      	str	r3, [r2, #8]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200005ec 	.word	0x200005ec

08002c50 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <BSP_LCD_Clear+0x68>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <BSP_LCD_Clear+0x68>)
 8002c6c:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002c6e:	f7ff ffb3 	bl	8002bd8 <BSP_LCD_GetYSize>
 8002c72:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00d      	b.n	8002c96 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	b29c      	uxth	r4, r3
 8002c7e:	f7ff ff9f 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 f832 	bl	8002cf4 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3ed      	bcc.n	8002c7a <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002c9e:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <BSP_LCD_Clear+0x68>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <BSP_LCD_Clear+0x68>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ffa0 	bl	8002bf0 <BSP_LCD_SetTextColor>
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	200005ec 	.word	0x200005ec

08002cbc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	80bb      	strh	r3, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <BSP_LCD_DrawPixel+0x34>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <BSP_LCD_DrawPixel+0x34>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	88b9      	ldrh	r1, [r7, #4]
 8002ce2:	88f8      	ldrh	r0, [r7, #6]
 8002ce4:	4798      	blx	r3
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000124 	.word	0x20000124

08002cf4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	80bb      	strh	r3, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <BSP_LCD_DrawHLine+0x6c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <BSP_LCD_DrawHLine+0x6c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a1c      	ldr	r4, [r3, #32]
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <BSP_LCD_DrawHLine+0x70>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b298      	uxth	r0, r3
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	88ba      	ldrh	r2, [r7, #4]
 8002d24:	88f9      	ldrh	r1, [r7, #6]
 8002d26:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002d28:	e015      	b.n	8002d56 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e00e      	b.n	8002d4e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	4413      	add	r3, r2
 8002d38:	b298      	uxth	r0, r3
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <BSP_LCD_DrawHLine+0x70>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7ff ffba 	bl	8002cbc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3ec      	bcc.n	8002d30 <BSP_LCD_DrawHLine+0x3c>
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000124 	.word	0x20000124
 8002d64:	200005ec 	.word	0x200005ec

08002d68 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
 8002d72:	460b      	mov	r3, r1
 8002d74:	80bb      	strh	r3, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	f1c3 0303 	rsb	r3, r3, #3
 8002d82:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d8c:	e09a      	b.n	8002ec4 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4413      	add	r3, r2
 8002d96:	b298      	uxth	r0, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	88ba      	ldrh	r2, [r7, #4]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	b299      	uxth	r1, r3
 8002da2:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	f7ff ff87 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	b298      	uxth	r0, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	88ba      	ldrh	r2, [r7, #4]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b299      	uxth	r1, r3
 8002dc2:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f7ff ff77 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b298      	uxth	r0, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	88ba      	ldrh	r2, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b299      	uxth	r1, r3
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	f7ff ff67 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b298      	uxth	r0, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	88ba      	ldrh	r2, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	b299      	uxth	r1, r3
 8002e02:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7ff ff57 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4413      	add	r3, r2
 8002e16:	b298      	uxth	r0, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff ff47 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	b298      	uxth	r0, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	b299      	uxth	r1, r3
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff ff37 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4413      	add	r3, r2
 8002e56:	b298      	uxth	r0, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	b299      	uxth	r1, r3
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff ff27 	bl	8002cbc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	b298      	uxth	r0, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	88bb      	ldrh	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b299      	uxth	r1, r3
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <BSP_LCD_DrawCircle+0x170>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f7ff ff17 	bl	8002cbc <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002e8e:	4813      	ldr	r0, [pc, #76]	; (8002edc <BSP_LCD_DrawCircle+0x174>)
 8002e90:	f7ff fece 	bl	8002c30 <BSP_LCD_SetFont>

    if (decision < 0)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da06      	bge.n	8002ea8 <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e00a      	b.n	8002ebe <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	330a      	adds	r3, #10
 8002eb6:	617b      	str	r3, [r7, #20]
      current_y--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	f67f af60 	bls.w	8002d8e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200005ec 	.word	0x200005ec
 8002edc:	20000058 	.word	0x20000058

08002ee0 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
 8002eea:	460b      	mov	r3, r1
 8002eec:	80bb      	strh	r3, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	f1c3 0303 	rsb	r3, r3, #3
 8002efa:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002f04:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <BSP_LCD_FillCircle+0x120>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fe70 	bl	8002bf0 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 8002f10:	e061      	b.n	8002fd6 <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d021      	beq.n	8002f5c <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b298      	uxth	r0, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	88bb      	ldrh	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	b299      	uxth	r1, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff fedd 	bl	8002cf4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b298      	uxth	r0, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	88ba      	ldrh	r2, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	f7ff fecc 	bl	8002cf4 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d021      	beq.n	8002fa6 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	b298      	uxth	r0, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	88ba      	ldrh	r2, [r7, #4]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	b299      	uxth	r1, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f7ff feb8 	bl	8002cf4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b298      	uxth	r0, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	88bb      	ldrh	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	b299      	uxth	r1, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f7ff fea7 	bl	8002cf4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da06      	bge.n	8002fba <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3306      	adds	r3, #6
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	e00a      	b.n	8002fd0 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	009a      	lsls	r2, r3, #2
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	330a      	adds	r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
      current_y--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d999      	bls.n	8002f12 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <BSP_LCD_FillCircle+0x120>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe03 	bl	8002bf0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	88b9      	ldrh	r1, [r7, #4]
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff feb9 	bl	8002d68 <BSP_LCD_DrawCircle>
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200005ec 	.word	0x200005ec

08003004 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 800304c:	f043 0310 	orr.w	r3, r3, #16
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <BSP_LCD_MspInit+0xac>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800305e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003062:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003068:	2302      	movs	r3, #2
 800306a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	4619      	mov	r1, r3
 8003076:	480f      	ldr	r0, [pc, #60]	; (80030b4 <BSP_LCD_MspInit+0xb0>)
 8003078:	f000 fed4 	bl	8003e24 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 800307c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003080:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	4619      	mov	r1, r3
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <BSP_LCD_MspInit+0xb0>)
 800308e:	f000 fec9 	bl	8003e24 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003092:	2320      	movs	r3, #32
 8003094:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003096:	2301      	movs	r3, #1
 8003098:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <BSP_LCD_MspInit+0xb4>)
 80030a2:	f000 febf 	bl	8003e24 <HAL_GPIO_Init>
}
 80030a6:	bf00      	nop
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 fbbf 	bl	8003868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7fe f80e 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fbd7 	bl	80038d2 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 fb9f 	bl	800387e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000000c 	.word	0x2000000c
 8003158:	20000064 	.word	0x20000064
 800315c:	20000060 	.word	0x20000060

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000064 	.word	0x20000064
 8003184:	200005f8 	.word	0x200005f8

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	200005f8 	.word	0x200005f8

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_Delay+0x40>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000064 	.word	0x20000064

080031e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e033      	b.n	8003262 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd ffac 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800322a:	f023 0302 	bic.w	r3, r3, #2
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f94a 	bl	80034d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
 8003252:	e001      	b.n	8003258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e113      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x244>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d925      	bls.n	80032e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68d9      	ldr	r1, [r3, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	2207      	movs	r2, #7
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43da      	mvns	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	400a      	ands	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4403      	add	r3, r0
 80032d6:	3b1e      	subs	r3, #30
 80032d8:	409a      	lsls	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e022      	b.n	800332a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	4603      	mov	r3, r0
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4403      	add	r3, r0
 8003320:	409a      	lsls	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d824      	bhi.n	800337c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b05      	subs	r3, #5
 8003344:	221f      	movs	r2, #31
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b05      	subs	r3, #5
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
 800337a:	e04c      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d824      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b23      	subs	r3, #35	; 0x23
 8003396:	221f      	movs	r2, #31
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43da      	mvns	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	400a      	ands	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b23      	subs	r3, #35	; 0x23
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
 80033cc:	e023      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b41      	subs	r3, #65	; 0x41
 80033e0:	221f      	movs	r2, #31
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	400a      	ands	r2, r1
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b41      	subs	r3, #65	; 0x41
 800340a:	fa00 f203 	lsl.w	r2, r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_ADC_ConfigChannel+0x250>)
 8003418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_ADC_ConfigChannel+0x254>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10f      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x1d8>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d10b      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_ADC_ConfigChannel+0x254>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12b      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x23a>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_ADC_ConfigChannel+0x258>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x1f4>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b11      	cmp	r3, #17
 800345e:	d122      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <HAL_ADC_ConfigChannel+0x258>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d111      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_ADC_ConfigChannel+0x260>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	0c9a      	lsrs	r2, r3, #18
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003498:	e002      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3b01      	subs	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f9      	bne.n	800349a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40012300 	.word	0x40012300
 80034c0:	40012000 	.word	0x40012000
 80034c4:	10000012 	.word	0x10000012
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <ADC_Init+0x1f0>)
 80034da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <ADC_Init+0x1f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e00f      	b.n	80035ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0202 	bic.w	r2, r2, #2
 80035dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
 80035e8:	005a      	lsls	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800361a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	3b01      	subs	r3, #1
 8003628:	035a      	lsls	r2, r3, #13
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e007      	b.n	8003644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003642:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	3b01      	subs	r3, #1
 8003660:	051a      	lsls	r2, r3, #20
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003686:	025a      	lsls	r2, r3, #9
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	029a      	lsls	r2, r3, #10
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012300 	.word	0x40012300
 80036c4:	0f000001 	.word	0x0f000001

080036c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e4:	4013      	ands	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60d3      	str	r3, [r2, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__NVIC_GetPriorityGrouping+0x18>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 0307 	and.w	r3, r3, #7
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	2b00      	cmp	r3, #0
 800373c:	db0b      	blt.n	8003756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4907      	ldr	r1, [pc, #28]	; (8003764 <__NVIC_EnableIRQ+0x38>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2001      	movs	r0, #1
 800374e:	fa00 f202 	lsl.w	r2, r0, r2
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	; (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	; (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	bf28      	it	cs
 80037da:	2304      	movcs	r3, #4
 80037dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d902      	bls.n	80037ec <NVIC_EncodePriority+0x30>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3b03      	subs	r3, #3
 80037ea:	e000      	b.n	80037ee <NVIC_EncodePriority+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003804:	f04f 31ff 	mov.w	r1, #4294967295
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43d9      	mvns	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	4313      	orrs	r3, r2
         );
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003834:	d301      	bcc.n	800383a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003836:	2301      	movs	r3, #1
 8003838:	e00f      	b.n	800385a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <SysTick_Config+0x40>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003842:	210f      	movs	r1, #15
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f7ff ff8e 	bl	8003768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SysTick_Config+0x40>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <SysTick_Config+0x40>)
 8003854:	2207      	movs	r2, #7
 8003856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	e000e010 	.word	0xe000e010

08003868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff29 	bl	80036c8 <__NVIC_SetPriorityGrouping>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003890:	f7ff ff3e 	bl	8003710 <__NVIC_GetPriorityGrouping>
 8003894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7ff ff8e 	bl	80037bc <NVIC_EncodePriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff5d 	bl	8003768 <__NVIC_SetPriority>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff31 	bl	800372c <__NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ffa2 	bl	8003824 <SysTick_Config>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e014      	b.n	8003926 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd fca3 	bl	8001258 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	795b      	ldrb	r3, [r3, #5]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_DAC_ConfigChannel+0x20>
 800394a:	2302      	movs	r3, #2
 800394c:	e036      	b.n	80039bc <HAL_DAC_ConfigChannel+0x8e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2202      	movs	r2, #2
 8003958:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003962:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4013      	ands	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	22c0      	movs	r2, #192	; 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43da      	mvns	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	400a      	ands	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0cf      	b.n	8003b7a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_DFSDM_ChannelInit+0x1bc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_DFSDM_ChannelInit+0x3a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_DFSDM_ChannelInit+0x1c0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_DFSDM_ChannelInit+0x3a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <HAL_DFSDM_ChannelInit+0x1c4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_DFSDM_ChannelInit+0x3a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a64      	ldr	r2, [pc, #400]	; (8003b90 <HAL_DFSDM_ChannelInit+0x1c8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d106      	bne.n	8003a10 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003a04:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003a06:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003a08:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e005      	b.n	8003a1c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003a10:	4b62      	ldr	r3, [pc, #392]	; (8003b9c <HAL_DFSDM_ChannelInit+0x1d4>)
 8003a12:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003a14:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8003a16:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003a18:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003a1a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f8c1 	bl	8003ba8 <DFSDM_GetChannelFromInstance>
 8003a26:	4603      	mov	r3, r0
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0a0      	b.n	8003b7a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd fc51 	bl	80012e0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d125      	bne.n	8003a9c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d108      	bne.n	8003a90 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003aaa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003aba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003ac0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020f 	bic.w	r2, r2, #15
 8003ad8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b00:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 0207 	and.w	r2, r2, #7
 8003b2c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b58:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f81e 	bl	8003ba8 <DFSDM_GetChannelFromInstance>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40016000 	.word	0x40016000
 8003b88:	40016020 	.word	0x40016020
 8003b8c:	40016040 	.word	0x40016040
 8003b90:	40016060 	.word	0x40016060
 8003b94:	20000128 	.word	0x20000128
 8003b98:	2000012c 	.word	0x2000012c
 8003b9c:	2000013c 	.word	0x2000013c
 8003ba0:	20000140 	.word	0x20000140
 8003ba4:	40016400 	.word	0x40016400

08003ba8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <DFSDM_GetChannelFromInstance+0x9c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <DFSDM_GetChannelFromInstance+0x18>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <DFSDM_GetChannelFromInstance+0xa0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d102      	bne.n	8003bc6 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e037      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <DFSDM_GetChannelFromInstance+0xa4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <DFSDM_GetChannelFromInstance+0x2e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <DFSDM_GetChannelFromInstance+0xa8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d102      	bne.n	8003bdc <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e02c      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <DFSDM_GetChannelFromInstance+0xac>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <DFSDM_GetChannelFromInstance+0x44>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <DFSDM_GetChannelFromInstance+0xb0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d102      	bne.n	8003bf2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003bec:	2302      	movs	r3, #2
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e021      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <DFSDM_GetChannelFromInstance+0xb4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <DFSDM_GetChannelFromInstance+0x5a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <DFSDM_GetChannelFromInstance+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d102      	bne.n	8003c08 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003c02:	2303      	movs	r3, #3
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e016      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <DFSDM_GetChannelFromInstance+0xbc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003c10:	2304      	movs	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e00f      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <DFSDM_GetChannelFromInstance+0xc0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d102      	bne.n	8003c24 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003c1e:	2305      	movs	r3, #5
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e008      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <DFSDM_GetChannelFromInstance+0xc4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d102      	bne.n	8003c32 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003c2c:	2306      	movs	r3, #6
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e001      	b.n	8003c36 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003c32:	2307      	movs	r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40016000 	.word	0x40016000
 8003c48:	40016400 	.word	0x40016400
 8003c4c:	40016020 	.word	0x40016020
 8003c50:	40016420 	.word	0x40016420
 8003c54:	40016040 	.word	0x40016040
 8003c58:	40016440 	.word	0x40016440
 8003c5c:	40016060 	.word	0x40016060
 8003c60:	40016460 	.word	0x40016460
 8003c64:	40016480 	.word	0x40016480
 8003c68:	400164a0 	.word	0x400164a0
 8003c6c:	400164c0 	.word	0x400164c0

08003c70 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e081      	b.n	8003d86 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fc34 	bl	8001504 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e006      	b.n	8003cf8 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d104      	bne.n	8003d0a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	ea42 0103 	orr.w	r1, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d138      	bne.n	8003e16 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e032      	b.n	8003e18 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	e165      	b.n	800410c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e40:	2201      	movs	r2, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	f040 8154 	bne.w	8004106 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d00b      	beq.n	8003e7e <HAL_GPIO_Init+0x5a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e72:	2b11      	cmp	r3, #17
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b12      	cmp	r3, #18
 8003e7c:	d130      	bne.n	8003ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2203      	movs	r2, #3
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 0201 	and.w	r2, r3, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0xfc>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b12      	cmp	r3, #18
 8003f1e:	d123      	bne.n	8003f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3208      	adds	r2, #8
 8003f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	08da      	lsrs	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2203      	movs	r2, #3
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0203 	and.w	r2, r3, #3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80ae 	beq.w	8004106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_GPIO_Init+0x2fc>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_GPIO_Init+0x2fc>)
 8003fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b59      	ldr	r3, [pc, #356]	; (8004120 <HAL_GPIO_Init+0x2fc>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc6:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_GPIO_Init+0x300>)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4e      	ldr	r2, [pc, #312]	; (8004128 <HAL_GPIO_Init+0x304>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d025      	beq.n	800403e <HAL_GPIO_Init+0x21a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4d      	ldr	r2, [pc, #308]	; (800412c <HAL_GPIO_Init+0x308>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01f      	beq.n	800403a <HAL_GPIO_Init+0x216>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4c      	ldr	r2, [pc, #304]	; (8004130 <HAL_GPIO_Init+0x30c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d019      	beq.n	8004036 <HAL_GPIO_Init+0x212>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_GPIO_Init+0x310>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0x20e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4a      	ldr	r2, [pc, #296]	; (8004138 <HAL_GPIO_Init+0x314>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00d      	beq.n	800402e <HAL_GPIO_Init+0x20a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a49      	ldr	r2, [pc, #292]	; (800413c <HAL_GPIO_Init+0x318>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x206>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_GPIO_Init+0x31c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_GPIO_Init+0x202>
 8004022:	2306      	movs	r3, #6
 8004024:	e00c      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 8004026:	2307      	movs	r3, #7
 8004028:	e00a      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 800402a:	2305      	movs	r3, #5
 800402c:	e008      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 800402e:	2304      	movs	r3, #4
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 8004032:	2303      	movs	r3, #3
 8004034:	e004      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 8004036:	2302      	movs	r3, #2
 8004038:	e002      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_GPIO_Init+0x21c>
 800403e:	2300      	movs	r3, #0
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f002 0203 	and.w	r2, r2, #3
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	4093      	lsls	r3, r2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004050:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_GPIO_Init+0x300>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_GPIO_Init+0x320>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004082:	4a30      	ldr	r2, [pc, #192]	; (8004144 <HAL_GPIO_Init+0x320>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_GPIO_Init+0x320>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <HAL_GPIO_Init+0x320>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_GPIO_Init+0x320>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040d6:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <HAL_GPIO_Init+0x320>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_GPIO_Init+0x320>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004100:	4a10      	ldr	r2, [pc, #64]	; (8004144 <HAL_GPIO_Init+0x320>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3301      	adds	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	f67f ae96 	bls.w	8003e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3724      	adds	r7, #36	; 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40023800 	.word	0x40023800
 8004124:	40013800 	.word	0x40013800
 8004128:	40020000 	.word	0x40020000
 800412c:	40020400 	.word	0x40020400
 8004130:	40020800 	.word	0x40020800
 8004134:	40020c00 	.word	0x40020c00
 8004138:	40021000 	.word	0x40021000
 800413c:	40021400 	.word	0x40021400
 8004140:	40021800 	.word	0x40021800
 8004144:	40013c00 	.word	0x40013c00

08004148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e001      	b.n	800416a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004188:	787b      	ldrb	r3, [r7, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004194:	e003      	b.n	800419e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	041a      	lsls	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f806 	bl	80041dc <HAL_GPIO_EXTI_Callback>
  }
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40013c00 	.word	0x40013c00

080041dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80041f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f4:	b08f      	sub	sp, #60	; 0x3c
 80041f6:	af0a      	add	r7, sp, #40	; 0x28
 80041f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e054      	b.n	80042ae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f008 f920 	bl	800c464 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2203      	movs	r2, #3
 8004228:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f005 fae2 	bl	800980c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	687e      	ldr	r6, [r7, #4]
 8004250:	466d      	mov	r5, sp
 8004252:	f106 0410 	add.w	r4, r6, #16
 8004256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004262:	e885 0003 	stmia.w	r5, {r0, r1}
 8004266:	1d33      	adds	r3, r6, #4
 8004268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426a:	6838      	ldr	r0, [r7, #0]
 800426c:	f005 fa5c 	bl	8009728 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f005 fad9 	bl	800982e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	687e      	ldr	r6, [r7, #4]
 8004284:	466d      	mov	r5, sp
 8004286:	f106 0410 	add.w	r4, r6, #16
 800428a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800428e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004296:	e885 0003 	stmia.w	r5, {r0, r1}
 800429a:	1d33      	adds	r3, r6, #4
 800429c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f005 fbec 	bl	8009a7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042b6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80042b6:	b590      	push	{r4, r7, lr}
 80042b8:	b089      	sub	sp, #36	; 0x24
 80042ba:	af04      	add	r7, sp, #16
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	4608      	mov	r0, r1
 80042c0:	4611      	mov	r1, r2
 80042c2:	461a      	mov	r2, r3
 80042c4:	4603      	mov	r3, r0
 80042c6:	70fb      	strb	r3, [r7, #3]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70bb      	strb	r3, [r7, #2]
 80042cc:	4613      	mov	r3, r2
 80042ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_HCD_HC_Init+0x28>
 80042da:	2302      	movs	r3, #2
 80042dc:	e07f      	b.n	80043de <HAL_HCD_HC_Init+0x128>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	333d      	adds	r3, #61	; 0x3d
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	3338      	adds	r3, #56	; 0x38
 800430a:	787a      	ldrb	r2, [r7, #1]
 800430c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004320:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	440b      	add	r3, r1
 8004330:	3339      	adds	r3, #57	; 0x39
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	333f      	adds	r3, #63	; 0x3f
 8004346:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800434a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	78bb      	ldrb	r3, [r7, #2]
 8004350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004354:	b2d8      	uxtb	r0, r3
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	333a      	adds	r3, #58	; 0x3a
 8004364:	4602      	mov	r2, r0
 8004366:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004368:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800436c:	2b00      	cmp	r3, #0
 800436e:	da0a      	bge.n	8004386 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	333b      	adds	r3, #59	; 0x3b
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e009      	b.n	800439a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	333b      	adds	r3, #59	; 0x3b
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	333c      	adds	r3, #60	; 0x3c
 80043aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	787c      	ldrb	r4, [r7, #1]
 80043b6:	78ba      	ldrb	r2, [r7, #2]
 80043b8:	78f9      	ldrb	r1, [r7, #3]
 80043ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043bc:	9302      	str	r3, [sp, #8]
 80043be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4623      	mov	r3, r4
 80043cc:	f005 fcd2 	bl	8009d74 <USB_HC_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}

080043e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_HCD_HC_Halt+0x1e>
 8004400:	2302      	movs	r3, #2
 8004402:	e00f      	b.n	8004424 <HAL_HCD_HC_Halt+0x3e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f005 ff0e 	bl	800a236 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	70fb      	strb	r3, [r7, #3]
 800443e:	460b      	mov	r3, r1
 8004440:	70bb      	strb	r3, [r7, #2]
 8004442:	4613      	mov	r3, r2
 8004444:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	333b      	adds	r3, #59	; 0x3b
 8004456:	78ba      	ldrb	r2, [r7, #2]
 8004458:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	333f      	adds	r3, #63	; 0x3f
 800446a:	787a      	ldrb	r2, [r7, #1]
 800446c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800446e:	7c3b      	ldrb	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d114      	bne.n	800449e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	3342      	adds	r3, #66	; 0x42
 8004484:	2203      	movs	r2, #3
 8004486:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	333d      	adds	r3, #61	; 0x3d
 8004498:	7f3a      	ldrb	r2, [r7, #28]
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e009      	b.n	80044b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	3342      	adds	r3, #66	; 0x42
 80044ae:	2202      	movs	r2, #2
 80044b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80044b2:	787b      	ldrb	r3, [r7, #1]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	f200 80d6 	bhi.w	8004666 <HAL_HCD_HC_SubmitRequest+0x23a>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	08004651 	.word	0x08004651
 80044c8:	0800453d 	.word	0x0800453d
 80044cc:	080045c7 	.word	0x080045c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80044d0:	7c3b      	ldrb	r3, [r7, #16]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	f040 80c9 	bne.w	800466a <HAL_HCD_HC_SubmitRequest+0x23e>
 80044d8:	78bb      	ldrb	r3, [r7, #2]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 80c5 	bne.w	800466a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80044e0:	8b3b      	ldrh	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	3351      	adds	r3, #81	; 0x51
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	3351      	adds	r3, #81	; 0x51
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	3342      	adds	r3, #66	; 0x42
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004524:	e0a1      	b.n	800466a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	3342      	adds	r3, #66	; 0x42
 8004536:	2202      	movs	r2, #2
 8004538:	701a      	strb	r2, [r3, #0]
      break;
 800453a:	e096      	b.n	800466a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800453c:	78bb      	ldrb	r3, [r7, #2]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d120      	bne.n	8004584 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	3351      	adds	r3, #81	; 0x51
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	3342      	adds	r3, #66	; 0x42
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800456c:	e07e      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	3342      	adds	r3, #66	; 0x42
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	e073      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	3350      	adds	r3, #80	; 0x50
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	440b      	add	r3, r1
 80045a8:	3342      	adds	r3, #66	; 0x42
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
      break;
 80045ae:	e05d      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3342      	adds	r3, #66	; 0x42
 80045c0:	2202      	movs	r2, #2
 80045c2:	701a      	strb	r2, [r3, #0]
      break;
 80045c4:	e052      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80045c6:	78bb      	ldrb	r3, [r7, #2]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d120      	bne.n	800460e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	3351      	adds	r3, #81	; 0x51
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	3342      	adds	r3, #66	; 0x42
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045f6:	e039      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	440b      	add	r3, r1
 8004606:	3342      	adds	r3, #66	; 0x42
 8004608:	2202      	movs	r2, #2
 800460a:	701a      	strb	r2, [r3, #0]
      break;
 800460c:	e02e      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	440b      	add	r3, r1
 800461c:	3350      	adds	r3, #80	; 0x50
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	3342      	adds	r3, #66	; 0x42
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
      break;
 8004638:	e018      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	3342      	adds	r3, #66	; 0x42
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
      break;
 800464e:	e00d      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	3342      	adds	r3, #66	; 0x42
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
      break;
 8004664:	e002      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800466a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	3344      	adds	r3, #68	; 0x44
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	8b39      	ldrh	r1, [r7, #24]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4403      	add	r3, r0
 8004690:	3348      	adds	r3, #72	; 0x48
 8004692:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	440b      	add	r3, r1
 80046a2:	335c      	adds	r3, #92	; 0x5c
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	440b      	add	r3, r1
 80046b6:	334c      	adds	r3, #76	; 0x4c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	440b      	add	r3, r1
 80046ca:	3339      	adds	r3, #57	; 0x39
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	440b      	add	r3, r1
 80046de:	335d      	adds	r3, #93	; 0x5d
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	3338      	adds	r3, #56	; 0x38
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	18d1      	adds	r1, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	f005 fc42 	bl	8009f88 <USB_HC_StartXfer>
 8004704:	4603      	mov	r3, r0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop

08004710 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f005 f965 	bl	80099f6 <USB_GetMode>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 80ef 	bne.w	8004912 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f005 f949 	bl	80099d0 <USB_ReadInterrupts>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80e5 	beq.w	8004910 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f005 f940 	bl	80099d0 <USB_ReadInterrupts>
 8004750:	4603      	mov	r3, r0
 8004752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800475a:	d104      	bne.n	8004766 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004764:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f005 f930 	bl	80099d0 <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477a:	d104      	bne.n	8004786 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004784:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f005 f920 	bl	80099d0 <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479a:	d104      	bne.n	80047a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f005 f910 	bl	80099d0 <USB_ReadInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d103      	bne.n	80047c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2202      	movs	r2, #2
 80047c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f005 f902 	bl	80099d0 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d6:	d115      	bne.n	8004804 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f007 feb4 	bl	800c560 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	4618      	mov	r0, r3
 8004800:	f005 f9f2 	bl	8009be8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f005 f8e1 	bl	80099d0 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d102      	bne.n	8004820 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f001 f966 	bl	8005aec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f005 f8d3 	bl	80099d0 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d106      	bne.n	8004842 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f007 fe77 	bl	800c528 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2208      	movs	r2, #8
 8004840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f005 f8c2 	bl	80099d0 <USB_ReadInterrupts>
 800484c:	4603      	mov	r3, r0
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004856:	d138      	bne.n	80048ca <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f005 fcd9 	bl	800a214 <USB_HC_ReadInterrupt>
 8004862:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e025      	b.n	80048b6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d106      	bne.n	80048a4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8cf 	bl	8004a40 <HCD_HC_IN_IRQHandler>
 80048a2:	e005      	b.n	80048b0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fcfd 	bl	80052aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3d4      	bcc.n	800486a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f005 f87e 	bl	80099d0 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d101      	bne.n	80048e2 <HAL_HCD_IRQHandler+0x1d2>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_HCD_IRQHandler+0x1d4>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d014      	beq.n	8004912 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0210 	bic.w	r2, r2, #16
 80048f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f84b 	bl	8005994 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0210 	orr.w	r2, r2, #16
 800490c:	619a      	str	r2, [r3, #24]
 800490e:	e000      	b.n	8004912 <HAL_HCD_IRQHandler+0x202>
      return;
 8004910:	bf00      	nop
    }
  }
}
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_HCD_Start+0x16>
 800492a:	2302      	movs	r3, #2
 800492c:	e013      	b.n	8004956 <HAL_HCD_Start+0x3e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f004 ff55 	bl	80097ea <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f005 f9b2 	bl	8009cb0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_HCD_Stop+0x16>
 8004970:	2302      	movs	r3, #2
 8004972:	e00d      	b.n	8004990 <HAL_HCD_Stop+0x32>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f005 fd93 	bl	800a4ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 f959 	bl	8009c5c <USB_ResetPort>
 80049aa:	4603      	mov	r3, r0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	440b      	add	r3, r1
 80049ce:	335c      	adds	r3, #92	; 0x5c
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	334c      	adds	r3, #76	; 0x4c
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 f99b 	bl	8009d50 <USB_GetCurrentFrame>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f005 f976 	bl	8009d22 <USB_GetHostSpeed>
 8004a36:	4603      	mov	r3, r0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d119      	bne.n	8004aa4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2304      	movs	r3, #4
 8004a80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	60d3      	str	r3, [r2, #12]
 8004aa2:	e0ce      	b.n	8004c42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d12c      	bne.n	8004b16 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ace:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	440b      	add	r3, r1
 8004ade:	335d      	adds	r3, #93	; 0x5d
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 fb91 	bl	800a236 <USB_HC_Halt>
 8004b14:	e095      	b.n	8004c42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d109      	bne.n	8004b40 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	6093      	str	r3, [r2, #8]
 8004b3e:	e080      	b.n	8004c42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d134      	bne.n	8004bc0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	335d      	adds	r3, #93	; 0x5d
 8004b86:	2205      	movs	r2, #5
 8004b88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	461a      	mov	r2, r3
 8004b98:	2310      	movs	r3, #16
 8004b9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2308      	movs	r3, #8
 8004bac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f005 fb3c 	bl	800a236 <USB_HC_Halt>
 8004bbe:	e040      	b.n	8004c42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d134      	bne.n	8004c42 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f005 fb17 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c14:	461a      	mov	r2, r3
 8004c16:	2310      	movs	r3, #16
 8004c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	335d      	adds	r3, #93	; 0x5d
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c40:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c58:	d122      	bne.n	8004ca0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f005 fad6 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c96:	461a      	mov	r2, r3
 8004c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c9e:	e300      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	f040 80fd 	bne.w	8004eb2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	3348      	adds	r3, #72	; 0x48
 8004cd0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004ce4:	1ad1      	subs	r1, r2, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4403      	add	r3, r0
 8004cf4:	334c      	adds	r3, #76	; 0x4c
 8004cf6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	335d      	adds	r3, #93	; 0x5d
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	3358      	adds	r3, #88	; 0x58
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2301      	movs	r3, #1
 8004d30:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	440b      	add	r3, r1
 8004d40:	333f      	adds	r3, #63	; 0x3f
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	333f      	adds	r3, #63	; 0x3f
 8004d58:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d121      	bne.n	8004da2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	4611      	mov	r1, r2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f005 fa54 	bl	800a236 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	6093      	str	r3, [r2, #8]
 8004da0:	e070      	b.n	8004e84 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	333f      	adds	r3, #63	; 0x3f
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d12a      	bne.n	8004e0e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	335c      	adds	r3, #92	; 0x5c
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	b2d8      	uxtb	r0, r3
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	335c      	adds	r3, #92	; 0x5c
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4601      	mov	r1, r0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f007 fbb8 	bl	800c57c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e0c:	e03a      	b.n	8004e84 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	333f      	adds	r3, #63	; 0x3f
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d12f      	bne.n	8004e84 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	440b      	add	r3, r1
 8004e32:	335c      	adds	r3, #92	; 0x5c
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	440b      	add	r3, r1
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2d8      	uxtb	r0, r3
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3350      	adds	r3, #80	; 0x50
 8004e60:	4602      	mov	r2, r0
 8004e62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	b2d8      	uxtb	r0, r3
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	440b      	add	r3, r1
 8004e76:	335c      	adds	r3, #92	; 0x5c
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f007 fb7c 	bl	800c57c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	3350      	adds	r3, #80	; 0x50
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	f083 0301 	eor.w	r3, r3, #1
 8004e9a:	b2d8      	uxtb	r0, r3
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3350      	adds	r3, #80	; 0x50
 8004eac:	4602      	mov	r2, r0
 8004eae:	701a      	strb	r2, [r3, #0]
}
 8004eb0:	e1f7      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	f040 811a 	bne.w	80050fe <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee4:	f023 0302 	bic.w	r3, r3, #2
 8004ee8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	335d      	adds	r3, #93	; 0x5d
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10a      	bne.n	8004f16 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	440b      	add	r3, r1
 8004f0e:	335c      	adds	r3, #92	; 0x5c
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e0d9      	b.n	80050ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	440b      	add	r3, r1
 8004f24:	335d      	adds	r3, #93	; 0x5d
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b05      	cmp	r3, #5
 8004f2a:	d10a      	bne.n	8004f42 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	335c      	adds	r3, #92	; 0x5c
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e0c3      	b.n	80050ca <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	440b      	add	r3, r1
 8004f50:	335d      	adds	r3, #93	; 0x5d
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d00a      	beq.n	8004f6e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	335d      	adds	r3, #93	; 0x5d
 8004f68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d156      	bne.n	800501c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3358      	adds	r3, #88	; 0x58
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4403      	add	r3, r0
 8004f90:	3358      	adds	r3, #88	; 0x58
 8004f92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	440b      	add	r3, r1
 8004fa2:	3358      	adds	r3, #88	; 0x58
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d914      	bls.n	8004fd4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3358      	adds	r3, #88	; 0x58
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	440b      	add	r3, r1
 8004fcc:	335c      	adds	r3, #92	; 0x5c
 8004fce:	2204      	movs	r2, #4
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e009      	b.n	8004fe8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	335c      	adds	r3, #92	; 0x5c
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ffe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005006:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e056      	b.n	80050ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	335d      	adds	r3, #93	; 0x5d
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d123      	bne.n	800507a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	440b      	add	r3, r1
 8005040:	335c      	adds	r3, #92	; 0x5c
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005064:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e027      	b.n	80050ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	440b      	add	r3, r1
 8005088:	335d      	adds	r3, #93	; 0x5d
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b07      	cmp	r3, #7
 800508e:	d11c      	bne.n	80050ca <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	440b      	add	r3, r1
 800509e:	3358      	adds	r3, #88	; 0x58
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4403      	add	r3, r0
 80050b2:	3358      	adds	r3, #88	; 0x58
 80050b4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	335c      	adds	r3, #92	; 0x5c
 80050c6:	2204      	movs	r2, #4
 80050c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	461a      	mov	r2, r3
 80050d8:	2302      	movs	r3, #2
 80050da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	b2d8      	uxtb	r0, r3
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	335c      	adds	r3, #92	; 0x5c
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	4601      	mov	r1, r0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f007 fa40 	bl	800c57c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050fc:	e0d1      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d13e      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	440a      	add	r2, r1
 800512a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	440b      	add	r3, r1
 8005142:	3358      	adds	r3, #88	; 0x58
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4403      	add	r3, r0
 8005156:	3358      	adds	r3, #88	; 0x58
 8005158:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	335d      	adds	r3, #93	; 0x5d
 800516a:	2206      	movs	r2, #6
 800516c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f005 f85c 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	6093      	str	r3, [r2, #8]
}
 8005190:	e087      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d17c      	bne.n	80052a2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	440b      	add	r3, r1
 80051b6:	333f      	adds	r3, #63	; 0x3f
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d122      	bne.n	8005204 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	3358      	adds	r3, #88	; 0x58
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f005 f81a 	bl	800a236 <USB_HC_Halt>
 8005202:	e045      	b.n	8005290 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	333f      	adds	r3, #63	; 0x3f
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	333f      	adds	r3, #63	; 0x3f
 800522a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800522c:	2b02      	cmp	r3, #2
 800522e:	d12f      	bne.n	8005290 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3358      	adds	r3, #88	; 0x58
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d121      	bne.n	8005290 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	440b      	add	r3, r1
 800525a:	335d      	adds	r3, #93	; 0x5d
 800525c:	2203      	movs	r2, #3
 800525e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f004 ffd3 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	461a      	mov	r2, r3
 800529e:	2310      	movs	r3, #16
 80052a0:	6093      	str	r3, [r2, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d119      	bne.n	800530e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	2304      	movs	r3, #4
 80052ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	440a      	add	r2, r1
 8005302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005306:	f043 0302 	orr.w	r3, r3, #2
 800530a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800530c:	e33e      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d141      	bne.n	80053a8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	2320      	movs	r3, #32
 8005334:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	333d      	adds	r3, #61	; 0x3d
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	f040 831f 	bne.w	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	333d      	adds	r3, #61	; 0x3d
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	335c      	adds	r3, #92	; 0x5c
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	440a      	add	r2, r1
 800538c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f004 ff48 	bl	800a236 <USB_HC_Halt>
}
 80053a6:	e2f1      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d13f      	bne.n	800543e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	440b      	add	r3, r1
 80053cc:	335d      	adds	r3, #93	; 0x5d
 80053ce:	2204      	movs	r2, #4
 80053d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	333d      	adds	r3, #61	; 0x3d
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	440b      	add	r3, r1
 80053f4:	3358      	adds	r3, #88	; 0x58
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	440a      	add	r2, r1
 8005410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f004 ff06 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	2340      	movs	r3, #64	; 0x40
 800543a:	6093      	str	r3, [r2, #8]
}
 800543c:	e2a6      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005454:	d122      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	440a      	add	r2, r1
 800546c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f004 fed8 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005492:	461a      	mov	r2, r3
 8005494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005498:	6093      	str	r3, [r2, #8]
}
 800549a:	e277      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d135      	bne.n	800551e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	440b      	add	r3, r1
 80054c0:	3358      	adds	r3, #88	; 0x58
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f004 fea0 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	2301      	movs	r3, #1
 8005506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	440b      	add	r3, r1
 8005516:	335d      	adds	r3, #93	; 0x5d
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
}
 800551c:	e236      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d12b      	bne.n	800558c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	461a      	mov	r2, r3
 8005542:	2308      	movs	r3, #8
 8005544:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	440a      	add	r2, r1
 800555c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f004 fe60 	bl	800a236 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	440b      	add	r3, r1
 8005584:	335d      	adds	r3, #93	; 0x5d
 8005586:	2205      	movs	r2, #5
 8005588:	701a      	strb	r2, [r3, #0]
}
 800558a:	e1ff      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d155      	bne.n	800564e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	440b      	add	r3, r1
 80055b0:	3358      	adds	r3, #88	; 0x58
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	440b      	add	r3, r1
 80055c4:	335d      	adds	r3, #93	; 0x5d
 80055c6:	2203      	movs	r2, #3
 80055c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	333d      	adds	r3, #61	; 0x3d
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d114      	bne.n	800560a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	333c      	adds	r3, #60	; 0x3c
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	333d      	adds	r3, #61	; 0x3d
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	440a      	add	r2, r1
 8005620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f004 fdfe 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	461a      	mov	r2, r3
 8005648:	2310      	movs	r3, #16
 800564a:	6093      	str	r3, [r2, #8]
}
 800564c:	e19e      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d12b      	bne.n	80056bc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	440a      	add	r2, r1
 800567a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f004 fdd1 	bl	800a236 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	335d      	adds	r3, #93	; 0x5d
 80056a4:	2206      	movs	r2, #6
 80056a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	461a      	mov	r2, r3
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	6093      	str	r3, [r2, #8]
}
 80056ba:	e167      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d135      	bne.n	8005740 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 fd99 	bl	800a236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	2310      	movs	r3, #16
 8005714:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	461a      	mov	r2, r3
 8005724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005728:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	335d      	adds	r3, #93	; 0x5d
 800573a:	2208      	movs	r2, #8
 800573c:	701a      	strb	r2, [r3, #0]
}
 800573e:	e125      	b.n	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	f040 811a 	bne.w	800598c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	440a      	add	r2, r1
 800576e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005772:	f023 0302 	bic.w	r3, r3, #2
 8005776:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	335d      	adds	r3, #93	; 0x5d
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d137      	bne.n	80057fe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	440b      	add	r3, r1
 800579c:	335c      	adds	r3, #92	; 0x5c
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	440b      	add	r3, r1
 80057b0:	333f      	adds	r3, #63	; 0x3f
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d00b      	beq.n	80057d0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	333f      	adds	r3, #63	; 0x3f
 80057c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	f040 80c5 	bne.w	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3351      	adds	r3, #81	; 0x51
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2d8      	uxtb	r0, r3
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3351      	adds	r3, #81	; 0x51
 80057f8:	4602      	mov	r2, r0
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e0ad      	b.n	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	335d      	adds	r3, #93	; 0x5d
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d10a      	bne.n	800582a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	335c      	adds	r3, #92	; 0x5c
 8005824:	2202      	movs	r2, #2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e097      	b.n	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	335d      	adds	r3, #93	; 0x5d
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d10a      	bne.n	8005856 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	335c      	adds	r3, #92	; 0x5c
 8005850:	2202      	movs	r2, #2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e081      	b.n	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	440b      	add	r3, r1
 8005864:	335d      	adds	r3, #93	; 0x5d
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b05      	cmp	r3, #5
 800586a:	d10a      	bne.n	8005882 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	440b      	add	r3, r1
 800587a:	335c      	adds	r3, #92	; 0x5c
 800587c:	2205      	movs	r2, #5
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e06b      	b.n	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	440b      	add	r3, r1
 8005890:	335d      	adds	r3, #93	; 0x5d
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b06      	cmp	r3, #6
 8005896:	d00a      	beq.n	80058ae <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	440b      	add	r3, r1
 80058a6:	335d      	adds	r3, #93	; 0x5d
 80058a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d155      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	3358      	adds	r3, #88	; 0x58
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4403      	add	r3, r0
 80058d0:	3358      	adds	r3, #88	; 0x58
 80058d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	440b      	add	r3, r1
 80058e2:	3358      	adds	r3, #88	; 0x58
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d914      	bls.n	8005914 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	440b      	add	r3, r1
 80058f8:	3358      	adds	r3, #88	; 0x58
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	335c      	adds	r3, #92	; 0x5c
 800590e:	2204      	movs	r2, #4
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e009      	b.n	8005928 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	440b      	add	r3, r1
 8005922:	335c      	adds	r3, #92	; 0x5c
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800593e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005946:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	2302      	movs	r3, #2
 800596a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	b2d8      	uxtb	r0, r3
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	335c      	adds	r3, #92	; 0x5c
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	4601      	mov	r1, r0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f006 fdf8 	bl	800c57c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800598c:	bf00      	nop
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	0c5b      	lsrs	r3, r3, #17
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d003      	beq.n	80059d8 <HCD_RXQLVL_IRQHandler+0x44>
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	f000 8082 	beq.w	8005ada <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059d6:	e083      	b.n	8005ae0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d07f      	beq.n	8005ade <HCD_RXQLVL_IRQHandler+0x14a>
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	3344      	adds	r3, #68	; 0x44
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d074      	beq.n	8005ade <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	440b      	add	r3, r1
 8005a06:	3344      	adds	r3, #68	; 0x44
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f003 ffb5 	bl	800997e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	3344      	adds	r3, #68	; 0x44
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	18d1      	adds	r1, r2, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4403      	add	r3, r0
 8005a38:	3344      	adds	r3, #68	; 0x44
 8005a3a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	334c      	adds	r3, #76	; 0x4c
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	18d1      	adds	r1, r2, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4403      	add	r3, r0
 8005a60:	334c      	adds	r3, #76	; 0x4c
 8005a62:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HCD_RXQLVL_IRQHandler+0x154>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d031      	beq.n	8005ade <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a98:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	440b      	add	r3, r1
 8005aba:	3350      	adds	r3, #80	; 0x50
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f083 0301 	eor.w	r3, r3, #1
 8005ac2:	b2d8      	uxtb	r0, r3
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3350      	adds	r3, #80	; 0x50
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	701a      	strb	r2, [r3, #0]
      break;
 8005ad8:	e001      	b.n	8005ade <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005ade:	bf00      	nop
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3728      	adds	r7, #40	; 0x28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	1ff80000 	.word	0x1ff80000

08005aec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d10b      	bne.n	8005b3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f006 fd08 	bl	800c544 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f043 0302 	orr.w	r3, r3, #2
 8005b3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d132      	bne.n	8005bac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d126      	bne.n	8005ba6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d113      	bne.n	8005b88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b6a:	d106      	bne.n	8005b7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2102      	movs	r1, #2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 f838 	bl	8009be8 <USB_InitFSLSPClkSel>
 8005b78:	e011      	b.n	8005b9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 f831 	bl	8009be8 <USB_InitFSLSPClkSel>
 8005b86:	e00a      	b.n	8005b9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b96:	461a      	mov	r2, r3
 8005b98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005b9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f006 fcfa 	bl	800c598 <HAL_HCD_PortEnabled_Callback>
 8005ba4:	e002      	b.n	8005bac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f006 fd04 	bl	800c5b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d103      	bne.n	8005bbe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f043 0320 	orr.w	r3, r3, #32
 8005bbc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6013      	str	r3, [r2, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e11f      	b.n	8005e26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fb fcca 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	; 0x24
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c38:	f001 f80e 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a7b      	ldr	r2, [pc, #492]	; (8005e30 <HAL_I2C_Init+0x25c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d807      	bhi.n	8005c58 <HAL_I2C_Init+0x84>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a7a      	ldr	r2, [pc, #488]	; (8005e34 <HAL_I2C_Init+0x260>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bf94      	ite	ls
 8005c50:	2301      	movls	r3, #1
 8005c52:	2300      	movhi	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e006      	b.n	8005c66 <HAL_I2C_Init+0x92>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a77      	ldr	r2, [pc, #476]	; (8005e38 <HAL_I2C_Init+0x264>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bf94      	ite	ls
 8005c60:	2301      	movls	r3, #1
 8005c62:	2300      	movhi	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e0db      	b.n	8005e26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a72      	ldr	r2, [pc, #456]	; (8005e3c <HAL_I2C_Init+0x268>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	0c9b      	lsrs	r3, r3, #18
 8005c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a64      	ldr	r2, [pc, #400]	; (8005e30 <HAL_I2C_Init+0x25c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d802      	bhi.n	8005ca8 <HAL_I2C_Init+0xd4>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	e009      	b.n	8005cbc <HAL_I2C_Init+0xe8>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	4a63      	ldr	r2, [pc, #396]	; (8005e40 <HAL_I2C_Init+0x26c>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	099b      	lsrs	r3, r3, #6
 8005cba:	3301      	adds	r3, #1
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4956      	ldr	r1, [pc, #344]	; (8005e30 <HAL_I2C_Init+0x25c>)
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	d80d      	bhi.n	8005cf8 <HAL_I2C_Init+0x124>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1e59      	subs	r1, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	bf38      	it	cc
 8005cf4:	2304      	movcc	r3, #4
 8005cf6:	e04f      	b.n	8005d98 <HAL_I2C_Init+0x1c4>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d111      	bne.n	8005d24 <HAL_I2C_Init+0x150>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1e58      	subs	r0, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6859      	ldr	r1, [r3, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	440b      	add	r3, r1
 8005d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d12:	3301      	adds	r3, #1
 8005d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e012      	b.n	8005d4a <HAL_I2C_Init+0x176>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1e58      	subs	r0, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6859      	ldr	r1, [r3, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	0099      	lsls	r1, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_I2C_Init+0x17e>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e022      	b.n	8005d98 <HAL_I2C_Init+0x1c4>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10e      	bne.n	8005d78 <HAL_I2C_Init+0x1a4>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1e58      	subs	r0, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	440b      	add	r3, r1
 8005d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	e00f      	b.n	8005d98 <HAL_I2C_Init+0x1c4>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1e58      	subs	r0, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	0099      	lsls	r1, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	6809      	ldr	r1, [r1, #0]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6911      	ldr	r1, [r2, #16]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68d2      	ldr	r2, [r2, #12]
 8005dd2:	4311      	orrs	r1, r2
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	000186a0 	.word	0x000186a0
 8005e34:	001e847f 	.word	0x001e847f
 8005e38:	003d08ff 	.word	0x003d08ff
 8005e3c:	431bde83 	.word	0x431bde83
 8005e40:	10624dd3 	.word	0x10624dd3

08005e44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e154      	b.n	8006100 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a98      	ldr	r2, [pc, #608]	; (80060d0 <HAL_I2S_Init+0x28c>)
 8005e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fb fbd7 	bl	8001624 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2202      	movs	r2, #2
 8005e98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d06f      	beq.n	8005f82 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005eaa:	2310      	movs	r3, #16
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e001      	b.n	8005eb4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d802      	bhi.n	8005ec2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a83      	ldr	r2, [pc, #524]	; (80060d4 <HAL_I2S_Init+0x290>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_I2S_Init+0x92>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a81      	ldr	r2, [pc, #516]	; (80060d8 <HAL_I2S_Init+0x294>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d104      	bne.n	8005ee0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f001 f972 	bl	80071c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	e003      	b.n	8005ee8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	f001 f96d 	bl	80071c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ee6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef0:	d125      	bne.n	8005f3e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d010      	beq.n	8005f1c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	3305      	adds	r3, #5
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	e01f      	b.n	8005f5c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	3305      	adds	r3, #5
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e00e      	b.n	8005f5c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	3305      	adds	r3, #5
 8005f5a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4a5f      	ldr	r2, [pc, #380]	; (80060dc <HAL_I2S_Init+0x298>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	e003      	b.n	8005f8a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005f82:	2302      	movs	r3, #2
 8005f84:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d902      	bls.n	8005f96 <HAL_I2S_Init+0x152>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d907      	bls.n	8005fa6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f043 0210 	orr.w	r2, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e0ac      	b.n	8006100 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	ea42 0103 	orr.w	r1, r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005fc4:	f023 030f 	bic.w	r3, r3, #15
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6851      	ldr	r1, [r2, #4]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6892      	ldr	r2, [r2, #8]
 8005fd0:	4311      	orrs	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68d2      	ldr	r2, [r2, #12]
 8005fd6:	4311      	orrs	r1, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6992      	ldr	r2, [r2, #24]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	d003      	beq.n	8005ffa <HAL_I2S_Init+0x1b6>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2bb0      	cmp	r3, #176	; 0xb0
 8005ff8:	d107      	bne.n	800600a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006008:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d16e      	bne.n	80060f0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a32      	ldr	r2, [pc, #200]	; (80060e0 <HAL_I2S_Init+0x29c>)
 8006016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <HAL_I2S_Init+0x290>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_I2S_Init+0x1e2>
 8006022:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <HAL_I2S_Init+0x2a0>)
 8006024:	e001      	b.n	800602a <HAL_I2S_Init+0x1e6>
 8006026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	4928      	ldr	r1, [pc, #160]	; (80060d4 <HAL_I2S_Init+0x290>)
 8006032:	428a      	cmp	r2, r1
 8006034:	d101      	bne.n	800603a <HAL_I2S_Init+0x1f6>
 8006036:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_I2S_Init+0x2a0>)
 8006038:	e001      	b.n	800603e <HAL_I2S_Init+0x1fa>
 800603a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800603e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006042:	f023 030f 	bic.w	r3, r3, #15
 8006046:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a21      	ldr	r2, [pc, #132]	; (80060d4 <HAL_I2S_Init+0x290>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_I2S_Init+0x212>
 8006052:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <HAL_I2S_Init+0x2a0>)
 8006054:	e001      	b.n	800605a <HAL_I2S_Init+0x216>
 8006056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605a:	2202      	movs	r2, #2
 800605c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_I2S_Init+0x290>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <HAL_I2S_Init+0x228>
 8006068:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <HAL_I2S_Init+0x2a0>)
 800606a:	e001      	b.n	8006070 <HAL_I2S_Init+0x22c>
 800606c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d003      	beq.n	8006086 <HAL_I2S_Init+0x242>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e001      	b.n	8006092 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	b299      	uxth	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80060a8:	4303      	orrs	r3, r0
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	430b      	orrs	r3, r1
 80060ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	897b      	ldrh	r3, [r7, #10]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060be:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a03      	ldr	r2, [pc, #12]	; (80060d4 <HAL_I2S_Init+0x290>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d10e      	bne.n	80060e8 <HAL_I2S_Init+0x2a4>
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_I2S_Init+0x2a0>)
 80060cc:	e00e      	b.n	80060ec <HAL_I2S_Init+0x2a8>
 80060ce:	bf00      	nop
 80060d0:	080061c3 	.word	0x080061c3
 80060d4:	40003800 	.word	0x40003800
 80060d8:	40003c00 	.word	0x40003c00
 80060dc:	cccccccd 	.word	0xcccccccd
 80060e0:	080062d9 	.word	0x080062d9
 80060e4:	40003400 	.word	0x40003400
 80060e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ec:	897a      	ldrh	r2, [r7, #10]
 80060ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10e      	bne.n	800615c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800614c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc fc88 	bl	8002a6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	b292      	uxth	r2, r2
 8006178:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	1c9a      	adds	r2, r3, #2
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fc fc7b 	bl	8002ab0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d13a      	bne.n	8006254 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d109      	bne.n	80061fc <I2S_IRQHandler+0x3a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d102      	bne.n	80061fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ffb4 	bl	8006164 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	d126      	bne.n	8006254 <I2S_IRQHandler+0x92>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d11f      	bne.n	8006254 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006222:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f043 0202 	orr.w	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fc fc16 	bl	8002a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d136      	bne.n	80062ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d109      	bne.n	800627e <I2S_IRQHandler+0xbc>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006274:	2b80      	cmp	r3, #128	; 0x80
 8006276:	d102      	bne.n	800627e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff45 	bl	8006108 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d122      	bne.n	80062ce <I2S_IRQHandler+0x10c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b20      	cmp	r3, #32
 8006294:	d11b      	bne.n	80062ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fc fbd9 	bl	8002a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4aa2      	ldr	r2, [pc, #648]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80062f2:	4ba2      	ldr	r3, [pc, #648]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062f4:	e001      	b.n	80062fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80062f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a9b      	ldr	r2, [pc, #620]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006310:	4b9a      	ldr	r3, [pc, #616]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006312:	e001      	b.n	8006318 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006324:	d004      	beq.n	8006330 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 8099 	bne.w	8006462 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d107      	bne.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f925 	bl	8006594 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d107      	bne.n	8006364 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9c8 	bl	80066f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d13a      	bne.n	80063e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d035      	beq.n	80063e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7e      	ldr	r2, [pc, #504]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d101      	bne.n	8006386 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006382:	4b7e      	ldr	r3, [pc, #504]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006384:	e001      	b.n	800638a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4979      	ldr	r1, [pc, #484]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006392:	428b      	cmp	r3, r1
 8006394:	d101      	bne.n	800639a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006396:	4b79      	ldr	r3, [pc, #484]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006398:	e001      	b.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800639a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800639e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f043 0202 	orr.w	r2, r3, #2
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fc fb4e 	bl	8002a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	f040 80be 	bne.w	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80b8 	beq.w	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800640a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a59      	ldr	r2, [pc, #356]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006416:	4b59      	ldr	r3, [pc, #356]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006418:	e001      	b.n	800641e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800641a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4954      	ldr	r1, [pc, #336]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006426:	428b      	cmp	r3, r1
 8006428:	d101      	bne.n	800642e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800642a:	4b54      	ldr	r3, [pc, #336]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800642c:	e001      	b.n	8006432 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800642e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006432:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006436:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f043 0204 	orr.w	r2, r3, #4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fc fb10 	bl	8002a80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006460:	e084      	b.n	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d107      	bne.n	800647c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8be 	bl	80065f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b01      	cmp	r3, #1
 8006484:	d107      	bne.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8fd 	bl	8006690 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d12f      	bne.n	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02a      	beq.n	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d101      	bne.n	80064c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80064c4:	4b2d      	ldr	r3, [pc, #180]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064c6:	e001      	b.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80064c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4929      	ldr	r1, [pc, #164]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064d4:	428b      	cmp	r3, r1
 80064d6:	d101      	bne.n	80064dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80064d8:	4b28      	ldr	r3, [pc, #160]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064da:	e001      	b.n	80064e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80064dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f043 0202 	orr.w	r2, r3, #2
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fac0 	bl	8002a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b08      	cmp	r3, #8
 8006508:	d131      	bne.n	800656e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d02c      	beq.n	800656e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a17      	ldr	r2, [pc, #92]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800651e:	4b17      	ldr	r3, [pc, #92]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006520:	e001      	b.n	8006526 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4912      	ldr	r1, [pc, #72]	; (8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800652e:	428b      	cmp	r3, r1
 8006530:	d101      	bne.n	8006536 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006534:	e001      	b.n	800653a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800653e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800654e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655c:	f043 0204 	orr.w	r2, r3, #4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fc fa8b 	bl	8002a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800656a:	e000      	b.n	800656e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800656c:	bf00      	nop
}
 800656e:	bf00      	nop
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40003800 	.word	0x40003800
 800657c:	40003400 	.word	0x40003400

08006580 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	1c99      	adds	r1, r3, #2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6251      	str	r1, [r2, #36]	; 0x24
 80065a6:	881a      	ldrh	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d113      	bne.n	80065ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ffc9 	bl	8006580 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c99      	adds	r1, r3, #2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6251      	str	r1, [r2, #36]	; 0x24
 800660a:	8819      	ldrh	r1, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <I2SEx_TxISR_I2SExt+0x90>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <I2SEx_TxISR_I2SExt+0x22>
 8006616:	4b1d      	ldr	r3, [pc, #116]	; (800668c <I2SEx_TxISR_I2SExt+0x94>)
 8006618:	e001      	b.n	800661e <I2SEx_TxISR_I2SExt+0x26>
 800661a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800661e:	460a      	mov	r2, r1
 8006620:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d121      	bne.n	800667e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a12      	ldr	r2, [pc, #72]	; (8006688 <I2SEx_TxISR_I2SExt+0x90>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <I2SEx_TxISR_I2SExt+0x50>
 8006644:	4b11      	ldr	r3, [pc, #68]	; (800668c <I2SEx_TxISR_I2SExt+0x94>)
 8006646:	e001      	b.n	800664c <I2SEx_TxISR_I2SExt+0x54>
 8006648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	490d      	ldr	r1, [pc, #52]	; (8006688 <I2SEx_TxISR_I2SExt+0x90>)
 8006654:	428b      	cmp	r3, r1
 8006656:	d101      	bne.n	800665c <I2SEx_TxISR_I2SExt+0x64>
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <I2SEx_TxISR_I2SExt+0x94>)
 800665a:	e001      	b.n	8006660 <I2SEx_TxISR_I2SExt+0x68>
 800665c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006664:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff81 	bl	8006580 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40003800 	.word	0x40003800
 800668c:	40003400 	.word	0x40003400

08006690 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68d8      	ldr	r0, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	1c99      	adds	r1, r3, #2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80066a8:	b282      	uxth	r2, r0
 80066aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d113      	bne.n	80066ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ff4a 	bl	8006580 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a20      	ldr	r2, [pc, #128]	; (8006784 <I2SEx_RxISR_I2SExt+0x90>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <I2SEx_RxISR_I2SExt+0x16>
 8006706:	4b20      	ldr	r3, [pc, #128]	; (8006788 <I2SEx_RxISR_I2SExt+0x94>)
 8006708:	e001      	b.n	800670e <I2SEx_RxISR_I2SExt+0x1a>
 800670a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800670e:	68d8      	ldr	r0, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	1c99      	adds	r1, r3, #2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	62d1      	str	r1, [r2, #44]	; 0x2c
 800671a:	b282      	uxth	r2, r0
 800671c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d121      	bne.n	800677a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a12      	ldr	r2, [pc, #72]	; (8006784 <I2SEx_RxISR_I2SExt+0x90>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d101      	bne.n	8006744 <I2SEx_RxISR_I2SExt+0x50>
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <I2SEx_RxISR_I2SExt+0x94>)
 8006742:	e001      	b.n	8006748 <I2SEx_RxISR_I2SExt+0x54>
 8006744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	490d      	ldr	r1, [pc, #52]	; (8006784 <I2SEx_RxISR_I2SExt+0x90>)
 8006750:	428b      	cmp	r3, r1
 8006752:	d101      	bne.n	8006758 <I2SEx_RxISR_I2SExt+0x64>
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <I2SEx_RxISR_I2SExt+0x94>)
 8006756:	e001      	b.n	800675c <I2SEx_RxISR_I2SExt+0x68>
 8006758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800675c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006760:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff ff03 	bl	8006580 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40003800 	.word	0x40003800
 8006788:	40003400 	.word	0x40003400

0800678c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006794:	f7fc fcf8 	bl	8003188 <HAL_GetTick>
 8006798:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e069      	b.n	8006878 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fa ffed 	bl	8001798 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80067be:	f241 3188 	movw	r1, #5000	; 0x1388
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f85e 	bl	8006884 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	2120      	movs	r1, #32
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f856 	bl	80068a0 <QSPI_WaitFlagStateUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d137      	bne.n	800686e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6852      	ldr	r2, [r2, #4]
 8006810:	0611      	lsls	r1, r2, #24
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	4311      	orrs	r1, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	69d2      	ldr	r2, [r2, #28]
 800681c:	4311      	orrs	r1, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a12      	ldr	r2, [r2, #32]
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	430b      	orrs	r3, r1
 800682a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_QSPI_Init+0xf4>)
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6912      	ldr	r2, [r2, #16]
 800683a:	0411      	lsls	r1, r2, #16
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6952      	ldr	r2, [r2, #20]
 8006840:	4311      	orrs	r1, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6992      	ldr	r2, [r2, #24]
 8006846:	4311      	orrs	r1, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	430b      	orrs	r3, r1
 800684e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006876:	7afb      	ldrb	r3, [r7, #11]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	ffe0f8fe 	.word	0xffe0f8fe

08006884 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80068b0:	e01a      	b.n	80068e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d016      	beq.n	80068e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fc fc65 	bl	8003188 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2204      	movs	r2, #4
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068dc:	f043 0201 	orr.w	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e00e      	b.n	8006906 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf14      	ite	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	2300      	moveq	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	429a      	cmp	r2, r3
 8006902:	d1d6      	bne.n	80068b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0cc      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b68      	ldr	r3, [pc, #416]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d90c      	bls.n	800694c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693a:	4b63      	ldr	r3, [pc, #396]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0b8      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006964:	4b59      	ldr	r3, [pc, #356]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a58      	ldr	r2, [pc, #352]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800696e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800697c:	4b53      	ldr	r3, [pc, #332]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a52      	ldr	r2, [pc, #328]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006988:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	494d      	ldr	r1, [pc, #308]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d044      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b47      	ldr	r3, [pc, #284]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d119      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e07f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d003      	beq.n	80069ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b3f      	ldr	r3, [pc, #252]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e067      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b37      	ldr	r3, [pc, #220]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4934      	ldr	r1, [pc, #208]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a00:	f7fc fbc2 	bl	8003188 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fc fbbe 	bl	8003188 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e04f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20c      	bcs.n	8006a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b20      	ldr	r3, [pc, #128]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e032      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4916      	ldr	r1, [pc, #88]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	490e      	ldr	r1, [pc, #56]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a96:	f000 f821 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	5cd3      	ldrb	r3, [r2, r3]
 8006aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fc fb22 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40023c00 	.word	0x40023c00
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	0800cd0c 	.word	0x0800cd0c
 8006ad4:	2000000c 	.word	0x2000000c
 8006ad8:	20000060 	.word	0x20000060

08006adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	2300      	movs	r3, #0
 8006aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af2:	4b50      	ldr	r3, [pc, #320]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d007      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0x32>
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d008      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x38>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 808d 	bne.w	8006c22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b08:	4b4b      	ldr	r3, [pc, #300]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b0a:	60bb      	str	r3, [r7, #8]
       break;
 8006b0c:	e08c      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b0e:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b10:	60bb      	str	r3, [r7, #8]
      break;
 8006b12:	e089      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b14:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b1e:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d023      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2a:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	f04f 0400 	mov.w	r4, #0
 8006b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	ea03 0501 	and.w	r5, r3, r1
 8006b40:	ea04 0602 	and.w	r6, r4, r2
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b46:	fb02 f106 	mul.w	r1, r2, r6
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	fb02 f205 	mul.w	r2, r2, r5
 8006b50:	440a      	add	r2, r1
 8006b52:	493a      	ldr	r1, [pc, #232]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b54:	fba5 0101 	umull	r0, r1, r5, r1
 8006b58:	1853      	adds	r3, r2, r1
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f04f 0400 	mov.w	r4, #0
 8006b62:	461a      	mov	r2, r3
 8006b64:	4623      	mov	r3, r4
 8006b66:	f7f9 fb57 	bl	8000218 <__aeabi_uldivmod>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e049      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b72:	4b30      	ldr	r3, [pc, #192]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	f04f 0400 	mov.w	r4, #0
 8006b7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	ea03 0501 	and.w	r5, r3, r1
 8006b88:	ea04 0602 	and.w	r6, r4, r2
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4632      	mov	r2, r6
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	f04f 0400 	mov.w	r4, #0
 8006b98:	0154      	lsls	r4, r2, #5
 8006b9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b9e:	014b      	lsls	r3, r1, #5
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	1b49      	subs	r1, r1, r5
 8006ba6:	eb62 0206 	sbc.w	r2, r2, r6
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	f04f 0400 	mov.w	r4, #0
 8006bb2:	0194      	lsls	r4, r2, #6
 8006bb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bb8:	018b      	lsls	r3, r1, #6
 8006bba:	1a5b      	subs	r3, r3, r1
 8006bbc:	eb64 0402 	sbc.w	r4, r4, r2
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	00e2      	lsls	r2, r4, #3
 8006bca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bce:	00d9      	lsls	r1, r3, #3
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	195b      	adds	r3, r3, r5
 8006bd6:	eb44 0406 	adc.w	r4, r4, r6
 8006bda:	f04f 0100 	mov.w	r1, #0
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	02a2      	lsls	r2, r4, #10
 8006be4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006be8:	0299      	lsls	r1, r3, #10
 8006bea:	460b      	mov	r3, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f04f 0400 	mov.w	r4, #0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	f7f9 fb0c 	bl	8000218 <__aeabi_uldivmod>
 8006c00:	4603      	mov	r3, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	3301      	adds	r3, #1
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	60bb      	str	r3, [r7, #8]
      break;
 8006c20:	e002      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c24:	60bb      	str	r3, [r7, #8]
      break;
 8006c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c28:	68bb      	ldr	r3, [r7, #8]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	017d7840 	.word	0x017d7840

08006c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	2000000c 	.word	0x2000000c

08006c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c5c:	f7ff fff0 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c60:	4601      	mov	r1, r0
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	0a9b      	lsrs	r3, r3, #10
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	4a03      	ldr	r2, [pc, #12]	; (8006c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c6e:	5cd3      	ldrb	r3, [r2, r3]
 8006c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	0800cd1c 	.word	0x0800cd1c

08006c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c84:	f7ff ffdc 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c88:	4601      	mov	r1, r0
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	0b5b      	lsrs	r3, r3, #13
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	4a03      	ldr	r2, [pc, #12]	; (8006ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c96:	5cd3      	ldrb	r3, [r2, r3]
 8006c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	0800cd1c 	.word	0x0800cd1c

08006ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d010      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ccc:	4b7a      	ldr	r3, [pc, #488]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4977      	ldr	r1, [pc, #476]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006cea:	2301      	movs	r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d010      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006cfa:	4b6f      	ldr	r3, [pc, #444]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	496b      	ldr	r1, [pc, #428]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d022      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006d28:	4b63      	ldr	r3, [pc, #396]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d36:	4960      	ldr	r1, [pc, #384]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006d46:	2301      	movs	r3, #1
 8006d48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d52:	d10c      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006d54:	4b58      	ldr	r3, [pc, #352]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4954      	ldr	r1, [pc, #336]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d022      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d88:	494b      	ldr	r1, [pc, #300]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006da6:	4b44      	ldr	r3, [pc, #272]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	493f      	ldr	r1, [pc, #252]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 808a 	beq.w	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dea:	4b34      	ldr	r3, [pc, #208]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a33      	ldr	r2, [pc, #204]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006df6:	f7fc f9c7 	bl	8003188 <HAL_GetTick>
 8006dfa:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fc f9c3 	bl	8003188 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e1d1      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e24:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d02f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d028      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e42:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e44:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e50:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e56:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d114      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fc f991 	bl	8003188 <HAL_GetTick>
 8006e66:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e68:	e00a      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6a:	f7fc f98d 	bl	8003188 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e199      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ee      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e98:	d114      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eae:	4902      	ldr	r1, [pc, #8]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	608b      	str	r3, [r1, #8]
 8006eb4:	e00c      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40007000 	.word	0x40007000
 8006ec0:	42470e40 	.word	0x42470e40
 8006ec4:	4b89      	ldr	r3, [pc, #548]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a88      	ldr	r2, [pc, #544]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006eca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ece:	6093      	str	r3, [r2, #8]
 8006ed0:	4b86      	ldr	r3, [pc, #536]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006edc:	4983      	ldr	r1, [pc, #524]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006ef4:	4b7e      	ldr	r3, [pc, #504]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006ef6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006f04:	4b79      	ldr	r3, [pc, #484]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	4976      	ldr	r1, [pc, #472]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d011      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f26:	4b71      	ldr	r3, [pc, #452]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	496d      	ldr	r1, [pc, #436]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f44:	d101      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006f46:	2301      	movs	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006f56:	4b65      	ldr	r3, [pc, #404]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	4961      	ldr	r1, [pc, #388]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d004      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	f040 80c6 	bne.w	8007108 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f7c:	4b5d      	ldr	r3, [pc, #372]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f82:	f7fc f901 	bl	8003188 <HAL_GetTick>
 8006f86:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8a:	f7fc f8fd 	bl	8003188 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e10b      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f9c:	4b53      	ldr	r3, [pc, #332]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006fa8:	4a53      	ldr	r2, [pc, #332]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d023      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d019      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fec:	d00e      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d019      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d115      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700a:	d110      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	071b      	lsls	r3, r3, #28
 8007026:	4931      	ldr	r1, [pc, #196]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800704a:	2b00      	cmp	r3, #0
 800704c:	d026      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d122      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007056:	4b25      	ldr	r3, [pc, #148]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705c:	0e1b      	lsrs	r3, r3, #24
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	019b      	lsls	r3, r3, #6
 800706e:	431a      	orrs	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	071b      	lsls	r3, r3, #28
 800707c:	491b      	ldr	r1, [pc, #108]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007084:	4b19      	ldr	r3, [pc, #100]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708a:	f023 021f 	bic.w	r2, r3, #31
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	3b01      	subs	r3, #1
 8007094:	4915      	ldr	r1, [pc, #84]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d010      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	019b      	lsls	r3, r3, #6
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	061b      	lsls	r3, r3, #24
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	071b      	lsls	r3, r3, #28
 80070c2:	490a      	ldr	r1, [pc, #40]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070d0:	f7fc f85a 	bl	8003188 <HAL_GetTick>
 80070d4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070d6:	e011      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070d8:	f7fc f856 	bl	8003188 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d90a      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e064      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	424711e0 	.word	0x424711e0
 80070f4:	42470068 	.word	0x42470068
 80070f8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070fc:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0e7      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007122:	4926      	ldr	r1, [pc, #152]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	491d      	ldr	r1, [pc, #116]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007158:	4b18      	ldr	r3, [pc, #96]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800715a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	4915      	ldr	r1, [pc, #84]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800717c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007180:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	490c      	ldr	r1, [pc, #48]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800718a:	4313      	orrs	r3, r2
 800718c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800719e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071aa:	4904      	ldr	r1, [pc, #16]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3720      	adds	r7, #32
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800

080071c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80071de:	2b02      	cmp	r3, #2
 80071e0:	f000 8098 	beq.w	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80071e4:	e12d      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80071e6:	4b9a      	ldr	r3, [pc, #616]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80071f0:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f8:	d00c      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80071fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fe:	d802      	bhi.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007204:	e082      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720a:	d047      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800720c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007210:	d06f      	beq.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8007212:	e07b      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007214:	4b8f      	ldr	r3, [pc, #572]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007216:	617b      	str	r3, [r7, #20]
          break;
 8007218:	e07b      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800721a:	4b8d      	ldr	r3, [pc, #564]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800721c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007228:	d109      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800722a:	4b89      	ldr	r3, [pc, #548]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800722c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007234:	4a87      	ldr	r2, [pc, #540]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	e019      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800723e:	4b84      	ldr	r3, [pc, #528]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724a:	d109      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800724c:	4b80      	ldr	r3, [pc, #512]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007256:	4a80      	ldr	r2, [pc, #512]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	e008      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007260:	4b7b      	ldr	r3, [pc, #492]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726a:	4a7c      	ldr	r2, [pc, #496]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007272:	4b77      	ldr	r3, [pc, #476]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007278:	099b      	lsrs	r3, r3, #6
 800727a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007286:	4b72      	ldr	r3, [pc, #456]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728c:	0f1b      	lsrs	r3, r3, #28
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	617b      	str	r3, [r7, #20]
          break;
 800729a:	e03a      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800729c:	4b6c      	ldr	r3, [pc, #432]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a8:	d108      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072aa:	4b69      	ldr	r3, [pc, #420]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b2:	4a69      	ldr	r2, [pc, #420]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e007      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072bc:	4b64      	ldr	r3, [pc, #400]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072c4:	4a65      	ldr	r2, [pc, #404]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80072cc:	4b60      	ldr	r3, [pc, #384]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	099b      	lsrs	r3, r3, #6
 80072d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80072de:	4b5c      	ldr	r3, [pc, #368]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	0f1b      	lsrs	r3, r3, #28
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	617b      	str	r3, [r7, #20]
          break;
 80072f0:	e00f      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072f2:	4b57      	ldr	r3, [pc, #348]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072fe:	d102      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007300:	4b55      	ldr	r3, [pc, #340]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007302:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007304:	e005      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007306:	4b55      	ldr	r3, [pc, #340]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007308:	617b      	str	r3, [r7, #20]
          break;
 800730a:	e002      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
          break;
 8007310:	bf00      	nop
        }
      }
      break;
 8007312:	e096      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007314:	4b4e      	ldr	r3, [pc, #312]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800731e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007326:	d00c      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800732c:	d802      	bhi.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007332:	e082      	b.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007338:	d047      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800733a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800733e:	d06f      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007340:	e07b      	b.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007342:	4b44      	ldr	r3, [pc, #272]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007344:	617b      	str	r3, [r7, #20]
          break;
 8007346:	e07b      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007348:	4b41      	ldr	r3, [pc, #260]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007356:	d109      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007358:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007362:	4a3c      	ldr	r2, [pc, #240]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	e019      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800736c:	4b38      	ldr	r3, [pc, #224]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007378:	d109      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800737a:	4b35      	ldr	r3, [pc, #212]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800737c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007384:	4a34      	ldr	r2, [pc, #208]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e008      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800738e:	4b30      	ldr	r3, [pc, #192]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007398:	4a30      	ldr	r2, [pc, #192]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073a0:	4b2b      	ldr	r3, [pc, #172]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073b4:	4b26      	ldr	r3, [pc, #152]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ba:	0f1b      	lsrs	r3, r3, #28
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c6:	617b      	str	r3, [r7, #20]
          break;
 80073c8:	e03a      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d6:	d108      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e0:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	e007      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073ea:	4b19      	ldr	r3, [pc, #100]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f2:	4a1a      	ldr	r2, [pc, #104]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	0f1b      	lsrs	r3, r3, #28
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]
          break;
 800741e:	e00f      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800742c:	d102      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800742e:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007430:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007432:	e005      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007436:	617b      	str	r3, [r7, #20]
          break;
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
          break;
 800743e:	bf00      	nop
        }
      }
      break;
 8007440:	bf00      	nop
    }
  }
  return frequency;
 8007442:	697b      	ldr	r3, [r7, #20]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40023800 	.word	0x40023800
 8007454:	00bb8000 	.word	0x00bb8000
 8007458:	017d7840 	.word	0x017d7840
 800745c:	00f42400 	.word	0x00f42400

08007460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d075      	beq.n	8007564 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007478:	4ba2      	ldr	r3, [pc, #648]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 030c 	and.w	r3, r3, #12
 8007480:	2b04      	cmp	r3, #4
 8007482:	d00c      	beq.n	800749e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007484:	4b9f      	ldr	r3, [pc, #636]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800748c:	2b08      	cmp	r3, #8
 800748e:	d112      	bne.n	80074b6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007490:	4b9c      	ldr	r3, [pc, #624]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800749c:	d10b      	bne.n	80074b6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749e:	4b99      	ldr	r3, [pc, #612]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d05b      	beq.n	8007562 <HAL_RCC_OscConfig+0x102>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d157      	bne.n	8007562 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e20b      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074be:	d106      	bne.n	80074ce <HAL_RCC_OscConfig+0x6e>
 80074c0:	4b90      	ldr	r3, [pc, #576]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a8f      	ldr	r2, [pc, #572]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	e01d      	b.n	800750a <HAL_RCC_OscConfig+0xaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074d6:	d10c      	bne.n	80074f2 <HAL_RCC_OscConfig+0x92>
 80074d8:	4b8a      	ldr	r3, [pc, #552]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a89      	ldr	r2, [pc, #548]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4b87      	ldr	r3, [pc, #540]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a86      	ldr	r2, [pc, #536]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	e00b      	b.n	800750a <HAL_RCC_OscConfig+0xaa>
 80074f2:	4b84      	ldr	r3, [pc, #528]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a83      	ldr	r2, [pc, #524]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	4b81      	ldr	r3, [pc, #516]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a80      	ldr	r2, [pc, #512]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007508:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007512:	f7fb fe39 	bl	8003188 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800751a:	f7fb fe35 	bl	8003188 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b64      	cmp	r3, #100	; 0x64
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e1d0      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752c:	4b75      	ldr	r3, [pc, #468]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0f0      	beq.n	800751a <HAL_RCC_OscConfig+0xba>
 8007538:	e014      	b.n	8007564 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fb fe25 	bl	8003188 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007542:	f7fb fe21 	bl	8003188 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b64      	cmp	r3, #100	; 0x64
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e1bc      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007554:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f0      	bne.n	8007542 <HAL_RCC_OscConfig+0xe2>
 8007560:	e000      	b.n	8007564 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007562:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d063      	beq.n	8007638 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007584:	2b08      	cmp	r3, #8
 8007586:	d11c      	bne.n	80075c2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007588:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d116      	bne.n	80075c2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007594:	4b5b      	ldr	r3, [pc, #364]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_RCC_OscConfig+0x14c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e190      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ac:	4b55      	ldr	r3, [pc, #340]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	4952      	ldr	r1, [pc, #328]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075c0:	e03a      	b.n	8007638 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d020      	beq.n	800760c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075ca:	4b4f      	ldr	r3, [pc, #316]	; (8007708 <HAL_RCC_OscConfig+0x2a8>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fb fdda 	bl	8003188 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d8:	f7fb fdd6 	bl	8003188 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e171      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ea:	4b46      	ldr	r3, [pc, #280]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f6:	4b43      	ldr	r3, [pc, #268]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	493f      	ldr	r1, [pc, #252]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	600b      	str	r3, [r1, #0]
 800760a:	e015      	b.n	8007638 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760c:	4b3e      	ldr	r3, [pc, #248]	; (8007708 <HAL_RCC_OscConfig+0x2a8>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007612:	f7fb fdb9 	bl	8003188 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800761a:	f7fb fdb5 	bl	8003188 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e150      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762c:	4b35      	ldr	r3, [pc, #212]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d030      	beq.n	80076a6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800764c:	4b2f      	ldr	r3, [pc, #188]	; (800770c <HAL_RCC_OscConfig+0x2ac>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007652:	f7fb fd99 	bl	8003188 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800765a:	f7fb fd95 	bl	8003188 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e130      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766c:	4b25      	ldr	r3, [pc, #148]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800766e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x1fa>
 8007678:	e015      	b.n	80076a6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <HAL_RCC_OscConfig+0x2ac>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007680:	f7fb fd82 	bl	8003188 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007688:	f7fb fd7e 	bl	8003188 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e119      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 800769c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 809f 	beq.w	80077f2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076b4:	2300      	movs	r3, #0
 80076b6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076b8:	4b12      	ldr	r3, [pc, #72]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10f      	bne.n	80076e4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80076ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d2:	6413      	str	r3, [r2, #64]	; 0x40
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <HAL_RCC_OscConfig+0x2a4>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <HAL_RCC_OscConfig+0x2b0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d120      	bne.n	8007732 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <HAL_RCC_OscConfig+0x2b0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a06      	ldr	r2, [pc, #24]	; (8007710 <HAL_RCC_OscConfig+0x2b0>)
 80076f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076fc:	f7fb fd44 	bl	8003188 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007702:	e010      	b.n	8007726 <HAL_RCC_OscConfig+0x2c6>
 8007704:	40023800 	.word	0x40023800
 8007708:	42470000 	.word	0x42470000
 800770c:	42470e80 	.word	0x42470e80
 8007710:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007714:	f7fb fd38 	bl	8003188 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e0d3      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	4b6c      	ldr	r3, [pc, #432]	; (80078d8 <HAL_RCC_OscConfig+0x478>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d106      	bne.n	8007748 <HAL_RCC_OscConfig+0x2e8>
 800773a:	4b68      	ldr	r3, [pc, #416]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	4a67      	ldr	r2, [pc, #412]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	6713      	str	r3, [r2, #112]	; 0x70
 8007746:	e01c      	b.n	8007782 <HAL_RCC_OscConfig+0x322>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b05      	cmp	r3, #5
 800774e:	d10c      	bne.n	800776a <HAL_RCC_OscConfig+0x30a>
 8007750:	4b62      	ldr	r3, [pc, #392]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007754:	4a61      	ldr	r2, [pc, #388]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007756:	f043 0304 	orr.w	r3, r3, #4
 800775a:	6713      	str	r3, [r2, #112]	; 0x70
 800775c:	4b5f      	ldr	r3, [pc, #380]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007760:	4a5e      	ldr	r2, [pc, #376]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	6713      	str	r3, [r2, #112]	; 0x70
 8007768:	e00b      	b.n	8007782 <HAL_RCC_OscConfig+0x322>
 800776a:	4b5c      	ldr	r3, [pc, #368]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	4a5b      	ldr	r2, [pc, #364]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	6713      	str	r3, [r2, #112]	; 0x70
 8007776:	4b59      	ldr	r3, [pc, #356]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777a:	4a58      	ldr	r2, [pc, #352]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 800777c:	f023 0304 	bic.w	r3, r3, #4
 8007780:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d015      	beq.n	80077b6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778a:	f7fb fcfd 	bl	8003188 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007790:	e00a      	b.n	80077a8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007792:	f7fb fcf9 	bl	8003188 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e092      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a8:	4b4c      	ldr	r3, [pc, #304]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ee      	beq.n	8007792 <HAL_RCC_OscConfig+0x332>
 80077b4:	e014      	b.n	80077e0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b6:	f7fb fce7 	bl	8003188 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077bc:	e00a      	b.n	80077d4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077be:	f7fb fce3 	bl	8003188 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e07c      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077d4:	4b41      	ldr	r3, [pc, #260]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1ee      	bne.n	80077be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d105      	bne.n	80077f2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077e6:	4b3d      	ldr	r3, [pc, #244]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a3c      	ldr	r2, [pc, #240]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80077ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d068      	beq.n	80078cc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077fa:	4b38      	ldr	r3, [pc, #224]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b08      	cmp	r3, #8
 8007804:	d060      	beq.n	80078c8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d145      	bne.n	800789a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780e:	4b34      	ldr	r3, [pc, #208]	; (80078e0 <HAL_RCC_OscConfig+0x480>)
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fb fcb8 	bl	8003188 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800781c:	f7fb fcb4 	bl	8003188 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e04f      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	019b      	lsls	r3, r3, #6
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	3b01      	subs	r3, #1
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	061b      	lsls	r3, r3, #24
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	071b      	lsls	r3, r3, #28
 8007866:	491d      	ldr	r1, [pc, #116]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 8007868:	4313      	orrs	r3, r2
 800786a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <HAL_RCC_OscConfig+0x480>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007872:	f7fb fc89 	bl	8003188 <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007878:	e008      	b.n	800788c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800787a:	f7fb fc85 	bl	8003188 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e020      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800788c:	4b13      	ldr	r3, [pc, #76]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <HAL_RCC_OscConfig+0x41a>
 8007898:	e018      	b.n	80078cc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789a:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <HAL_RCC_OscConfig+0x480>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7fb fc72 	bl	8003188 <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a8:	f7fb fc6e 	bl	8003188 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e009      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <HAL_RCC_OscConfig+0x47c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0x448>
 80078c6:	e001      	b.n	80078cc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40007000 	.word	0x40007000
 80078dc:	40023800 	.word	0x40023800
 80078e0:	42470060 	.word	0x42470060

080078e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e022      	b.n	800793c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fa f80f 	bl	800192c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f814 	bl	8007944 <HAL_SD_InitCard>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e00a      	b.n	800793c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007944:	b5b0      	push	{r4, r5, r7, lr}
 8007946:	b08e      	sub	sp, #56	; 0x38
 8007948:	af04      	add	r7, sp, #16
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800794c:	2300      	movs	r3, #0
 800794e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800795c:	2300      	movs	r3, #0
 800795e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007960:	2376      	movs	r3, #118	; 0x76
 8007962:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681d      	ldr	r5, [r3, #0]
 8007968:	466c      	mov	r4, sp
 800796a:	f107 0314 	add.w	r3, r7, #20
 800796e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800797c:	4628      	mov	r0, r5
 800797e:	f001 fa4b 	bl	8008e18 <SDIO_Init>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e031      	b.n	80079f8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007994:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <HAL_SD_InitCard+0xbc>)
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fa72 	bl	8008e88 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <HAL_SD_InitCard+0xbc>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fb18 	bl	8007fe0 <SD_PowerON>
 80079b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e013      	b.n	80079f8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa37 	bl	8007e44 <SD_InitCard>
 80079d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3728      	adds	r7, #40	; 0x28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007a00:	422580a0 	.word	0x422580a0

08007a04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a12:	0f9b      	lsrs	r3, r3, #30
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1e:	0e9b      	lsrs	r3, r3, #26
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a30:	0e1b      	lsrs	r3, r3, #24
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a42:	0c1b      	lsrs	r3, r3, #16
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a64:	0d1b      	lsrs	r3, r3, #20
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a70:	0c1b      	lsrs	r3, r3, #16
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a82:	0bdb      	lsrs	r3, r3, #15
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a94:	0b9b      	lsrs	r3, r3, #14
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa6:	0b5b      	lsrs	r3, r3, #13
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab8:	0b1b      	lsrs	r3, r3, #12
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d163      	bne.n	8007b9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad8:	009a      	lsls	r2, r3, #2
 8007ada:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ade:	4013      	ands	r3, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ae4:	0f92      	lsrs	r2, r2, #30
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af0:	0edb      	lsrs	r3, r3, #27
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b02:	0e1b      	lsrs	r3, r3, #24
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b14:	0d5b      	lsrs	r3, r3, #21
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b26:	0c9b      	lsrs	r3, r3, #18
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b38:	0bdb      	lsrs	r3, r3, #15
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	7e1b      	ldrb	r3, [r3, #24]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b66:	fb02 f203 	mul.w	r2, r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	7a1b      	ldrb	r3, [r3, #8]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	2201      	movs	r2, #1
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b88:	0a52      	lsrs	r2, r2, #9
 8007b8a:	fb02 f203 	mul.w	r2, r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b98:	661a      	str	r2, [r3, #96]	; 0x60
 8007b9a:	e031      	b.n	8007c00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d11d      	bne.n	8007be0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	029a      	lsls	r2, r3, #10
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	661a      	str	r2, [r3, #96]	; 0x60
 8007bde:	e00f      	b.n	8007c00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a58      	ldr	r2, [pc, #352]	; (8007d48 <HAL_SD_GetCardCSD+0x344>)
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e09d      	b.n	8007d3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c04:	0b9b      	lsrs	r3, r3, #14
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c16:	09db      	lsrs	r3, r3, #7
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c38:	0fdb      	lsrs	r3, r3, #31
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	0f5b      	lsrs	r3, r3, #29
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	0e9b      	lsrs	r3, r3, #26
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c68:	0d9b      	lsrs	r3, r3, #22
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7a:	0d5b      	lsrs	r3, r3, #21
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	0c1b      	lsrs	r3, r3, #16
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	0bdb      	lsrs	r3, r3, #15
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	0b9b      	lsrs	r3, r3, #14
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	0b5b      	lsrs	r3, r3, #13
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	0b1b      	lsrs	r3, r3, #12
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	0a9b      	lsrs	r3, r3, #10
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	0a1b      	lsrs	r3, r3, #8
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	004005ff 	.word	0x004005ff

08007d4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d4c:	b5b0      	push	{r4, r5, r7, lr}
 8007d4e:	b08e      	sub	sp, #56	; 0x38
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d02e      	beq.n	8007dc4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6c:	d106      	bne.n	8007d7c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
 8007d7a:	e029      	b.n	8007dd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d82:	d10a      	bne.n	8007d9a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f9b9 	bl	80080fc <SD_WideBus_Enable>
 8007d8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
 8007d98:	e01a      	b.n	8007dd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9f6 	bl	8008192 <SD_WideBus_Disable>
 8007da6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
 8007db4:	e00c      	b.n	8007dd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8007dc2:	e005      	b.n	8007dd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e024      	b.n	8007e36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	466c      	mov	r4, sp
 8007e14:	f107 0318 	add.w	r3, r7, #24
 8007e18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fff6 	bl	8008e18 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	004005ff 	.word	0x004005ff

08007e44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e44:	b5b0      	push	{r4, r5, r7, lr}
 8007e46:	b094      	sub	sp, #80	; 0x50
 8007e48:	af04      	add	r7, sp, #16
 8007e4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 f826 	bl	8008ea6 <SDIO_GetPowerState>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e64:	e0b7      	b.n	8007fd6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d02f      	beq.n	8007ece <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 f9a5 	bl	80091c2 <SDMMC_CmdSendCID>
 8007e78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e82:	e0a8      	b.n	8007fd6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f850 	bl	8008f30 <SDIO_GetResponse>
 8007e90:	4602      	mov	r2, r0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2104      	movs	r1, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f847 	bl	8008f30 <SDIO_GetResponse>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2108      	movs	r1, #8
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 f83e 	bl	8008f30 <SDIO_GetResponse>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	210c      	movs	r1, #12
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 f835 	bl	8008f30 <SDIO_GetResponse>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d00d      	beq.n	8007ef2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f107 020e 	add.w	r2, r7, #14
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 f9ab 	bl	800923c <SDMMC_CmdSetRelAdd>
 8007ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <SD_InitCard+0xae>
    {
      return errorstate;
 8007eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef0:	e071      	b.n	8007fd6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d036      	beq.n	8007f68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007efa:	89fb      	ldrh	r3, [r7, #14]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f001 f975 	bl	80091fe <SDMMC_CmdSendCSD>
 8007f14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	e05a      	b.n	8007fd6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 f802 	bl	8008f30 <SDIO_GetResponse>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2104      	movs	r1, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fff9 	bl	8008f30 <SDIO_GetResponse>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2108      	movs	r1, #8
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fff0 	bl	8008f30 <SDIO_GetResponse>
 8007f50:	4602      	mov	r2, r0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	210c      	movs	r1, #12
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 ffe7 	bl	8008f30 <SDIO_GetResponse>
 8007f62:	4602      	mov	r2, r0
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ffde 	bl	8008f30 <SDIO_GetResponse>
 8007f74:	4603      	mov	r3, r0
 8007f76:	0d1a      	lsrs	r2, r3, #20
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fd3e 	bl	8007a04 <HAL_SD_GetCardCSD>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f92:	e020      	b.n	8007fd6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6819      	ldr	r1, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	f04f 0400 	mov.w	r4, #0
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	f001 f823 	bl	8008ff2 <SDMMC_CmdSelDesel>
 8007fac:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <SD_InitCard+0x174>
  {
    return errorstate;
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	e00e      	b.n	8007fd6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681d      	ldr	r5, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	466c      	mov	r4, sp
 8007fc0:	f103 0210 	add.w	r2, r3, #16
 8007fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fca:	3304      	adds	r3, #4
 8007fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 ff22 	bl	8008e18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3740      	adds	r7, #64	; 0x40
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fe0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 f81d 	bl	8009038 <SDMMC_CmdGoIdleState>
 8007ffe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	e072      	b.n	80080f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f001 f830 	bl	8009074 <SDMMC_CmdOperCond>
 8008014:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00d      	beq.n	8008038 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f001 f806 	bl	8009038 <SDMMC_CmdGoIdleState>
 800802c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	e05b      	b.n	80080f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008042:	2b01      	cmp	r3, #1
 8008044:	d137      	bne.n	80080b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f830 	bl	80090b2 <SDMMC_CmdAppCommand>
 8008052:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d02d      	beq.n	80080b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800805a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800805e:	e047      	b.n	80080f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f001 f823 	bl	80090b2 <SDMMC_CmdAppCommand>
 800806c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <SD_PowerON+0x98>
    {
      return errorstate;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	e03b      	b.n	80080f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	491e      	ldr	r1, [pc, #120]	; (80080f8 <SD_PowerON+0x118>)
 800807e:	4618      	mov	r0, r3
 8008080:	f001 f839 	bl	80090f6 <SDMMC_CmdAppOperCommand>
 8008084:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800808c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008090:	e02e      	b.n	80080f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2100      	movs	r1, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f000 ff49 	bl	8008f30 <SDIO_GetResponse>
 800809e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	0fdb      	lsrs	r3, r3, #31
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <SD_PowerON+0xcc>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <SD_PowerON+0xce>
 80080ac:	2300      	movs	r3, #0
 80080ae:	613b      	str	r3, [r7, #16]

    count++;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080bc:	4293      	cmp	r3, r2
 80080be:	d802      	bhi.n	80080c6 <SD_PowerON+0xe6>
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0cc      	beq.n	8008060 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d902      	bls.n	80080d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080d4:	e00c      	b.n	80080f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	645a      	str	r2, [r3, #68]	; 0x44
 80080e6:	e002      	b.n	80080ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	c1100000 	.word	0xc1100000

080080fc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f000 ff0c 	bl	8008f30 <SDIO_GetResponse>
 8008118:	4603      	mov	r3, r0
 800811a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008122:	d102      	bne.n	800812a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008128:	e02f      	b.n	800818a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800812a:	f107 030c 	add.w	r3, r7, #12
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f879 	bl	8008228 <SD_FindSCR>
 8008136:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	e023      	b.n	800818a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01c      	beq.n	8008186 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 ffaa 	bl	80090b2 <SDMMC_CmdAppCommand>
 800815e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	e00f      	b.n	800818a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2102      	movs	r1, #2
 8008170:	4618      	mov	r0, r3
 8008172:	f000 ffe3 	bl	800913c <SDMMC_CmdBusWidth>
 8008176:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	e003      	b.n	800818a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008182:	2300      	movs	r3, #0
 8008184:	e001      	b.n	800818a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008186:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b086      	sub	sp, #24
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	2300      	movs	r3, #0
 80081a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2100      	movs	r1, #0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fec1 	bl	8008f30 <SDIO_GetResponse>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081b8:	d102      	bne.n	80081c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081be:	e02f      	b.n	8008220 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f82e 	bl	8008228 <SD_FindSCR>
 80081cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	e023      	b.n	8008220 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01c      	beq.n	800821c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f000 ff5f 	bl	80090b2 <SDMMC_CmdAppCommand>
 80081f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	e00f      	b.n	8008220 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f000 ff98 	bl	800913c <SDMMC_CmdBusWidth>
 800820c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	e003      	b.n	8008220 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008218:	2300      	movs	r3, #0
 800821a:	e001      	b.n	8008220 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800821c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b08f      	sub	sp, #60	; 0x3c
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008232:	f7fa ffa9 	bl	8003188 <HAL_GetTick>
 8008236:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2108      	movs	r1, #8
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fead 	bl	8008fae <SDMMC_CmdBlockLength>
 8008254:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <SD_FindSCR+0x38>
  {
    return errorstate;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	e0a9      	b.n	80083b4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	041b      	lsls	r3, r3, #16
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f000 ff20 	bl	80090b2 <SDMMC_CmdAppCommand>
 8008272:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <SD_FindSCR+0x56>
  {
    return errorstate;
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	e09a      	b.n	80083b4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008284:	2308      	movs	r3, #8
 8008286:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008288:	2330      	movs	r3, #48	; 0x30
 800828a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800828c:	2302      	movs	r3, #2
 800828e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008290:	2300      	movs	r3, #0
 8008292:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008294:	2301      	movs	r3, #1
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f107 0210 	add.w	r2, r7, #16
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fe57 	bl	8008f56 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 ff67 	bl	8009180 <SDMMC_CmdSendSCR>
 80082b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d022      	beq.n	8008300 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	e07a      	b.n	80083b4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	f107 0208 	add.w	r2, r7, #8
 80082d8:	18d4      	adds	r4, r2, r3
 80082da:	4608      	mov	r0, r1
 80082dc:	f000 fdc7 	bl	8008e6e <SDIO_ReadFIFO>
 80082e0:	4603      	mov	r3, r0
 80082e2:	6023      	str	r3, [r4, #0]
      index++;
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	3301      	adds	r3, #1
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082ea:	f7fa ff4d 	bl	8003188 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d102      	bne.n	8008300 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082fe:	e059      	b.n	80083b4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008306:	f240 432a 	movw	r3, #1066	; 0x42a
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0d6      	beq.n	80082be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2208      	movs	r2, #8
 8008324:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008326:	2308      	movs	r3, #8
 8008328:	e044      	b.n	80083b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2202      	movs	r2, #2
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008340:	2302      	movs	r3, #2
 8008342:	e037      	b.n	80083b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2220      	movs	r2, #32
 8008358:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800835a:	2320      	movs	r3, #32
 800835c:	e02a      	b.n	80083b4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f240 523a 	movw	r2, #1338	; 0x53a
 8008366:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	061a      	lsls	r2, r3, #24
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008374:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800837e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	0e1b      	lsrs	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	601a      	str	r2, [r3, #0]
    scr++;
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	3304      	adds	r3, #4
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	061a      	lsls	r2, r3, #24
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800839c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	0e1b      	lsrs	r3, r3, #24
 80083ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	373c      	adds	r7, #60	; 0x3c
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd90      	pop	{r4, r7, pc}

080083bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e034      	b.n	800843c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7f9 fbf6 	bl	8001bd8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3308      	adds	r3, #8
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f000 fc0a 	bl	8008c10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	461a      	mov	r2, r3
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	f000 fc72 	bl	8008cf0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6858      	ldr	r0, [r3, #4]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	f000 fcbd 	bl	8008d98 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	6892      	ldr	r2, [r2, #8]
 8008426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	6892      	ldr	r2, [r2, #8]
 8008432:	f041 0101 	orr.w	r1, r1, #1
 8008436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e03f      	b.n	80084d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f9 fac6 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2224      	movs	r2, #36	; 0x24
 8008474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f829 	bl	80084e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800849c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695a      	ldr	r2, [r3, #20]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008522:	f023 030c 	bic.w	r3, r3, #12
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	430b      	orrs	r3, r1
 800852e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854e:	f040 8199 	bne.w	8008884 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4ac6      	ldr	r2, [pc, #792]	; (8008870 <UART_SetConfig+0x390>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00f      	beq.n	800857c <UART_SetConfig+0x9c>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4ac4      	ldr	r2, [pc, #784]	; (8008874 <UART_SetConfig+0x394>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00a      	beq.n	800857c <UART_SetConfig+0x9c>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4ac3      	ldr	r2, [pc, #780]	; (8008878 <UART_SetConfig+0x398>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d005      	beq.n	800857c <UART_SetConfig+0x9c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4ac1      	ldr	r2, [pc, #772]	; (800887c <UART_SetConfig+0x39c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	f040 80bd 	bne.w	80086f6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800857c:	f7fe fb80 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 8008580:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	461d      	mov	r5, r3
 8008586:	f04f 0600 	mov.w	r6, #0
 800858a:	46a8      	mov	r8, r5
 800858c:	46b1      	mov	r9, r6
 800858e:	eb18 0308 	adds.w	r3, r8, r8
 8008592:	eb49 0409 	adc.w	r4, r9, r9
 8008596:	4698      	mov	r8, r3
 8008598:	46a1      	mov	r9, r4
 800859a:	eb18 0805 	adds.w	r8, r8, r5
 800859e:	eb49 0906 	adc.w	r9, r9, r6
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085b6:	4688      	mov	r8, r1
 80085b8:	4691      	mov	r9, r2
 80085ba:	eb18 0005 	adds.w	r0, r8, r5
 80085be:	eb49 0106 	adc.w	r1, r9, r6
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	461d      	mov	r5, r3
 80085c8:	f04f 0600 	mov.w	r6, #0
 80085cc:	196b      	adds	r3, r5, r5
 80085ce:	eb46 0406 	adc.w	r4, r6, r6
 80085d2:	461a      	mov	r2, r3
 80085d4:	4623      	mov	r3, r4
 80085d6:	f7f7 fe1f 	bl	8000218 <__aeabi_uldivmod>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	461a      	mov	r2, r3
 80085e0:	4ba7      	ldr	r3, [pc, #668]	; (8008880 <UART_SetConfig+0x3a0>)
 80085e2:	fba3 2302 	umull	r2, r3, r3, r2
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	461d      	mov	r5, r3
 80085f0:	f04f 0600 	mov.w	r6, #0
 80085f4:	46a9      	mov	r9, r5
 80085f6:	46b2      	mov	sl, r6
 80085f8:	eb19 0309 	adds.w	r3, r9, r9
 80085fc:	eb4a 040a 	adc.w	r4, sl, sl
 8008600:	4699      	mov	r9, r3
 8008602:	46a2      	mov	sl, r4
 8008604:	eb19 0905 	adds.w	r9, r9, r5
 8008608:	eb4a 0a06 	adc.w	sl, sl, r6
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800861c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008620:	4689      	mov	r9, r1
 8008622:	4692      	mov	sl, r2
 8008624:	eb19 0005 	adds.w	r0, r9, r5
 8008628:	eb4a 0106 	adc.w	r1, sl, r6
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	461d      	mov	r5, r3
 8008632:	f04f 0600 	mov.w	r6, #0
 8008636:	196b      	adds	r3, r5, r5
 8008638:	eb46 0406 	adc.w	r4, r6, r6
 800863c:	461a      	mov	r2, r3
 800863e:	4623      	mov	r3, r4
 8008640:	f7f7 fdea 	bl	8000218 <__aeabi_uldivmod>
 8008644:	4603      	mov	r3, r0
 8008646:	460c      	mov	r4, r1
 8008648:	461a      	mov	r2, r3
 800864a:	4b8d      	ldr	r3, [pc, #564]	; (8008880 <UART_SetConfig+0x3a0>)
 800864c:	fba3 1302 	umull	r1, r3, r3, r2
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	2164      	movs	r1, #100	; 0x64
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	3332      	adds	r3, #50	; 0x32
 800865e:	4a88      	ldr	r2, [pc, #544]	; (8008880 <UART_SetConfig+0x3a0>)
 8008660:	fba2 2303 	umull	r2, r3, r2, r3
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800866c:	4498      	add	r8, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	461d      	mov	r5, r3
 8008672:	f04f 0600 	mov.w	r6, #0
 8008676:	46a9      	mov	r9, r5
 8008678:	46b2      	mov	sl, r6
 800867a:	eb19 0309 	adds.w	r3, r9, r9
 800867e:	eb4a 040a 	adc.w	r4, sl, sl
 8008682:	4699      	mov	r9, r3
 8008684:	46a2      	mov	sl, r4
 8008686:	eb19 0905 	adds.w	r9, r9, r5
 800868a:	eb4a 0a06 	adc.w	sl, sl, r6
 800868e:	f04f 0100 	mov.w	r1, #0
 8008692:	f04f 0200 	mov.w	r2, #0
 8008696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800869a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800869e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086a2:	4689      	mov	r9, r1
 80086a4:	4692      	mov	sl, r2
 80086a6:	eb19 0005 	adds.w	r0, r9, r5
 80086aa:	eb4a 0106 	adc.w	r1, sl, r6
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	461d      	mov	r5, r3
 80086b4:	f04f 0600 	mov.w	r6, #0
 80086b8:	196b      	adds	r3, r5, r5
 80086ba:	eb46 0406 	adc.w	r4, r6, r6
 80086be:	461a      	mov	r2, r3
 80086c0:	4623      	mov	r3, r4
 80086c2:	f7f7 fda9 	bl	8000218 <__aeabi_uldivmod>
 80086c6:	4603      	mov	r3, r0
 80086c8:	460c      	mov	r4, r1
 80086ca:	461a      	mov	r2, r3
 80086cc:	4b6c      	ldr	r3, [pc, #432]	; (8008880 <UART_SetConfig+0x3a0>)
 80086ce:	fba3 1302 	umull	r1, r3, r3, r2
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	2164      	movs	r1, #100	; 0x64
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	3332      	adds	r3, #50	; 0x32
 80086e0:	4a67      	ldr	r2, [pc, #412]	; (8008880 <UART_SetConfig+0x3a0>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	f003 0207 	and.w	r2, r3, #7
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4442      	add	r2, r8
 80086f2:	609a      	str	r2, [r3, #8]
 80086f4:	e27d      	b.n	8008bf2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086f6:	f7fe faaf 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 80086fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	461d      	mov	r5, r3
 8008700:	f04f 0600 	mov.w	r6, #0
 8008704:	46a8      	mov	r8, r5
 8008706:	46b1      	mov	r9, r6
 8008708:	eb18 0308 	adds.w	r3, r8, r8
 800870c:	eb49 0409 	adc.w	r4, r9, r9
 8008710:	4698      	mov	r8, r3
 8008712:	46a1      	mov	r9, r4
 8008714:	eb18 0805 	adds.w	r8, r8, r5
 8008718:	eb49 0906 	adc.w	r9, r9, r6
 800871c:	f04f 0100 	mov.w	r1, #0
 8008720:	f04f 0200 	mov.w	r2, #0
 8008724:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008728:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800872c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008730:	4688      	mov	r8, r1
 8008732:	4691      	mov	r9, r2
 8008734:	eb18 0005 	adds.w	r0, r8, r5
 8008738:	eb49 0106 	adc.w	r1, r9, r6
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	461d      	mov	r5, r3
 8008742:	f04f 0600 	mov.w	r6, #0
 8008746:	196b      	adds	r3, r5, r5
 8008748:	eb46 0406 	adc.w	r4, r6, r6
 800874c:	461a      	mov	r2, r3
 800874e:	4623      	mov	r3, r4
 8008750:	f7f7 fd62 	bl	8000218 <__aeabi_uldivmod>
 8008754:	4603      	mov	r3, r0
 8008756:	460c      	mov	r4, r1
 8008758:	461a      	mov	r2, r3
 800875a:	4b49      	ldr	r3, [pc, #292]	; (8008880 <UART_SetConfig+0x3a0>)
 800875c:	fba3 2302 	umull	r2, r3, r3, r2
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	461d      	mov	r5, r3
 800876a:	f04f 0600 	mov.w	r6, #0
 800876e:	46a9      	mov	r9, r5
 8008770:	46b2      	mov	sl, r6
 8008772:	eb19 0309 	adds.w	r3, r9, r9
 8008776:	eb4a 040a 	adc.w	r4, sl, sl
 800877a:	4699      	mov	r9, r3
 800877c:	46a2      	mov	sl, r4
 800877e:	eb19 0905 	adds.w	r9, r9, r5
 8008782:	eb4a 0a06 	adc.w	sl, sl, r6
 8008786:	f04f 0100 	mov.w	r1, #0
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800879a:	4689      	mov	r9, r1
 800879c:	4692      	mov	sl, r2
 800879e:	eb19 0005 	adds.w	r0, r9, r5
 80087a2:	eb4a 0106 	adc.w	r1, sl, r6
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	461d      	mov	r5, r3
 80087ac:	f04f 0600 	mov.w	r6, #0
 80087b0:	196b      	adds	r3, r5, r5
 80087b2:	eb46 0406 	adc.w	r4, r6, r6
 80087b6:	461a      	mov	r2, r3
 80087b8:	4623      	mov	r3, r4
 80087ba:	f7f7 fd2d 	bl	8000218 <__aeabi_uldivmod>
 80087be:	4603      	mov	r3, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b2e      	ldr	r3, [pc, #184]	; (8008880 <UART_SetConfig+0x3a0>)
 80087c6:	fba3 1302 	umull	r1, r3, r3, r2
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	2164      	movs	r1, #100	; 0x64
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	3332      	adds	r3, #50	; 0x32
 80087d8:	4a29      	ldr	r2, [pc, #164]	; (8008880 <UART_SetConfig+0x3a0>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087e6:	4498      	add	r8, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	461d      	mov	r5, r3
 80087ec:	f04f 0600 	mov.w	r6, #0
 80087f0:	46a9      	mov	r9, r5
 80087f2:	46b2      	mov	sl, r6
 80087f4:	eb19 0309 	adds.w	r3, r9, r9
 80087f8:	eb4a 040a 	adc.w	r4, sl, sl
 80087fc:	4699      	mov	r9, r3
 80087fe:	46a2      	mov	sl, r4
 8008800:	eb19 0905 	adds.w	r9, r9, r5
 8008804:	eb4a 0a06 	adc.w	sl, sl, r6
 8008808:	f04f 0100 	mov.w	r1, #0
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800881c:	4689      	mov	r9, r1
 800881e:	4692      	mov	sl, r2
 8008820:	eb19 0005 	adds.w	r0, r9, r5
 8008824:	eb4a 0106 	adc.w	r1, sl, r6
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	461d      	mov	r5, r3
 800882e:	f04f 0600 	mov.w	r6, #0
 8008832:	196b      	adds	r3, r5, r5
 8008834:	eb46 0406 	adc.w	r4, r6, r6
 8008838:	461a      	mov	r2, r3
 800883a:	4623      	mov	r3, r4
 800883c:	f7f7 fcec 	bl	8000218 <__aeabi_uldivmod>
 8008840:	4603      	mov	r3, r0
 8008842:	460c      	mov	r4, r1
 8008844:	461a      	mov	r2, r3
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <UART_SetConfig+0x3a0>)
 8008848:	fba3 1302 	umull	r1, r3, r3, r2
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	2164      	movs	r1, #100	; 0x64
 8008850:	fb01 f303 	mul.w	r3, r1, r3
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	3332      	adds	r3, #50	; 0x32
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <UART_SetConfig+0x3a0>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	f003 0207 	and.w	r2, r3, #7
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4442      	add	r2, r8
 800886c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800886e:	e1c0      	b.n	8008bf2 <UART_SetConfig+0x712>
 8008870:	40011000 	.word	0x40011000
 8008874:	40011400 	.word	0x40011400
 8008878:	40011800 	.word	0x40011800
 800887c:	40011c00 	.word	0x40011c00
 8008880:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4adc      	ldr	r2, [pc, #880]	; (8008bfc <UART_SetConfig+0x71c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00f      	beq.n	80088ae <UART_SetConfig+0x3ce>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4adb      	ldr	r2, [pc, #876]	; (8008c00 <UART_SetConfig+0x720>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00a      	beq.n	80088ae <UART_SetConfig+0x3ce>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4ad9      	ldr	r2, [pc, #868]	; (8008c04 <UART_SetConfig+0x724>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d005      	beq.n	80088ae <UART_SetConfig+0x3ce>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4ad8      	ldr	r2, [pc, #864]	; (8008c08 <UART_SetConfig+0x728>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	f040 80d1 	bne.w	8008a50 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80088ae:	f7fe f9e7 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 80088b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	469a      	mov	sl, r3
 80088b8:	f04f 0b00 	mov.w	fp, #0
 80088bc:	46d0      	mov	r8, sl
 80088be:	46d9      	mov	r9, fp
 80088c0:	eb18 0308 	adds.w	r3, r8, r8
 80088c4:	eb49 0409 	adc.w	r4, r9, r9
 80088c8:	4698      	mov	r8, r3
 80088ca:	46a1      	mov	r9, r4
 80088cc:	eb18 080a 	adds.w	r8, r8, sl
 80088d0:	eb49 090b 	adc.w	r9, r9, fp
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80088e8:	4688      	mov	r8, r1
 80088ea:	4691      	mov	r9, r2
 80088ec:	eb1a 0508 	adds.w	r5, sl, r8
 80088f0:	eb4b 0609 	adc.w	r6, fp, r9
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4619      	mov	r1, r3
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	f04f 0400 	mov.w	r4, #0
 8008906:	0094      	lsls	r4, r2, #2
 8008908:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800890c:	008b      	lsls	r3, r1, #2
 800890e:	461a      	mov	r2, r3
 8008910:	4623      	mov	r3, r4
 8008912:	4628      	mov	r0, r5
 8008914:	4631      	mov	r1, r6
 8008916:	f7f7 fc7f 	bl	8000218 <__aeabi_uldivmod>
 800891a:	4603      	mov	r3, r0
 800891c:	460c      	mov	r4, r1
 800891e:	461a      	mov	r2, r3
 8008920:	4bba      	ldr	r3, [pc, #744]	; (8008c0c <UART_SetConfig+0x72c>)
 8008922:	fba3 2302 	umull	r2, r3, r3, r2
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	469b      	mov	fp, r3
 8008930:	f04f 0c00 	mov.w	ip, #0
 8008934:	46d9      	mov	r9, fp
 8008936:	46e2      	mov	sl, ip
 8008938:	eb19 0309 	adds.w	r3, r9, r9
 800893c:	eb4a 040a 	adc.w	r4, sl, sl
 8008940:	4699      	mov	r9, r3
 8008942:	46a2      	mov	sl, r4
 8008944:	eb19 090b 	adds.w	r9, r9, fp
 8008948:	eb4a 0a0c 	adc.w	sl, sl, ip
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800895c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008960:	4689      	mov	r9, r1
 8008962:	4692      	mov	sl, r2
 8008964:	eb1b 0509 	adds.w	r5, fp, r9
 8008968:	eb4c 060a 	adc.w	r6, ip, sl
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4619      	mov	r1, r3
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	f04f 0400 	mov.w	r4, #0
 800897e:	0094      	lsls	r4, r2, #2
 8008980:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008984:	008b      	lsls	r3, r1, #2
 8008986:	461a      	mov	r2, r3
 8008988:	4623      	mov	r3, r4
 800898a:	4628      	mov	r0, r5
 800898c:	4631      	mov	r1, r6
 800898e:	f7f7 fc43 	bl	8000218 <__aeabi_uldivmod>
 8008992:	4603      	mov	r3, r0
 8008994:	460c      	mov	r4, r1
 8008996:	461a      	mov	r2, r3
 8008998:	4b9c      	ldr	r3, [pc, #624]	; (8008c0c <UART_SetConfig+0x72c>)
 800899a:	fba3 1302 	umull	r1, r3, r3, r2
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	2164      	movs	r1, #100	; 0x64
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	3332      	adds	r3, #50	; 0x32
 80089ac:	4a97      	ldr	r2, [pc, #604]	; (8008c0c <UART_SetConfig+0x72c>)
 80089ae:	fba2 2303 	umull	r2, r3, r2, r3
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089b8:	4498      	add	r8, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	469b      	mov	fp, r3
 80089be:	f04f 0c00 	mov.w	ip, #0
 80089c2:	46d9      	mov	r9, fp
 80089c4:	46e2      	mov	sl, ip
 80089c6:	eb19 0309 	adds.w	r3, r9, r9
 80089ca:	eb4a 040a 	adc.w	r4, sl, sl
 80089ce:	4699      	mov	r9, r3
 80089d0:	46a2      	mov	sl, r4
 80089d2:	eb19 090b 	adds.w	r9, r9, fp
 80089d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089da:	f04f 0100 	mov.w	r1, #0
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089ee:	4689      	mov	r9, r1
 80089f0:	4692      	mov	sl, r2
 80089f2:	eb1b 0509 	adds.w	r5, fp, r9
 80089f6:	eb4c 060a 	adc.w	r6, ip, sl
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4619      	mov	r1, r3
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	f04f 0400 	mov.w	r4, #0
 8008a0c:	0094      	lsls	r4, r2, #2
 8008a0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a12:	008b      	lsls	r3, r1, #2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4623      	mov	r3, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	f7f7 fbfc 	bl	8000218 <__aeabi_uldivmod>
 8008a20:	4603      	mov	r3, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b79      	ldr	r3, [pc, #484]	; (8008c0c <UART_SetConfig+0x72c>)
 8008a28:	fba3 1302 	umull	r1, r3, r3, r2
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	2164      	movs	r1, #100	; 0x64
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	3332      	adds	r3, #50	; 0x32
 8008a3a:	4a74      	ldr	r2, [pc, #464]	; (8008c0c <UART_SetConfig+0x72c>)
 8008a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4442      	add	r2, r8
 8008a4c:	609a      	str	r2, [r3, #8]
 8008a4e:	e0d0      	b.n	8008bf2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fe f902 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 8008a54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	469a      	mov	sl, r3
 8008a5a:	f04f 0b00 	mov.w	fp, #0
 8008a5e:	46d0      	mov	r8, sl
 8008a60:	46d9      	mov	r9, fp
 8008a62:	eb18 0308 	adds.w	r3, r8, r8
 8008a66:	eb49 0409 	adc.w	r4, r9, r9
 8008a6a:	4698      	mov	r8, r3
 8008a6c:	46a1      	mov	r9, r4
 8008a6e:	eb18 080a 	adds.w	r8, r8, sl
 8008a72:	eb49 090b 	adc.w	r9, r9, fp
 8008a76:	f04f 0100 	mov.w	r1, #0
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a8a:	4688      	mov	r8, r1
 8008a8c:	4691      	mov	r9, r2
 8008a8e:	eb1a 0508 	adds.w	r5, sl, r8
 8008a92:	eb4b 0609 	adc.w	r6, fp, r9
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	f04f 0400 	mov.w	r4, #0
 8008aa8:	0094      	lsls	r4, r2, #2
 8008aaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008aae:	008b      	lsls	r3, r1, #2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4623      	mov	r3, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	f7f7 fbae 	bl	8000218 <__aeabi_uldivmod>
 8008abc:	4603      	mov	r3, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b52      	ldr	r3, [pc, #328]	; (8008c0c <UART_SetConfig+0x72c>)
 8008ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	469b      	mov	fp, r3
 8008ad2:	f04f 0c00 	mov.w	ip, #0
 8008ad6:	46d9      	mov	r9, fp
 8008ad8:	46e2      	mov	sl, ip
 8008ada:	eb19 0309 	adds.w	r3, r9, r9
 8008ade:	eb4a 040a 	adc.w	r4, sl, sl
 8008ae2:	4699      	mov	r9, r3
 8008ae4:	46a2      	mov	sl, r4
 8008ae6:	eb19 090b 	adds.w	r9, r9, fp
 8008aea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008aee:	f04f 0100 	mov.w	r1, #0
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b02:	4689      	mov	r9, r1
 8008b04:	4692      	mov	sl, r2
 8008b06:	eb1b 0509 	adds.w	r5, fp, r9
 8008b0a:	eb4c 060a 	adc.w	r6, ip, sl
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	4619      	mov	r1, r3
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	f04f 0400 	mov.w	r4, #0
 8008b20:	0094      	lsls	r4, r2, #2
 8008b22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b26:	008b      	lsls	r3, r1, #2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	4631      	mov	r1, r6
 8008b30:	f7f7 fb72 	bl	8000218 <__aeabi_uldivmod>
 8008b34:	4603      	mov	r3, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4b34      	ldr	r3, [pc, #208]	; (8008c0c <UART_SetConfig+0x72c>)
 8008b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	2164      	movs	r1, #100	; 0x64
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	3332      	adds	r3, #50	; 0x32
 8008b4e:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <UART_SetConfig+0x72c>)
 8008b50:	fba2 2303 	umull	r2, r3, r2, r3
 8008b54:	095b      	lsrs	r3, r3, #5
 8008b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b5a:	4498      	add	r8, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	469b      	mov	fp, r3
 8008b60:	f04f 0c00 	mov.w	ip, #0
 8008b64:	46d9      	mov	r9, fp
 8008b66:	46e2      	mov	sl, ip
 8008b68:	eb19 0309 	adds.w	r3, r9, r9
 8008b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8008b70:	4699      	mov	r9, r3
 8008b72:	46a2      	mov	sl, r4
 8008b74:	eb19 090b 	adds.w	r9, r9, fp
 8008b78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b7c:	f04f 0100 	mov.w	r1, #0
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b90:	4689      	mov	r9, r1
 8008b92:	4692      	mov	sl, r2
 8008b94:	eb1b 0509 	adds.w	r5, fp, r9
 8008b98:	eb4c 060a 	adc.w	r6, ip, sl
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	f04f 0400 	mov.w	r4, #0
 8008bae:	0094      	lsls	r4, r2, #2
 8008bb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bb4:	008b      	lsls	r3, r1, #2
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4623      	mov	r3, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	f7f7 fb2b 	bl	8000218 <__aeabi_uldivmod>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <UART_SetConfig+0x72c>)
 8008bca:	fba3 1302 	umull	r1, r3, r3, r2
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	2164      	movs	r1, #100	; 0x64
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	3332      	adds	r3, #50	; 0x32
 8008bdc:	4a0b      	ldr	r2, [pc, #44]	; (8008c0c <UART_SetConfig+0x72c>)
 8008bde:	fba2 2303 	umull	r2, r3, r2, r3
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	f003 020f 	and.w	r2, r3, #15
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4442      	add	r2, r8
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	e7ff      	b.n	8008bf2 <UART_SetConfig+0x712>
 8008bf2:	bf00      	nop
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfc:	40011000 	.word	0x40011000
 8008c00:	40011400 	.word	0x40011400
 8008c04:	40011800 	.word	0x40011800
 8008c08:	40011c00 	.word	0x40011c00
 8008c0c:	51eb851f 	.word	0x51eb851f

08008c10 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4b2f      	ldr	r3, [pc, #188]	; (8008cec <FSMC_NORSRAM_Init+0xdc>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008c3a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008c40:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008c46:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008c4c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008c52:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008c58:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008c5e:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008c64:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008c6a:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008c70:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008c76:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008c7c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008c82:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d103      	bne.n	8008c9a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cae:	d10a      	bne.n	8008cc6 <FSMC_NORSRAM_Init+0xb6>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	ffc00480 	.word	0xffc00480

08008cf0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008d12:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008d1e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008d26:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008d2e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008d38:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	3b02      	subs	r3, #2
 8008d40:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008d42:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6979      	ldr	r1, [r7, #20]
 8008d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d68:	d10e      	bne.n	8008d88 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d72:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	051b      	lsls	r3, r3, #20
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db0:	d122      	bne.n	8008df8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008dce:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008dd6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008dde:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008de4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6979      	ldr	r1, [r7, #20]
 8008df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008df6:	e005      	b.n	8008e04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	cff00000 	.word	0xcff00000

08008e18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008e18:	b084      	sub	sp, #16
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	f107 001c 	add.w	r0, r7, #28
 8008e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008e2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008e30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008e32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008e36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008e3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008e3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008e42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008e52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	b004      	add	sp, #16
 8008e6c:	4770      	bx	lr

08008e6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e96:	2002      	movs	r0, #2
 8008e98:	f7fa f982 	bl	80031a0 <HAL_Delay>
  
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ee0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ee6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008eec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008efc:	f023 030f 	bic.w	r3, r3, #15
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	b2db      	uxtb	r3, r3
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3314      	adds	r3, #20
 8008f3e:	461a      	mov	r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	4413      	add	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
}  
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f82:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0

}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b088      	sub	sp, #32
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff74 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fde:	2110      	movs	r1, #16
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f975 	bl	80092d0 <SDMMC_GetCmdResp1>
 8008fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b08a      	sub	sp, #40	; 0x28
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009002:	2307      	movs	r3, #7
 8009004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009006:	2340      	movs	r3, #64	; 0x40
 8009008:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800900e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009012:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009014:	f107 0310 	add.w	r3, r7, #16
 8009018:	4619      	mov	r1, r3
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff ff51 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009020:	f241 3288 	movw	r2, #5000	; 0x1388
 8009024:	2107      	movs	r1, #7
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 f952 	bl	80092d0 <SDMMC_GetCmdResp1>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	; 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009048:	2300      	movs	r3, #0
 800904a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009054:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff ff30 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f90c 	bl	8009280 <SDMMC_GetCmdError>
 8009068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800906a:	69fb      	ldr	r3, [r7, #28]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800907c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009082:	2308      	movs	r3, #8
 8009084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800908e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff ff11 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 faf5 	bl	8009690 <SDMMC_GetCmdResp7>
 80090a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090c0:	2337      	movs	r3, #55	; 0x37
 80090c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fef2 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	2137      	movs	r1, #55	; 0x37
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f8f3 	bl	80092d0 <SDMMC_GetCmdResp1>
 80090ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ec:	69fb      	ldr	r3, [r7, #28]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b088      	sub	sp, #32
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800910a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800910c:	2329      	movs	r3, #41	; 0x29
 800910e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009110:	2340      	movs	r3, #64	; 0x40
 8009112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800911c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7ff fecc 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa02 	bl	8009534 <SDMMC_GetCmdResp3>
 8009130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009132:	69fb      	ldr	r3, [r7, #28]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800914a:	2306      	movs	r3, #6
 800914c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fead 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009168:	f241 3288 	movw	r2, #5000	; 0x1388
 800916c:	2106      	movs	r1, #6
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8ae 	bl	80092d0 <SDMMC_GetCmdResp1>
 8009174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009176:	69fb      	ldr	r3, [r7, #28]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800918c:	2333      	movs	r3, #51	; 0x33
 800918e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fe8c 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	2133      	movs	r1, #51	; 0x33
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f88d 	bl	80092d0 <SDMMC_GetCmdResp1>
 80091b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b8:	69fb      	ldr	r3, [r7, #28]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b088      	sub	sp, #32
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091ce:	2302      	movs	r3, #2
 80091d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091d2:	23c0      	movs	r3, #192	; 0xc0
 80091d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fe6b 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f95b 	bl	80094a8 <SDMMC_GetCmdResp2>
 80091f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f4:	69fb      	ldr	r3, [r7, #28]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b088      	sub	sp, #32
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800920c:	2309      	movs	r3, #9
 800920e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009210:	23c0      	movs	r3, #192	; 0xc0
 8009212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800921c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff fe4c 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f93c 	bl	80094a8 <SDMMC_GetCmdResp2>
 8009230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009232:	69fb      	ldr	r3, [r7, #28]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800924a:	2303      	movs	r3, #3
 800924c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff fe2d 	bl	8008ec2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	2103      	movs	r1, #3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f99b 	bl	80095a8 <SDMMC_GetCmdResp6>
 8009272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009274:	69fb      	ldr	r3, [r7, #28]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009280:	b490      	push	{r4, r7}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <SDMMC_GetCmdError+0x48>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a0f      	ldr	r2, [pc, #60]	; (80092cc <SDMMC_GetCmdError+0x4c>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	0a5b      	lsrs	r3, r3, #9
 8009294:	f241 3288 	movw	r2, #5000	; 0x1388
 8009298:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800929c:	4623      	mov	r3, r4
 800929e:	1e5c      	subs	r4, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a8:	e009      	b.n	80092be <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0f2      	beq.n	800929c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	22c5      	movs	r2, #197	; 0xc5
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc90      	pop	{r4, r7}
 80092c6:	4770      	bx	lr
 80092c8:	2000000c 	.word	0x2000000c
 80092cc:	10624dd3 	.word	0x10624dd3

080092d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80092d0:	b590      	push	{r4, r7, lr}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092de:	4b6f      	ldr	r3, [pc, #444]	; (800949c <SDMMC_GetCmdResp1+0x1cc>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a6f      	ldr	r2, [pc, #444]	; (80094a0 <SDMMC_GetCmdResp1+0x1d0>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	0a5b      	lsrs	r3, r3, #9
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80092f0:	4623      	mov	r3, r4
 80092f2:	1e5c      	subs	r4, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092fc:	e0c9      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009302:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <SDMMC_GetCmdResp1+0x20>
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1eb      	bne.n	80092f0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2204      	movs	r2, #4
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800932a:	2304      	movs	r3, #4
 800932c:	e0b1      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009340:	2301      	movs	r3, #1
 8009342:	e0a6      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	22c5      	movs	r2, #197	; 0xc5
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff fde3 	bl	8008f16 <SDIO_GetCommandResponse>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	4293      	cmp	r3, r2
 8009358:	d001      	beq.n	800935e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800935a:	2301      	movs	r3, #1
 800935c:	e099      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800935e:	2100      	movs	r1, #0
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fde5 	bl	8008f30 <SDIO_GetResponse>
 8009366:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4b4e      	ldr	r3, [pc, #312]	; (80094a4 <SDMMC_GetCmdResp1+0x1d4>)
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009372:	2300      	movs	r3, #0
 8009374:	e08d      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	da02      	bge.n	8009382 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800937c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009380:	e087      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	e080      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800939a:	2380      	movs	r3, #128	; 0x80
 800939c:	e079      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ac:	e071      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093bc:	e069      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80093c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093cc:	e061      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093dc:	e059      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ec:	e051      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093fc:	e049      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800940c:	e041      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941c:	e039      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800942c:	e031      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009438:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800943c:	e029      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800944c:	e021      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009458:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800945c:	e019      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009468:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800946c:	e011      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800947c:	e009      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009488:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800948c:	e001      	b.n	8009492 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800948e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop
 800949c:	2000000c 	.word	0x2000000c
 80094a0:	10624dd3 	.word	0x10624dd3
 80094a4:	fdffe008 	.word	0xfdffe008

080094a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80094a8:	b490      	push	{r4, r7}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094b0:	4b1e      	ldr	r3, [pc, #120]	; (800952c <SDMMC_GetCmdResp2+0x84>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a1e      	ldr	r2, [pc, #120]	; (8009530 <SDMMC_GetCmdResp2+0x88>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	0a5b      	lsrs	r3, r3, #9
 80094bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094c4:	4623      	mov	r3, r4
 80094c6:	1e5c      	subs	r4, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094d0:	e026      	b.n	8009520 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0f0      	beq.n	80094c4 <SDMMC_GetCmdResp2+0x1c>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1eb      	bne.n	80094c4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2204      	movs	r2, #4
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094fe:	2304      	movs	r3, #4
 8009500:	e00e      	b.n	8009520 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009514:	2301      	movs	r3, #1
 8009516:	e003      	b.n	8009520 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	22c5      	movs	r2, #197	; 0xc5
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bc90      	pop	{r4, r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	2000000c 	.word	0x2000000c
 8009530:	10624dd3 	.word	0x10624dd3

08009534 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009534:	b490      	push	{r4, r7}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800953c:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <SDMMC_GetCmdResp3+0x6c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a18      	ldr	r2, [pc, #96]	; (80095a4 <SDMMC_GetCmdResp3+0x70>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	0a5b      	lsrs	r3, r3, #9
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009550:	4623      	mov	r3, r4
 8009552:	1e5c      	subs	r4, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800955c:	e01b      	b.n	8009596 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f0      	beq.n	8009550 <SDMMC_GetCmdResp3+0x1c>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1eb      	bne.n	8009550 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2204      	movs	r2, #4
 8009588:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800958a:	2304      	movs	r3, #4
 800958c:	e003      	b.n	8009596 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	22c5      	movs	r2, #197	; 0xc5
 8009592:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bc90      	pop	{r4, r7}
 800959e:	4770      	bx	lr
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	10624dd3 	.word	0x10624dd3

080095a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	460b      	mov	r3, r1
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095b6:	4b34      	ldr	r3, [pc, #208]	; (8009688 <SDMMC_GetCmdResp6+0xe0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a34      	ldr	r2, [pc, #208]	; (800968c <SDMMC_GetCmdResp6+0xe4>)
 80095bc:	fba2 2303 	umull	r2, r3, r2, r3
 80095c0:	0a5b      	lsrs	r3, r3, #9
 80095c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80095ca:	4623      	mov	r3, r4
 80095cc:	1e5c      	subs	r4, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d102      	bne.n	80095d8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d6:	e052      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0f0      	beq.n	80095ca <SDMMC_GetCmdResp6+0x22>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1eb      	bne.n	80095ca <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f6:	f003 0304 	and.w	r3, r3, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2204      	movs	r2, #4
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009604:	2304      	movs	r3, #4
 8009606:	e03a      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d004      	beq.n	800961e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961a:	2301      	movs	r3, #1
 800961c:	e02f      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fc79 	bl	8008f16 <SDIO_GetCommandResponse>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	4293      	cmp	r3, r2
 800962c:	d001      	beq.n	8009632 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800962e:	2301      	movs	r3, #1
 8009630:	e025      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22c5      	movs	r2, #197	; 0xc5
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fc78 	bl	8008f30 <SDIO_GetResponse>
 8009640:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009656:	2300      	movs	r3, #0
 8009658:	e011      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009668:	e009      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009678:	e001      	b.n	800967e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800967a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800967e:	4618      	mov	r0, r3
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd90      	pop	{r4, r7, pc}
 8009686:	bf00      	nop
 8009688:	2000000c 	.word	0x2000000c
 800968c:	10624dd3 	.word	0x10624dd3

08009690 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009690:	b490      	push	{r4, r7}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009698:	4b21      	ldr	r3, [pc, #132]	; (8009720 <SDMMC_GetCmdResp7+0x90>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a21      	ldr	r2, [pc, #132]	; (8009724 <SDMMC_GetCmdResp7+0x94>)
 800969e:	fba2 2303 	umull	r2, r3, r2, r3
 80096a2:	0a5b      	lsrs	r3, r3, #9
 80096a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096ac:	4623      	mov	r3, r4
 80096ae:	1e5c      	subs	r4, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b8:	e02c      	b.n	8009714 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f0      	beq.n	80096ac <SDMMC_GetCmdResp7+0x1c>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1eb      	bne.n	80096ac <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2204      	movs	r2, #4
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096e6:	2304      	movs	r3, #4
 80096e8:	e014      	b.n	8009714 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e009      	b.n	8009714 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2240      	movs	r2, #64	; 0x40
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009712:	2300      	movs	r3, #0
  
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bc90      	pop	{r4, r7}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	2000000c 	.word	0x2000000c
 8009724:	10624dd3 	.word	0x10624dd3

08009728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009728:	b084      	sub	sp, #16
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	f107 001c 	add.w	r0, r7, #28
 8009736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	2b01      	cmp	r3, #1
 800973e:	d122      	bne.n	8009786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d105      	bne.n	800977a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f94a 	bl	8009a14 <USB_CoreReset>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
 8009784:	e01a      	b.n	80097bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f93e 	bl	8009a14 <USB_CoreReset>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800979c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	639a      	str	r2, [r3, #56]	; 0x38
 80097ae:	e005      	b.n	80097bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d10b      	bne.n	80097da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f043 0206 	orr.w	r2, r3, #6
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f043 0220 	orr.w	r2, r3, #32
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097e6:	b004      	add	sp, #16
 80097e8:	4770      	bx	lr

080097ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f043 0201 	orr.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f023 0201 	bic.w	r2, r3, #1
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]
 8009858:	e00b      	b.n	8009872 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60da      	str	r2, [r3, #12]
 800986c:	e001      	b.n	8009872 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e003      	b.n	800987a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009872:	2032      	movs	r0, #50	; 0x32
 8009874:	f7f9 fc94 	bl	80031a0 <HAL_Delay>

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	019b      	lsls	r3, r3, #6
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a09      	ldr	r2, [pc, #36]	; (80098cc <USB_FlushTxFifo+0x48>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d901      	bls.n	80098b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e006      	b.n	80098be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d0f0      	beq.n	800989e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	00030d40 	.word	0x00030d40

080098d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2210      	movs	r2, #16
 80098e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a09      	ldr	r2, [pc, #36]	; (8009910 <USB_FlushRxFifo+0x40>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d901      	bls.n	80098f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d0f0      	beq.n	80098e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	00030d40 	.word	0x00030d40

08009914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009914:	b480      	push	{r7}
 8009916:	b089      	sub	sp, #36	; 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	71fb      	strb	r3, [r7, #7]
 8009926:	4613      	mov	r3, r2
 8009928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d11a      	bne.n	8009970 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800993a:	88bb      	ldrh	r3, [r7, #4]
 800993c:	3303      	adds	r3, #3
 800993e:	089b      	lsrs	r3, r3, #2
 8009940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009942:	2300      	movs	r3, #0
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	e00f      	b.n	8009968 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	031a      	lsls	r2, r3, #12
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	4413      	add	r3, r2
 8009950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009954:	461a      	mov	r2, r3
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	3304      	adds	r3, #4
 8009960:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	3301      	adds	r3, #1
 8009966:	61bb      	str	r3, [r7, #24]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	429a      	cmp	r2, r3
 800996e:	d3eb      	bcc.n	8009948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3724      	adds	r7, #36	; 0x24
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800997e:	b480      	push	{r7}
 8009980:	b089      	sub	sp, #36	; 0x24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	4613      	mov	r3, r2
 800998a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009994:	88fb      	ldrh	r3, [r7, #6]
 8009996:	3303      	adds	r3, #3
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800999c:	2300      	movs	r3, #0
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	e00b      	b.n	80099ba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	3304      	adds	r3, #4
 80099b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	3301      	adds	r3, #1
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d3ef      	bcc.n	80099a2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80099c2:	69fb      	ldr	r3, [r7, #28]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3724      	adds	r7, #36	; 0x24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4013      	ands	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099e8:	68fb      	ldr	r3, [r7, #12]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f003 0301 	and.w	r3, r3, #1
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4a13      	ldr	r2, [pc, #76]	; (8009a78 <USB_CoreReset+0x64>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d901      	bls.n	8009a32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e01b      	b.n	8009a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	daf2      	bge.n	8009a20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f043 0201 	orr.w	r2, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <USB_CoreReset+0x64>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d901      	bls.n	8009a5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e006      	b.n	8009a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d0f0      	beq.n	8009a4a <USB_CoreReset+0x36>

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	00030d40 	.word	0x00030d40

08009a7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	f107 001c 	add.w	r0, r7, #28
 8009a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d018      	beq.n	8009af4 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d10a      	bne.n	8009ade <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ad6:	f043 0304 	orr.w	r3, r3, #4
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	e014      	b.n	8009b08 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009aec:	f023 0304 	bic.w	r3, r3, #4
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e009      	b.n	8009b08 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b02:	f023 0304 	bic.w	r3, r3, #4
 8009b06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009b08:	2110      	movs	r1, #16
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff feba 	bl	8009884 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff fedd 	bl	80098d0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e015      	b.n	8009b48 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d3e5      	bcc.n	8009b1c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009b50:	2101      	movs	r1, #1
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f8ac 	bl	8009cb0 <USB_DriveVbus>

  HAL_Delay(200U);
 8009b58:	20c8      	movs	r0, #200	; 0xc8
 8009b5a:	f7f9 fb21 	bl	80031a0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <USB_HostInit+0x158>)
 8009b84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a13      	ldr	r2, [pc, #76]	; (8009bd8 <USB_HostInit+0x15c>)
 8009b8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009b8e:	e009      	b.n	8009ba4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2280      	movs	r2, #128	; 0x80
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a10      	ldr	r2, [pc, #64]	; (8009bdc <USB_HostInit+0x160>)
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a10      	ldr	r2, [pc, #64]	; (8009be0 <USB_HostInit+0x164>)
 8009ba0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d105      	bne.n	8009bb6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f043 0210 	orr.w	r2, r3, #16
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <USB_HostInit+0x168>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bce:	b004      	add	sp, #16
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	01000200 	.word	0x01000200
 8009bd8:	00e00300 	.word	0x00e00300
 8009bdc:	00600080 	.word	0x00600080
 8009be0:	004000e0 	.word	0x004000e0
 8009be4:	a3200008 	.word	0xa3200008

08009be8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c20:	4313      	orrs	r3, r2
 8009c22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d107      	bne.n	8009c3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c30:	461a      	mov	r2, r3
 8009c32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009c36:	6053      	str	r3, [r2, #4]
 8009c38:	e009      	b.n	8009c4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d106      	bne.n	8009c4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c46:	461a      	mov	r2, r3
 8009c48:	f241 7370 	movw	r3, #6000	; 0x1770
 8009c4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c8c:	2064      	movs	r0, #100	; 0x64
 8009c8e:	f7f9 fa87 	bl	80031a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ca0:	200a      	movs	r0, #10
 8009ca2:	f7f9 fa7d 	bl	80031a0 <HAL_Delay>

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009cd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <USB_DriveVbus+0x44>
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d106      	bne.n	8009cf4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cf2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfe:	d109      	bne.n	8009d14 <USB_DriveVbus+0x64>
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	0c5b      	lsrs	r3, r3, #17
 8009d40:	f003 0303 	and.w	r3, r3, #3
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	b29b      	uxth	r3, r3
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
	...

08009d74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	461a      	mov	r2, r3
 8009d82:	4603      	mov	r3, r0
 8009d84:	70fb      	strb	r3, [r7, #3]
 8009d86:	460b      	mov	r3, r1
 8009d88:	70bb      	strb	r3, [r7, #2]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da2:	461a      	mov	r2, r3
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d87e      	bhi.n	8009eb0 <USB_HC_Init+0x13c>
 8009db2:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <USB_HC_Init+0x44>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009e73 	.word	0x08009e73
 8009dc0:	08009dc9 	.word	0x08009dc9
 8009dc4:	08009e35 	.word	0x08009e35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8009dda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da10      	bge.n	8009e06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e02:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009e04:	e057      	b.n	8009eb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d051      	beq.n	8009eb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e30:	60d3      	str	r3, [r2, #12]
      break;
 8009e32:	e040      	b.n	8009eb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e40:	461a      	mov	r2, r3
 8009e42:	f240 639d 	movw	r3, #1693	; 0x69d
 8009e46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	da34      	bge.n	8009eba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	0151      	lsls	r1, r2, #5
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	440a      	add	r2, r1
 8009e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e70:	e023      	b.n	8009eba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e72:	78fb      	ldrb	r3, [r7, #3]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f240 2325 	movw	r3, #549	; 0x225
 8009e84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da17      	bge.n	8009ebe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ea8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009eac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009eae:	e006      	b.n	8009ebe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb4:	e004      	b.n	8009ec0 <USB_HC_Init+0x14c>
      break;
 8009eb6:	bf00      	nop
 8009eb8:	e002      	b.n	8009ec0 <USB_HC_Init+0x14c>
      break;
 8009eba:	bf00      	nop
 8009ebc:	e000      	b.n	8009ec0 <USB_HC_Init+0x14c>
      break;
 8009ebe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	f003 030f 	and.w	r3, r3, #15
 8009ece:	2101      	movs	r1, #1
 8009ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009eda:	4313      	orrs	r3, r2
 8009edc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009eea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da03      	bge.n	8009efa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef6:	613b      	str	r3, [r7, #16]
 8009ef8:	e001      	b.n	8009efe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009efe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d103      	bne.n	8009f0e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e001      	b.n	8009f12 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f12:	787b      	ldrb	r3, [r7, #1]
 8009f14:	059b      	lsls	r3, r3, #22
 8009f16:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f1a:	78bb      	ldrb	r3, [r7, #2]
 8009f1c:	02db      	lsls	r3, r3, #11
 8009f1e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f22:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f28:	049b      	lsls	r3, r3, #18
 8009f2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	0159      	lsls	r1, r3, #5
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	440b      	add	r3, r1
 8009f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f48:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f4e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009f50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d10f      	bne.n	8009f78 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	78fa      	ldrb	r2, [r7, #3]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f76:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop

08009f88 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4613      	mov	r3, r2
 8009f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fa4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d028      	beq.n	800a004 <USB_HC_StartXfer+0x7c>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	791b      	ldrb	r3, [r3, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d124      	bne.n	800a004 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10b      	bne.n	8009fd8 <USB_HC_StartXfer+0x50>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	795b      	ldrb	r3, [r3, #5]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d107      	bne.n	8009fd8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 fa30 	bl	800a434 <USB_DoPing>
      return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e114      	b.n	800a202 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d112      	bne.n	800a004 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	6a3a      	ldr	r2, [r7, #32]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009ffc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2200      	movs	r2, #0
 800a002:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d018      	beq.n	800a03e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	8912      	ldrh	r2, [r2, #8]
 800a014:	4413      	add	r3, r2
 800a016:	3b01      	subs	r3, #1
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	8912      	ldrh	r2, [r2, #8]
 800a01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a020:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a024:	8b7b      	ldrh	r3, [r7, #26]
 800a026:	429a      	cmp	r2, r3
 800a028:	d90b      	bls.n	800a042 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a02a:	8b7b      	ldrh	r3, [r7, #26]
 800a02c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a02e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	8912      	ldrh	r2, [r2, #8]
 800a034:	fb02 f203 	mul.w	r2, r2, r3
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	611a      	str	r2, [r3, #16]
 800a03c:	e001      	b.n	800a042 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a03e:	2301      	movs	r3, #1
 800a040:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	78db      	ldrb	r3, [r3, #3]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	8912      	ldrh	r2, [r2, #8]
 800a050:	fb02 f203 	mul.w	r2, r2, r3
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a062:	04d9      	lsls	r1, r3, #19
 800a064:	4b69      	ldr	r3, [pc, #420]	; (800a20c <USB_HC_StartXfer+0x284>)
 800a066:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a068:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	7a9b      	ldrb	r3, [r3, #10]
 800a06e:	075b      	lsls	r3, r3, #29
 800a070:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a074:	69f9      	ldr	r1, [r7, #28]
 800a076:	0148      	lsls	r0, r1, #5
 800a078:	6a39      	ldr	r1, [r7, #32]
 800a07a:	4401      	add	r1, r0
 800a07c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a080:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a082:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68d9      	ldr	r1, [r3, #12]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	4413      	add	r3, r2
 800a096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09a:	460a      	mov	r2, r1
 800a09c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bf0c      	ite	eq
 800a0ae:	2301      	moveq	r3, #1
 800a0b0:	2300      	movne	r3, #0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	6a3a      	ldr	r2, [r7, #32]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	7e7b      	ldrb	r3, [r7, #25]
 800a0e6:	075b      	lsls	r3, r3, #29
 800a0e8:	69f9      	ldr	r1, [r7, #28]
 800a0ea:	0148      	lsls	r0, r1, #5
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	4401      	add	r1, r0
 800a0f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a42      	ldr	r2, [pc, #264]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a108:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a10a:	4b41      	ldr	r3, [pc, #260]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a112:	4a3f      	ldr	r2, [pc, #252]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a114:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	78db      	ldrb	r3, [r3, #3]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d006      	beq.n	800a12c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a11e:	4b3c      	ldr	r3, [pc, #240]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a126:	4a3a      	ldr	r2, [pc, #232]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e005      	b.n	800a138 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a12c:	4b38      	ldr	r3, [pc, #224]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a134:	4a36      	ldr	r2, [pc, #216]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a136:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a138:	4b35      	ldr	r3, [pc, #212]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a140:	4a33      	ldr	r2, [pc, #204]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a142:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a150:	461a      	mov	r2, r3
 800a152:	4b2f      	ldr	r3, [pc, #188]	; (800a210 <USB_HC_StartXfer+0x288>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	e04f      	b.n	800a202 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	78db      	ldrb	r3, [r3, #3]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d14a      	bne.n	800a200 <USB_HC_StartXfer+0x278>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d046      	beq.n	800a200 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	79db      	ldrb	r3, [r3, #7]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d830      	bhi.n	800a1dc <USB_HC_StartXfer+0x254>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <USB_HC_StartXfer+0x1f8>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a191 	.word	0x0800a191
 800a184:	0800a1b5 	.word	0x0800a1b5
 800a188:	0800a191 	.word	0x0800a191
 800a18c:	0800a1b5 	.word	0x0800a1b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	3303      	adds	r3, #3
 800a196:	089b      	lsrs	r3, r3, #2
 800a198:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a19a:	8afa      	ldrh	r2, [r7, #22]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d91c      	bls.n	800a1e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f043 0220 	orr.w	r2, r3, #32
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1b2:	e015      	b.n	800a1e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	3303      	adds	r3, #3
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a1be:	8afa      	ldrh	r2, [r7, #22]
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d90a      	bls.n	800a1e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1da:	e003      	b.n	800a1e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a1dc:	bf00      	nop
 800a1de:	e002      	b.n	800a1e6 <USB_HC_StartXfer+0x25e>
        break;
 800a1e0:	bf00      	nop
 800a1e2:	e000      	b.n	800a1e6 <USB_HC_StartXfer+0x25e>
        break;
 800a1e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	68d9      	ldr	r1, [r3, #12]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	785a      	ldrb	r2, [r3, #1]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	b298      	uxth	r0, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fb8a 	bl	8009914 <USB_WritePacket>
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	1ff80000 	.word	0x1ff80000
 800a210:	20000160 	.word	0x20000160

0800a214 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	b29b      	uxth	r3, r3
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a236:	b480      	push	{r7}
 800a238:	b087      	sub	sp, #28
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	4413      	add	r3, r2
 800a256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	0c9b      	lsrs	r3, r3, #18
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <USB_HC_Halt+0x3a>
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d16c      	bne.n	800a34a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	4413      	add	r3, r2
 800a278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	440a      	add	r2, r1
 800a286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a28a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a28e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d143      	bne.n	800a324 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	0151      	lsls	r1, r2, #5
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	440a      	add	r2, r1
 800a2f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	3301      	adds	r3, #1
 800a300:	617b      	str	r3, [r7, #20]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a308:	d81d      	bhi.n	800a346 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	4413      	add	r3, r2
 800a312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a31c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a320:	d0ec      	beq.n	800a2fc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a322:	e080      	b.n	800a426 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	0151      	lsls	r1, r2, #5
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	440a      	add	r2, r1
 800a33a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a33e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a342:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a344:	e06f      	b.n	800a426 <USB_HC_Halt+0x1f0>
          break;
 800a346:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a348:	e06d      	b.n	800a426 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a368:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d143      	bne.n	800a402 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a398:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	0151      	lsls	r1, r2, #5
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	440a      	add	r2, r1
 800a3d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3d8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e6:	d81d      	bhi.n	800a424 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3fe:	d0ec      	beq.n	800a3da <USB_HC_Halt+0x1a4>
 800a400:	e011      	b.n	800a426 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	440a      	add	r2, r1
 800a418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a41c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	e000      	b.n	800a426 <USB_HC_Halt+0x1f0>
          break;
 800a424:	bf00      	nop
    }
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	371c      	adds	r7, #28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a448:	2301      	movs	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	04da      	lsls	r2, r3, #19
 800a450:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <USB_DoPing+0x74>)
 800a452:	4013      	ands	r3, r2
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a464:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a47c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a484:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a492:	461a      	mov	r2, r3
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	1ff80000 	.word	0x1ff80000

0800a4ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff f9a5 	bl	800980c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a4c2:	2110      	movs	r1, #16
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff f9dd 	bl	8009884 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff fa00 	bl	80098d0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	e01f      	b.n	800a516 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50a:	461a      	mov	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	3301      	adds	r3, #1
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b0f      	cmp	r3, #15
 800a51a:	d9dc      	bls.n	800a4d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a51c:	2300      	movs	r3, #0
 800a51e:	613b      	str	r3, [r7, #16]
 800a520:	e034      	b.n	800a58c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a538:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a540:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a548:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a556:	461a      	mov	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	3301      	adds	r3, #1
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a568:	d80c      	bhi.n	800a584 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4413      	add	r3, r2
 800a572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a580:	d0ec      	beq.n	800a55c <USB_StopHost+0xb0>
 800a582:	e000      	b.n	800a586 <USB_StopHost+0xda>
        break;
 800a584:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	3301      	adds	r3, #1
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2b0f      	cmp	r3, #15
 800a590:	d9c7      	bls.n	800a522 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a598:	461a      	mov	r2, r3
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff f91e 	bl	80097ea <USB_EnableGlobalInt>

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a5b8:	b590      	push	{r4, r7, lr}
 800a5ba:	b089      	sub	sp, #36	; 0x24
 800a5bc:	af04      	add	r7, sp, #16
 800a5be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fc68 	bl	800ae9c <USBH_FindInterface>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	2bff      	cmp	r3, #255	; 0xff
 800a5d4:	d002      	beq.n	800a5dc <USBH_CDC_InterfaceInit+0x24>
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d901      	bls.n	800a5e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e13d      	b.n	800a85c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fc3d 	bl	800ae64 <USBH_SelectInterface>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e131      	b.n	800a85c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a5fe:	2050      	movs	r0, #80	; 0x50
 800a600:	f002 fa04 	bl	800ca0c <malloc>
 800a604:	4603      	mov	r3, r0
 800a606:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a618:	2302      	movs	r3, #2
 800a61a:	e11f      	b.n	800a85c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a61c:	2250      	movs	r2, #80	; 0x50
 800a61e:	2100      	movs	r1, #0
 800a620:	68b8      	ldr	r0, [r7, #8]
 800a622:	f002 fa03 	bl	800ca2c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	211a      	movs	r1, #26
 800a62c:	fb01 f303 	mul.w	r3, r1, r3
 800a630:	4413      	add	r3, r2
 800a632:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da15      	bge.n	800a66a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	211a      	movs	r1, #26
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	4413      	add	r3, r2
 800a64a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a64e:	781a      	ldrb	r2, [r3, #0]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	211a      	movs	r1, #26
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	4413      	add	r3, r2
 800a660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a664:	881a      	ldrh	r2, [r3, #0]
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fe36 	bl	800c2e2 <USBH_AllocPipe>
 800a676:	4603      	mov	r3, r0
 800a678:	461a      	mov	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	7819      	ldrb	r1, [r3, #0]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	7858      	ldrb	r0, [r3, #1]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	8952      	ldrh	r2, [r2, #10]
 800a696:	9202      	str	r2, [sp, #8]
 800a698:	2203      	movs	r2, #3
 800a69a:	9201      	str	r2, [sp, #4]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	4623      	mov	r3, r4
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 fdee 	bl	800c284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f002 f8fb 	bl	800c8ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	210a      	movs	r1, #10
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fbed 	bl	800ae9c <USBH_FindInterface>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2bff      	cmp	r3, #255	; 0xff
 800a6ca:	d002      	beq.n	800a6d2 <USBH_CDC_InterfaceInit+0x11a>
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d901      	bls.n	800a6d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e0c2      	b.n	800a85c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	211a      	movs	r1, #26
 800a6dc:	fb01 f303 	mul.w	r3, r1, r3
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da16      	bge.n	800a71c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	211a      	movs	r1, #26
 800a6f4:	fb01 f303 	mul.w	r3, r1, r3
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	211a      	movs	r1, #26
 800a70a:	fb01 f303 	mul.w	r3, r1, r3
 800a70e:	4413      	add	r3, r2
 800a710:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a714:	881a      	ldrh	r2, [r3, #0]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	835a      	strh	r2, [r3, #26]
 800a71a:	e015      	b.n	800a748 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	211a      	movs	r1, #26
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	211a      	movs	r1, #26
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a742:	881a      	ldrh	r2, [r3, #0]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	211a      	movs	r1, #26
 800a74e:	fb01 f303 	mul.w	r3, r1, r3
 800a752:	4413      	add	r3, r2
 800a754:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b25b      	sxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da16      	bge.n	800a78e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	211a      	movs	r1, #26
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	4413      	add	r3, r2
 800a76c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	211a      	movs	r1, #26
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	4413      	add	r3, r2
 800a782:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a786:	881a      	ldrh	r2, [r3, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	835a      	strh	r2, [r3, #26]
 800a78c:	e015      	b.n	800a7ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	211a      	movs	r1, #26
 800a794:	fb01 f303 	mul.w	r3, r1, r3
 800a798:	4413      	add	r3, r2
 800a79a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	211a      	movs	r1, #26
 800a7aa:	fb01 f303 	mul.w	r3, r1, r3
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a7b4:	881a      	ldrh	r2, [r3, #0]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	7b9b      	ldrb	r3, [r3, #14]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 fd8e 	bl	800c2e2 <USBH_AllocPipe>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	7bdb      	ldrb	r3, [r3, #15]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 fd84 	bl	800c2e2 <USBH_AllocPipe>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	461a      	mov	r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	7b59      	ldrb	r1, [r3, #13]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	7b98      	ldrb	r0, [r3, #14]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	8b12      	ldrh	r2, [r2, #24]
 800a7fa:	9202      	str	r2, [sp, #8]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4623      	mov	r3, r4
 800a804:	4602      	mov	r2, r0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f001 fd3c 	bl	800c284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	7b19      	ldrb	r1, [r3, #12]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	7bd8      	ldrb	r0, [r3, #15]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	8b52      	ldrh	r2, [r2, #26]
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	2202      	movs	r2, #2
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4623      	mov	r3, r4
 800a82e:	4602      	mov	r2, r0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fd27 	bl	800c284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	7b5b      	ldrb	r3, [r3, #13]
 800a842:	2200      	movs	r2, #0
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f002 f830 	bl	800c8ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	7b1b      	ldrb	r3, [r3, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f002 f829 	bl	800c8ac <USBH_LL_SetToggle>

  return USBH_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}

0800a864 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00e      	beq.n	800a89c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 fd1c 	bl	800c2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fd47 	bl	800c324 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	7b1b      	ldrb	r3, [r3, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00e      	beq.n	800a8c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	7b1b      	ldrb	r3, [r3, #12]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 fd09 	bl	800c2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	7b1b      	ldrb	r3, [r3, #12]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fd34 	bl	800c324 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	7b5b      	ldrb	r3, [r3, #13]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00e      	beq.n	800a8e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	7b5b      	ldrb	r3, [r3, #13]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fcf6 	bl	800c2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	7b5b      	ldrb	r3, [r3, #13]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 fd21 	bl	800c324 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f002 f88d 	bl	800ca1c <free>
    phost->pActiveClass->pData = 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a908:	2200      	movs	r2, #0
 800a90a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3340      	adds	r3, #64	; 0x40
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f8b1 	bl	800aa96 <GetLineCoding>
 800a934:	4603      	mov	r3, r0
 800a936:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d105      	bne.n	800a94a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a944:	2102      	movs	r1, #2
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a94a:	7afb      	ldrb	r3, [r7, #11]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a95c:	2301      	movs	r3, #1
 800a95e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a974:	2b04      	cmp	r3, #4
 800a976:	d877      	bhi.n	800aa68 <USBH_CDC_Process+0x114>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <USBH_CDC_Process+0x2c>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a995 	.word	0x0800a995
 800a984:	0800a99b 	.word	0x0800a99b
 800a988:	0800a9cb 	.word	0x0800a9cb
 800a98c:	0800aa3f 	.word	0x0800aa3f
 800a990:	0800aa4d 	.word	0x0800aa4d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]
      break;
 800a998:	e06d      	b.n	800aa76 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f897 	bl	800aad4 <SetLineCoding>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a9b8:	e058      	b.n	800aa6c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d055      	beq.n	800aa6c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a9c8:	e050      	b.n	800aa6c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3340      	adds	r3, #64	; 0x40
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f860 	bl	800aa96 <GetLineCoding>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d126      	bne.n	800aa2e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9f2:	791b      	ldrb	r3, [r3, #4]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d13b      	bne.n	800aa70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa02:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d133      	bne.n	800aa70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa12:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d12b      	bne.n	800aa70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa20:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d124      	bne.n	800aa70 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f95a 	bl	800ace0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aa2c:	e020      	b.n	800aa70 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d01d      	beq.n	800aa70 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2204      	movs	r2, #4
 800aa38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aa3c:	e018      	b.n	800aa70 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f867 	bl	800ab12 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f8dc 	bl	800ac02 <CDC_ProcessReception>
      break;
 800aa4a:	e014      	b.n	800aa76 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 ffe5 	bl	800ba1e <USBH_ClrFeature>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800aa66:	e005      	b.n	800aa74 <USBH_CDC_Process+0x120>

    default:
      break;
 800aa68:	bf00      	nop
 800aa6a:	e004      	b.n	800aa76 <USBH_CDC_Process+0x122>
      break;
 800aa6c:	bf00      	nop
 800aa6e:	e002      	b.n	800aa76 <USBH_CDC_Process+0x122>
      break;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <USBH_CDC_Process+0x122>
      break;
 800aa74:	bf00      	nop

  }

  return status;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	22a1      	movs	r2, #161	; 0xa1
 800aaa4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2221      	movs	r2, #33	; 0x21
 800aaaa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2207      	movs	r2, #7
 800aabc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2207      	movs	r2, #7
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f001 f98a 	bl	800bdde <USBH_CtlReq>
 800aaca:	4603      	mov	r3, r0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2221      	movs	r2, #33	; 0x21
 800aae2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2207      	movs	r2, #7
 800aafa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2207      	movs	r2, #7
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 f96b 	bl	800bdde <USBH_CtlReq>
 800ab08:	4603      	mov	r3, r0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b086      	sub	sp, #24
 800ab16:	af02      	add	r7, sp, #8
 800ab18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d002      	beq.n	800ab38 <CDC_ProcessTransmission+0x26>
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d025      	beq.n	800ab82 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800ab36:	e060      	b.n	800abfa <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	8b12      	ldrh	r2, [r2, #24]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d90c      	bls.n	800ab5e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	69d9      	ldr	r1, [r3, #28]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8b1a      	ldrh	r2, [r3, #24]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	7b58      	ldrb	r0, [r3, #13]
 800ab50:	2301      	movs	r3, #1
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	4603      	mov	r3, r0
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fb51 	bl	800c1fe <USBH_BulkSendData>
 800ab5c:	e00c      	b.n	800ab78 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	7b58      	ldrb	r0, [r3, #13]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fb43 	bl	800c1fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ab80:	e03b      	b.n	800abfa <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7b5b      	ldrb	r3, [r3, #13]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 fe65 	bl	800c858 <USBH_LL_GetURBState>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d128      	bne.n	800abea <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	8b12      	ldrh	r2, [r2, #24]
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d90e      	bls.n	800abc2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	8b12      	ldrh	r2, [r2, #24]
 800abac:	1a9a      	subs	r2, r3, r2
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	8b12      	ldrh	r2, [r2, #24]
 800abba:	441a      	add	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	61da      	str	r2, [r3, #28]
 800abc0:	e002      	b.n	800abc8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800abd8:	e00e      	b.n	800abf8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f868 	bl	800acb8 <USBH_CDC_TransmitCallback>
      break;
 800abe8:	e006      	b.n	800abf8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d103      	bne.n	800abf8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800abf8:	bf00      	nop
  }
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d002      	beq.n	800ac28 <CDC_ProcessReception+0x26>
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d00e      	beq.n	800ac44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ac26:	e043      	b.n	800acb0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	6a19      	ldr	r1, [r3, #32]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	8b5a      	ldrh	r2, [r3, #26]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	7b1b      	ldrb	r3, [r3, #12]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 fb07 	bl	800c248 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ac42:	e035      	b.n	800acb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	7b1b      	ldrb	r3, [r3, #12]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 fe04 	bl	800c858 <USBH_LL_GetURBState>
 800ac50:	4603      	mov	r3, r0
 800ac52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ac54:	7cfb      	ldrb	r3, [r7, #19]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d129      	bne.n	800acae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	7b1b      	ldrb	r3, [r3, #12]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 fd67 	bl	800c734 <USBH_LL_GetLastXferSize>
 800ac66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d016      	beq.n	800aca0 <CDC_ProcessReception+0x9e>
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	8b5b      	ldrh	r3, [r3, #26]
 800ac76:	461a      	mov	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d910      	bls.n	800aca0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	1ad2      	subs	r2, r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	6a1a      	ldr	r2, [r3, #32]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	441a      	add	r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2203      	movs	r2, #3
 800ac9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ac9e:	e006      	b.n	800acae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f80f 	bl	800accc <USBH_CDC_ReceiveCallback>
      break;
 800acae:	bf00      	nop
  }
}
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4613      	mov	r3, r2
 800ad00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e029      	b.n	800ad60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	79fa      	ldrb	r2, [r7, #7]
 800ad10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f81f 	bl	800ad68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f001 fc39 	bl	800c5d0 <USBH_LL_Init>

  return USBH_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e009      	b.n	800ad8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	33e0      	adds	r3, #224	; 0xe0
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	2200      	movs	r2, #0
 800ad86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b0e      	cmp	r3, #14
 800ad92:	d9f2      	bls.n	800ad7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	e009      	b.n	800adae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb4:	d3f1      	bcc.n	800ad9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2240      	movs	r2, #64	; 0x40
 800adda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d016      	beq.n	800ae52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10e      	bne.n	800ae4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae34:	1c59      	adds	r1, r3, #1
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	33de      	adds	r3, #222	; 0xde
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]
 800ae4a:	e004      	b.n	800ae56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	73fb      	strb	r3, [r7, #15]
 800ae50:	e001      	b.n	800ae56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ae52:	2302      	movs	r3, #2
 800ae54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ae7a:	78fa      	ldrb	r2, [r7, #3]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d204      	bcs.n	800ae8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ae88:	e001      	b.n	800ae8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	70fb      	strb	r3, [r7, #3]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70bb      	strb	r3, [r7, #2]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aec4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aec6:	e025      	b.n	800af14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	221a      	movs	r2, #26
 800aecc:	fb02 f303 	mul.w	r3, r2, r3
 800aed0:	3308      	adds	r3, #8
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	4413      	add	r3, r2
 800aed6:	3302      	adds	r3, #2
 800aed8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	795b      	ldrb	r3, [r3, #5]
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d002      	beq.n	800aeea <USBH_FindInterface+0x4e>
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	2bff      	cmp	r3, #255	; 0xff
 800aee8:	d111      	bne.n	800af0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aeee:	78ba      	ldrb	r2, [r7, #2]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d002      	beq.n	800aefa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aef4:	78bb      	ldrb	r3, [r7, #2]
 800aef6:	2bff      	cmp	r3, #255	; 0xff
 800aef8:	d109      	bne.n	800af0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aefe:	787a      	ldrb	r2, [r7, #1]
 800af00:	429a      	cmp	r2, r3
 800af02:	d002      	beq.n	800af0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af04:	787b      	ldrb	r3, [r7, #1]
 800af06:	2bff      	cmp	r3, #255	; 0xff
 800af08:	d101      	bne.n	800af0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
 800af0c:	e006      	b.n	800af1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	3301      	adds	r3, #1
 800af12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800af14:	7dfb      	ldrb	r3, [r7, #23]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d9d6      	bls.n	800aec8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800af1a:	23ff      	movs	r3, #255	; 0xff
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fb89 	bl	800c648 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800af36:	2101      	movs	r1, #1
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fca0 	bl	800c87e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800af50:	2302      	movs	r3, #2
 800af52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b01      	cmp	r3, #1
 800af62:	d102      	bne.n	800af6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2203      	movs	r2, #3
 800af68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b0b      	cmp	r3, #11
 800af72:	f200 81b3 	bhi.w	800b2dc <USBH_Process+0x394>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <USBH_Process+0x34>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800afad 	.word	0x0800afad
 800af80:	0800afdf 	.word	0x0800afdf
 800af84:	0800b047 	.word	0x0800b047
 800af88:	0800b277 	.word	0x0800b277
 800af8c:	0800b2dd 	.word	0x0800b2dd
 800af90:	0800b0eb 	.word	0x0800b0eb
 800af94:	0800b21d 	.word	0x0800b21d
 800af98:	0800b121 	.word	0x0800b121
 800af9c:	0800b141 	.word	0x0800b141
 800afa0:	0800b161 	.word	0x0800b161
 800afa4:	0800b18f 	.word	0x0800b18f
 800afa8:	0800b25f 	.word	0x0800b25f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 8193 	beq.w	800b2e0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2201      	movs	r2, #1
 800afbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800afc0:	20c8      	movs	r0, #200	; 0xc8
 800afc2:	f001 fca6 	bl	800c912 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 fb99 	bl	800c6fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800afdc:	e180      	b.n	800b2e0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d107      	bne.n	800aff8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aff6:	e182      	b.n	800b2fe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800affe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b002:	d914      	bls.n	800b02e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b00a:	3301      	adds	r3, #1
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d903      	bls.n	800b026 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	220d      	movs	r2, #13
 800b022:	701a      	strb	r2, [r3, #0]
      break;
 800b024:	e16b      	b.n	800b2fe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]
      break;
 800b02c:	e167      	b.n	800b2fe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b034:	f103 020a 	add.w	r2, r3, #10
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b03e:	200a      	movs	r0, #10
 800b040:	f001 fc67 	bl	800c912 <USBH_Delay>
      break;
 800b044:	e15b      	b.n	800b2fe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d005      	beq.n	800b05c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b056:	2104      	movs	r1, #4
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b05c:	2064      	movs	r0, #100	; 0x64
 800b05e:	f001 fc58 	bl	800c912 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 fb26 	bl	800c6b4 <USBH_LL_GetSpeed>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2205      	movs	r2, #5
 800b076:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b078:	2100      	movs	r1, #0
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f001 f931 	bl	800c2e2 <USBH_AllocPipe>
 800b080:	4603      	mov	r3, r0
 800b082:	461a      	mov	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b088:	2180      	movs	r1, #128	; 0x80
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 f929 	bl	800c2e2 <USBH_AllocPipe>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	7919      	ldrb	r1, [r3, #4]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b0ac:	b292      	uxth	r2, r2
 800b0ae:	9202      	str	r2, [sp, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	9201      	str	r2, [sp, #4]
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2280      	movs	r2, #128	; 0x80
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 f8e2 	bl	800c284 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7959      	ldrb	r1, [r3, #5]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0d4:	b292      	uxth	r2, r2
 800b0d6:	9202      	str	r2, [sp, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	9201      	str	r2, [sp, #4]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 f8ce 	bl	800c284 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b0e8:	e109      	b.n	800b2fe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f90c 	bl	800b308 <USBH_HandleEnum>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f040 80f3 	bne.w	800b2e4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d103      	bne.n	800b118 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2208      	movs	r2, #8
 800b114:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b116:	e0e5      	b.n	800b2e4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2207      	movs	r2, #7
 800b11c:	701a      	strb	r2, [r3, #0]
      break;
 800b11e:	e0e1      	b.n	800b2e4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 80de 	beq.w	800b2e8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b132:	2101      	movs	r1, #1
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2208      	movs	r2, #8
 800b13c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b13e:	e0d3      	b.n	800b2e8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b146:	b29b      	uxth	r3, r3
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fc20 	bl	800b990 <USBH_SetCfg>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	f040 80ca 	bne.w	800b2ec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2209      	movs	r2, #9
 800b15c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b15e:	e0c5      	b.n	800b2ec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00b      	beq.n	800b186 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b16e:	2101      	movs	r1, #1
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fc30 	bl	800b9d6 <USBH_SetFeature>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f040 80b9 	bne.w	800b2f0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	220a      	movs	r2, #10
 800b182:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b184:	e0b4      	b.n	800b2f0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	220a      	movs	r2, #10
 800b18a:	701a      	strb	r2, [r3, #0]
      break;
 800b18c:	e0b0      	b.n	800b2f0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 80ad 	beq.w	800b2f4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	e016      	b.n	800b1d6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b1a8:	7bfa      	ldrb	r2, [r7, #15]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32de      	adds	r2, #222	; 0xde
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	791a      	ldrb	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d108      	bne.n	800b1d0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b1be:	7bfa      	ldrb	r2, [r7, #15]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	32de      	adds	r2, #222	; 0xde
 800b1c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b1ce:	e005      	b.n	800b1dc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	73fb      	strb	r3, [r7, #15]
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0e5      	beq.n	800b1a8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d016      	beq.n	800b214 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	4798      	blx	r3
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d109      	bne.n	800b20c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2206      	movs	r2, #6
 800b1fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b204:	2103      	movs	r1, #3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b20a:	e073      	b.n	800b2f4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	220d      	movs	r2, #13
 800b210:	701a      	strb	r2, [r3, #0]
      break;
 800b212:	e06f      	b.n	800b2f4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	220d      	movs	r2, #13
 800b218:	701a      	strb	r2, [r3, #0]
      break;
 800b21a:	e06b      	b.n	800b2f4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d017      	beq.n	800b256 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
 800b232:	4603      	mov	r3, r0
 800b234:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	220b      	movs	r2, #11
 800b242:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b244:	e058      	b.n	800b2f8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d154      	bne.n	800b2f8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	220d      	movs	r2, #13
 800b252:	701a      	strb	r2, [r3, #0]
      break;
 800b254:	e050      	b.n	800b2f8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	220d      	movs	r2, #13
 800b25a:	701a      	strb	r2, [r3, #0]
      break;
 800b25c:	e04c      	b.n	800b2f8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d049      	beq.n	800b2fc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
      }
      break;
 800b274:	e042      	b.n	800b2fc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff fd72 	bl	800ad68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d005      	beq.n	800b2b8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2b2:	2105      	movs	r1, #5
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d107      	bne.n	800b2d4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff fe2b 	bl	800af28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2d2:	e014      	b.n	800b2fe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 f9b7 	bl	800c648 <USBH_LL_Start>
      break;
 800b2da:	e010      	b.n	800b2fe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b2dc:	bf00      	nop
 800b2de:	e00e      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2e0:	bf00      	nop
 800b2e2:	e00c      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2e4:	bf00      	nop
 800b2e6:	e00a      	b.n	800b2fe <USBH_Process+0x3b6>
    break;
 800b2e8:	bf00      	nop
 800b2ea:	e008      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2ec:	bf00      	nop
 800b2ee:	e006      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2f0:	bf00      	nop
 800b2f2:	e004      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2f4:	bf00      	nop
 800b2f6:	e002      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e000      	b.n	800b2fe <USBH_Process+0x3b6>
      break;
 800b2fc:	bf00      	nop
  }
  return USBH_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af04      	add	r7, sp, #16
 800b30e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b310:	2301      	movs	r3, #1
 800b312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b314:	2301      	movs	r3, #1
 800b316:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	2b07      	cmp	r3, #7
 800b31e:	f200 81c1 	bhi.w	800b6a4 <USBH_HandleEnum+0x39c>
 800b322:	a201      	add	r2, pc, #4	; (adr r2, 800b328 <USBH_HandleEnum+0x20>)
 800b324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b328:	0800b349 	.word	0x0800b349
 800b32c:	0800b407 	.word	0x0800b407
 800b330:	0800b471 	.word	0x0800b471
 800b334:	0800b4ff 	.word	0x0800b4ff
 800b338:	0800b569 	.word	0x0800b569
 800b33c:	0800b5d9 	.word	0x0800b5d9
 800b340:	0800b61f 	.word	0x0800b61f
 800b344:	0800b665 	.word	0x0800b665
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b348:	2108      	movs	r1, #8
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fa50 	bl	800b7f0 <USBH_Get_DevDesc>
 800b350:	4603      	mov	r3, r0
 800b352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d130      	bne.n	800b3bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7919      	ldrb	r1, [r3, #4]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b37e:	b292      	uxth	r2, r2
 800b380:	9202      	str	r2, [sp, #8]
 800b382:	2200      	movs	r2, #0
 800b384:	9201      	str	r2, [sp, #4]
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	4603      	mov	r3, r0
 800b38a:	2280      	movs	r2, #128	; 0x80
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 ff79 	bl	800c284 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7959      	ldrb	r1, [r3, #5]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3a6:	b292      	uxth	r2, r2
 800b3a8:	9202      	str	r2, [sp, #8]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	9201      	str	r2, [sp, #4]
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 ff65 	bl	800c284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3ba:	e175      	b.n	800b6a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	f040 8172 	bne.w	800b6a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d903      	bls.n	800b3e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	220d      	movs	r2, #13
 800b3e2:	701a      	strb	r2, [r3, #0]
      break;
 800b3e4:	e160      	b.n	800b6a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	795b      	ldrb	r3, [r3, #5]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 ff99 	bl	800c324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 ff93 	bl	800c324 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
      break;
 800b404:	e150      	b.n	800b6a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b406:	2112      	movs	r1, #18
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f9f1 	bl	800b7f0 <USBH_Get_DevDesc>
 800b40e:	4603      	mov	r3, r0
 800b410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b41e:	e145      	b.n	800b6ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	2b03      	cmp	r3, #3
 800b424:	f040 8142 	bne.w	800b6ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b42e:	3301      	adds	r3, #1
 800b430:	b2da      	uxtb	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d903      	bls.n	800b44a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	220d      	movs	r2, #13
 800b446:	701a      	strb	r2, [r3, #0]
      break;
 800b448:	e130      	b.n	800b6ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	795b      	ldrb	r3, [r3, #5]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 ff67 	bl	800c324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	791b      	ldrb	r3, [r3, #4]
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 ff61 	bl	800c324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
      break;
 800b46e:	e11d      	b.n	800b6ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b470:	2101      	movs	r1, #1
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa68 	bl	800b948 <USBH_SetAddress>
 800b478:	4603      	mov	r3, r0
 800b47a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d132      	bne.n	800b4e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b482:	2002      	movs	r0, #2
 800b484:	f001 fa45 	bl	800c912 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2203      	movs	r2, #3
 800b494:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7919      	ldrb	r1, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4aa:	b292      	uxth	r2, r2
 800b4ac:	9202      	str	r2, [sp, #8]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	9201      	str	r2, [sp, #4]
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2280      	movs	r2, #128	; 0x80
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fee3 	bl	800c284 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7959      	ldrb	r1, [r3, #5]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4d2:	b292      	uxth	r2, r2
 800b4d4:	9202      	str	r2, [sp, #8]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	9201      	str	r2, [sp, #4]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2200      	movs	r2, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fecf 	bl	800c284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b4e6:	e0e3      	b.n	800b6b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	f040 80e0 	bne.w	800b6b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	220d      	movs	r2, #13
 800b4f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	705a      	strb	r2, [r3, #1]
      break;
 800b4fc:	e0d8      	b.n	800b6b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b4fe:	2109      	movs	r1, #9
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f99d 	bl	800b840 <USBH_Get_CfgDesc>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2204      	movs	r2, #4
 800b514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b516:	e0cd      	b.n	800b6b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	f040 80ca 	bne.w	800b6b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b526:	3301      	adds	r3, #1
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b536:	2b03      	cmp	r3, #3
 800b538:	d903      	bls.n	800b542 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	220d      	movs	r2, #13
 800b53e:	701a      	strb	r2, [r3, #0]
      break;
 800b540:	e0b8      	b.n	800b6b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	795b      	ldrb	r3, [r3, #5]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 feeb 	bl	800c324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fee5 	bl	800c324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	701a      	strb	r2, [r3, #0]
      break;
 800b566:	e0a5      	b.n	800b6b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f965 	bl	800b840 <USBH_Get_CfgDesc>
 800b576:	4603      	mov	r3, r0
 800b578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2205      	movs	r2, #5
 800b584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b586:	e097      	b.n	800b6b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	f040 8094 	bne.w	800b6b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b596:	3301      	adds	r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d903      	bls.n	800b5b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	220d      	movs	r2, #13
 800b5ae:	701a      	strb	r2, [r3, #0]
      break;
 800b5b0:	e082      	b.n	800b6b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	795b      	ldrb	r3, [r3, #5]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 feb3 	bl	800c324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	791b      	ldrb	r3, [r3, #4]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fead 	bl	800c324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	701a      	strb	r2, [r3, #0]
      break;
 800b5d6:	e06f      	b.n	800b6b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d019      	beq.n	800b616 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b5ee:	23ff      	movs	r3, #255	; 0xff
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f949 	bl	800b888 <USBH_Get_StringDesc>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d103      	bne.n	800b608 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2206      	movs	r2, #6
 800b604:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b606:	e059      	b.n	800b6bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d156      	bne.n	800b6bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2206      	movs	r2, #6
 800b612:	705a      	strb	r2, [r3, #1]
      break;
 800b614:	e052      	b.n	800b6bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2206      	movs	r2, #6
 800b61a:	705a      	strb	r2, [r3, #1]
      break;
 800b61c:	e04e      	b.n	800b6bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b624:	2b00      	cmp	r3, #0
 800b626:	d019      	beq.n	800b65c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b634:	23ff      	movs	r3, #255	; 0xff
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f926 	bl	800b888 <USBH_Get_StringDesc>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2207      	movs	r2, #7
 800b64a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b64c:	e038      	b.n	800b6c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	2b03      	cmp	r3, #3
 800b652:	d135      	bne.n	800b6c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2207      	movs	r2, #7
 800b658:	705a      	strb	r2, [r3, #1]
      break;
 800b65a:	e031      	b.n	800b6c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2207      	movs	r2, #7
 800b660:	705a      	strb	r2, [r3, #1]
      break;
 800b662:	e02d      	b.n	800b6c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d017      	beq.n	800b69e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b67a:	23ff      	movs	r3, #255	; 0xff
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f903 	bl	800b888 <USBH_Get_StringDesc>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b690:	e018      	b.n	800b6c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b03      	cmp	r3, #3
 800b696:	d115      	bne.n	800b6c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]
      break;
 800b69c:	e012      	b.n	800b6c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a2:	e00f      	b.n	800b6c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b6a4:	bf00      	nop
 800b6a6:	e00e      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6a8:	bf00      	nop
 800b6aa:	e00c      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6ac:	bf00      	nop
 800b6ae:	e00a      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6b0:	bf00      	nop
 800b6b2:	e008      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6b4:	bf00      	nop
 800b6b6:	e006      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6b8:	bf00      	nop
 800b6ba:	e004      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6bc:	bf00      	nop
 800b6be:	e002      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6c0:	bf00      	nop
 800b6c2:	e000      	b.n	800b6c6 <USBH_HandleEnum+0x3be>
      break;
 800b6c4:	bf00      	nop
  }
  return Status;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f804 	bl	800b712 <USBH_HandleSof>
}
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b0b      	cmp	r3, #11
 800b722:	d10a      	bne.n	800b73a <USBH_HandleSof+0x28>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	4798      	blx	r3
  }
}
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b742:	b480      	push	{r7}
 800b744:	b083      	sub	sp, #12
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b752:	bf00      	nop
}
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b76e:	bf00      	nop
}
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 ff58 	bl	800c67e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fda5 	bl	800c324 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	795b      	ldrb	r3, [r3, #5]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fd9f 	bl	800c324 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b802:	78fb      	ldrb	r3, [r7, #3]
 800b804:	b29b      	uxth	r3, r3
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b80e:	2100      	movs	r1, #0
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f864 	bl	800b8de <USBH_GetDescriptor>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b82c:	78fa      	ldrb	r2, [r7, #3]
 800b82e:	b292      	uxth	r2, r2
 800b830:	4619      	mov	r1, r3
 800b832:	f000 f918 	bl	800ba66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af02      	add	r7, sp, #8
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	331c      	adds	r3, #28
 800b850:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b852:	887b      	ldrh	r3, [r7, #2]
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b85c:	2100      	movs	r1, #0
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f83d 	bl	800b8de <USBH_GetDescriptor>
 800b864:	4603      	mov	r3, r0
 800b866:	72fb      	strb	r3, [r7, #11]
 800b868:	7afb      	ldrb	r3, [r7, #11]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d107      	bne.n	800b87e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b874:	887a      	ldrh	r2, [r7, #2]
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 f964 	bl	800bb46 <USBH_ParseCfgDesc>
  }

  return status;
 800b87e:	7afb      	ldrb	r3, [r7, #11]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	607a      	str	r2, [r7, #4]
 800b892:	461a      	mov	r2, r3
 800b894:	460b      	mov	r3, r1
 800b896:	72fb      	strb	r3, [r7, #11]
 800b898:	4613      	mov	r3, r2
 800b89a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b8a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b8ac:	893b      	ldrh	r3, [r7, #8]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 f812 	bl	800b8de <USBH_GetDescriptor>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d107      	bne.n	800b8d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b8ca:	893a      	ldrh	r2, [r7, #8]
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 fa37 	bl	800bd42 <USBH_ParseStringDesc>
  }

  return status;
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	607b      	str	r3, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	72fb      	strb	r3, [r7, #11]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	789b      	ldrb	r3, [r3, #2]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d11c      	bne.n	800b932 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b8f8:	7afb      	ldrb	r3, [r7, #11]
 800b8fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2206      	movs	r2, #6
 800b908:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	893a      	ldrh	r2, [r7, #8]
 800b90e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b910:	893b      	ldrh	r3, [r7, #8]
 800b912:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b91a:	d104      	bne.n	800b926 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f240 4209 	movw	r2, #1033	; 0x409
 800b922:	829a      	strh	r2, [r3, #20]
 800b924:	e002      	b.n	800b92c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	8b3a      	ldrh	r2, [r7, #24]
 800b930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b932:	8b3b      	ldrh	r3, [r7, #24]
 800b934:	461a      	mov	r2, r3
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 fa50 	bl	800bdde <USBH_CtlReq>
 800b93e:	4603      	mov	r3, r0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	789b      	ldrb	r3, [r3, #2]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d10f      	bne.n	800b97c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2205      	movs	r2, #5
 800b966:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b968:	78fb      	ldrb	r3, [r7, #3]
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b97c:	2200      	movs	r2, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fa2c 	bl	800bdde <USBH_CtlReq>
 800b986:	4603      	mov	r3, r0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	789b      	ldrb	r3, [r3, #2]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d10e      	bne.n	800b9c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2209      	movs	r2, #9
 800b9ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	887a      	ldrh	r2, [r7, #2]
 800b9b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa09 	bl	800bdde <USBH_CtlReq>
 800b9cc:	4603      	mov	r3, r0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	789b      	ldrb	r3, [r3, #2]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d10f      	bne.n	800ba0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2203      	movs	r2, #3
 800b9f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f9e5 	bl	800bdde <USBH_CtlReq>
 800ba14:	4603      	mov	r3, r0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	460b      	mov	r3, r1
 800ba28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	789b      	ldrb	r3, [r3, #2]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d10f      	bne.n	800ba52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2202      	movs	r2, #2
 800ba36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ba52:	2200      	movs	r2, #0
 800ba54:	2100      	movs	r1, #0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f9c1 	bl	800bdde <USBH_CtlReq>
 800ba5c:	4603      	mov	r3, r0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	4613      	mov	r3, r2
 800ba72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	781a      	ldrb	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	785a      	ldrb	r2, [r3, #1]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	3302      	adds	r3, #2
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3303      	adds	r3, #3
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	791a      	ldrb	r2, [r3, #4]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	795a      	ldrb	r2, [r3, #5]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	799a      	ldrb	r2, [r3, #6]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	79da      	ldrb	r2, [r3, #7]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	2b08      	cmp	r3, #8
 800bac4:	d939      	bls.n	800bb3a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3308      	adds	r3, #8
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	3309      	adds	r3, #9
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4313      	orrs	r3, r2
 800badc:	b29a      	uxth	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	330a      	adds	r3, #10
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	330b      	adds	r3, #11
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	021b      	lsls	r3, r3, #8
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	4313      	orrs	r3, r2
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	330c      	adds	r3, #12
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	330d      	adds	r3, #13
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4313      	orrs	r3, r2
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	7b9a      	ldrb	r2, [r3, #14]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	7bda      	ldrb	r2, [r3, #15]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	7c1a      	ldrb	r2, [r3, #16]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	7c5a      	ldrb	r2, [r3, #17]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	745a      	strb	r2, [r3, #17]
  }
}
 800bb3a:	bf00      	nop
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b08a      	sub	sp, #40	; 0x28
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	60f8      	str	r0, [r7, #12]
 800bb4e:	60b9      	str	r1, [r7, #8]
 800bb50:	4613      	mov	r3, r2
 800bb52:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	781a      	ldrb	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	785a      	ldrb	r2, [r3, #1]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	3302      	adds	r3, #2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3303      	adds	r3, #3
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	021b      	lsls	r3, r3, #8
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	791a      	ldrb	r2, [r3, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	795a      	ldrb	r2, [r3, #5]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	799a      	ldrb	r2, [r3, #6]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	79da      	ldrb	r2, [r3, #7]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	7a1a      	ldrb	r2, [r3, #8]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bbbc:	88fb      	ldrh	r3, [r7, #6]
 800bbbe:	2b09      	cmp	r3, #9
 800bbc0:	d95f      	bls.n	800bc82 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bbc2:	2309      	movs	r3, #9
 800bbc4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bbca:	e051      	b.n	800bc70 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbcc:	f107 0316 	add.w	r3, r7, #22
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbd4:	f000 f8e8 	bl	800bda8 <USBH_GetNextDesc>
 800bbd8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d146      	bne.n	800bc70 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bbe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbe6:	221a      	movs	r2, #26
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	3308      	adds	r3, #8
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bbf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbf8:	69f8      	ldr	r0, [r7, #28]
 800bbfa:	f000 f846 	bl	800bc8a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc08:	e022      	b.n	800bc50 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc0a:	f107 0316 	add.w	r3, r7, #22
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc12:	f000 f8c9 	bl	800bda8 <USBH_GetNextDesc>
 800bc16:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b05      	cmp	r3, #5
 800bc1e:	d117      	bne.n	800bc50 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bc28:	3201      	adds	r2, #1
 800bc2a:	00d2      	lsls	r2, r2, #3
 800bc2c:	211a      	movs	r1, #26
 800bc2e:	fb01 f303 	mul.w	r3, r1, r3
 800bc32:	4413      	add	r3, r2
 800bc34:	3308      	adds	r3, #8
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bc3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc40:	69b8      	ldr	r0, [r7, #24]
 800bc42:	f000 f851 	bl	800bce8 <USBH_ParseEPDesc>
            ep_ix++;
 800bc46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	791b      	ldrb	r3, [r3, #4]
 800bc54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d204      	bcs.n	800bc66 <USBH_ParseCfgDesc+0x120>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	885a      	ldrh	r2, [r3, #2]
 800bc60:	8afb      	ldrh	r3, [r7, #22]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d8d1      	bhi.n	800bc0a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bc66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d804      	bhi.n	800bc82 <USBH_ParseCfgDesc+0x13c>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	885a      	ldrh	r2, [r3, #2]
 800bc7c:	8afb      	ldrh	r3, [r7, #22]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d8a4      	bhi.n	800bbcc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bc82:	bf00      	nop
 800bc84:	3728      	adds	r7, #40	; 0x28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781a      	ldrb	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	785a      	ldrb	r2, [r3, #1]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	789a      	ldrb	r2, [r3, #2]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	78da      	ldrb	r2, [r3, #3]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	791a      	ldrb	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	795a      	ldrb	r2, [r3, #5]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	799a      	ldrb	r2, [r3, #6]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	79da      	ldrb	r2, [r3, #7]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	7a1a      	ldrb	r2, [r3, #8]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	721a      	strb	r2, [r3, #8]
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781a      	ldrb	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	785a      	ldrb	r2, [r3, #1]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	789a      	ldrb	r2, [r3, #2]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	78da      	ldrb	r2, [r3, #3]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	3304      	adds	r3, #4
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	3305      	adds	r3, #5
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	021b      	lsls	r3, r3, #8
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	799a      	ldrb	r2, [r3, #6]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	719a      	strb	r2, [r3, #6]
}
 800bd36:	bf00      	nop
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b087      	sub	sp, #28
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d120      	bne.n	800bd9c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	1e9a      	subs	r2, r3, #2
 800bd60:	88fb      	ldrh	r3, [r7, #6]
 800bd62:	4293      	cmp	r3, r2
 800bd64:	bf28      	it	cs
 800bd66:	4613      	movcs	r3, r2
 800bd68:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3302      	adds	r3, #2
 800bd6e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bd70:	2300      	movs	r3, #0
 800bd72:	82fb      	strh	r3, [r7, #22]
 800bd74:	e00b      	b.n	800bd8e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bd76:	8afb      	ldrh	r3, [r7, #22]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	781a      	ldrb	r2, [r3, #0]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	3301      	adds	r3, #1
 800bd86:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bd88:	8afb      	ldrh	r3, [r7, #22]
 800bd8a:	3302      	adds	r3, #2
 800bd8c:	82fb      	strh	r3, [r7, #22]
 800bd8e:	8afa      	ldrh	r2, [r7, #22]
 800bd90:	8abb      	ldrh	r3, [r7, #20]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3ef      	bcc.n	800bd76 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	701a      	strb	r2, [r3, #0]
  }
}
 800bd9c:	bf00      	nop
 800bd9e:	371c      	adds	r7, #28
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	881a      	ldrh	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b086      	sub	sp, #24
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	60b9      	str	r1, [r7, #8]
 800bde8:	4613      	mov	r3, r2
 800bdea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bdec:	2301      	movs	r3, #1
 800bdee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	789b      	ldrb	r3, [r3, #2]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d002      	beq.n	800bdfe <USBH_CtlReq+0x20>
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d00f      	beq.n	800be1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bdfc:	e027      	b.n	800be4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	88fa      	ldrh	r2, [r7, #6]
 800be08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2201      	movs	r2, #1
 800be0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2202      	movs	r2, #2
 800be14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800be16:	2301      	movs	r3, #1
 800be18:	75fb      	strb	r3, [r7, #23]
      break;
 800be1a:	e018      	b.n	800be4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f81b 	bl	800be58 <USBH_HandleControl>
 800be22:	4603      	mov	r3, r0
 800be24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <USBH_CtlReq+0x54>
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d106      	bne.n	800be40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	761a      	strb	r2, [r3, #24]
      break;
 800be3e:	e005      	b.n	800be4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d102      	bne.n	800be4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2201      	movs	r2, #1
 800be4a:	709a      	strb	r2, [r3, #2]
      break;
 800be4c:	bf00      	nop
  }
  return status;
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800be60:	2301      	movs	r3, #1
 800be62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be64:	2300      	movs	r3, #0
 800be66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7e1b      	ldrb	r3, [r3, #24]
 800be6c:	3b01      	subs	r3, #1
 800be6e:	2b0a      	cmp	r3, #10
 800be70:	f200 8158 	bhi.w	800c124 <USBH_HandleControl+0x2cc>
 800be74:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <USBH_HandleControl+0x24>)
 800be76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7a:	bf00      	nop
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	0800bec3 	.word	0x0800bec3
 800be84:	0800bf2d 	.word	0x0800bf2d
 800be88:	0800bf53 	.word	0x0800bf53
 800be8c:	0800bf8b 	.word	0x0800bf8b
 800be90:	0800bfb7 	.word	0x0800bfb7
 800be94:	0800c009 	.word	0x0800c009
 800be98:	0800c02b 	.word	0x0800c02b
 800be9c:	0800c067 	.word	0x0800c067
 800bea0:	0800c08f 	.word	0x0800c08f
 800bea4:	0800c0cd 	.word	0x0800c0cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f103 0110 	add.w	r1, r3, #16
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	795b      	ldrb	r3, [r3, #5]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f945 	bl	800c144 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2202      	movs	r2, #2
 800bebe:	761a      	strb	r2, [r3, #24]
      break;
 800bec0:	e13b      	b.n	800c13a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	795b      	ldrb	r3, [r3, #5]
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fcc5 	bl	800c858 <USBH_LL_GetURBState>
 800bece:	4603      	mov	r3, r0
 800bed0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bed2:	7bbb      	ldrb	r3, [r7, #14]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d11e      	bne.n	800bf16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7c1b      	ldrb	r3, [r3, #16]
 800bedc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bee0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8adb      	ldrh	r3, [r3, #22]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800beea:	7b7b      	ldrb	r3, [r7, #13]
 800beec:	2b80      	cmp	r3, #128	; 0x80
 800beee:	d103      	bne.n	800bef8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2203      	movs	r2, #3
 800bef4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bef6:	e117      	b.n	800c128 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2205      	movs	r2, #5
 800befc:	761a      	strb	r2, [r3, #24]
      break;
 800befe:	e113      	b.n	800c128 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800bf00:	7b7b      	ldrb	r3, [r7, #13]
 800bf02:	2b80      	cmp	r3, #128	; 0x80
 800bf04:	d103      	bne.n	800bf0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2209      	movs	r2, #9
 800bf0a:	761a      	strb	r2, [r3, #24]
      break;
 800bf0c:	e10c      	b.n	800c128 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2207      	movs	r2, #7
 800bf12:	761a      	strb	r2, [r3, #24]
      break;
 800bf14:	e108      	b.n	800c128 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b04      	cmp	r3, #4
 800bf1a:	d003      	beq.n	800bf24 <USBH_HandleControl+0xcc>
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	f040 8102 	bne.w	800c128 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	220b      	movs	r2, #11
 800bf28:	761a      	strb	r2, [r3, #24]
      break;
 800bf2a:	e0fd      	b.n	800c128 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6899      	ldr	r1, [r3, #8]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	899a      	ldrh	r2, [r3, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	791b      	ldrb	r3, [r3, #4]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f93c 	bl	800c1c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	761a      	strb	r2, [r3, #24]
      break;
 800bf50:	e0f3      	b.n	800c13a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	791b      	ldrb	r3, [r3, #4]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fc7d 	bl	800c858 <USBH_LL_GetURBState>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d102      	bne.n	800bf6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2209      	movs	r2, #9
 800bf6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bf6e:	7bbb      	ldrb	r3, [r7, #14]
 800bf70:	2b05      	cmp	r3, #5
 800bf72:	d102      	bne.n	800bf7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bf74:	2303      	movs	r3, #3
 800bf76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf78:	e0d8      	b.n	800c12c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	2b04      	cmp	r3, #4
 800bf7e:	f040 80d5 	bne.w	800c12c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	220b      	movs	r2, #11
 800bf86:	761a      	strb	r2, [r3, #24]
      break;
 800bf88:	e0d0      	b.n	800c12c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6899      	ldr	r1, [r3, #8]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	899a      	ldrh	r2, [r3, #12]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7958      	ldrb	r0, [r3, #5]
 800bf96:	2301      	movs	r3, #1
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f8eb 	bl	800c178 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2206      	movs	r2, #6
 800bfb2:	761a      	strb	r2, [r3, #24]
      break;
 800bfb4:	e0c1      	b.n	800c13a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	795b      	ldrb	r3, [r3, #5]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fc4b 	bl	800c858 <USBH_LL_GetURBState>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d103      	bne.n	800bfd4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2207      	movs	r2, #7
 800bfd0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bfd2:	e0ad      	b.n	800c130 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d105      	bne.n	800bfe6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	220c      	movs	r2, #12
 800bfde:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe4:	e0a4      	b.n	800c130 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d103      	bne.n	800bff4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2205      	movs	r2, #5
 800bff0:	761a      	strb	r2, [r3, #24]
      break;
 800bff2:	e09d      	b.n	800c130 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	f040 809a 	bne.w	800c130 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	220b      	movs	r2, #11
 800c000:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c002:	2302      	movs	r3, #2
 800c004:	73fb      	strb	r3, [r7, #15]
      break;
 800c006:	e093      	b.n	800c130 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	791b      	ldrb	r3, [r3, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	2100      	movs	r1, #0
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8d6 	bl	800c1c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2208      	movs	r2, #8
 800c026:	761a      	strb	r2, [r3, #24]

      break;
 800c028:	e087      	b.n	800c13a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	791b      	ldrb	r3, [r3, #4]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fc11 	bl	800c858 <USBH_LL_GetURBState>
 800c036:	4603      	mov	r3, r0
 800c038:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d105      	bne.n	800c04c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	220d      	movs	r2, #13
 800c044:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c04a:	e073      	b.n	800c134 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b04      	cmp	r3, #4
 800c050:	d103      	bne.n	800c05a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	220b      	movs	r2, #11
 800c056:	761a      	strb	r2, [r3, #24]
      break;
 800c058:	e06c      	b.n	800c134 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b05      	cmp	r3, #5
 800c05e:	d169      	bne.n	800c134 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c060:	2303      	movs	r3, #3
 800c062:	73fb      	strb	r3, [r7, #15]
      break;
 800c064:	e066      	b.n	800c134 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	795a      	ldrb	r2, [r3, #5]
 800c06a:	2301      	movs	r3, #1
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	4613      	mov	r3, r2
 800c070:	2200      	movs	r2, #0
 800c072:	2100      	movs	r1, #0
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f87f 	bl	800c178 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c080:	b29a      	uxth	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	220a      	movs	r2, #10
 800c08a:	761a      	strb	r2, [r3, #24]
      break;
 800c08c:	e055      	b.n	800c13a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	795b      	ldrb	r3, [r3, #5]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fbdf 	bl	800c858 <USBH_LL_GetURBState>
 800c09a:	4603      	mov	r3, r0
 800c09c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d105      	bne.n	800c0b0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	220d      	movs	r2, #13
 800c0ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0ae:	e043      	b.n	800c138 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d103      	bne.n	800c0be <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2209      	movs	r2, #9
 800c0ba:	761a      	strb	r2, [r3, #24]
      break;
 800c0bc:	e03c      	b.n	800c138 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d139      	bne.n	800c138 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	220b      	movs	r2, #11
 800c0c8:	761a      	strb	r2, [r3, #24]
      break;
 800c0ca:	e035      	b.n	800c138 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7e5b      	ldrb	r3, [r3, #25]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	765a      	strb	r2, [r3, #25]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	7e5b      	ldrb	r3, [r3, #25]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d806      	bhi.n	800c0ee <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c0ec:	e025      	b.n	800c13a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0f4:	2106      	movs	r1, #6
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	795b      	ldrb	r3, [r3, #5]
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f90c 	bl	800c324 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	791b      	ldrb	r3, [r3, #4]
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f906 	bl	800c324 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c11e:	2302      	movs	r3, #2
 800c120:	73fb      	strb	r3, [r7, #15]
      break;
 800c122:	e00a      	b.n	800c13a <USBH_HandleControl+0x2e2>

    default:
      break;
 800c124:	bf00      	nop
 800c126:	e008      	b.n	800c13a <USBH_HandleControl+0x2e2>
      break;
 800c128:	bf00      	nop
 800c12a:	e006      	b.n	800c13a <USBH_HandleControl+0x2e2>
      break;
 800c12c:	bf00      	nop
 800c12e:	e004      	b.n	800c13a <USBH_HandleControl+0x2e2>
      break;
 800c130:	bf00      	nop
 800c132:	e002      	b.n	800c13a <USBH_HandleControl+0x2e2>
      break;
 800c134:	bf00      	nop
 800c136:	e000      	b.n	800c13a <USBH_HandleControl+0x2e2>
      break;
 800c138:	bf00      	nop
  }

  return status;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af04      	add	r7, sp, #16
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	4613      	mov	r3, r2
 800c150:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c152:	79f9      	ldrb	r1, [r7, #7]
 800c154:	2300      	movs	r3, #0
 800c156:	9303      	str	r3, [sp, #12]
 800c158:	2308      	movs	r3, #8
 800c15a:	9302      	str	r3, [sp, #8]
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	2300      	movs	r3, #0
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	2300      	movs	r3, #0
 800c166:	2200      	movs	r2, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 fb44 	bl	800c7f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af04      	add	r7, sp, #16
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4611      	mov	r1, r2
 800c184:	461a      	mov	r2, r3
 800c186:	460b      	mov	r3, r1
 800c188:	80fb      	strh	r3, [r7, #6]
 800c18a:	4613      	mov	r3, r2
 800c18c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c19c:	7979      	ldrb	r1, [r7, #5]
 800c19e:	7e3b      	ldrb	r3, [r7, #24]
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 fb1f 	bl	800c7f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	af04      	add	r7, sp, #16
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	80fb      	strh	r3, [r7, #6]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1d8:	7979      	ldrb	r1, [r7, #5]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9303      	str	r3, [sp, #12]
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	9302      	str	r3, [sp, #8]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fb01 	bl	800c7f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c1f4:	2300      	movs	r3, #0

}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b088      	sub	sp, #32
 800c202:	af04      	add	r7, sp, #16
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	60b9      	str	r1, [r7, #8]
 800c208:	4611      	mov	r1, r2
 800c20a:	461a      	mov	r2, r3
 800c20c:	460b      	mov	r3, r1
 800c20e:	80fb      	strh	r3, [r7, #6]
 800c210:	4613      	mov	r3, r2
 800c212:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c222:	7979      	ldrb	r1, [r7, #5]
 800c224:	7e3b      	ldrb	r3, [r7, #24]
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	9301      	str	r3, [sp, #4]
 800c230:	2301      	movs	r3, #1
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	2302      	movs	r3, #2
 800c236:	2200      	movs	r2, #0
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 fadc 	bl	800c7f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af04      	add	r7, sp, #16
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4611      	mov	r1, r2
 800c254:	461a      	mov	r2, r3
 800c256:	460b      	mov	r3, r1
 800c258:	80fb      	strh	r3, [r7, #6]
 800c25a:	4613      	mov	r3, r2
 800c25c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c25e:	7979      	ldrb	r1, [r7, #5]
 800c260:	2300      	movs	r3, #0
 800c262:	9303      	str	r3, [sp, #12]
 800c264:	88fb      	ldrh	r3, [r7, #6]
 800c266:	9302      	str	r3, [sp, #8]
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	2301      	movs	r3, #1
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2302      	movs	r3, #2
 800c272:	2201      	movs	r2, #1
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 fabe 	bl	800c7f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af04      	add	r7, sp, #16
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	461a      	mov	r2, r3
 800c292:	4603      	mov	r3, r0
 800c294:	70fb      	strb	r3, [r7, #3]
 800c296:	460b      	mov	r3, r1
 800c298:	70bb      	strb	r3, [r7, #2]
 800c29a:	4613      	mov	r3, r2
 800c29c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c29e:	7878      	ldrb	r0, [r7, #1]
 800c2a0:	78ba      	ldrb	r2, [r7, #2]
 800c2a2:	78f9      	ldrb	r1, [r7, #3]
 800c2a4:	8b3b      	ldrh	r3, [r7, #24]
 800c2a6:	9302      	str	r3, [sp, #8]
 800c2a8:	7d3b      	ldrb	r3, [r7, #20]
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	7c3b      	ldrb	r3, [r7, #16]
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fa51 	bl	800c75a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b082      	sub	sp, #8
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c2ce:	78fb      	ldrb	r3, [r7, #3]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fa70 	bl	800c7b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f836 	bl	800c360 <USBH_GetFreePipe>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c2f8:	89fb      	ldrh	r3, [r7, #14]
 800c2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00a      	beq.n	800c318 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	89fb      	ldrh	r3, [r7, #14]
 800c306:	f003 030f 	and.w	r3, r3, #15
 800c30a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	33e0      	adds	r3, #224	; 0xe0
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	440b      	add	r3, r1
 800c316:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c318:	89fb      	ldrh	r3, [r7, #14]
 800c31a:	b2db      	uxtb	r3, r3
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	2b0a      	cmp	r3, #10
 800c334:	d80d      	bhi.n	800c352 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	33e0      	adds	r3, #224	; 0xe0
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	78fb      	ldrb	r3, [r7, #3]
 800c344:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	33e0      	adds	r3, #224	; 0xe0
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	440b      	add	r3, r1
 800c350:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
 800c370:	e00f      	b.n	800c392 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	33e0      	adds	r3, #224	; 0xe0
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c382:	2b00      	cmp	r3, #0
 800c384:	d102      	bne.n	800c38c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	b29b      	uxth	r3, r3
 800c38a:	e007      	b.n	800c39c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	3301      	adds	r3, #1
 800c390:	73fb      	strb	r3, [r7, #15]
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b0a      	cmp	r3, #10
 800c396:	d9ec      	bls.n	800c372 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c398:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	490e      	ldr	r1, [pc, #56]	; (800c3e8 <MX_USB_HOST_Init+0x40>)
 800c3b0:	480e      	ldr	r0, [pc, #56]	; (800c3ec <MX_USB_HOST_Init+0x44>)
 800c3b2:	f7fe fc9f 	bl	800acf4 <USBH_Init>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c3bc:	f7f4 fea0 	bl	8001100 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c3c0:	490b      	ldr	r1, [pc, #44]	; (800c3f0 <MX_USB_HOST_Init+0x48>)
 800c3c2:	480a      	ldr	r0, [pc, #40]	; (800c3ec <MX_USB_HOST_Init+0x44>)
 800c3c4:	f7fe fd24 	bl	800ae10 <USBH_RegisterClass>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c3ce:	f7f4 fe97 	bl	8001100 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c3d2:	4806      	ldr	r0, [pc, #24]	; (800c3ec <MX_USB_HOST_Init+0x44>)
 800c3d4:	f7fe fda8 	bl	800af28 <USBH_Start>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c3de:	f7f4 fe8f 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c3e2:	bf00      	nop
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800c409 	.word	0x0800c409
 800c3ec:	200005fc 	.word	0x200005fc
 800c3f0:	20000068 	.word	0x20000068

0800c3f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c3f8:	4802      	ldr	r0, [pc, #8]	; (800c404 <MX_USB_HOST_Process+0x10>)
 800c3fa:	f7fe fda5 	bl	800af48 <USBH_Process>
}
 800c3fe:	bf00      	nop
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	200005fc 	.word	0x200005fc

0800c408 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	3b01      	subs	r3, #1
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d819      	bhi.n	800c450 <USBH_UserProcess+0x48>
 800c41c:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <USBH_UserProcess+0x1c>)
 800c41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c422:	bf00      	nop
 800c424:	0800c451 	.word	0x0800c451
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c451 	.word	0x0800c451
 800c430:	0800c449 	.word	0x0800c449
 800c434:	0800c439 	.word	0x0800c439
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c438:	4b09      	ldr	r3, [pc, #36]	; (800c460 <USBH_UserProcess+0x58>)
 800c43a:	2203      	movs	r2, #3
 800c43c:	701a      	strb	r2, [r3, #0]
  break;
 800c43e:	e008      	b.n	800c452 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <USBH_UserProcess+0x58>)
 800c442:	2202      	movs	r2, #2
 800c444:	701a      	strb	r2, [r3, #0]
  break;
 800c446:	e004      	b.n	800c452 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c448:	4b05      	ldr	r3, [pc, #20]	; (800c460 <USBH_UserProcess+0x58>)
 800c44a:	2201      	movs	r2, #1
 800c44c:	701a      	strb	r2, [r3, #0]
  break;
 800c44e:	e000      	b.n	800c452 <USBH_UserProcess+0x4a>

  default:
  break;
 800c450:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c452:	bf00      	nop
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	20000164 	.word	0x20000164

0800c464 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c46c:	f107 0314 	add.w	r3, r7, #20
 800c470:	2200      	movs	r2, #0
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	605a      	str	r2, [r3, #4]
 800c476:	609a      	str	r2, [r3, #8]
 800c478:	60da      	str	r2, [r3, #12]
 800c47a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c484:	d147      	bne.n	800c516 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c486:	2300      	movs	r3, #0
 800c488:	613b      	str	r3, [r7, #16]
 800c48a:	4b25      	ldr	r3, [pc, #148]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	4a24      	ldr	r2, [pc, #144]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c490:	f043 0301 	orr.w	r3, r3, #1
 800c494:	6313      	str	r3, [r2, #48]	; 0x30
 800c496:	4b22      	ldr	r3, [pc, #136]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	613b      	str	r3, [r7, #16]
 800c4a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800c4a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	481b      	ldr	r0, [pc, #108]	; (800c524 <HAL_HCD_MspInit+0xc0>)
 800c4b8:	f7f7 fcb4 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c4bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c4c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4ce:	230a      	movs	r3, #10
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d2:	f107 0314 	add.w	r3, r7, #20
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4812      	ldr	r0, [pc, #72]	; (800c524 <HAL_HCD_MspInit+0xc0>)
 800c4da:	f7f7 fca3 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4de:	4b10      	ldr	r3, [pc, #64]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e2:	4a0f      	ldr	r2, [pc, #60]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e8:	6353      	str	r3, [r2, #52]	; 0x34
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]
 800c4ee:	4b0c      	ldr	r3, [pc, #48]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f2:	4a0b      	ldr	r2, [pc, #44]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c4f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4f8:	6453      	str	r3, [r2, #68]	; 0x44
 800c4fa:	4b09      	ldr	r3, [pc, #36]	; (800c520 <HAL_HCD_MspInit+0xbc>)
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c502:	60fb      	str	r3, [r7, #12]
 800c504:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c506:	2200      	movs	r2, #0
 800c508:	2100      	movs	r1, #0
 800c50a:	2043      	movs	r0, #67	; 0x43
 800c50c:	f7f7 f9b7 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c510:	2043      	movs	r0, #67	; 0x43
 800c512:	f7f7 f9d0 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c516:	bf00      	nop
 800c518:	3728      	adds	r7, #40	; 0x28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	40023800 	.word	0x40023800
 800c524:	40020000 	.word	0x40020000

0800c528 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff f8d9 	bl	800b6ee <USBH_LL_IncTimer>
}
 800c53c:	bf00      	nop
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff f911 	bl	800b77a <USBH_LL_Connect>
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff f91a 	bl	800b7a8 <USBH_LL_Disconnect>
}
 800c574:	bf00      	nop
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
 800c588:	4613      	mov	r3, r2
 800c58a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff f8cb 	bl	800b742 <USBH_LL_PortEnabled>
}
 800c5ac:	bf00      	nop
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff f8cb 	bl	800b75e <USBH_LL_PortDisabled>
}
 800c5c8:	bf00      	nop
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d12a      	bne.n	800c638 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c5e2:	4a18      	ldr	r2, [pc, #96]	; (800c644 <USBH_LL_Init+0x74>)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a15      	ldr	r2, [pc, #84]	; (800c644 <USBH_LL_Init+0x74>)
 800c5ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c5f2:	4b14      	ldr	r3, [pc, #80]	; (800c644 <USBH_LL_Init+0x74>)
 800c5f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c5f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c5fa:	4b12      	ldr	r3, [pc, #72]	; (800c644 <USBH_LL_Init+0x74>)
 800c5fc:	220c      	movs	r2, #12
 800c5fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c600:	4b10      	ldr	r3, [pc, #64]	; (800c644 <USBH_LL_Init+0x74>)
 800c602:	2201      	movs	r2, #1
 800c604:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <USBH_LL_Init+0x74>)
 800c608:	2200      	movs	r2, #0
 800c60a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c60c:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <USBH_LL_Init+0x74>)
 800c60e:	2202      	movs	r2, #2
 800c610:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c612:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <USBH_LL_Init+0x74>)
 800c614:	2200      	movs	r2, #0
 800c616:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c618:	480a      	ldr	r0, [pc, #40]	; (800c644 <USBH_LL_Init+0x74>)
 800c61a:	f7f7 fdea 	bl	80041f2 <HAL_HCD_Init>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c624:	f7f4 fd6c 	bl	8001100 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c628:	4806      	ldr	r0, [pc, #24]	; (800c644 <USBH_LL_Init+0x74>)
 800c62a:	f7f8 f9ed 	bl	8004a08 <HAL_HCD_GetCurrentFrame>
 800c62e:	4603      	mov	r3, r0
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff f84c 	bl	800b6d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	200009d4 	.word	0x200009d4

0800c648 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7f8 f95a 	bl	8004918 <HAL_HCD_Start>
 800c664:	4603      	mov	r3, r0
 800c666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f95c 	bl	800c928 <USBH_Get_USB_Status>
 800c670:	4603      	mov	r3, r0
 800c672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c674:	7bbb      	ldrb	r3, [r7, #14]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c694:	4618      	mov	r0, r3
 800c696:	f7f8 f962 	bl	800495e <HAL_HCD_Stop>
 800c69a:	4603      	mov	r3, r0
 800c69c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 f941 	bl	800c928 <USBH_Get_USB_Status>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f8 f9ac 	bl	8004a24 <HAL_HCD_GetCurrentSpeed>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d007      	beq.n	800c6e2 <USBH_LL_GetSpeed+0x2e>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d302      	bcc.n	800c6dc <USBH_LL_GetSpeed+0x28>
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d006      	beq.n	800c6e8 <USBH_LL_GetSpeed+0x34>
 800c6da:	e008      	b.n	800c6ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e0:	e008      	b.n	800c6f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e6:	e005      	b.n	800c6f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ec:	e002      	b.n	800c6f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f2:	bf00      	nop
  }
  return  speed;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c714:	4618      	mov	r0, r3
 800c716:	f7f8 f93f 	bl	8004998 <HAL_HCD_ResetPort>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f901 	bl	800c928 <USBH_Get_USB_Status>
 800c726:	4603      	mov	r3, r0
 800c728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c746:	78fa      	ldrb	r2, [r7, #3]
 800c748:	4611      	mov	r1, r2
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f8 f947 	bl	80049de <HAL_HCD_HC_GetXferCount>
 800c750:	4603      	mov	r3, r0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c75a:	b590      	push	{r4, r7, lr}
 800c75c:	b089      	sub	sp, #36	; 0x24
 800c75e:	af04      	add	r7, sp, #16
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	4608      	mov	r0, r1
 800c764:	4611      	mov	r1, r2
 800c766:	461a      	mov	r2, r3
 800c768:	4603      	mov	r3, r0
 800c76a:	70fb      	strb	r3, [r7, #3]
 800c76c:	460b      	mov	r3, r1
 800c76e:	70bb      	strb	r3, [r7, #2]
 800c770:	4613      	mov	r3, r2
 800c772:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c782:	787c      	ldrb	r4, [r7, #1]
 800c784:	78ba      	ldrb	r2, [r7, #2]
 800c786:	78f9      	ldrb	r1, [r7, #3]
 800c788:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c78a:	9302      	str	r3, [sp, #8]
 800c78c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	4623      	mov	r3, r4
 800c79a:	f7f7 fd8c 	bl	80042b6 <HAL_HCD_HC_Init>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 f8bf 	bl	800c928 <USBH_Get_USB_Status>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd90      	pop	{r4, r7, pc}

0800c7b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f7 fe05 	bl	80043e6 <HAL_HCD_HC_Halt>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f8a0 	bl	800c928 <USBH_Get_USB_Status>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c7f6:	b590      	push	{r4, r7, lr}
 800c7f8:	b089      	sub	sp, #36	; 0x24
 800c7fa:	af04      	add	r7, sp, #16
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	4608      	mov	r0, r1
 800c800:	4611      	mov	r1, r2
 800c802:	461a      	mov	r2, r3
 800c804:	4603      	mov	r3, r0
 800c806:	70fb      	strb	r3, [r7, #3]
 800c808:	460b      	mov	r3, r1
 800c80a:	70bb      	strb	r3, [r7, #2]
 800c80c:	4613      	mov	r3, r2
 800c80e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c81e:	787c      	ldrb	r4, [r7, #1]
 800c820:	78ba      	ldrb	r2, [r7, #2]
 800c822:	78f9      	ldrb	r1, [r7, #3]
 800c824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c828:	9303      	str	r3, [sp, #12]
 800c82a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c82c:	9302      	str	r3, [sp, #8]
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	4623      	mov	r3, r4
 800c83a:	f7f7 fdf7 	bl	800442c <HAL_HCD_HC_SubmitRequest>
 800c83e:	4603      	mov	r3, r0
 800c840:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c842:	7bfb      	ldrb	r3, [r7, #15]
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f86f 	bl	800c928 <USBH_Get_USB_Status>
 800c84a:	4603      	mov	r3, r0
 800c84c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	bd90      	pop	{r4, r7, pc}

0800c858 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c86a:	78fa      	ldrb	r2, [r7, #3]
 800c86c:	4611      	mov	r1, r2
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f8 f8a0 	bl	80049b4 <HAL_HCD_HC_GetURBState>
 800c874:	4603      	mov	r3, r0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b082      	sub	sp, #8
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	460b      	mov	r3, r1
 800c888:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c890:	2b01      	cmp	r3, #1
 800c892:	d103      	bne.n	800c89c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c894:	78fb      	ldrb	r3, [r7, #3]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f872 	bl	800c980 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c89c:	20c8      	movs	r0, #200	; 0xc8
 800c89e:	f7f6 fc7f 	bl	80031a0 <HAL_Delay>
  return USBH_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c8c4:	78fa      	ldrb	r2, [r7, #3]
 800c8c6:	68f9      	ldr	r1, [r7, #12]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	440b      	add	r3, r1
 800c8d2:	333b      	adds	r3, #59	; 0x3b
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00a      	beq.n	800c8f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	68f9      	ldr	r1, [r7, #12]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	440b      	add	r3, r1
 800c8e8:	3350      	adds	r3, #80	; 0x50
 800c8ea:	78ba      	ldrb	r2, [r7, #2]
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	e009      	b.n	800c904 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c8f0:	78fa      	ldrb	r2, [r7, #3]
 800c8f2:	68f9      	ldr	r1, [r7, #12]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	440b      	add	r3, r1
 800c8fe:	3351      	adds	r3, #81	; 0x51
 800c900:	78ba      	ldrb	r2, [r7, #2]
 800c902:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b082      	sub	sp, #8
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7f6 fc40 	bl	80031a0 <HAL_Delay>
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c936:	79fb      	ldrb	r3, [r7, #7]
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d817      	bhi.n	800c96c <USBH_Get_USB_Status+0x44>
 800c93c:	a201      	add	r2, pc, #4	; (adr r2, 800c944 <USBH_Get_USB_Status+0x1c>)
 800c93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c942:	bf00      	nop
 800c944:	0800c955 	.word	0x0800c955
 800c948:	0800c95b 	.word	0x0800c95b
 800c94c:	0800c961 	.word	0x0800c961
 800c950:	0800c967 	.word	0x0800c967
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73fb      	strb	r3, [r7, #15]
    break;
 800c958:	e00b      	b.n	800c972 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c95a:	2302      	movs	r3, #2
 800c95c:	73fb      	strb	r3, [r7, #15]
    break;
 800c95e:	e008      	b.n	800c972 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c960:	2301      	movs	r3, #1
 800c962:	73fb      	strb	r3, [r7, #15]
    break;
 800c964:	e005      	b.n	800c972 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c966:	2302      	movs	r3, #2
 800c968:	73fb      	strb	r3, [r7, #15]
    break;
 800c96a:	e002      	b.n	800c972 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c96c:	2302      	movs	r3, #2
 800c96e:	73fb      	strb	r3, [r7, #15]
    break;
 800c970:	bf00      	nop
  }
  return usb_status;
 800c972:	7bfb      	ldrb	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d102      	bne.n	800c99a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c994:	2301      	movs	r3, #1
 800c996:	73fb      	strb	r3, [r7, #15]
 800c998:	e001      	b.n	800c99e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c99a:	2300      	movs	r3, #0
 800c99c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9a6:	4803      	ldr	r0, [pc, #12]	; (800c9b4 <MX_DriverVbusFS+0x34>)
 800c9a8:	f7f7 fbe6 	bl	8004178 <HAL_GPIO_WritePin>
}
 800c9ac:	bf00      	nop
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	40021800 	.word	0x40021800

0800c9b8 <__errno>:
 800c9b8:	4b01      	ldr	r3, [pc, #4]	; (800c9c0 <__errno+0x8>)
 800c9ba:	6818      	ldr	r0, [r3, #0]
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20000088 	.word	0x20000088

0800c9c4 <__libc_init_array>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	4e0d      	ldr	r6, [pc, #52]	; (800c9fc <__libc_init_array+0x38>)
 800c9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ca00 <__libc_init_array+0x3c>)
 800c9ca:	1ba4      	subs	r4, r4, r6
 800c9cc:	10a4      	asrs	r4, r4, #2
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	42a5      	cmp	r5, r4
 800c9d2:	d109      	bne.n	800c9e8 <__libc_init_array+0x24>
 800c9d4:	4e0b      	ldr	r6, [pc, #44]	; (800ca04 <__libc_init_array+0x40>)
 800c9d6:	4c0c      	ldr	r4, [pc, #48]	; (800ca08 <__libc_init_array+0x44>)
 800c9d8:	f000 f8ea 	bl	800cbb0 <_init>
 800c9dc:	1ba4      	subs	r4, r4, r6
 800c9de:	10a4      	asrs	r4, r4, #2
 800c9e0:	2500      	movs	r5, #0
 800c9e2:	42a5      	cmp	r5, r4
 800c9e4:	d105      	bne.n	800c9f2 <__libc_init_array+0x2e>
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9ec:	4798      	blx	r3
 800c9ee:	3501      	adds	r5, #1
 800c9f0:	e7ee      	b.n	800c9d0 <__libc_init_array+0xc>
 800c9f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9f6:	4798      	blx	r3
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	e7f2      	b.n	800c9e2 <__libc_init_array+0x1e>
 800c9fc:	0800ec58 	.word	0x0800ec58
 800ca00:	0800ec58 	.word	0x0800ec58
 800ca04:	0800ec58 	.word	0x0800ec58
 800ca08:	0800ec5c 	.word	0x0800ec5c

0800ca0c <malloc>:
 800ca0c:	4b02      	ldr	r3, [pc, #8]	; (800ca18 <malloc+0xc>)
 800ca0e:	4601      	mov	r1, r0
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	f000 b861 	b.w	800cad8 <_malloc_r>
 800ca16:	bf00      	nop
 800ca18:	20000088 	.word	0x20000088

0800ca1c <free>:
 800ca1c:	4b02      	ldr	r3, [pc, #8]	; (800ca28 <free+0xc>)
 800ca1e:	4601      	mov	r1, r0
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	f000 b80b 	b.w	800ca3c <_free_r>
 800ca26:	bf00      	nop
 800ca28:	20000088 	.word	0x20000088

0800ca2c <memset>:
 800ca2c:	4402      	add	r2, r0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d100      	bne.n	800ca36 <memset+0xa>
 800ca34:	4770      	bx	lr
 800ca36:	f803 1b01 	strb.w	r1, [r3], #1
 800ca3a:	e7f9      	b.n	800ca30 <memset+0x4>

0800ca3c <_free_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4605      	mov	r5, r0
 800ca40:	2900      	cmp	r1, #0
 800ca42:	d045      	beq.n	800cad0 <_free_r+0x94>
 800ca44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca48:	1f0c      	subs	r4, r1, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfb8      	it	lt
 800ca4e:	18e4      	addlt	r4, r4, r3
 800ca50:	f000 f8ac 	bl	800cbac <__malloc_lock>
 800ca54:	4a1f      	ldr	r2, [pc, #124]	; (800cad4 <_free_r+0x98>)
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	4610      	mov	r0, r2
 800ca5a:	b933      	cbnz	r3, 800ca6a <_free_r+0x2e>
 800ca5c:	6063      	str	r3, [r4, #4]
 800ca5e:	6014      	str	r4, [r2, #0]
 800ca60:	4628      	mov	r0, r5
 800ca62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca66:	f000 b8a2 	b.w	800cbae <__malloc_unlock>
 800ca6a:	42a3      	cmp	r3, r4
 800ca6c:	d90c      	bls.n	800ca88 <_free_r+0x4c>
 800ca6e:	6821      	ldr	r1, [r4, #0]
 800ca70:	1862      	adds	r2, r4, r1
 800ca72:	4293      	cmp	r3, r2
 800ca74:	bf04      	itt	eq
 800ca76:	681a      	ldreq	r2, [r3, #0]
 800ca78:	685b      	ldreq	r3, [r3, #4]
 800ca7a:	6063      	str	r3, [r4, #4]
 800ca7c:	bf04      	itt	eq
 800ca7e:	1852      	addeq	r2, r2, r1
 800ca80:	6022      	streq	r2, [r4, #0]
 800ca82:	6004      	str	r4, [r0, #0]
 800ca84:	e7ec      	b.n	800ca60 <_free_r+0x24>
 800ca86:	4613      	mov	r3, r2
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	b10a      	cbz	r2, 800ca90 <_free_r+0x54>
 800ca8c:	42a2      	cmp	r2, r4
 800ca8e:	d9fa      	bls.n	800ca86 <_free_r+0x4a>
 800ca90:	6819      	ldr	r1, [r3, #0]
 800ca92:	1858      	adds	r0, r3, r1
 800ca94:	42a0      	cmp	r0, r4
 800ca96:	d10b      	bne.n	800cab0 <_free_r+0x74>
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	4401      	add	r1, r0
 800ca9c:	1858      	adds	r0, r3, r1
 800ca9e:	4282      	cmp	r2, r0
 800caa0:	6019      	str	r1, [r3, #0]
 800caa2:	d1dd      	bne.n	800ca60 <_free_r+0x24>
 800caa4:	6810      	ldr	r0, [r2, #0]
 800caa6:	6852      	ldr	r2, [r2, #4]
 800caa8:	605a      	str	r2, [r3, #4]
 800caaa:	4401      	add	r1, r0
 800caac:	6019      	str	r1, [r3, #0]
 800caae:	e7d7      	b.n	800ca60 <_free_r+0x24>
 800cab0:	d902      	bls.n	800cab8 <_free_r+0x7c>
 800cab2:	230c      	movs	r3, #12
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	e7d3      	b.n	800ca60 <_free_r+0x24>
 800cab8:	6820      	ldr	r0, [r4, #0]
 800caba:	1821      	adds	r1, r4, r0
 800cabc:	428a      	cmp	r2, r1
 800cabe:	bf04      	itt	eq
 800cac0:	6811      	ldreq	r1, [r2, #0]
 800cac2:	6852      	ldreq	r2, [r2, #4]
 800cac4:	6062      	str	r2, [r4, #4]
 800cac6:	bf04      	itt	eq
 800cac8:	1809      	addeq	r1, r1, r0
 800caca:	6021      	streq	r1, [r4, #0]
 800cacc:	605c      	str	r4, [r3, #4]
 800cace:	e7c7      	b.n	800ca60 <_free_r+0x24>
 800cad0:	bd38      	pop	{r3, r4, r5, pc}
 800cad2:	bf00      	nop
 800cad4:	20000168 	.word	0x20000168

0800cad8 <_malloc_r>:
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	1ccd      	adds	r5, r1, #3
 800cadc:	f025 0503 	bic.w	r5, r5, #3
 800cae0:	3508      	adds	r5, #8
 800cae2:	2d0c      	cmp	r5, #12
 800cae4:	bf38      	it	cc
 800cae6:	250c      	movcc	r5, #12
 800cae8:	2d00      	cmp	r5, #0
 800caea:	4606      	mov	r6, r0
 800caec:	db01      	blt.n	800caf2 <_malloc_r+0x1a>
 800caee:	42a9      	cmp	r1, r5
 800caf0:	d903      	bls.n	800cafa <_malloc_r+0x22>
 800caf2:	230c      	movs	r3, #12
 800caf4:	6033      	str	r3, [r6, #0]
 800caf6:	2000      	movs	r0, #0
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
 800cafa:	f000 f857 	bl	800cbac <__malloc_lock>
 800cafe:	4a21      	ldr	r2, [pc, #132]	; (800cb84 <_malloc_r+0xac>)
 800cb00:	6814      	ldr	r4, [r2, #0]
 800cb02:	4621      	mov	r1, r4
 800cb04:	b991      	cbnz	r1, 800cb2c <_malloc_r+0x54>
 800cb06:	4c20      	ldr	r4, [pc, #128]	; (800cb88 <_malloc_r+0xb0>)
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	b91b      	cbnz	r3, 800cb14 <_malloc_r+0x3c>
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f000 f83d 	bl	800cb8c <_sbrk_r>
 800cb12:	6020      	str	r0, [r4, #0]
 800cb14:	4629      	mov	r1, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 f838 	bl	800cb8c <_sbrk_r>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d124      	bne.n	800cb6a <_malloc_r+0x92>
 800cb20:	230c      	movs	r3, #12
 800cb22:	6033      	str	r3, [r6, #0]
 800cb24:	4630      	mov	r0, r6
 800cb26:	f000 f842 	bl	800cbae <__malloc_unlock>
 800cb2a:	e7e4      	b.n	800caf6 <_malloc_r+0x1e>
 800cb2c:	680b      	ldr	r3, [r1, #0]
 800cb2e:	1b5b      	subs	r3, r3, r5
 800cb30:	d418      	bmi.n	800cb64 <_malloc_r+0x8c>
 800cb32:	2b0b      	cmp	r3, #11
 800cb34:	d90f      	bls.n	800cb56 <_malloc_r+0x7e>
 800cb36:	600b      	str	r3, [r1, #0]
 800cb38:	50cd      	str	r5, [r1, r3]
 800cb3a:	18cc      	adds	r4, r1, r3
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f000 f836 	bl	800cbae <__malloc_unlock>
 800cb42:	f104 000b 	add.w	r0, r4, #11
 800cb46:	1d23      	adds	r3, r4, #4
 800cb48:	f020 0007 	bic.w	r0, r0, #7
 800cb4c:	1ac3      	subs	r3, r0, r3
 800cb4e:	d0d3      	beq.n	800caf8 <_malloc_r+0x20>
 800cb50:	425a      	negs	r2, r3
 800cb52:	50e2      	str	r2, [r4, r3]
 800cb54:	e7d0      	b.n	800caf8 <_malloc_r+0x20>
 800cb56:	428c      	cmp	r4, r1
 800cb58:	684b      	ldr	r3, [r1, #4]
 800cb5a:	bf16      	itet	ne
 800cb5c:	6063      	strne	r3, [r4, #4]
 800cb5e:	6013      	streq	r3, [r2, #0]
 800cb60:	460c      	movne	r4, r1
 800cb62:	e7eb      	b.n	800cb3c <_malloc_r+0x64>
 800cb64:	460c      	mov	r4, r1
 800cb66:	6849      	ldr	r1, [r1, #4]
 800cb68:	e7cc      	b.n	800cb04 <_malloc_r+0x2c>
 800cb6a:	1cc4      	adds	r4, r0, #3
 800cb6c:	f024 0403 	bic.w	r4, r4, #3
 800cb70:	42a0      	cmp	r0, r4
 800cb72:	d005      	beq.n	800cb80 <_malloc_r+0xa8>
 800cb74:	1a21      	subs	r1, r4, r0
 800cb76:	4630      	mov	r0, r6
 800cb78:	f000 f808 	bl	800cb8c <_sbrk_r>
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	d0cf      	beq.n	800cb20 <_malloc_r+0x48>
 800cb80:	6025      	str	r5, [r4, #0]
 800cb82:	e7db      	b.n	800cb3c <_malloc_r+0x64>
 800cb84:	20000168 	.word	0x20000168
 800cb88:	2000016c 	.word	0x2000016c

0800cb8c <_sbrk_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4c06      	ldr	r4, [pc, #24]	; (800cba8 <_sbrk_r+0x1c>)
 800cb90:	2300      	movs	r3, #0
 800cb92:	4605      	mov	r5, r0
 800cb94:	4608      	mov	r0, r1
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	f7f5 f94e 	bl	8001e38 <_sbrk>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	d102      	bne.n	800cba6 <_sbrk_r+0x1a>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	b103      	cbz	r3, 800cba6 <_sbrk_r+0x1a>
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	20000c98 	.word	0x20000c98

0800cbac <__malloc_lock>:
 800cbac:	4770      	bx	lr

0800cbae <__malloc_unlock>:
 800cbae:	4770      	bx	lr

0800cbb0 <_init>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr

0800cbbc <_fini>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr
