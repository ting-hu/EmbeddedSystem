
Mastermind Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c718  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f4c  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e83c  0800e83c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e83c  0800e83c  0001e83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e844  0800e844  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e844  0800e844  0001e844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e848  0800e848  0001e848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800e84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  200000e0  0800e92c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  0800e92c  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e811  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005592  00000000  00000000  0004e921  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002390  00000000  00000000  00053eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  00056248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a7fc  00000000  00000000  00058398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000202c6  00000000  00000000  00082b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb8e9  00000000  00000000  000a2e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009948  00000000  00000000  0018e7c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c8d8 	.word	0x0800c8d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800c8d8 	.word	0x0800c8d8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f002 fc7a 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f840 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb62 	bl	8000bec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000528:	f000 f900 	bl	800072c <MX_ADC1_Init>
  MX_DAC_Init();
 800052c:	f000 f950 	bl	80007d0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000530:	f000 f978 	bl	8000824 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000534:	f000 f9ae 	bl	8000894 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000538:	f000 fa16 	bl	8000968 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800053c:	f000 fc96 	bl	8000e6c <MX_FSMC_Init>
  MX_I2S2_Init();
 8000540:	f000 fa76 	bl	8000a30 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000544:	f000 faa2 	bl	8000a8c <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000548:	f000 facc 	bl	8000ae4 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800054c:	f000 fafa 	bl	8000b44 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000550:	f000 fb22 	bl	8000b98 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000554:	f00b fdbc 	bl	800c0d0 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8000558:	f000 fa3c 	bl	80009d4 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800055c:	f000 f8c2 	bl	80006e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // LCD Setup
   BSP_LCD_Init();
 8000560:	f002 f95d 	bl	800281e <BSP_LCD_Init>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000564:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000568:	f002 fa18 	bl	800299c <BSP_LCD_Clear>

   BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f001 ffa0 	bl	80024b4 <BSP_PB_Init>

   BSP_LCD_SetFont(&Font24);
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x84>)
 8000576:	f002 fa01 	bl	800297c <BSP_LCD_SetFont>

   BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800057a:	f24a 1045 	movw	r0, #41285	; 0xa145
 800057e:	f002 f9dd 	bl	800293c <BSP_LCD_SetTextColor>

   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000582:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000586:	f002 f9e9 	bl	800295c <BSP_LCD_SetBackColor>

   BSP_LCD_DisplayStringAt(100, 100, (uint8_t*)"XO", LEFT_MODE);
 800058a:	2303      	movs	r3, #3
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <main+0x88>)
 800058e:	2164      	movs	r1, #100	; 0x64
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f002 fa63 	bl	8002a5c <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000596:	f00b fdc1 	bl	800c11c <MX_USB_HOST_Process>
 800059a:	e7fc      	b.n	8000596 <main+0x7e>
 800059c:	20000044 	.word	0x20000044
 80005a0:	0800c8f0 	.word	0x0800c8f0

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0aa      	sub	sp, #168	; 0xa8
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00c f8ce 	bl	800c754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2258      	movs	r2, #88	; 0x58
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00c f8bf 	bl	800c754 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <SystemClock_Config+0x138>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	4a3f      	ldr	r2, [pc, #252]	; (80006dc <SystemClock_Config+0x138>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <SystemClock_Config+0x138>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <SystemClock_Config+0x13c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <SystemClock_Config+0x13c>)
 80005fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <SystemClock_Config+0x13c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000612:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000616:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000632:	230f      	movs	r3, #15
 8000634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000638:	2390      	movs	r3, #144	; 0x90
 800063a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000644:	2305      	movs	r3, #5
 8000646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000654:	4618      	mov	r0, r3
 8000656:	f006 fd97 	bl	8007188 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000660:	f000 fcb6 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f005 ffda 	bl	8006638 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800068a:	f000 fca1 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800068e:	f240 1371 	movw	r3, #369	; 0x171
 8000692:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000694:	2332      	movs	r3, #50	; 0x32
 8000696:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000698:	230c      	movs	r3, #12
 800069a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006b2:	2300      	movs	r3, #0
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80006ba:	2300      	movs	r3, #0
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 f984 	bl	80069d0 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80006ce:	f000 fc7f 	bl	8000fd0 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	37a8      	adds	r7, #168	; 0xa8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2007      	movs	r0, #7
 80006ee:	f002 ff72 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006f2:	2007      	movs	r0, #7
 80006f4:	f002 ff8b 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2017      	movs	r0, #23
 80006fe:	f002 ff6a 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000702:	2017      	movs	r0, #23
 8000704:	f002 ff83 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2028      	movs	r0, #40	; 0x28
 800070e:	f002 ff62 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000712:	2028      	movs	r0, #40	; 0x28
 8000714:	f002 ff7b 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2006      	movs	r0, #6
 800071e:	f002 ff5a 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000722:	2006      	movs	r0, #6
 8000724:	f002 ff73 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_ADC1_Init+0x98>)
 800076c:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa0>)
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_ADC1_Init+0x98>)
 800078c:	f002 fbd6 	bl	8002f3c <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fc1b 	bl	8000fd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800079a:	230a      	movs	r3, #10
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_ADC1_Init+0x98>)
 80007ac:	f002 fc0a 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007b6:	f000 fc0b 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002e8 	.word	0x200002e8
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_DAC_Init+0x4c>)
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_DAC_Init+0x50>)
 80007e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_DAC_Init+0x4c>)
 80007e6:	f002 ff2c 	bl	8003642 <HAL_DAC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007f0:	f000 fbee 	bl	8000fd0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_DAC_Init+0x4c>)
 8000804:	f002 ff3f 	bl	8003686 <HAL_DAC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800080e:	f000 fbdf 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000330 	.word	0x20000330
 8000820:	40007400 	.word	0x40007400

08000824 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_DFSDM1_Init+0x68>)
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <MX_DFSDM1_Init+0x6c>)
 800082c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000830:	2201      	movs	r2, #1
 8000832:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_DFSDM1_Init+0x68>)
 800083c:	2202      	movs	r2, #2
 800083e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_DFSDM1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000854:	2202      	movs	r2, #2
 8000856:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DFSDM1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000866:	2201      	movs	r2, #1
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_DFSDM1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000878:	f002 ff52 	bl	8003720 <HAL_DFSDM_ChannelInit>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000882:	f000 fba5 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000015c 	.word	0x2000015c
 8000890:	40016020 	.word	0x40016020

08000894 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_DFSDM2_Init+0xc8>)
 800089c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008e6:	481c      	ldr	r0, [pc, #112]	; (8000958 <MX_DFSDM2_Init+0xc4>)
 80008e8:	f002 ff1a 	bl	8003720 <HAL_DFSDM_ChannelInit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fb6d 	bl	8000fd0 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <MX_DFSDM2_Init+0xd0>)
 80008fa:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 80008fe:	2201      	movs	r2, #1
 8000900:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 800090a:	2202      	movs	r2, #2
 800090c:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000922:	2202      	movs	r2, #2
 8000924:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000934:	2201      	movs	r2, #1
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_DFSDM2_Init+0xcc>)
 8000946:	f002 feeb 	bl	8003720 <HAL_DFSDM_ChannelInit>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000950:	f000 fb3e 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200002b0 	.word	0x200002b0
 800095c:	40016420 	.word	0x40016420
 8000960:	200001e8 	.word	0x200001e8
 8000964:	400164e0 	.word	0x400164e0

08000968 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_FMPI2C1_Init+0x64>)
 8000970:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <MX_FMPI2C1_Init+0x68>)
 8000976:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 8000980:	2201      	movs	r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 80009a4:	f003 f810 	bl	80039c8 <HAL_FMPI2C_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80009ae:	f000 fb0f 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_FMPI2C1_Init+0x60>)
 80009b6:	f003 f896 	bl	8003ae6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f000 fb06 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000344 	.word	0x20000344
 80009cc:	40006000 	.word	0x40006000
 80009d0:	00303d5b 	.word	0x00303d5b

080009d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_I2C2_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_I2C2_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a12:	f004 ff73 	bl	80058fc <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 fad8 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000194 	.word	0x20000194
 8000a28:	40005800 	.word	0x40005800
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <MX_I2S2_Init+0x58>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2S2_Init+0x54>)
 8000a72:	f005 f87b 	bl	8005b6c <HAL_I2S_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a7c:	f000 faa8 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200004a4 	.word	0x200004a4
 8000a88:	40003800 	.word	0x40003800

08000a8c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_QUADSPI_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ac8:	f005 fcf4 	bl	80064b4 <HAL_QSPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 fa7d 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200004ec 	.word	0x200004ec
 8000ae0:	a0001000 	.word	0xa0001000

08000ae4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_SDIO_SD_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000b14:	f006 fd7a 	bl	800760c <HAL_SD_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b1e:	f000 fa57 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_SDIO_SD_Init+0x58>)
 8000b28:	f006 ffa4 	bl	8007a74 <HAL_SD_ConfigWideBusOperation>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 fa4d 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e0 	.word	0x200003e0
 8000b40:	40012c00 	.word	0x40012c00

08000b44 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_UART10_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_UART10_Init+0x4c>)
 8000b7c:	f007 faf6 	bl	800816c <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 fa23 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000220 	.word	0x20000220
 8000b94:	40011c00 	.word	0x40011c00

08000b98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART6_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bd0:	f007 facc 	bl	800816c <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f000 f9f9 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000464 	.word	0x20000464
 8000be8:	40011400 	.word	0x40011400

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
 8000c06:	4b91      	ldr	r3, [pc, #580]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a90      	ldr	r2, [pc, #576]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b8e      	ldr	r3, [pc, #568]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	623b      	str	r3, [r7, #32]
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	4b8a      	ldr	r3, [pc, #552]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a89      	ldr	r2, [pc, #548]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b87      	ldr	r3, [pc, #540]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b83      	ldr	r3, [pc, #524]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a82      	ldr	r2, [pc, #520]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b80      	ldr	r3, [pc, #512]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	4b7c      	ldr	r3, [pc, #496]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a7b      	ldr	r2, [pc, #492]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b75      	ldr	r3, [pc, #468]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a74      	ldr	r2, [pc, #464]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b72      	ldr	r3, [pc, #456]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b6e      	ldr	r3, [pc, #440]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a6d      	ldr	r2, [pc, #436]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a66      	ldr	r2, [pc, #408]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b64      	ldr	r3, [pc, #400]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a5f      	ldr	r2, [pc, #380]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <MX_GPIO_Init+0x260>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2138      	movs	r1, #56	; 0x38
 8000ce6:	485a      	ldr	r0, [pc, #360]	; (8000e50 <MX_GPIO_Init+0x264>)
 8000ce8:	f003 f8da 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2120      	movs	r1, #32
 8000cf0:	4858      	ldr	r0, [pc, #352]	; (8000e54 <MX_GPIO_Init+0x268>)
 8000cf2:	f003 f8d5 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000cfc:	4856      	ldr	r0, [pc, #344]	; (8000e58 <MX_GPIO_Init+0x26c>)
 8000cfe:	f003 f8cf 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d08:	4854      	ldr	r0, [pc, #336]	; (8000e5c <MX_GPIO_Init+0x270>)
 8000d0a:	f003 f8c9 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d0e:	2338      	movs	r3, #56	; 0x38
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	484a      	ldr	r0, [pc, #296]	; (8000e50 <MX_GPIO_Init+0x264>)
 8000d26:	f002 ff29 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000d2a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x274>)
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4849      	ldr	r0, [pc, #292]	; (8000e64 <MX_GPIO_Init+0x278>)
 8000d40:	f002 ff1c 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000d44:	2302      	movs	r3, #2
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <MX_GPIO_Init+0x274>)
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	483f      	ldr	r0, [pc, #252]	; (8000e54 <MX_GPIO_Init+0x268>)
 8000d58:	f002 ff10 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000d5c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <MX_GPIO_Init+0x274>)
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483d      	ldr	r0, [pc, #244]	; (8000e68 <MX_GPIO_Init+0x27c>)
 8000d72:	f002 ff03 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d76:	2320      	movs	r3, #32
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4831      	ldr	r0, [pc, #196]	; (8000e54 <MX_GPIO_Init+0x268>)
 8000d8e:	f002 fef5 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	482a      	ldr	r0, [pc, #168]	; (8000e58 <MX_GPIO_Init+0x26c>)
 8000db0:	f002 fee4 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000db4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_GPIO_Init+0x26c>)
 8000dce:	f002 fed5 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <MX_GPIO_Init+0x270>)
 8000dec:	f002 fec6 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_GPIO_Init+0x274>)
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_GPIO_Init+0x270>)
 8000e06:	f002 feb9 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e0a:	2330      	movs	r3, #48	; 0x30
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_GPIO_Init+0x26c>)
 8000e26:	f002 fea9 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_GPIO_Init+0x274>)
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x26c>)
 8000e40:	f002 fe9c 	bl	8003b7c <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	10110000 	.word	0x10110000
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40020000 	.word	0x40020000

08000e6c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e84:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000e86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000e8e:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <MX_FSMC_Init+0x15c>)
 8000e90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e98:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eb0:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ebc:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000eca:	4b3e      	ldr	r3, [pc, #248]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed0:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ef6:	23ff      	movs	r3, #255	; 0xff
 8000ef8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000efa:	230f      	movs	r3, #15
 8000efc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000efe:	2310      	movs	r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f02:	2311      	movs	r3, #17
 8000f04:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <MX_FSMC_Init+0x158>)
 8000f12:	f007 f8e7 	bl	80080e4 <HAL_SRAM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000f1c:	f000 f858 	bl	8000fd0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f22:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f26:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <MX_FSMC_Init+0x15c>)
 8000f2c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f42:	2210      	movs	r2, #16
 8000f44:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f96:	230f      	movs	r3, #15
 8000f98:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f9e:	2311      	movs	r3, #17
 8000fa0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_FSMC_Init+0x160>)
 8000fae:	f007 f899 	bl	80080e4 <HAL_SRAM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8000fb8:	f000 f80a 	bl	8000fd0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000260 	.word	0x20000260
 8000fc8:	a0000104 	.word	0xa0000104
 8000fcc:	20000390 	.word	0x20000390

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_MspInit+0x4c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_ADC_MspInit+0xe4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d15b      	bne.n	800110a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_ADC_MspInit+0xe8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80010c2:	2311      	movs	r3, #17
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4811      	ldr	r0, [pc, #68]	; (800111c <HAL_ADC_MspInit+0xec>)
 80010d6:	f002 fd51 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80010da:	2326      	movs	r3, #38	; 0x26
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0xf0>)
 80010ee:	f002 fd45 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <HAL_ADC_MspInit+0xf4>)
 8001106:	f002 fd39 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	; 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400

08001128 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_DAC_MspInit+0x7c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d127      	bne.n	800119a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 8001154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_DAC_MspInit+0x80>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_DAC_MspInit+0x84>)
 8001196:	f002 fcf1 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40007400 	.word	0x40007400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a77      	ldr	r2, [pc, #476]	; (80013ac <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00e      	beq.n	80011f0 <HAL_DFSDM_ChannelMspInit+0x40>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a76      	ldr	r2, [pc, #472]	; (80013b0 <HAL_DFSDM_ChannelMspInit+0x200>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d009      	beq.n	80011f0 <HAL_DFSDM_ChannelMspInit+0x40>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a74      	ldr	r2, [pc, #464]	; (80013b4 <HAL_DFSDM_ChannelMspInit+0x204>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d004      	beq.n	80011f0 <HAL_DFSDM_ChannelMspInit+0x40>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <HAL_DFSDM_ChannelMspInit+0x208>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d154      	bne.n	800129a <HAL_DFSDM_ChannelMspInit+0xea>
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x20c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d150      	bne.n	800129a <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	4a6f      	ldr	r2, [pc, #444]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001206:	6453      	str	r3, [r2, #68]	; 0x44
 8001208:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001210:	623b      	str	r3, [r7, #32]
 8001212:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a61      	ldr	r2, [pc, #388]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800125e:	2306      	movs	r3, #6
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4856      	ldr	r0, [pc, #344]	; (80013c4 <HAL_DFSDM_ChannelMspInit+0x214>)
 800126a:	f002 fc87 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800127e:	2306      	movs	r3, #6
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <HAL_DFSDM_ChannelMspInit+0x218>)
 800128a:	f002 fc77 	bl	8003b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001296:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001298:	e084      	b.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d07f      	beq.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a41      	ldr	r2, [pc, #260]	; (80013b0 <HAL_DFSDM_ChannelMspInit+0x200>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d07a      	beq.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_DFSDM_ChannelMspInit+0x204>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d075      	beq.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a3e      	ldr	r2, [pc, #248]	; (80013b8 <HAL_DFSDM_ChannelMspInit+0x208>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d070      	beq.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d16c      	bne.n	80013a4 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800134a:	2307      	movs	r3, #7
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001356:	f002 fc11 	bl	8003b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800135a:	2304      	movs	r3, #4
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800136a:	2303      	movs	r3, #3
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001376:	f002 fc01 	bl	8003b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800138a:	2306      	movs	r3, #6
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001396:	f002 fbf1 	bl	8003b7c <HAL_GPIO_Init>
  DFSDM2_Init++;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_DFSDM_ChannelMspInit+0x21c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	3738      	adds	r7, #56	; 0x38
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40016000 	.word	0x40016000
 80013b0:	40016020 	.word	0x40016020
 80013b4:	40016040 	.word	0x40016040
 80013b8:	40016060 	.word	0x40016060
 80013bc:	200000fc 	.word	0x200000fc
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	20000100 	.word	0x20000100
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_FMPI2C_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001416:	2312      	movs	r3, #18
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141a:	2301      	movs	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001422:	2304      	movs	r3, #4
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <HAL_FMPI2C_MspInit+0x8c>)
 800142e:	f002 fba5 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_FMPI2C_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40006000 	.word	0x40006000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800

08001464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_I2C_MspInit+0x84>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12c      	bne.n	80014e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_I2C_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_I2C_MspInit+0x88>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_I2C_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b4:	2304      	movs	r3, #4
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_I2C_MspInit+0x8c>)
 80014c0:	f002 fb5c 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005800 	.word	0x40005800
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400

080014f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_I2S_MspInit+0x15c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	f040 8097 	bne.w	8001646 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
 8001560:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	4a37      	ldr	r2, [pc, #220]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	4a30      	ldr	r2, [pc, #192]	; (8001654 <HAL_I2S_MspInit+0x160>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6313      	str	r3, [r2, #48]	; 0x30
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_I2S_MspInit+0x160>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80015a4:	2304      	movs	r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80015b4:	2306      	movs	r3, #6
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4826      	ldr	r0, [pc, #152]	; (8001658 <HAL_I2S_MspInit+0x164>)
 80015c0:	f002 fadc 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80015c4:	2308      	movs	r3, #8
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015d4:	2305      	movs	r3, #5
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	481e      	ldr	r0, [pc, #120]	; (8001658 <HAL_I2S_MspInit+0x164>)
 80015e0:	f002 facc 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80015e4:	2308      	movs	r3, #8
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f4:	2305      	movs	r3, #5
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4817      	ldr	r0, [pc, #92]	; (800165c <HAL_I2S_MspInit+0x168>)
 8001600:	f002 fabc 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001604:	2308      	movs	r3, #8
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001614:	2305      	movs	r3, #5
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <HAL_I2S_MspInit+0x16c>)
 8001620:	f002 faac 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001636:	2305      	movs	r3, #5
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <HAL_I2S_MspInit+0x170>)
 8001642:	f002 fa9b 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	; 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40003800 	.word	0x40003800
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a56      	ldr	r2, [pc, #344]	; (80017e0 <HAL_QSPI_MspInit+0x178>)
 8001686:	4293      	cmp	r3, r2
 8001688:	f040 80a6 	bne.w	80017d8 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6393      	str	r3, [r2, #56]	; 0x38
 800169c:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 800169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4a37      	ldr	r2, [pc, #220]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6313      	str	r3, [r2, #48]	; 0x30
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 8001722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_QSPI_MspInit+0x17c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001734:	2304      	movs	r3, #4
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001744:	2309      	movs	r3, #9
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4826      	ldr	r0, [pc, #152]	; (80017e8 <HAL_QSPI_MspInit+0x180>)
 8001750:	f002 fa14 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001766:	230a      	movs	r3, #10
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <HAL_QSPI_MspInit+0x184>)
 8001772:	f002 fa03 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001786:	2309      	movs	r3, #9
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <HAL_QSPI_MspInit+0x188>)
 8001792:	f002 f9f3 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017a8:	2309      	movs	r3, #9
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <HAL_QSPI_MspInit+0x18c>)
 80017b4:	f002 f9e2 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c8:	230a      	movs	r3, #10
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_QSPI_MspInit+0x190>)
 80017d4:	f002 f9d2 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	a0001000 	.word	0xa0001000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021800 	.word	0x40021800

080017fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_SD_MspInit+0xc0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d14a      	bne.n	80018b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_SD_MspInit+0xc4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001882:	230c      	movs	r3, #12
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_SD_MspInit+0xc8>)
 800188e:	f002 f975 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001892:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001896:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018a4:	230c      	movs	r3, #12
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <HAL_SD_MspInit+0xcc>)
 80018b0:	f002 f964 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020800 	.word	0x40020800

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <HAL_UART_MspInit+0xec>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12d      	bne.n	800194a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_UART_MspInit+0xf0>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a31      	ldr	r2, [pc, #196]	; (80019bc <HAL_UART_MspInit+0xf0>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_UART_MspInit+0xf0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001938:	230b      	movs	r3, #11
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	481f      	ldr	r0, [pc, #124]	; (80019c0 <HAL_UART_MspInit+0xf4>)
 8001944:	f002 f91a 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001948:	e031      	b.n	80019ae <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_UART_MspInit+0xf8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d12c      	bne.n	80019ae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_UART_MspInit+0xf0>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_UART_MspInit+0xf0>)
 800195e:	f043 0320 	orr.w	r3, r3, #32
 8001962:	6453      	str	r3, [r2, #68]	; 0x44
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_UART_MspInit+0xf0>)
 800197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_UART_MspInit+0xf0>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800198c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800199e:	2308      	movs	r3, #8
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HAL_UART_MspInit+0xf4>)
 80019aa:	f002 f8e7 	bl	8003b7c <HAL_GPIO_Init>
}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	; 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40011c00 	.word	0x40011c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40011400 	.word	0x40011400

080019c8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <HAL_FSMC_MspInit+0xc8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d151      	bne.n	8001a88 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_FSMC_MspInit+0xc8>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_FSMC_MspInit+0xcc>)
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_FSMC_MspInit+0xcc>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6393      	str	r3, [r2, #56]	; 0x38
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_FSMC_MspInit+0xcc>)
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a06:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a0a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a18:	230c      	movs	r3, #12
 8001a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481d      	ldr	r0, [pc, #116]	; (8001a98 <HAL_FSMC_MspInit+0xd0>)
 8001a22:	f002 f8ab 	bl	8003b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a26:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a2a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <HAL_FSMC_MspInit+0xd4>)
 8001a42:	f002 f89b 	bl	8003b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001a46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a4a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480f      	ldr	r0, [pc, #60]	; (8001aa0 <HAL_FSMC_MspInit+0xd8>)
 8001a62:	f002 f88b 	bl	8003b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001a66:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a6a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a78:	230c      	movs	r3, #12
 8001a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_FSMC_MspInit+0xdc>)
 8001a82:	f002 f87b 	bl	8003b7c <HAL_GPIO_Init>
 8001a86:	e000      	b.n	8001a8a <HAL_FSMC_MspInit+0xc2>
    return;
 8001a88:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000104 	.word	0x20000104
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ab0:	f7ff ff8a 	bl	80019c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f001 f9d2 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f002 f9d9 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f002 f9d2 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b38:	2040      	movs	r0, #64	; 0x40
 8001b3a:	f002 f9cb 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b3e:	2080      	movs	r0, #128	; 0x80
 8001b40:	f002 f9c8 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b48:	f002 f9c4 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b58:	f002 f9bc 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b60:	f002 f9b8 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b68:	f002 f9b4 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <OTG_FS_IRQHandler+0x10>)
 8001b76:	f002 fc5f 	bl	8004438 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000920 	.word	0x20000920

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f00a fd94 	bl	800c6e0 <__errno>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	230c      	movs	r3, #12
 8001bbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20050000 	.word	0x20050000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20000108 	.word	0x20000108
 8001bec:	20000be8 	.word	0x20000be8

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <SystemInit+0x28>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <SystemInit+0x28>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0x28>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c22:	e003      	b.n	8001c2c <LoopCopyDataInit>

08001c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c2a:	3104      	adds	r1, #4

08001c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c34:	d3f6      	bcc.n	8001c24 <CopyDataInit>
  ldr  r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c38:	e002      	b.n	8001c40 <LoopFillZerobss>

08001c3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c3c:	f842 3b04 	str.w	r3, [r2], #4

08001c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c44:	d3f9      	bcc.n	8001c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c46:	f7ff ffd3 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f00a fd4f 	bl	800c6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7fe fc63 	bl	8000518 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c54:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001c58:	0800e84c 	.word	0x0800e84c
  ldr  r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c60:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001c64:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001c68:	20000be8 	.word	0x20000be8

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>

08001c6e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001c74:	f000 fd6e 	bl	8002754 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2010      	movs	r0, #16
 8001c7e:	f000 f9e4 	bl	800204a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c82:	200a      	movs	r0, #10
 8001c84:	f000 fd8d 	bl	80027a2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f000 f9dc 	bl	800204a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001c92:	20c8      	movs	r0, #200	; 0xc8
 8001c94:	f000 fd85 	bl	80027a2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2011      	movs	r0, #17
 8001c9e:	f000 f9d4 	bl	800204a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001ca2:	2078      	movs	r0, #120	; 0x78
 8001ca4:	f000 fd7d 	bl	80027a2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001ca8:	2300      	movs	r3, #0
 8001caa:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001cac:	463b      	mov	r3, r7
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	2036      	movs	r0, #54	; 0x36
 8001cb4:	f000 f9c9 	bl	800204a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001cb8:	2305      	movs	r3, #5
 8001cba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	203a      	movs	r0, #58	; 0x3a
 8001cc4:	f000 f9c1 	bl	800204a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2021      	movs	r0, #33	; 0x21
 8001cce:	f000 f9bc 	bl	800204a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001cde:	23ef      	movs	r3, #239	; 0xef
 8001ce0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	202a      	movs	r0, #42	; 0x2a
 8001cea:	f000 f9ae 	bl	800204a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001cfa:	23ef      	movs	r3, #239	; 0xef
 8001cfc:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2204      	movs	r2, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	202b      	movs	r0, #43	; 0x2b
 8001d06:	f000 f9a0 	bl	800204a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001d0e:	230c      	movs	r3, #12
 8001d10:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001d16:	2333      	movs	r3, #51	; 0x33
 8001d18:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001d1a:	2333      	movs	r3, #51	; 0x33
 8001d1c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2205      	movs	r2, #5
 8001d22:	4619      	mov	r1, r3
 8001d24:	20b2      	movs	r0, #178	; 0xb2
 8001d26:	f000 f990 	bl	800204a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001d2a:	2335      	movs	r3, #53	; 0x35
 8001d2c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2201      	movs	r2, #1
 8001d32:	4619      	mov	r1, r3
 8001d34:	20b7      	movs	r0, #183	; 0xb7
 8001d36:	f000 f988 	bl	800204a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2201      	movs	r2, #1
 8001d42:	4619      	mov	r1, r3
 8001d44:	20bb      	movs	r0, #187	; 0xbb
 8001d46:	f000 f980 	bl	800204a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001d4a:	232c      	movs	r3, #44	; 0x2c
 8001d4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	20c0      	movs	r0, #192	; 0xc0
 8001d56:	f000 f978 	bl	800204a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001d5e:	23c3      	movs	r3, #195	; 0xc3
 8001d60:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001d62:	463b      	mov	r3, r7
 8001d64:	2202      	movs	r2, #2
 8001d66:	4619      	mov	r1, r3
 8001d68:	20c2      	movs	r0, #194	; 0xc2
 8001d6a:	f000 f96e 	bl	800204a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001d6e:	2320      	movs	r3, #32
 8001d70:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001d72:	463b      	mov	r3, r7
 8001d74:	2201      	movs	r2, #1
 8001d76:	4619      	mov	r1, r3
 8001d78:	20c4      	movs	r0, #196	; 0xc4
 8001d7a:	f000 f966 	bl	800204a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001d7e:	230f      	movs	r3, #15
 8001d80:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001d82:	463b      	mov	r3, r7
 8001d84:	2201      	movs	r2, #1
 8001d86:	4619      	mov	r1, r3
 8001d88:	20c6      	movs	r0, #198	; 0xc6
 8001d8a:	f000 f95e 	bl	800204a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001d8e:	23a4      	movs	r3, #164	; 0xa4
 8001d90:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001d92:	23a1      	movs	r3, #161	; 0xa1
 8001d94:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8001d96:	463b      	mov	r3, r7
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	20d0      	movs	r0, #208	; 0xd0
 8001d9e:	f000 f954 	bl	800204a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001da2:	23d0      	movs	r3, #208	; 0xd0
 8001da4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001da6:	2308      	movs	r3, #8
 8001da8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001daa:	2311      	movs	r3, #17
 8001dac:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001dae:	2308      	movs	r3, #8
 8001db0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001db2:	230c      	movs	r3, #12
 8001db4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001db6:	2315      	movs	r3, #21
 8001db8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001dba:	2339      	movs	r3, #57	; 0x39
 8001dbc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001dbe:	2333      	movs	r3, #51	; 0x33
 8001dc0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001dc2:	2350      	movs	r3, #80	; 0x50
 8001dc4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001dc6:	2336      	movs	r3, #54	; 0x36
 8001dc8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001dca:	2313      	movs	r3, #19
 8001dcc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001dce:	2314      	movs	r3, #20
 8001dd0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001dd2:	2329      	movs	r3, #41	; 0x29
 8001dd4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001dd6:	232d      	movs	r3, #45	; 0x2d
 8001dd8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001dda:	463b      	mov	r3, r7
 8001ddc:	220e      	movs	r2, #14
 8001dde:	4619      	mov	r1, r3
 8001de0:	20e0      	movs	r0, #224	; 0xe0
 8001de2:	f000 f932 	bl	800204a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001de6:	23d0      	movs	r3, #208	; 0xd0
 8001de8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001dea:	2308      	movs	r3, #8
 8001dec:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001dee:	2310      	movs	r3, #16
 8001df0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001df2:	2308      	movs	r3, #8
 8001df4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001df6:	2306      	movs	r3, #6
 8001df8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001dfe:	2339      	movs	r3, #57	; 0x39
 8001e00:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001e02:	2344      	movs	r3, #68	; 0x44
 8001e04:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001e06:	2351      	movs	r3, #81	; 0x51
 8001e08:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001e0a:	230b      	movs	r3, #11
 8001e0c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001e0e:	2316      	movs	r3, #22
 8001e10:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001e12:	2314      	movs	r3, #20
 8001e14:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001e16:	232f      	movs	r3, #47	; 0x2f
 8001e18:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001e1a:	2331      	movs	r3, #49	; 0x31
 8001e1c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001e1e:	463b      	mov	r3, r7
 8001e20:	220e      	movs	r2, #14
 8001e22:	4619      	mov	r1, r3
 8001e24:	20e1      	movs	r0, #225	; 0xe1
 8001e26:	f000 f910 	bl	800204a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001e2a:	f000 f847 	bl	8001ebc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001e2e:	2300      	movs	r3, #0
 8001e30:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001e32:	463b      	mov	r3, r7
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	2035      	movs	r0, #53	; 0x35
 8001e3a:	f000 f906 	bl	800204a <ST7789H2_WriteReg>

}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001e54:	2300      	movs	r3, #0
 8001e56:	723b      	strb	r3, [r7, #8]
 8001e58:	e025      	b.n	8001ea6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d120      	bne.n	8001ea2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001e6c:	23f0      	movs	r3, #240	; 0xf0
 8001e6e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001e74:	2300      	movs	r3, #0
 8001e76:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	4619      	mov	r1, r3
 8001e80:	2033      	movs	r0, #51	; 0x33
 8001e82:	f000 f8e2 	bl	800204a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001e8a:	2350      	movs	r3, #80	; 0x50
 8001e8c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2202      	movs	r2, #2
 8001e94:	4619      	mov	r1, r3
 8001e96:	2037      	movs	r0, #55	; 0x37
 8001e98:	f000 f8d7 	bl	800204a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	723b      	strb	r3, [r7, #8]
 8001ea0:	e001      	b.n	8001ea6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001ea2:	2360      	movs	r3, #96	; 0x60
 8001ea4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4619      	mov	r1, r3
 8001eae:	2036      	movs	r0, #54	; 0x36
 8001eb0:	f000 f8cb 	bl	800204a <ST7789H2_WriteReg>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2029      	movs	r0, #41	; 0x29
 8001ec6:	f000 f8c0 	bl	800204a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2011      	movs	r0, #17
 8001ed0:	f000 f8bb 	bl	800204a <ST7789H2_WriteReg>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001ede:	23fe      	movs	r3, #254	; 0xfe
 8001ee0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	20bd      	movs	r0, #189	; 0xbd
 8001eea:	f000 f8ae 	bl	800204a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2010      	movs	r0, #16
 8001ef4:	f000 f8a9 	bl	800204a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001ef8:	200a      	movs	r0, #10
 8001efa:	f000 fc52 	bl	80027a2 <LCD_IO_Delay>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001f0a:	23f0      	movs	r3, #240	; 0xf0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001f1a:	23f0      	movs	r3, #240	; 0xf0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f2a:	f000 fc13 	bl	8002754 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001f2e:	2004      	movs	r0, #4
 8001f30:	f000 f8ad 	bl	800208e <ST7789H2_ReadReg>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29b      	uxth	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3b11      	subs	r3, #17
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	202a      	movs	r0, #42	; 0x2a
 8001f6e:	f000 f86c 	bl	800204a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001f76:	88bb      	ldrh	r3, [r7, #4]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3b11      	subs	r3, #17
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	202b      	movs	r0, #43	; 0x2b
 8001f94:	f000 f859 	bl	800204a <ST7789H2_WriteReg>
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
 8001faa:	460b      	mov	r3, r1
 8001fac:	80bb      	strh	r3, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffbf 	bl	8001f3c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	202c      	movs	r0, #44	; 0x2c
 8001fc4:	f000 f841 	bl	800204a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbc8 	bl	8002760 <LCD_IO_WriteData>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001fe8:	88ba      	ldrh	r2, [r7, #4]
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffa4 	bl	8001f3c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001ff4:	88ba      	ldrh	r2, [r7, #4]
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f9bd 	bl	800237a <ST7789H2_ReadPixel_rgb888>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	733a      	strb	r2, [r7, #12]
 8002006:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800200a:	737a      	strb	r2, [r7, #13]
 800200c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002010:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002018:	7b7b      	ldrb	r3, [r7, #13]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	b29b      	uxth	r3, r3
 8002028:	02db      	lsls	r3, r3, #11
 800202a:	b29a      	uxth	r2, r3
 800202c:	7dbb      	ldrb	r3, [r7, #22]
 800202e:	b29b      	uxth	r3, r3
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29a      	uxth	r2, r3
 8002038:	7d7b      	ldrb	r3, [r7, #21]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4413      	add	r3, r2
 800203e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002040:	8a7b      	ldrh	r3, [r7, #18]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	6039      	str	r1, [r7, #0]
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	4613      	mov	r3, r2
 8002058:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fb8c 	bl	800277a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e00a      	b.n	800207e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fb74 	bl	8002760 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3f0      	bcc.n	8002068 <ST7789H2_WriteReg+0x1e>
  }
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fb6d 	bl	800277a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80020a0:	f000 fb78 	bl	8002794 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80020a4:	f000 fb76 	bl	8002794 <LCD_IO_ReadData>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b2db      	uxtb	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80020b4:	b490      	push	{r4, r7}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4604      	mov	r4, r0
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	80fb      	strh	r3, [r7, #6]
 80020c6:	4603      	mov	r3, r0
 80020c8:	80bb      	strh	r3, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	807b      	strh	r3, [r7, #2]
 80020ce:	4613      	mov	r3, r2
 80020d0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2bef      	cmp	r3, #239	; 0xef
 80020d6:	d803      	bhi.n	80020e0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <ST7789H2_SetDisplayWindow+0x94>)
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	8013      	strh	r3, [r2, #0]
 80020de:	e002      	b.n	80020e6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <ST7789H2_SetDisplayWindow+0x94>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	d803      	bhi.n	80020f4 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <ST7789H2_SetDisplayWindow+0x98>)
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	8013      	strh	r3, [r2, #0]
 80020f2:	e002      	b.n	80020fa <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <ST7789H2_SetDisplayWindow+0x98>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	4413      	add	r3, r2
 8002100:	2bf0      	cmp	r3, #240	; 0xf0
 8002102:	dc08      	bgt.n	8002116 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <ST7789H2_SetDisplayWindow+0x9c>)
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	e002      	b.n	800211c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <ST7789H2_SetDisplayWindow+0x9c>)
 8002118:	22ef      	movs	r2, #239	; 0xef
 800211a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800211c:	883a      	ldrh	r2, [r7, #0]
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	2bf0      	cmp	r3, #240	; 0xf0
 8002124:	dc08      	bgt.n	8002138 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002126:	883a      	ldrh	r2, [r7, #0]
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <ST7789H2_SetDisplayWindow+0xa0>)
 8002134:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002136:	e002      	b.n	800213e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <ST7789H2_SetDisplayWindow+0xa0>)
 800213a:	22ef      	movs	r2, #239	; 0xef
 800213c:	801a      	strh	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bc90      	pop	{r4, r7}
 8002146:	4770      	bx	lr
 8002148:	2000010c 	.word	0x2000010c
 800214c:	2000010e 	.word	0x2000010e
 8002150:	2000003c 	.word	0x2000003c
 8002154:	2000003e 	.word	0x2000003e

08002158 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	80bb      	strh	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fedb 	bl	8001f3c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	202c      	movs	r0, #44	; 0x2c
 800218c:	f7ff ff5d 	bl	800204a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002190:	2300      	movs	r3, #0
 8002192:	81fb      	strh	r3, [r7, #14]
 8002194:	e006      	b.n	80021a4 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fae1 	bl	8002760 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	3301      	adds	r3, #1
 80021a2:	81fb      	strh	r3, [r7, #14]
 80021a4:	89fa      	ldrh	r2, [r7, #14]
 80021a6:	883b      	ldrh	r3, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3f4      	bcc.n	8002196 <ST7789H2_DrawHLine+0x3e>
  }  
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	80fb      	strh	r3, [r7, #6]
 80021c6:	4603      	mov	r3, r0
 80021c8:	80bb      	strh	r3, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	807b      	strh	r3, [r7, #2]
 80021ce:	4613      	mov	r3, r2
 80021d0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fead 	bl	8001f3c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	202c      	movs	r0, #44	; 0x2c
 80021e8:	f7ff ff2f 	bl	800204a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	81fb      	strh	r3, [r7, #14]
 80021f0:	e00b      	b.n	800220a <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	4413      	add	r3, r2
 80021f8:	b299      	uxth	r1, r3
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fece 	bl	8001fa0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	81fb      	strh	r3, [r7, #14]
 800220a:	89fa      	ldrh	r2, [r7, #14]
 800220c:	883b      	ldrh	r3, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3ef      	bcc.n	80021f2 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
	...

0800221c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	603a      	str	r2, [r7, #0]
 8002226:	80fb      	strh	r3, [r7, #6]
 8002228:	460b      	mov	r3, r1
 800222a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <ST7789H2_DrawBitmap+0xdc>)
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <ST7789H2_DrawBitmap+0xe0>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	b29b      	uxth	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <ST7789H2_DrawBitmap+0xe4>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <ST7789H2_DrawBitmap+0xe8>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b29b      	uxth	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3302      	adds	r3, #2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	3304      	adds	r3, #4
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	461a      	mov	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	330a      	adds	r3, #10
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	461a      	mov	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4413      	add	r3, r2
 80022a0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80022a2:	88ba      	ldrh	r2, [r7, #4]
 80022a4:	89bb      	ldrh	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e01d      	b.n	80022e8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe3f 	bl	8001f3c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b299      	uxth	r1, r3
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	89fa      	ldrh	r2, [r7, #14]
 80022d6:	88f8      	ldrh	r0, [r7, #6]
 80022d8:	f000 f898 	bl	800240c <ST7789H2_DrawRGBHLine>
    nb_line++;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	88bb      	ldrh	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8dd      	bhi.n	80022ac <ST7789H2_DrawBitmap+0x90>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000003c 	.word	0x2000003c
 80022fc:	2000010c 	.word	0x2000010c
 8002300:	2000003e 	.word	0x2000003e
 8002304:	2000010e 	.word	0x2000010e

08002308 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	80fb      	strh	r3, [r7, #6]
 800231a:	4603      	mov	r3, r0
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]
 8002322:	4613      	mov	r3, r2
 8002324:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e019      	b.n	8002364 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	b29a      	uxth	r2, r3
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fdff 	bl	8001f3c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	b299      	uxth	r1, r3
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	4413      	add	r3, r2
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	88f8      	ldrh	r0, [r7, #6]
 8002354:	f000 f85a 	bl	800240c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	88ba      	ldrh	r2, [r7, #4]
 8002366:	883b      	ldrh	r3, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4293      	cmp	r3, r2
 8002370:	d3de      	bcc.n	8002330 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}

0800237a <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	460a      	mov	r2, r1
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	4613      	mov	r3, r2
 8002388:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800238a:	88ba      	ldrh	r2, [r7, #4]
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdd3 	bl	8001f3c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	202e      	movs	r0, #46	; 0x2e
 800239c:	f7ff fe55 	bl	800204a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80023a0:	f000 f9f8 	bl	8002794 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80023a4:	f000 f9f6 	bl	8002794 <LCD_IO_ReadData>
 80023a8:	4603      	mov	r3, r0
 80023aa:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80023ac:	f000 f9f2 	bl	8002794 <LCD_IO_ReadData>
 80023b0:	4603      	mov	r3, r0
 80023b2:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80023b4:	8afb      	ldrh	r3, [r7, #22]
 80023b6:	121b      	asrs	r3, r3, #8
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80023ce:	8abb      	ldrh	r3, [r7, #20]
 80023d0:	121b      	asrs	r3, r3, #8
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	f107 020c 	add.w	r2, r7, #12
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	8019      	strh	r1, [r3, #0]
 80023ea:	3302      	adds	r3, #2
 80023ec:	0c12      	lsrs	r2, r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	7c3a      	ldrb	r2, [r7, #16]
 80023f4:	f362 0307 	bfi	r3, r2, #0, #8
 80023f8:	7c7a      	ldrb	r2, [r7, #17]
 80023fa:	f362 230f 	bfi	r3, r2, #8, #8
 80023fe:	7cba      	ldrb	r2, [r7, #18]
 8002400:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	4603      	mov	r3, r0
 8002416:	81fb      	strh	r3, [r7, #14]
 8002418:	460b      	mov	r3, r1
 800241a:	81bb      	strh	r3, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	202c      	movs	r0, #44	; 0x2c
 800242e:	f7ff fe0c 	bl	800204a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e02a      	b.n	800248e <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <ST7789H2_DrawRGBHLine+0x98>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4293      	cmp	r3, r2
 8002442:	d321      	bcc.n	8002488 <ST7789H2_DrawRGBHLine+0x7c>
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <ST7789H2_DrawRGBHLine+0x9c>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	89ba      	ldrh	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d31c      	bcc.n	8002488 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <ST7789H2_DrawRGBHLine+0xa0>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4293      	cmp	r3, r2
 8002458:	d816      	bhi.n	8002488 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <ST7789H2_DrawRGBHLine+0xa4>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	89ba      	ldrh	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d811      	bhi.n	8002488 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002464:	897a      	ldrh	r2, [r7, #10]
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	4413      	add	r3, r2
 800246a:	461a      	mov	r2, r3
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f96f 	bl	8002760 <LCD_IO_WriteData>
      }      
      i++;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	3301      	adds	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	897a      	ldrh	r2, [r7, #10]
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	4413      	add	r3, r2
 8002494:	461a      	mov	r2, r3
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4293      	cmp	r3, r2
 800249a:	d3cd      	bcc.n	8002438 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000010c 	.word	0x2000010c
 80024a8:	2000010e 	.word	0x2000010e
 80024ac:	2000003c 	.word	0x2000003c
 80024b0:	2000003e 	.word	0x2000003e

080024b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <BSP_PB_Init+0xa0>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <BSP_PB_Init+0xa0>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <BSP_PB_Init+0xa0>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d111      	bne.n	800250a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80024ee:	2302      	movs	r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <BSP_PB_Init+0xa4>)
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	f107 020c 	add.w	r2, r7, #12
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fb39 	bl	8003b7c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800250a:	79bb      	ldrb	r3, [r7, #6]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d11d      	bne.n	800254c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002510:	2301      	movs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002514:	2302      	movs	r3, #2
 8002516:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <BSP_PB_Init+0xa8>)
 800251e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <BSP_PB_Init+0xa4>)
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fb24 	bl	8003b7c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002534:	2306      	movs	r3, #6
 8002536:	b25b      	sxtb	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	210f      	movs	r1, #15
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f84a 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002542:	2306      	movs	r3, #6
 8002544:	b25b      	sxtb	r3, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f861 	bl	800360e <HAL_NVIC_EnableIRQ>
  }
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	20000040 	.word	0x20000040
 800255c:	10110000 	.word	0x10110000

08002560 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	4a39      	ldr	r2, [pc, #228]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6393      	str	r3, [r2, #56]	; 0x38
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a32      	ldr	r2, [pc, #200]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <FMC_BANK3_MspInit+0xf4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80025fe:	230c      	movs	r3, #12
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002602:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002606:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	4812      	ldr	r0, [pc, #72]	; (8002658 <FMC_BANK3_MspInit+0xf8>)
 8002610:	f001 fab4 	bl	8003b7c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002614:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002618:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	480e      	ldr	r0, [pc, #56]	; (800265c <FMC_BANK3_MspInit+0xfc>)
 8002622:	f001 faab 	bl	8003b7c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002626:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800262a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	480b      	ldr	r0, [pc, #44]	; (8002660 <FMC_BANK3_MspInit+0x100>)
 8002634:	f001 faa2 	bl	8003b7c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002638:	f240 433f 	movw	r3, #1087	; 0x43f
 800263c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	4807      	ldr	r0, [pc, #28]	; (8002664 <FMC_BANK3_MspInit+0x104>)
 8002646:	f001 fa99 	bl	8003b7c <HAL_GPIO_Init>
}
 800264a:	bf00      	nop
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021000 	.word	0x40021000
 8002660:	40021400 	.word	0x40021400
 8002664:	40021800 	.word	0x40021800

08002668 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002668:	b580      	push	{r7, lr}
 800266a:	b09c      	sub	sp, #112	; 0x70
 800266c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800266e:	f7ff ff77 	bl	8002560 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002672:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002676:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <FMC_BANK3_Init+0x8c>)
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 800267c:	2303      	movs	r3, #3
 800267e:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002680:	2301      	movs	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002684:	2304      	movs	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 800268c:	2302      	movs	r3, #2
 800268e:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002690:	2302      	movs	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002698:	2304      	movs	r3, #4
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 80026a0:	2300      	movs	r3, #0
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80026a4:	2310      	movs	r3, #16
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80026b4:	2300      	movs	r3, #0
 80026b6:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80026c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 80026d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80026da:	2300      	movs	r3, #0
 80026dc:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80026de:	1d3a      	adds	r2, r7, #4
 80026e0:	1d39      	adds	r1, r7, #4
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	4618      	mov	r0, r3
 80026e8:	f005 fcfc 	bl	80080e4 <HAL_SRAM_Init>
}
 80026ec:	bf00      	nop
 80026ee:	3770      	adds	r7, #112	; 0x70
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	a0000104 	.word	0xa0000104

080026f8 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002702:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800270a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002724:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	b292      	uxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002742:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002746:	885b      	ldrh	r3, [r3, #2]
 8002748:	b29b      	uxth	r3, r3
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002758:	f7ff ff86 	bl	8002668 <FMC_BANK3_Init>
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffc3 	bl	80026f8 <FMC_BANK3_WriteData>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ffc7 	bl	800271a <FMC_BANK3_WriteReg>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002798:	f7ff ffd1 	bl	800273e <FMC_BANK3_ReadData>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fba4 	bl	8002ef8 <HAL_Delay>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80027c0:	f000 f80e 	bl	80027e0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80027d4:	f000 f80b 	bl	80027ee <BSP_AUDIO_OUT_Error_CallBack>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002804:	f000 f804 	bl	8002810 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002822:	2001      	movs	r0, #1
 8002824:	f000 f804 	bl	8002830 <BSP_LCD_InitEx>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <BSP_LCD_InitEx+0xc0>)
 800283e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002842:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <BSP_LCD_InitEx+0xc0>)
 8002846:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <BSP_LCD_InitEx+0xc4>)
 8002848:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <BSP_LCD_InitEx+0xc0>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002850:	f000 f9ec 	bl	8002c2c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002854:	2201      	movs	r2, #1
 8002856:	2120      	movs	r1, #32
 8002858:	4827      	ldr	r0, [pc, #156]	; (80028f8 <BSP_LCD_InitEx+0xc8>)
 800285a:	f001 fb21 	bl	8003ea0 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002864:	4825      	ldr	r0, [pc, #148]	; (80028fc <BSP_LCD_InitEx+0xcc>)
 8002866:	f001 fb1b 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800286a:	2005      	movs	r0, #5
 800286c:	f000 fb44 	bl	8002ef8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002876:	4821      	ldr	r0, [pc, #132]	; (80028fc <BSP_LCD_InitEx+0xcc>)
 8002878:	f001 fb12 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800287c:	200a      	movs	r0, #10
 800287e:	f000 fb3b 	bl	8002ef8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002888:	481c      	ldr	r0, [pc, #112]	; (80028fc <BSP_LCD_InitEx+0xcc>)
 800288a:	f001 fb09 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800288e:	2014      	movs	r0, #20
 8002890:	f000 fb32 	bl	8002ef8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <BSP_LCD_InitEx+0xcc>)
 800289c:	f001 fb00 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80028a0:	200a      	movs	r0, #10
 80028a2:	f000 fb29 	bl	8002ef8 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <BSP_LCD_InitEx+0xd0>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4798      	blx	r3
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b85      	cmp	r3, #133	; 0x85
 80028b0:	d118      	bne.n	80028e4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <BSP_LCD_InitEx+0xd4>)
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <BSP_LCD_InitEx+0xd0>)
 80028b6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <BSP_LCD_InitEx+0xd4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fabd 	bl	8001e46 <ST7789H2_SetOrientation>
 80028cc:	e005      	b.n	80028da <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d102      	bne.n	80028da <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80028d4:	2002      	movs	r0, #2
 80028d6:	f7ff fab6 	bl	8001e46 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <BSP_LCD_InitEx+0xd8>)
 80028dc:	f000 f84e 	bl	800297c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000538 	.word	0x20000538
 80028f4:	20000044 	.word	0x20000044
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40020400 	.word	0x40020400
 8002900:	20000004 	.word	0x20000004
 8002904:	20000110 	.word	0x20000110
 8002908:	2000004c 	.word	0x2000004c

0800290c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <BSP_LCD_GetXSize+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	4798      	blx	r3
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000110 	.word	0x20000110

08002924 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <BSP_LCD_GetYSize+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000110 	.word	0x20000110

0800293c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <BSP_LCD_SetTextColor+0x1c>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	20000538 	.word	0x20000538

0800295c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <BSP_LCD_SetBackColor+0x1c>)
 800296a:	6053      	str	r3, [r2, #4]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	20000538 	.word	0x20000538

0800297c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <BSP_LCD_SetFont+0x1c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6093      	str	r3, [r2, #8]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000538 	.word	0x20000538

0800299c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <BSP_LCD_Clear+0x68>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <BSP_LCD_Clear+0x68>)
 80029b8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80029ba:	f7ff ffb3 	bl	8002924 <BSP_LCD_GetYSize>
 80029be:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e00d      	b.n	80029e2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	b29c      	uxth	r4, r3
 80029ca:	f7ff ff9f 	bl	800290c <BSP_LCD_GetXSize>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	4621      	mov	r1, r4
 80029d6:	2000      	movs	r0, #0
 80029d8:	f000 f8ee 	bl	8002bb8 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3ed      	bcc.n	80029c6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80029ea:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <BSP_LCD_Clear+0x68>)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <BSP_LCD_Clear+0x68>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ffa0 	bl	800293c <BSP_LCD_SetTextColor>
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}
 8002a04:	20000538 	.word	0x20000538

08002a08 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	460b      	mov	r3, r1
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <BSP_LCD_DisplayChar+0x50>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <BSP_LCD_DisplayChar+0x50>)
 8002a26:	6889      	ldr	r1, [r1, #8]
 8002a28:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002a2a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <BSP_LCD_DisplayChar+0x50>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	889b      	ldrh	r3, [r3, #4]
 8002a34:	3307      	adds	r3, #7
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da00      	bge.n	8002a3c <BSP_LCD_DisplayChar+0x34>
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	10db      	asrs	r3, r3, #3
 8002a3e:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002a42:	441a      	add	r2, r3
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f94b 	bl	8002ce4 <DrawChar>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000538 	.word	0x20000538

08002a5c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60ba      	str	r2, [r7, #8]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	81fb      	strh	r3, [r7, #14]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	81bb      	strh	r3, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002a72:	2301      	movs	r3, #1
 8002a74:	83fb      	strh	r3, [r7, #30]
 8002a76:	2300      	movs	r3, #0
 8002a78:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a86:	e002      	b.n	8002a8e <BSP_LCD_DisplayStringAt+0x32>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	617a      	str	r2, [r7, #20]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f6      	bne.n	8002a88 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002a9a:	f7ff ff37 	bl	800290c <BSP_LCD_GetXSize>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	889b      	ldrh	r3, [r3, #4]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d014      	beq.n	8002adc <BSP_LCD_DisplayStringAt+0x80>
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d00f      	beq.n	8002ad6 <BSP_LCD_DisplayStringAt+0x7a>
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d11e      	bne.n	8002af8 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	8892      	ldrh	r2, [r2, #4]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ad4:	e013      	b.n	8002afe <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	83fb      	strh	r3, [r7, #30]
      break;
 8002ada:	e010      	b.n	8002afe <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	889b      	ldrh	r3, [r3, #4]
 8002aea:	fb12 f303 	smulbb	r3, r2, r3
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	83fb      	strh	r3, [r7, #30]
      break;
 8002af6:	e002      	b.n	8002afe <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	83fb      	strh	r3, [r7, #30]
      break;
 8002afc:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002afe:	8bfb      	ldrh	r3, [r7, #30]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <BSP_LCD_DisplayStringAt+0xb0>
 8002b04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da15      	bge.n	8002b38 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002b10:	e012      	b.n	8002b38 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	89b9      	ldrh	r1, [r7, #12]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff74 	bl	8002a08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	889a      	ldrh	r2, [r3, #4]
 8002b26:	8bfb      	ldrh	r3, [r7, #30]
 8002b28:	4413      	add	r3, r2
 8002b2a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
    i++;
 8002b32:	8bbb      	ldrh	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2dc      	uxtb	r4, r3
 8002b46:	f7ff fee1 	bl	800290c <BSP_LCD_GetXSize>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	8bbb      	ldrh	r3, [r7, #28]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	8892      	ldrh	r2, [r2, #4]
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	1acb      	subs	r3, r1, r3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <BSP_LCD_DisplayStringAt+0x120>)
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	8892      	ldrh	r2, [r2, #4]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	bf2c      	ite	cs
 8002b66:	2301      	movcs	r3, #1
 8002b68:	2300      	movcc	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4023      	ands	r3, r4
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ce      	bne.n	8002b12 <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8002b74:	bf00      	nop
 8002b76:	3724      	adds	r7, #36	; 0x24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}
 8002b7c:	20000538 	.word	0x20000538

08002b80 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	80bb      	strh	r3, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <BSP_LCD_DrawPixel+0x34>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <BSP_LCD_DrawPixel+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	88b9      	ldrh	r1, [r7, #4]
 8002ba6:	88f8      	ldrh	r0, [r7, #6]
 8002ba8:	4798      	blx	r3
  }
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000110 	.word	0x20000110

08002bb8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	80bb      	strh	r3, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <BSP_LCD_DrawHLine+0x6c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <BSP_LCD_DrawHLine+0x6c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a1c      	ldr	r4, [r3, #32]
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <BSP_LCD_DrawHLine+0x70>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b298      	uxth	r0, r3
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	88ba      	ldrh	r2, [r7, #4]
 8002be8:	88f9      	ldrh	r1, [r7, #6]
 8002bea:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002bec:	e015      	b.n	8002c1a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e00e      	b.n	8002c12 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b298      	uxth	r0, r3
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <BSP_LCD_DrawHLine+0x70>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	88bb      	ldrh	r3, [r7, #4]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f7ff ffba 	bl	8002b80 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d3ec      	bcc.n	8002bf4 <BSP_LCD_DrawHLine+0x3c>
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000110 	.word	0x20000110
 8002c28:	20000538 	.word	0x20000538

08002c2c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <BSP_LCD_MspInit+0xac>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480f      	ldr	r0, [pc, #60]	; (8002cdc <BSP_LCD_MspInit+0xb0>)
 8002ca0:	f000 ff6c 	bl	8003b7c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4809      	ldr	r0, [pc, #36]	; (8002cdc <BSP_LCD_MspInit+0xb0>)
 8002cb6:	f000 ff61 	bl	8003b7c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002cba:	2320      	movs	r3, #32
 8002cbc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <BSP_LCD_MspInit+0xb4>)
 8002cca:	f000 ff57 	bl	8003b7c <HAL_GPIO_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	603a      	str	r2, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <DrawChar+0x12c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	88db      	ldrh	r3, [r3, #6]
 8002d02:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <DrawChar+0x12c>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	889b      	ldrh	r3, [r3, #4]
 8002d0a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002d0c:	8a3b      	ldrh	r3, [r7, #16]
 8002d0e:	3307      	adds	r3, #7
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da00      	bge.n	8002d16 <DrawChar+0x32>
 8002d14:	3307      	adds	r3, #7
 8002d16:	10db      	asrs	r3, r3, #3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	8a3b      	ldrh	r3, [r7, #16]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e069      	b.n	8002e00 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002d2c:	8a3b      	ldrh	r3, [r7, #16]
 8002d2e:	3307      	adds	r3, #7
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da00      	bge.n	8002d36 <DrawChar+0x52>
 8002d34:	3307      	adds	r3, #7
 8002d36:	10db      	asrs	r3, r3, #3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fb03 f302 	mul.w	r3, r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002d46:	8a3b      	ldrh	r3, [r7, #16]
 8002d48:	3307      	adds	r3, #7
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da00      	bge.n	8002d50 <DrawChar+0x6c>
 8002d4e:	3307      	adds	r3, #7
 8002d50:	10db      	asrs	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <DrawChar+0x78>
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d004      	beq.n	8002d64 <DrawChar+0x80>
 8002d5a:	e00c      	b.n	8002d76 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
      break;    
 8002d62:	e016      	b.n	8002d92 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	3201      	adds	r2, #1
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
      break;
 8002d74:	e00d      	b.n	8002d92 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	3202      	adds	r2, #2
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
      break;
 8002d90:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e029      	b.n	8002dec <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002d98:	8a3a      	ldrh	r2, [r7, #16]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad2      	subs	r2, r2, r3
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	4413      	add	r3, r2
 8002da2:	3b01      	subs	r3, #1
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b298      	uxth	r0, r3
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <DrawChar+0x12c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	88bb      	ldrh	r3, [r7, #4]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7ff feda 	bl	8002b80 <BSP_LCD_DrawPixel>
 8002dcc:	e00b      	b.n	8002de6 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b298      	uxth	r0, r3
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <DrawChar+0x12c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7ff fecd 	bl	8002b80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	8a3b      	ldrh	r3, [r7, #16]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3d1      	bcc.n	8002d98 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8002df4:	88bb      	ldrh	r3, [r7, #4]
 8002df6:	3301      	adds	r3, #1
 8002df8:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	8a7b      	ldrh	r3, [r7, #18]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d391      	bcc.n	8002d2c <DrawChar+0x48>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000538 	.word	0x20000538

08002e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <HAL_Init+0x40>)
 8002e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_Init+0x40>)
 8002e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_Init+0x40>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f000 fbbf 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f000 f808 	bl	8002e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e48:	f7fe f8ca 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023c00 	.word	0x40023c00

08002e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_InitTick+0x54>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_InitTick+0x58>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fbd7 	bl	800362a <HAL_SYSTICK_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00e      	b.n	8002ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d80a      	bhi.n	8002ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f000 fb9f 	bl	80035d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <HAL_InitTick+0x5c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000058 	.word	0x20000058
 8002eb4:	20000054 	.word	0x20000054

08002eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x24>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_IncTick+0x24>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000058 	.word	0x20000058
 8002edc:	20000544 	.word	0x20000544

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000544 	.word	0x20000544

08002ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff ffee 	bl	8002ee0 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d005      	beq.n	8002f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_Delay+0x40>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f1e:	bf00      	nop
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f7      	bhi.n	8002f20 <HAL_Delay+0x28>
  {
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000058 	.word	0x20000058

08002f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e033      	b.n	8002fba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f868 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f82:	f023 0302 	bic.w	r3, r3, #2
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f94a 	bl	8003228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8002faa:	e001      	b.n	8002fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e113      	b.n	8003208 <HAL_ADC_ConfigChannel+0x244>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	d925      	bls.n	800303c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	3b1e      	subs	r3, #30
 8003006:	2207      	movs	r2, #7
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43da      	mvns	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	400a      	ands	r2, r1
 8003014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68d9      	ldr	r1, [r3, #12]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4618      	mov	r0, r3
 8003028:	4603      	mov	r3, r0
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4403      	add	r3, r0
 800302e:	3b1e      	subs	r3, #30
 8003030:	409a      	lsls	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	e022      	b.n	8003082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6919      	ldr	r1, [r3, #16]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	2207      	movs	r2, #7
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6919      	ldr	r1, [r3, #16]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	4603      	mov	r3, r0
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4403      	add	r3, r0
 8003078:	409a      	lsls	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d824      	bhi.n	80030d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b05      	subs	r3, #5
 800309c:	221f      	movs	r2, #31
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b05      	subs	r3, #5
 80030c6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
 80030d2:	e04c      	b.n	800316e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d824      	bhi.n	8003126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3b23      	subs	r3, #35	; 0x23
 80030ee:	221f      	movs	r2, #31
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	3b23      	subs	r3, #35	; 0x23
 8003118:	fa00 f203 	lsl.w	r2, r0, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
 8003124:	e023      	b.n	800316e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	3b41      	subs	r3, #65	; 0x41
 8003138:	221f      	movs	r2, #31
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3b41      	subs	r3, #65	; 0x41
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_ADC_ConfigChannel+0x250>)
 8003170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a28      	ldr	r2, [pc, #160]	; (8003218 <HAL_ADC_ConfigChannel+0x254>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d10f      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1d8>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b12      	cmp	r3, #18
 8003182:	d10b      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_ADC_ConfigChannel+0x254>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x23a>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_ADC_ConfigChannel+0x258>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x1f4>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b11      	cmp	r3, #17
 80031b6:	d122      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_ADC_ConfigChannel+0x258>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d111      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_ADC_ConfigChannel+0x25c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_ADC_ConfigChannel+0x260>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9a      	lsrs	r2, r3, #18
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40012300 	.word	0x40012300
 8003218:	40012000 	.word	0x40012000
 800321c:	10000012 	.word	0x10000012
 8003220:	20000000 	.word	0x20000000
 8003224:	431bde83 	.word	0x431bde83

08003228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003230:	4b79      	ldr	r3, [pc, #484]	; (8003418 <ADC_Init+0x1f0>)
 8003232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	4a58      	ldr	r2, [pc, #352]	; (800341c <ADC_Init+0x1f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e00f      	b.n	8003326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0202 	bic.w	r2, r2, #2
 8003334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7e1b      	ldrb	r3, [r3, #24]
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	3b01      	subs	r3, #1
 8003380:	035a      	lsls	r2, r3, #13
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	e007      	b.n	800339c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	051a      	lsls	r2, r3, #20
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033de:	025a      	lsls	r2, r3, #9
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	029a      	lsls	r2, r3, #10
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012300 	.word	0x40012300
 800341c:	0f000001 	.word	0x0f000001

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e014      	b.n	800367e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	791b      	ldrb	r3, [r3, #4]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd fd5f 	bl	8001128 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	795b      	ldrb	r3, [r3, #5]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_DAC_ConfigChannel+0x20>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e036      	b.n	8003714 <HAL_DAC_ConfigChannel+0x8e>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2202      	movs	r2, #2
 80036b0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80036ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4013      	ands	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	22c0      	movs	r2, #192	; 0xc0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0cf      	b.n	80038d2 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a69      	ldr	r2, [pc, #420]	; (80038dc <HAL_DFSDM_ChannelInit+0x1bc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_DFSDM_ChannelInit+0x3a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a67      	ldr	r2, [pc, #412]	; (80038e0 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_DFSDM_ChannelInit+0x3a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a66      	ldr	r2, [pc, #408]	; (80038e4 <HAL_DFSDM_ChannelInit+0x1c4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_DFSDM_ChannelInit+0x3a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a64      	ldr	r2, [pc, #400]	; (80038e8 <HAL_DFSDM_ChannelInit+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d106      	bne.n	8003768 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800375a:	4b64      	ldr	r3, [pc, #400]	; (80038ec <HAL_DFSDM_ChannelInit+0x1cc>)
 800375c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800375e:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003760:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003762:	4b5e      	ldr	r3, [pc, #376]	; (80038dc <HAL_DFSDM_ChannelInit+0x1bc>)
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e005      	b.n	8003774 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003768:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <HAL_DFSDM_ChannelInit+0x1d4>)
 800376a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_DFSDM_ChannelInit+0x1d8>)
 800376e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003770:	4b62      	ldr	r3, [pc, #392]	; (80038fc <HAL_DFSDM_ChannelInit+0x1dc>)
 8003772:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f8c1 	bl	8003900 <DFSDM_GetChannelFromInstance>
 800377e:	4603      	mov	r3, r0
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0a0      	b.n	80038d2 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd fd0d 	bl	80011b0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d125      	bne.n	80037f4 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	791b      	ldrb	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d108      	bne.n	80037e8 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003802:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003812:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003818:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 020f 	bic.w	r2, r2, #15
 8003830:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003858:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f002 0207 	and.w	r2, r2, #7
 8003884:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f81e 	bl	8003900 <DFSDM_GetChannelFromInstance>
 80038c4:	4603      	mov	r3, r0
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40016000 	.word	0x40016000
 80038e0:	40016020 	.word	0x40016020
 80038e4:	40016040 	.word	0x40016040
 80038e8:	40016060 	.word	0x40016060
 80038ec:	20000114 	.word	0x20000114
 80038f0:	20000118 	.word	0x20000118
 80038f4:	20000128 	.word	0x20000128
 80038f8:	2000012c 	.word	0x2000012c
 80038fc:	40016400 	.word	0x40016400

08003900 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a24      	ldr	r2, [pc, #144]	; (800399c <DFSDM_GetChannelFromInstance+0x9c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <DFSDM_GetChannelFromInstance+0x18>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <DFSDM_GetChannelFromInstance+0xa0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d102      	bne.n	800391e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e037      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <DFSDM_GetChannelFromInstance+0xa4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <DFSDM_GetChannelFromInstance+0x2e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <DFSDM_GetChannelFromInstance+0xa8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d102      	bne.n	8003934 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800392e:	2301      	movs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e02c      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <DFSDM_GetChannelFromInstance+0xac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <DFSDM_GetChannelFromInstance+0x44>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <DFSDM_GetChannelFromInstance+0xb0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d102      	bne.n	800394a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003944:	2302      	movs	r3, #2
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e021      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <DFSDM_GetChannelFromInstance+0xb4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <DFSDM_GetChannelFromInstance+0x5a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <DFSDM_GetChannelFromInstance+0xb8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d102      	bne.n	8003960 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800395a:	2303      	movs	r3, #3
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e016      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <DFSDM_GetChannelFromInstance+0xbc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d102      	bne.n	800396e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003968:	2304      	movs	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e00f      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <DFSDM_GetChannelFromInstance+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d102      	bne.n	800397c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003976:	2305      	movs	r3, #5
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e008      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <DFSDM_GetChannelFromInstance+0xc4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d102      	bne.n	800398a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003984:	2306      	movs	r3, #6
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e001      	b.n	800398e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800398a:	2307      	movs	r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800398e:	68fb      	ldr	r3, [r7, #12]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40016000 	.word	0x40016000
 80039a0:	40016400 	.word	0x40016400
 80039a4:	40016020 	.word	0x40016020
 80039a8:	40016420 	.word	0x40016420
 80039ac:	40016040 	.word	0x40016040
 80039b0:	40016440 	.word	0x40016440
 80039b4:	40016060 	.word	0x40016060
 80039b8:	40016460 	.word	0x40016460
 80039bc:	40016480 	.word	0x40016480
 80039c0:	400164a0 	.word	0x400164a0
 80039c4:	400164c0 	.word	0x400164c0

080039c8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e081      	b.n	8003ade <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fcf0 	bl	80013d4 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a18:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a28:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	e006      	b.n	8003a50 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d104      	bne.n	8003a62 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a74:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	ea42 0103 	orr.w	r1, r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d138      	bne.n	8003b6e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e032      	b.n	8003b70 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2224      	movs	r2, #36	; 0x24
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e165      	b.n	8003e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	f040 8154 	bne.w	8003e5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_GPIO_Init+0x5a>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d007      	beq.n	8003bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bca:	2b11      	cmp	r3, #17
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b12      	cmp	r3, #18
 8003bd4:	d130      	bne.n	8003c38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 0201 	and.w	r2, r3, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0xfc>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b12      	cmp	r3, #18
 8003c76:	d123      	bne.n	8003cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	08da      	lsrs	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3208      	adds	r2, #8
 8003c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	220f      	movs	r2, #15
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	08da      	lsrs	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3208      	adds	r2, #8
 8003cba:	69b9      	ldr	r1, [r7, #24]
 8003cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80ae 	beq.w	8003e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_GPIO_Init+0x2fc>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_GPIO_Init+0x2fc>)
 8003d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d10:	6453      	str	r3, [r2, #68]	; 0x44
 8003d12:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_GPIO_Init+0x2fc>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <HAL_GPIO_Init+0x300>)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a4e      	ldr	r2, [pc, #312]	; (8003e80 <HAL_GPIO_Init+0x304>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d025      	beq.n	8003d96 <HAL_GPIO_Init+0x21a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a4d      	ldr	r2, [pc, #308]	; (8003e84 <HAL_GPIO_Init+0x308>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01f      	beq.n	8003d92 <HAL_GPIO_Init+0x216>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4c      	ldr	r2, [pc, #304]	; (8003e88 <HAL_GPIO_Init+0x30c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d019      	beq.n	8003d8e <HAL_GPIO_Init+0x212>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <HAL_GPIO_Init+0x310>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0x20e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <HAL_GPIO_Init+0x314>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00d      	beq.n	8003d86 <HAL_GPIO_Init+0x20a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_GPIO_Init+0x318>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <HAL_GPIO_Init+0x206>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x31c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_GPIO_Init+0x202>
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	e00c      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d7e:	2307      	movs	r3, #7
 8003d80:	e00a      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e008      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x21c>
 8003d96:	2300      	movs	r3, #0
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	f002 0203 	and.w	r2, r2, #3
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da8:	4934      	ldr	r1, [pc, #208]	; (8003e7c <HAL_GPIO_Init+0x300>)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3302      	adds	r3, #2
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dda:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003de0:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e04:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e58:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <HAL_GPIO_Init+0x320>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3301      	adds	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	f67f ae96 	bls.w	8003b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3724      	adds	r7, #36	; 0x24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40021400 	.word	0x40021400
 8003e98:	40021800 	.word	0x40021800
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f806 	bl	8003f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40013c00 	.word	0x40013c00

08003f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1c:	b08f      	sub	sp, #60	; 0x3c
 8003f1e:	af0a      	add	r7, sp, #40	; 0x28
 8003f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e054      	b.n	8003fd6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f008 f920 	bl	800c18c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f005 fae2 	bl	8009534 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	687e      	ldr	r6, [r7, #4]
 8003f78:	466d      	mov	r5, sp
 8003f7a:	f106 0410 	add.w	r4, r6, #16
 8003f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f8e:	1d33      	adds	r3, r6, #4
 8003f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f005 fa5c 	bl	8009450 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f005 fad9 	bl	8009556 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	687e      	ldr	r6, [r7, #4]
 8003fac:	466d      	mov	r5, sp
 8003fae:	f106 0410 	add.w	r4, r6, #16
 8003fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fc2:	1d33      	adds	r3, r6, #4
 8003fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f005 fbec 	bl	80097a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fde <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b089      	sub	sp, #36	; 0x24
 8003fe2:	af04      	add	r7, sp, #16
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	461a      	mov	r2, r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	70fb      	strb	r3, [r7, #3]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70bb      	strb	r3, [r7, #2]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_HCD_HC_Init+0x28>
 8004002:	2302      	movs	r3, #2
 8004004:	e07f      	b.n	8004106 <HAL_HCD_HC_Init+0x128>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	333d      	adds	r3, #61	; 0x3d
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3338      	adds	r3, #56	; 0x38
 8004032:	787a      	ldrb	r2, [r7, #1]
 8004034:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	3340      	adds	r3, #64	; 0x40
 8004046:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004048:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	3339      	adds	r3, #57	; 0x39
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	333f      	adds	r3, #63	; 0x3f
 800406e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	78bb      	ldrb	r3, [r7, #2]
 8004078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407c:	b2d8      	uxtb	r0, r3
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	333a      	adds	r3, #58	; 0x3a
 800408c:	4602      	mov	r2, r0
 800408e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004090:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0a      	bge.n	80040ae <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	333b      	adds	r3, #59	; 0x3b
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e009      	b.n	80040c2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	333b      	adds	r3, #59	; 0x3b
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	333c      	adds	r3, #60	; 0x3c
 80040d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80040d6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	787c      	ldrb	r4, [r7, #1]
 80040de:	78ba      	ldrb	r2, [r7, #2]
 80040e0:	78f9      	ldrb	r1, [r7, #3]
 80040e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4623      	mov	r3, r4
 80040f4:	f005 fcd2 	bl	8009a9c <USB_HC_Init>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bd90      	pop	{r4, r7, pc}

0800410e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_HCD_HC_Halt+0x1e>
 8004128:	2302      	movs	r3, #2
 800412a:	e00f      	b.n	800414c <HAL_HCD_HC_Halt+0x3e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f005 ff0e 	bl	8009f5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	70fb      	strb	r3, [r7, #3]
 8004166:	460b      	mov	r3, r1
 8004168:	70bb      	strb	r3, [r7, #2]
 800416a:	4613      	mov	r3, r2
 800416c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	440b      	add	r3, r1
 800417c:	333b      	adds	r3, #59	; 0x3b
 800417e:	78ba      	ldrb	r2, [r7, #2]
 8004180:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	333f      	adds	r3, #63	; 0x3f
 8004192:	787a      	ldrb	r2, [r7, #1]
 8004194:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004196:	7c3b      	ldrb	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d114      	bne.n	80041c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	440b      	add	r3, r1
 80041aa:	3342      	adds	r3, #66	; 0x42
 80041ac:	2203      	movs	r2, #3
 80041ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	333d      	adds	r3, #61	; 0x3d
 80041c0:	7f3a      	ldrb	r2, [r7, #28]
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e009      	b.n	80041da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3342      	adds	r3, #66	; 0x42
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80041da:	787b      	ldrb	r3, [r7, #1]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	f200 80d6 	bhi.w	800438e <HAL_HCD_HC_SubmitRequest+0x23a>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	08004379 	.word	0x08004379
 80041f0:	08004265 	.word	0x08004265
 80041f4:	080042ef 	.word	0x080042ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80041f8:	7c3b      	ldrb	r3, [r7, #16]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	f040 80c9 	bne.w	8004392 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004200:	78bb      	ldrb	r3, [r7, #2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 80c5 	bne.w	8004392 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004208:	8b3b      	ldrh	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	440b      	add	r3, r1
 800421c:	3351      	adds	r3, #81	; 0x51
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	3351      	adds	r3, #81	; 0x51
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	3342      	adds	r3, #66	; 0x42
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800424c:	e0a1      	b.n	8004392 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3342      	adds	r3, #66	; 0x42
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      break;
 8004262:	e096      	b.n	8004392 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004264:	78bb      	ldrb	r3, [r7, #2]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d120      	bne.n	80042ac <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	3351      	adds	r3, #81	; 0x51
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	3342      	adds	r3, #66	; 0x42
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004294:	e07e      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	440b      	add	r3, r1
 80042a4:	3342      	adds	r3, #66	; 0x42
 80042a6:	2202      	movs	r2, #2
 80042a8:	701a      	strb	r2, [r3, #0]
      break;
 80042aa:	e073      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3350      	adds	r3, #80	; 0x50
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	3342      	adds	r3, #66	; 0x42
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
      break;
 80042d6:	e05d      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	3342      	adds	r3, #66	; 0x42
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      break;
 80042ec:	e052      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80042ee:	78bb      	ldrb	r3, [r7, #2]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d120      	bne.n	8004336 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	3351      	adds	r3, #81	; 0x51
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	3342      	adds	r3, #66	; 0x42
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800431e:	e039      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	3342      	adds	r3, #66	; 0x42
 8004330:	2202      	movs	r2, #2
 8004332:	701a      	strb	r2, [r3, #0]
      break;
 8004334:	e02e      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	3350      	adds	r3, #80	; 0x50
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	440b      	add	r3, r1
 800435a:	3342      	adds	r3, #66	; 0x42
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
      break;
 8004360:	e018      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	3342      	adds	r3, #66	; 0x42
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
      break;
 8004376:	e00d      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	3342      	adds	r3, #66	; 0x42
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
      break;
 800438c:	e002      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004392:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	3344      	adds	r3, #68	; 0x44
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	8b39      	ldrh	r1, [r7, #24]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4403      	add	r3, r0
 80043b8:	3348      	adds	r3, #72	; 0x48
 80043ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	335c      	adds	r3, #92	; 0x5c
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	334c      	adds	r3, #76	; 0x4c
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	440b      	add	r3, r1
 80043f2:	3339      	adds	r3, #57	; 0x39
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	440b      	add	r3, r1
 8004406:	335d      	adds	r3, #93	; 0x5d
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	3338      	adds	r3, #56	; 0x38
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	18d1      	adds	r1, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	f005 fc42 	bl	8009cb0 <USB_HC_StartXfer>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop

08004438 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f005 f965 	bl	800971e <USB_GetMode>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 80ef 	bne.w	800463a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f005 f949 	bl	80096f8 <USB_ReadInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80e5 	beq.w	8004638 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f005 f940 	bl	80096f8 <USB_ReadInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004482:	d104      	bne.n	800448e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800448c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f005 f930 	bl	80096f8 <USB_ReadInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d104      	bne.n	80044ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 f920 	bl	80096f8 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c2:	d104      	bne.n	80044ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f005 f910 	bl	80096f8 <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d103      	bne.n	80044ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2202      	movs	r2, #2
 80044e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f005 f902 	bl	80096f8 <USB_ReadInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fe:	d115      	bne.n	800452c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004508:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f007 feb4 	bl	800c288 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2101      	movs	r1, #1
 8004526:	4618      	mov	r0, r3
 8004528:	f005 f9f2 	bl	8009910 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f005 f8e1 	bl	80096f8 <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004540:	d102      	bne.n	8004548 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f001 f966 	bl	8005814 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f005 f8d3 	bl	80096f8 <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d106      	bne.n	800456a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f007 fe77 	bl	800c250 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2208      	movs	r2, #8
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f005 f8c2 	bl	80096f8 <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800457e:	d138      	bne.n	80045f2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f005 fcd9 	bl	8009f3c <USB_HC_ReadInterrupt>
 800458a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e025      	b.n	80045de <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045bc:	d106      	bne.n	80045cc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8cf 	bl	8004768 <HCD_HC_IN_IRQHandler>
 80045ca:	e005      	b.n	80045d8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fcfd 	bl	8004fd2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3d4      	bcc.n	8004592 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f005 f87e 	bl	80096f8 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d101      	bne.n	800460a <HAL_HCD_IRQHandler+0x1d2>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_HCD_IRQHandler+0x1d4>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d014      	beq.n	800463a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0210 	bic.w	r2, r2, #16
 800461e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f001 f84b 	bl	80056bc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0210 	orr.w	r2, r2, #16
 8004634:	619a      	str	r2, [r3, #24]
 8004636:	e000      	b.n	800463a <HAL_HCD_IRQHandler+0x202>
      return;
 8004638:	bf00      	nop
    }
  }
}
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_HCD_Start+0x16>
 8004652:	2302      	movs	r3, #2
 8004654:	e013      	b.n	800467e <HAL_HCD_Start+0x3e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f004 ff55 	bl	8009512 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f005 f9b2 	bl	80099d8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_HCD_Stop+0x16>
 8004698:	2302      	movs	r3, #2
 800469a:	e00d      	b.n	80046b8 <HAL_HCD_Stop+0x32>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f005 fd93 	bl	800a1d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f005 f959 	bl	8009984 <USB_ResetPort>
 80046d2:	4603      	mov	r3, r0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	335c      	adds	r3, #92	; 0x5c
 80046f8:	781b      	ldrb	r3, [r3, #0]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	334c      	adds	r3, #76	; 0x4c
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f005 f99b 	bl	8009a78 <USB_GetCurrentFrame>
 8004742:	4603      	mov	r3, r0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f005 f976 	bl	8009a4a <USB_GetHostSpeed>
 800475e:	4603      	mov	r3, r0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d119      	bne.n	80047cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	2304      	movs	r3, #4
 80047a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	60d3      	str	r3, [r2, #12]
 80047ca:	e0ce      	b.n	800496a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d12c      	bne.n	800483e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	440b      	add	r3, r1
 8004806:	335d      	adds	r3, #93	; 0x5d
 8004808:	2207      	movs	r2, #7
 800480a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f005 fb91 	bl	8009f5e <USB_HC_Halt>
 800483c:	e095      	b.n	800496a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b20      	cmp	r3, #32
 8004852:	d109      	bne.n	8004868 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	461a      	mov	r2, r3
 8004862:	2320      	movs	r3, #32
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	e080      	b.n	800496a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d134      	bne.n	80048e8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	440a      	add	r2, r1
 8004894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	440b      	add	r3, r1
 80048ac:	335d      	adds	r3, #93	; 0x5d
 80048ae:	2205      	movs	r2, #5
 80048b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	461a      	mov	r2, r3
 80048c0:	2310      	movs	r3, #16
 80048c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	2308      	movs	r3, #8
 80048d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f005 fb3c 	bl	8009f5e <USB_HC_Halt>
 80048e6:	e040      	b.n	800496a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fe:	d134      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	440a      	add	r2, r1
 8004916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f005 fb17 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	461a      	mov	r2, r3
 800493e:	2310      	movs	r3, #16
 8004940:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	440b      	add	r3, r1
 8004950:	335d      	adds	r3, #93	; 0x5d
 8004952:	2208      	movs	r2, #8
 8004954:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004968:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004980:	d122      	bne.n	80049c8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	440a      	add	r2, r1
 8004998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f005 fad6 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	461a      	mov	r2, r3
 80049c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80049c6:	e300      	b.n	8004fca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 80fd 	bne.w	8004bda <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	440b      	add	r3, r1
 80049f6:	3348      	adds	r3, #72	; 0x48
 80049f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004a0c:	1ad1      	subs	r1, r2, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4403      	add	r3, r0
 8004a1c:	334c      	adds	r3, #76	; 0x4c
 8004a1e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	335d      	adds	r3, #93	; 0x5d
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	3358      	adds	r3, #88	; 0x58
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a54:	461a      	mov	r2, r3
 8004a56:	2301      	movs	r3, #1
 8004a58:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	440b      	add	r3, r1
 8004a68:	333f      	adds	r3, #63	; 0x3f
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	333f      	adds	r3, #63	; 0x3f
 8004a80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d121      	bne.n	8004aca <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 fa54 	bl	8009f5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	6093      	str	r3, [r2, #8]
 8004ac8:	e070      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	333f      	adds	r3, #63	; 0x3f
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d12a      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004afe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	335c      	adds	r3, #92	; 0x5c
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	b2d8      	uxtb	r0, r3
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	335c      	adds	r3, #92	; 0x5c
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f007 fbb8 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b34:	e03a      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	333f      	adds	r3, #63	; 0x3f
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d12f      	bne.n	8004bac <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	335c      	adds	r3, #92	; 0x5c
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3350      	adds	r3, #80	; 0x50
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2d8      	uxtb	r0, r3
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	3350      	adds	r3, #80	; 0x50
 8004b88:	4602      	mov	r2, r0
 8004b8a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	b2d8      	uxtb	r0, r3
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	335c      	adds	r3, #92	; 0x5c
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f007 fb7c 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	3350      	adds	r3, #80	; 0x50
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f083 0301 	eor.w	r3, r3, #1
 8004bc2:	b2d8      	uxtb	r0, r3
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3350      	adds	r3, #80	; 0x50
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	701a      	strb	r2, [r3, #0]
}
 8004bd8:	e1f7      	b.n	8004fca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f040 811a 	bne.w	8004e26 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c0c:	f023 0302 	bic.w	r3, r3, #2
 8004c10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	440b      	add	r3, r1
 8004c20:	335d      	adds	r3, #93	; 0x5d
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10a      	bne.n	8004c3e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	335c      	adds	r3, #92	; 0x5c
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e0d9      	b.n	8004df2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	440b      	add	r3, r1
 8004c4c:	335d      	adds	r3, #93	; 0x5d
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d10a      	bne.n	8004c6a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	335c      	adds	r3, #92	; 0x5c
 8004c64:	2205      	movs	r2, #5
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e0c3      	b.n	8004df2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	440b      	add	r3, r1
 8004c78:	335d      	adds	r3, #93	; 0x5d
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d00a      	beq.n	8004c96 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	335d      	adds	r3, #93	; 0x5d
 8004c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d156      	bne.n	8004d44 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3358      	adds	r3, #88	; 0x58
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4403      	add	r3, r0
 8004cb8:	3358      	adds	r3, #88	; 0x58
 8004cba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	3358      	adds	r3, #88	; 0x58
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d914      	bls.n	8004cfc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3358      	adds	r3, #88	; 0x58
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	335c      	adds	r3, #92	; 0x5c
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e009      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	335c      	adds	r3, #92	; 0x5c
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d26:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e056      	b.n	8004df2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	335d      	adds	r3, #93	; 0x5d
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d123      	bne.n	8004da2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	335c      	adds	r3, #92	; 0x5c
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d8c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e027      	b.n	8004df2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	335d      	adds	r3, #93	; 0x5d
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b07      	cmp	r3, #7
 8004db6:	d11c      	bne.n	8004df2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3358      	adds	r3, #88	; 0x58
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4403      	add	r3, r0
 8004dda:	3358      	adds	r3, #88	; 0x58
 8004ddc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	335c      	adds	r3, #92	; 0x5c
 8004dee:	2204      	movs	r2, #4
 8004df0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2302      	movs	r3, #2
 8004e02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	b2d8      	uxtb	r0, r3
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	440b      	add	r3, r1
 8004e16:	335c      	adds	r3, #92	; 0x5c
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f007 fa40 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e24:	e0d1      	b.n	8004fca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d13e      	bne.n	8004eba <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e56:	f043 0302 	orr.w	r3, r3, #2
 8004e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	440b      	add	r3, r1
 8004e6a:	3358      	adds	r3, #88	; 0x58
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4403      	add	r3, r0
 8004e7e:	3358      	adds	r3, #88	; 0x58
 8004e80:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	440b      	add	r3, r1
 8004e90:	335d      	adds	r3, #93	; 0x5d
 8004e92:	2206      	movs	r2, #6
 8004e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f005 f85c 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	6093      	str	r3, [r2, #8]
}
 8004eb8:	e087      	b.n	8004fca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d17c      	bne.n	8004fca <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	333f      	adds	r3, #63	; 0x3f
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d122      	bne.n	8004f2c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3358      	adds	r3, #88	; 0x58
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f14:	f043 0302 	orr.w	r3, r3, #2
 8004f18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f005 f81a 	bl	8009f5e <USB_HC_Halt>
 8004f2a:	e045      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	333f      	adds	r3, #63	; 0x3f
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	440b      	add	r3, r1
 8004f50:	333f      	adds	r3, #63	; 0x3f
 8004f52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d12f      	bne.n	8004fb8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	3358      	adds	r3, #88	; 0x58
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d121      	bne.n	8004fb8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	440b      	add	r3, r1
 8004f82:	335d      	adds	r3, #93	; 0x5d
 8004f84:	2203      	movs	r2, #3
 8004f86:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 ffd3 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	6093      	str	r3, [r2, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d119      	bne.n	8005036 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	461a      	mov	r2, r3
 8005010:	2304      	movs	r3, #4
 8005012:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	440a      	add	r2, r1
 800502a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005034:	e33e      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d141      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	461a      	mov	r2, r3
 800505a:	2320      	movs	r3, #32
 800505c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	333d      	adds	r3, #61	; 0x3d
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 831f 	bne.w	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	440b      	add	r3, r1
 8005084:	333d      	adds	r3, #61	; 0x3d
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	440b      	add	r3, r1
 8005098:	335c      	adds	r3, #92	; 0x5c
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f004 ff48 	bl	8009f5e <USB_HC_Halt>
}
 80050ce:	e2f1      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d13f      	bne.n	8005166 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	440b      	add	r3, r1
 80050f4:	335d      	adds	r3, #93	; 0x5d
 80050f6:	2204      	movs	r2, #4
 80050f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	440b      	add	r3, r1
 8005108:	333d      	adds	r3, #61	; 0x3d
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3358      	adds	r3, #88	; 0x58
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	440a      	add	r2, r1
 8005138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f004 ff06 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	461a      	mov	r2, r3
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	6093      	str	r3, [r2, #8]
}
 8005164:	e2a6      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517c:	d122      	bne.n	80051c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fed8 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	461a      	mov	r2, r3
 80051bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c0:	6093      	str	r3, [r2, #8]
}
 80051c2:	e277      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d135      	bne.n	8005246 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	440b      	add	r3, r1
 80051e8:	3358      	adds	r3, #88	; 0x58
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	440a      	add	r2, r1
 8005204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fea0 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	461a      	mov	r2, r3
 800522c:	2301      	movs	r3, #1
 800522e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	335d      	adds	r3, #93	; 0x5d
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
}
 8005244:	e236      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d12b      	bne.n	80052b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	2308      	movs	r3, #8
 800526c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	440a      	add	r2, r1
 8005284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f004 fe60 	bl	8009f5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	335d      	adds	r3, #93	; 0x5d
 80052ae:	2205      	movs	r2, #5
 80052b0:	701a      	strb	r2, [r3, #0]
}
 80052b2:	e1ff      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d155      	bne.n	8005376 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	3358      	adds	r3, #88	; 0x58
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	440b      	add	r3, r1
 80052ec:	335d      	adds	r3, #93	; 0x5d
 80052ee:	2203      	movs	r2, #3
 80052f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	440b      	add	r3, r1
 8005300:	333d      	adds	r3, #61	; 0x3d
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d114      	bne.n	8005332 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	333c      	adds	r3, #60	; 0x3c
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	333d      	adds	r3, #61	; 0x3d
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	440a      	add	r2, r1
 8005348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f004 fdfe 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	2310      	movs	r3, #16
 8005372:	6093      	str	r3, [r2, #8]
}
 8005374:	e19e      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d12b      	bne.n	80053e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a6:	f043 0302 	orr.w	r3, r3, #2
 80053aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 fdd1 	bl	8009f5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	440b      	add	r3, r1
 80053ca:	335d      	adds	r3, #93	; 0x5d
 80053cc:	2206      	movs	r2, #6
 80053ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	461a      	mov	r2, r3
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	6093      	str	r3, [r2, #8]
}
 80053e2:	e167      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fa:	d135      	bne.n	8005468 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fd99 	bl	8009f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	461a      	mov	r2, r3
 800543a:	2310      	movs	r3, #16
 800543c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005450:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	440b      	add	r3, r1
 8005460:	335d      	adds	r3, #93	; 0x5d
 8005462:	2208      	movs	r2, #8
 8005464:	701a      	strb	r2, [r3, #0]
}
 8005466:	e125      	b.n	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 811a 	bne.w	80056b4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	440a      	add	r2, r1
 8005496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549a:	f023 0302 	bic.w	r3, r3, #2
 800549e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	335d      	adds	r3, #93	; 0x5d
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d137      	bne.n	8005526 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	440b      	add	r3, r1
 80054c4:	335c      	adds	r3, #92	; 0x5c
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	333f      	adds	r3, #63	; 0x3f
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d00b      	beq.n	80054f8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	333f      	adds	r3, #63	; 0x3f
 80054f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	f040 80c5 	bne.w	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	3351      	adds	r3, #81	; 0x51
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f083 0301 	eor.w	r3, r3, #1
 800550e:	b2d8      	uxtb	r0, r3
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3351      	adds	r3, #81	; 0x51
 8005520:	4602      	mov	r2, r0
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e0ad      	b.n	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	335d      	adds	r3, #93	; 0x5d
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d10a      	bne.n	8005552 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	335c      	adds	r3, #92	; 0x5c
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e097      	b.n	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	335d      	adds	r3, #93	; 0x5d
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d10a      	bne.n	800557e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	335c      	adds	r3, #92	; 0x5c
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e081      	b.n	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	335d      	adds	r3, #93	; 0x5d
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d10a      	bne.n	80055aa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	440b      	add	r3, r1
 80055a2:	335c      	adds	r3, #92	; 0x5c
 80055a4:	2205      	movs	r2, #5
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e06b      	b.n	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	440b      	add	r3, r1
 80055b8:	335d      	adds	r3, #93	; 0x5d
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d00a      	beq.n	80055d6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	440b      	add	r3, r1
 80055ce:	335d      	adds	r3, #93	; 0x5d
 80055d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d155      	bne.n	8005682 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	440b      	add	r3, r1
 80055e4:	3358      	adds	r3, #88	; 0x58
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1c59      	adds	r1, r3, #1
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4403      	add	r3, r0
 80055f8:	3358      	adds	r3, #88	; 0x58
 80055fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	440b      	add	r3, r1
 800560a:	3358      	adds	r3, #88	; 0x58
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d914      	bls.n	800563c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	440b      	add	r3, r1
 8005620:	3358      	adds	r3, #88	; 0x58
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	335c      	adds	r3, #92	; 0x5c
 8005636:	2204      	movs	r2, #4
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e009      	b.n	8005650 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	440b      	add	r3, r1
 800564a:	335c      	adds	r3, #92	; 0x5c
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005666:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800566e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	461a      	mov	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	461a      	mov	r2, r3
 8005690:	2302      	movs	r3, #2
 8005692:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	b2d8      	uxtb	r0, r3
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	335c      	adds	r3, #92	; 0x5c
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4601      	mov	r1, r0
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f006 fdf8 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80056b4:	bf00      	nop
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	0c5b      	lsrs	r3, r3, #17
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056f0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d003      	beq.n	8005700 <HCD_RXQLVL_IRQHandler+0x44>
 80056f8:	2b05      	cmp	r3, #5
 80056fa:	f000 8082 	beq.w	8005802 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056fe:	e083      	b.n	8005808 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d07f      	beq.n	8005806 <HCD_RXQLVL_IRQHandler+0x14a>
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	3344      	adds	r3, #68	; 0x44
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d074      	beq.n	8005806 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3344      	adds	r3, #68	; 0x44
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	b292      	uxth	r2, r2
 8005736:	4619      	mov	r1, r3
 8005738:	f003 ffb5 	bl	80096a6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	3344      	adds	r3, #68	; 0x44
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	18d1      	adds	r1, r2, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4403      	add	r3, r0
 8005760:	3344      	adds	r3, #68	; 0x44
 8005762:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	334c      	adds	r3, #76	; 0x4c
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	18d1      	adds	r1, r2, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4403      	add	r3, r0
 8005788:	334c      	adds	r3, #76	; 0x4c
 800578a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <HCD_RXQLVL_IRQHandler+0x154>)
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d031      	beq.n	8005806 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	461a      	mov	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3350      	adds	r3, #80	; 0x50
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2d8      	uxtb	r0, r3
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	440b      	add	r3, r1
 80057fa:	3350      	adds	r3, #80	; 0x50
 80057fc:	4602      	mov	r2, r0
 80057fe:	701a      	strb	r2, [r3, #0]
      break;
 8005800:	e001      	b.n	8005806 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005806:	bf00      	nop
  }
}
 8005808:	bf00      	nop
 800580a:	3728      	adds	r7, #40	; 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	1ff80000 	.word	0x1ff80000

08005814 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005840:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b02      	cmp	r3, #2
 800584a:	d10b      	bne.n	8005864 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b01      	cmp	r3, #1
 8005854:	d102      	bne.n	800585c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f006 fd08 	bl	800c26c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b08      	cmp	r3, #8
 800586c:	d132      	bne.n	80058d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f043 0308 	orr.w	r3, r3, #8
 8005874:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b04      	cmp	r3, #4
 800587e:	d126      	bne.n	80058ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d113      	bne.n	80058b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800588e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005892:	d106      	bne.n	80058a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2102      	movs	r1, #2
 800589a:	4618      	mov	r0, r3
 800589c:	f004 f838 	bl	8009910 <USB_InitFSLSPClkSel>
 80058a0:	e011      	b.n	80058c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f004 f831 	bl	8009910 <USB_InitFSLSPClkSel>
 80058ae:	e00a      	b.n	80058c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d106      	bne.n	80058c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058be:	461a      	mov	r2, r3
 80058c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80058c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f006 fcfa 	bl	800c2c0 <HAL_HCD_PortEnabled_Callback>
 80058cc:	e002      	b.n	80058d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f006 fd04 	bl	800c2dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d103      	bne.n	80058e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ec:	461a      	mov	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6013      	str	r3, [r2, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e11f      	b.n	8005b4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fd9e 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800594e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800595e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005960:	f001 f80e 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a7b      	ldr	r2, [pc, #492]	; (8005b58 <HAL_I2C_Init+0x25c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d807      	bhi.n	8005980 <HAL_I2C_Init+0x84>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a7a      	ldr	r2, [pc, #488]	; (8005b5c <HAL_I2C_Init+0x260>)
 8005974:	4293      	cmp	r3, r2
 8005976:	bf94      	ite	ls
 8005978:	2301      	movls	r3, #1
 800597a:	2300      	movhi	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e006      	b.n	800598e <HAL_I2C_Init+0x92>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a77      	ldr	r2, [pc, #476]	; (8005b60 <HAL_I2C_Init+0x264>)
 8005984:	4293      	cmp	r3, r2
 8005986:	bf94      	ite	ls
 8005988:	2301      	movls	r3, #1
 800598a:	2300      	movhi	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0db      	b.n	8005b4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a72      	ldr	r2, [pc, #456]	; (8005b64 <HAL_I2C_Init+0x268>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0c9b      	lsrs	r3, r3, #18
 80059a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <HAL_I2C_Init+0x25c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d802      	bhi.n	80059d0 <HAL_I2C_Init+0xd4>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3301      	adds	r3, #1
 80059ce:	e009      	b.n	80059e4 <HAL_I2C_Init+0xe8>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	4a63      	ldr	r2, [pc, #396]	; (8005b68 <HAL_I2C_Init+0x26c>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	099b      	lsrs	r3, r3, #6
 80059e2:	3301      	adds	r3, #1
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4956      	ldr	r1, [pc, #344]	; (8005b58 <HAL_I2C_Init+0x25c>)
 8005a00:	428b      	cmp	r3, r1
 8005a02:	d80d      	bhi.n	8005a20 <HAL_I2C_Init+0x124>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1e59      	subs	r1, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a12:	3301      	adds	r3, #1
 8005a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	bf38      	it	cc
 8005a1c:	2304      	movcc	r3, #4
 8005a1e:	e04f      	b.n	8005ac0 <HAL_I2C_Init+0x1c4>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d111      	bne.n	8005a4c <HAL_I2C_Init+0x150>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1e58      	subs	r0, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	440b      	add	r3, r1
 8005a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e012      	b.n	8005a72 <HAL_I2C_Init+0x176>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1e58      	subs	r0, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	0099      	lsls	r1, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a62:	3301      	adds	r3, #1
 8005a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Init+0x17e>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e022      	b.n	8005ac0 <HAL_I2C_Init+0x1c4>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <HAL_I2C_Init+0x1a4>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1e58      	subs	r0, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	440b      	add	r3, r1
 8005a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a94:	3301      	adds	r3, #1
 8005a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	e00f      	b.n	8005ac0 <HAL_I2C_Init+0x1c4>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1e58      	subs	r0, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	0099      	lsls	r1, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	6809      	ldr	r1, [r1, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6911      	ldr	r1, [r2, #16]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	4311      	orrs	r1, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	000186a0 	.word	0x000186a0
 8005b5c:	001e847f 	.word	0x001e847f
 8005b60:	003d08ff 	.word	0x003d08ff
 8005b64:	431bde83 	.word	0x431bde83
 8005b68:	10624dd3 	.word	0x10624dd3

08005b6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e154      	b.n	8005e28 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a98      	ldr	r2, [pc, #608]	; (8005df8 <HAL_I2S_Init+0x28c>)
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fb fcab 	bl	80014f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005bb4:	f023 030f 	bic.w	r3, r3, #15
 8005bb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d06f      	beq.n	8005caa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e001      	b.n	8005bdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005bd8:	2320      	movs	r3, #32
 8005bda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d802      	bhi.n	8005bea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a83      	ldr	r2, [pc, #524]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_I2S_Init+0x92>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a81      	ldr	r2, [pc, #516]	; (8005e00 <HAL_I2S_Init+0x294>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d104      	bne.n	8005c08 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f001 f972 	bl	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	e003      	b.n	8005c10 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005c08:	2002      	movs	r0, #2
 8005c0a:	f001 f96d 	bl	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c0e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c18:	d125      	bne.n	8005c66 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3e:	3305      	adds	r3, #5
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e01f      	b.n	8005c84 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	3305      	adds	r3, #5
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e00e      	b.n	8005c84 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	3305      	adds	r3, #5
 8005c82:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4a5f      	ldr	r2, [pc, #380]	; (8005e04 <HAL_I2S_Init+0x298>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e003      	b.n	8005cb2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005caa:	2302      	movs	r3, #2
 8005cac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d902      	bls.n	8005cbe <HAL_I2S_Init+0x152>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2bff      	cmp	r3, #255	; 0xff
 8005cbc:	d907      	bls.n	8005cce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	f043 0210 	orr.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0ac      	b.n	8005e28 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	ea42 0103 	orr.w	r1, r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cec:	f023 030f 	bic.w	r3, r3, #15
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6851      	ldr	r1, [r2, #4]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6892      	ldr	r2, [r2, #8]
 8005cf8:	4311      	orrs	r1, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68d2      	ldr	r2, [r2, #12]
 8005cfe:	4311      	orrs	r1, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6992      	ldr	r2, [r2, #24]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d10:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d003      	beq.n	8005d22 <HAL_I2S_Init+0x1b6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2bb0      	cmp	r3, #176	; 0xb0
 8005d20:	d107      	bne.n	8005d32 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d30:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d16e      	bne.n	8005e18 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_I2S_Init+0x29c>)
 8005d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a2d      	ldr	r2, [pc, #180]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d101      	bne.n	8005d4e <HAL_I2S_Init+0x1e2>
 8005d4a:	4b30      	ldr	r3, [pc, #192]	; (8005e0c <HAL_I2S_Init+0x2a0>)
 8005d4c:	e001      	b.n	8005d52 <HAL_I2S_Init+0x1e6>
 8005d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	4928      	ldr	r1, [pc, #160]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005d5a:	428a      	cmp	r2, r1
 8005d5c:	d101      	bne.n	8005d62 <HAL_I2S_Init+0x1f6>
 8005d5e:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <HAL_I2S_Init+0x2a0>)
 8005d60:	e001      	b.n	8005d66 <HAL_I2S_Init+0x1fa>
 8005d62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005d66:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d6a:	f023 030f 	bic.w	r3, r3, #15
 8005d6e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a21      	ldr	r2, [pc, #132]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_I2S_Init+0x212>
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <HAL_I2S_Init+0x2a0>)
 8005d7c:	e001      	b.n	8005d82 <HAL_I2S_Init+0x216>
 8005d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d82:	2202      	movs	r2, #2
 8005d84:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <HAL_I2S_Init+0x228>
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <HAL_I2S_Init+0x2a0>)
 8005d92:	e001      	b.n	8005d98 <HAL_I2S_Init+0x22c>
 8005d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d003      	beq.n	8005dae <HAL_I2S_Init+0x242>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e001      	b.n	8005dba <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005dd0:	4303      	orrs	r3, r0
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005de6:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a03      	ldr	r2, [pc, #12]	; (8005dfc <HAL_I2S_Init+0x290>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10e      	bne.n	8005e10 <HAL_I2S_Init+0x2a4>
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_I2S_Init+0x2a0>)
 8005df4:	e00e      	b.n	8005e14 <HAL_I2S_Init+0x2a8>
 8005df6:	bf00      	nop
 8005df8:	08005eeb 	.word	0x08005eeb
 8005dfc:	40003800 	.word	0x40003800
 8005e00:	40003c00 	.word	0x40003c00
 8005e04:	cccccccd 	.word	0xcccccccd
 8005e08:	08006001 	.word	0x08006001
 8005e0c:	40003400 	.word	0x40003400
 8005e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e14:	897a      	ldrh	r2, [r7, #10]
 8005e16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e74:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fc fc9a 	bl	80027b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10e      	bne.n	8005ee2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ed2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fc fc8d 	bl	80027fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b086      	sub	sp, #24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d13a      	bne.n	8005f7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d109      	bne.n	8005f24 <I2S_IRQHandler+0x3a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d102      	bne.n	8005f24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff ffb4 	bl	8005e8c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d126      	bne.n	8005f7c <I2S_IRQHandler+0x92>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d11f      	bne.n	8005f7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f043 0202 	orr.w	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc fc28 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d136      	bne.n	8005ff6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d109      	bne.n	8005fa6 <I2S_IRQHandler+0xbc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d102      	bne.n	8005fa6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ff45 	bl	8005e30 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d122      	bne.n	8005ff6 <I2S_IRQHandler+0x10c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d11b      	bne.n	8005ff6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fcc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f043 0204 	orr.w	r2, r3, #4
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fc fbeb 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4aa2      	ldr	r2, [pc, #648]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800601a:	4ba2      	ldr	r3, [pc, #648]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800601c:	e001      	b.n	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800601e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a9b      	ldr	r2, [pc, #620]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006038:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800603a:	e001      	b.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800603c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d004      	beq.n	8006058 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 8099 	bne.w	800618a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d107      	bne.n	8006072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f925 	bl	80062bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d107      	bne.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9c8 	bl	800641c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d13a      	bne.n	800610c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d035      	beq.n	800610c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a7e      	ldr	r2, [pc, #504]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80060aa:	4b7e      	ldr	r3, [pc, #504]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060ac:	e001      	b.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80060ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4979      	ldr	r1, [pc, #484]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060ba:	428b      	cmp	r3, r1
 80060bc:	d101      	bne.n	80060c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80060be:	4b79      	ldr	r3, [pc, #484]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060c0:	e001      	b.n	80060c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80060c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	f043 0202 	orr.w	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc fb60 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b08      	cmp	r3, #8
 8006114:	f040 80be 	bne.w	8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80b8 	beq.w	8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006132:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a59      	ldr	r2, [pc, #356]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800613e:	4b59      	ldr	r3, [pc, #356]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006140:	e001      	b.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4954      	ldr	r1, [pc, #336]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800614e:	428b      	cmp	r3, r1
 8006150:	d101      	bne.n	8006156 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006152:	4b54      	ldr	r3, [pc, #336]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006154:	e001      	b.n	800615a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800615e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006160:	2300      	movs	r3, #0
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f043 0204 	orr.w	r2, r3, #4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc fb22 	bl	80027cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006188:	e084      	b.n	8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	d107      	bne.n	80061a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8be 	bl	8006320 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8fd 	bl	80063b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d12f      	bne.n	8006228 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02a      	beq.n	8006228 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2e      	ldr	r2, [pc, #184]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d101      	bne.n	80061f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061ee:	e001      	b.n	80061f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80061f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4929      	ldr	r1, [pc, #164]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061fc:	428b      	cmp	r3, r1
 80061fe:	d101      	bne.n	8006204 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006200:	4b28      	ldr	r3, [pc, #160]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006202:	e001      	b.n	8006208 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006208:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800620c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc fad2 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b08      	cmp	r3, #8
 8006230:	d131      	bne.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02c      	beq.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006246:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006248:	e001      	b.n	800624e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800624a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4912      	ldr	r1, [pc, #72]	; (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006256:	428b      	cmp	r3, r1
 8006258:	d101      	bne.n	800625e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800625c:	e001      	b.n	8006262 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800625e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006262:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006266:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006276:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	f043 0204 	orr.w	r2, r3, #4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fc fa9d 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006292:	e000      	b.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006294:	bf00      	nop
}
 8006296:	bf00      	nop
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40003800 	.word	0x40003800
 80062a4:	40003400 	.word	0x40003400

080062a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c99      	adds	r1, r3, #2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6251      	str	r1, [r2, #36]	; 0x24
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffc9 	bl	80062a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c99      	adds	r1, r3, #2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6251      	str	r1, [r2, #36]	; 0x24
 8006332:	8819      	ldrh	r1, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <I2SEx_TxISR_I2SExt+0x90>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <I2SEx_TxISR_I2SExt+0x22>
 800633e:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <I2SEx_TxISR_I2SExt+0x94>)
 8006340:	e001      	b.n	8006346 <I2SEx_TxISR_I2SExt+0x26>
 8006342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006346:	460a      	mov	r2, r1
 8006348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d121      	bne.n	80063a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <I2SEx_TxISR_I2SExt+0x90>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <I2SEx_TxISR_I2SExt+0x50>
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <I2SEx_TxISR_I2SExt+0x94>)
 800636e:	e001      	b.n	8006374 <I2SEx_TxISR_I2SExt+0x54>
 8006370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	490d      	ldr	r1, [pc, #52]	; (80063b0 <I2SEx_TxISR_I2SExt+0x90>)
 800637c:	428b      	cmp	r3, r1
 800637e:	d101      	bne.n	8006384 <I2SEx_TxISR_I2SExt+0x64>
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <I2SEx_TxISR_I2SExt+0x94>)
 8006382:	e001      	b.n	8006388 <I2SEx_TxISR_I2SExt+0x68>
 8006384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800638c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff81 	bl	80062a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40003800 	.word	0x40003800
 80063b4:	40003400 	.word	0x40003400

080063b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68d8      	ldr	r0, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	1c99      	adds	r1, r3, #2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063d0:	b282      	uxth	r2, r0
 80063d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d113      	bne.n	8006414 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff4a 	bl	80062a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <I2SEx_RxISR_I2SExt+0x90>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <I2SEx_RxISR_I2SExt+0x16>
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <I2SEx_RxISR_I2SExt+0x94>)
 8006430:	e001      	b.n	8006436 <I2SEx_RxISR_I2SExt+0x1a>
 8006432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006436:	68d8      	ldr	r0, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	1c99      	adds	r1, r3, #2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006442:	b282      	uxth	r2, r0
 8006444:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d121      	bne.n	80064a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <I2SEx_RxISR_I2SExt+0x90>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d101      	bne.n	800646c <I2SEx_RxISR_I2SExt+0x50>
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <I2SEx_RxISR_I2SExt+0x94>)
 800646a:	e001      	b.n	8006470 <I2SEx_RxISR_I2SExt+0x54>
 800646c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	490d      	ldr	r1, [pc, #52]	; (80064ac <I2SEx_RxISR_I2SExt+0x90>)
 8006478:	428b      	cmp	r3, r1
 800647a:	d101      	bne.n	8006480 <I2SEx_RxISR_I2SExt+0x64>
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <I2SEx_RxISR_I2SExt+0x94>)
 800647e:	e001      	b.n	8006484 <I2SEx_RxISR_I2SExt+0x68>
 8006480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006484:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006488:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff03 	bl	80062a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40003800 	.word	0x40003800
 80064b0:	40003400 	.word	0x40003400

080064b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064bc:	f7fc fd10 	bl	8002ee0 <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e069      	b.n	80065a0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fb f8c1 	bl	8001668 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80064e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f85e 	bl	80065ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	3b01      	subs	r3, #1
 8006500:	021a      	lsls	r2, r3, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	2120      	movs	r1, #32
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f856 	bl	80065c8 <QSPI_WaitFlagStateUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d137      	bne.n	8006596 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6852      	ldr	r2, [r2, #4]
 8006538:	0611      	lsls	r1, r2, #24
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68d2      	ldr	r2, [r2, #12]
 800653e:	4311      	orrs	r1, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	69d2      	ldr	r2, [r2, #28]
 8006544:	4311      	orrs	r1, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6a12      	ldr	r2, [r2, #32]
 800654a:	4311      	orrs	r1, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	430b      	orrs	r3, r1
 8006552:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <HAL_QSPI_Init+0xf4>)
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6912      	ldr	r2, [r2, #16]
 8006562:	0411      	lsls	r1, r2, #16
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6952      	ldr	r2, [r2, #20]
 8006568:	4311      	orrs	r1, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6992      	ldr	r2, [r2, #24]
 800656e:	4311      	orrs	r1, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	430b      	orrs	r3, r1
 8006576:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800659e:	7afb      	ldrb	r3, [r7, #11]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	ffe0f8fe 	.word	0xffe0f8fe

080065ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	649a      	str	r2, [r3, #72]	; 0x48
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065d8:	e01a      	b.n	8006610 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d016      	beq.n	8006610 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e2:	f7fc fc7d 	bl	8002ee0 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d302      	bcc.n	80065f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e00e      	b.n	800662e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d1d6      	bne.n	80065da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0cc      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	4b68      	ldr	r3, [pc, #416]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d90c      	bls.n	8006674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b65      	ldr	r3, [pc, #404]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b63      	ldr	r3, [pc, #396]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0b8      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d020      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800668c:	4b59      	ldr	r3, [pc, #356]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a58      	ldr	r2, [pc, #352]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066a4:	4b53      	ldr	r3, [pc, #332]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4a52      	ldr	r2, [pc, #328]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b0:	4b50      	ldr	r3, [pc, #320]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	494d      	ldr	r1, [pc, #308]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d044      	beq.n	8006758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d6:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d119      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e07f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d003      	beq.n	80066f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f6:	4b3f      	ldr	r3, [pc, #252]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e06f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e067      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006716:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f023 0203 	bic.w	r2, r3, #3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4934      	ldr	r1, [pc, #208]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	4313      	orrs	r3, r2
 8006726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006728:	f7fc fbda 	bl	8002ee0 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672e:	e00a      	b.n	8006746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006730:	f7fc fbd6 	bl	8002ee0 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f241 3288 	movw	r2, #5000	; 0x1388
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e04f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006746:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 020c 	and.w	r2, r3, #12
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	429a      	cmp	r2, r3
 8006756:	d1eb      	bne.n	8006730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d20c      	bcs.n	8006780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006766:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e032      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4916      	ldr	r1, [pc, #88]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	490e      	ldr	r1, [pc, #56]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067be:	f000 f821 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 80067c2:	4601      	mov	r1, r0
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	5cd3      	ldrb	r3, [r2, r3]
 80067d2:	fa21 f303 	lsr.w	r3, r1, r3
 80067d6:	4a09      	ldr	r2, [pc, #36]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067da:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fc fb3a 	bl	8002e58 <HAL_InitTick>

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40023c00 	.word	0x40023c00
 80067f4:	40023800 	.word	0x40023800
 80067f8:	0800c8f8 	.word	0x0800c8f8
 80067fc:	20000000 	.word	0x20000000
 8006800:	20000054 	.word	0x20000054

08006804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	2300      	movs	r3, #0
 8006814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800681a:	4b50      	ldr	r3, [pc, #320]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b04      	cmp	r3, #4
 8006824:	d007      	beq.n	8006836 <HAL_RCC_GetSysClockFreq+0x32>
 8006826:	2b08      	cmp	r3, #8
 8006828:	d008      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0x38>
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 808d 	bne.w	800694a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006830:	4b4b      	ldr	r3, [pc, #300]	; (8006960 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006832:	60bb      	str	r3, [r7, #8]
       break;
 8006834:	e08c      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006836:	4b4b      	ldr	r3, [pc, #300]	; (8006964 <HAL_RCC_GetSysClockFreq+0x160>)
 8006838:	60bb      	str	r3, [r7, #8]
      break;
 800683a:	e089      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800683c:	4b47      	ldr	r3, [pc, #284]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006846:	4b45      	ldr	r3, [pc, #276]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d023      	beq.n	800689a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006852:	4b42      	ldr	r3, [pc, #264]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	099b      	lsrs	r3, r3, #6
 8006858:	f04f 0400 	mov.w	r4, #0
 800685c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	ea03 0501 	and.w	r5, r3, r1
 8006868:	ea04 0602 	and.w	r6, r4, r2
 800686c:	4a3d      	ldr	r2, [pc, #244]	; (8006964 <HAL_RCC_GetSysClockFreq+0x160>)
 800686e:	fb02 f106 	mul.w	r1, r2, r6
 8006872:	2200      	movs	r2, #0
 8006874:	fb02 f205 	mul.w	r2, r2, r5
 8006878:	440a      	add	r2, r1
 800687a:	493a      	ldr	r1, [pc, #232]	; (8006964 <HAL_RCC_GetSysClockFreq+0x160>)
 800687c:	fba5 0101 	umull	r0, r1, r5, r1
 8006880:	1853      	adds	r3, r2, r1
 8006882:	4619      	mov	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	461a      	mov	r2, r3
 800688c:	4623      	mov	r3, r4
 800688e:	f7f9 fcc3 	bl	8000218 <__aeabi_uldivmod>
 8006892:	4603      	mov	r3, r0
 8006894:	460c      	mov	r4, r1
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e049      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	099b      	lsrs	r3, r3, #6
 80068a0:	f04f 0400 	mov.w	r4, #0
 80068a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	ea03 0501 	and.w	r5, r3, r1
 80068b0:	ea04 0602 	and.w	r6, r4, r2
 80068b4:	4629      	mov	r1, r5
 80068b6:	4632      	mov	r2, r6
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	f04f 0400 	mov.w	r4, #0
 80068c0:	0154      	lsls	r4, r2, #5
 80068c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068c6:	014b      	lsls	r3, r1, #5
 80068c8:	4619      	mov	r1, r3
 80068ca:	4622      	mov	r2, r4
 80068cc:	1b49      	subs	r1, r1, r5
 80068ce:	eb62 0206 	sbc.w	r2, r2, r6
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	f04f 0400 	mov.w	r4, #0
 80068da:	0194      	lsls	r4, r2, #6
 80068dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80068e0:	018b      	lsls	r3, r1, #6
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	eb64 0402 	sbc.w	r4, r4, r2
 80068e8:	f04f 0100 	mov.w	r1, #0
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	00e2      	lsls	r2, r4, #3
 80068f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068f6:	00d9      	lsls	r1, r3, #3
 80068f8:	460b      	mov	r3, r1
 80068fa:	4614      	mov	r4, r2
 80068fc:	195b      	adds	r3, r3, r5
 80068fe:	eb44 0406 	adc.w	r4, r4, r6
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	02a2      	lsls	r2, r4, #10
 800690c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006910:	0299      	lsls	r1, r3, #10
 8006912:	460b      	mov	r3, r1
 8006914:	4614      	mov	r4, r2
 8006916:	4618      	mov	r0, r3
 8006918:	4621      	mov	r1, r4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f04f 0400 	mov.w	r4, #0
 8006920:	461a      	mov	r2, r3
 8006922:	4623      	mov	r3, r4
 8006924:	f7f9 fc78 	bl	8000218 <__aeabi_uldivmod>
 8006928:	4603      	mov	r3, r0
 800692a:	460c      	mov	r4, r1
 800692c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCC_GetSysClockFreq+0x158>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	3301      	adds	r3, #1
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	60bb      	str	r3, [r7, #8]
      break;
 8006948:	e002      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <HAL_RCC_GetSysClockFreq+0x15c>)
 800694c:	60bb      	str	r3, [r7, #8]
      break;
 800694e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006950:	68bb      	ldr	r3, [r7, #8]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800
 8006960:	00f42400 	.word	0x00f42400
 8006964:	017d7840 	.word	0x017d7840

08006968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800696c:	4b03      	ldr	r3, [pc, #12]	; (800697c <HAL_RCC_GetHCLKFreq+0x14>)
 800696e:	681b      	ldr	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000000 	.word	0x20000000

08006980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006984:	f7ff fff0 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8006988:	4601      	mov	r1, r0
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	0a9b      	lsrs	r3, r3, #10
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	4a03      	ldr	r2, [pc, #12]	; (80069a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006996:	5cd3      	ldrb	r3, [r2, r3]
 8006998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	0800c908 	.word	0x0800c908

080069a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069ac:	f7ff ffdc 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 80069b0:	4601      	mov	r1, r0
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	0b5b      	lsrs	r3, r3, #13
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	4a03      	ldr	r2, [pc, #12]	; (80069cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069be:	5cd3      	ldrb	r3, [r2, r3]
 80069c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40023800 	.word	0x40023800
 80069cc:	0800c908 	.word	0x0800c908

080069d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80069f4:	4b7a      	ldr	r3, [pc, #488]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4977      	ldr	r1, [pc, #476]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006a12:	2301      	movs	r3, #1
 8006a14:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006a22:	4b6f      	ldr	r3, [pc, #444]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a28:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	496b      	ldr	r1, [pc, #428]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006a40:	2301      	movs	r3, #1
 8006a42:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d022      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006a50:	4b63      	ldr	r3, [pc, #396]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5e:	4960      	ldr	r1, [pc, #384]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006a7c:	4b58      	ldr	r3, [pc, #352]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	4954      	ldr	r1, [pc, #336]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d022      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab0:	494b      	ldr	r1, [pc, #300]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ace:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	493f      	ldr	r1, [pc, #252]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 808a 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	4b39      	ldr	r3, [pc, #228]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	4a38      	ldr	r2, [pc, #224]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b04:	6413      	str	r3, [r2, #64]	; 0x40
 8006b06:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b12:	4b34      	ldr	r3, [pc, #208]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b1e:	f7fc f9df 	bl	8002ee0 <HAL_GetTick>
 8006b22:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b26:	f7fc f9db 	bl	8002ee0 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e1d1      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b38:	4b2a      	ldr	r3, [pc, #168]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d02f      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d028      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b72:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b7e:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d114      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b8a:	f7fc f9a9 	bl	8002ee0 <HAL_GetTick>
 8006b8e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b92:	f7fc f9a5 	bl	8002ee0 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e199      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ee      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc0:	d114      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd6:	4902      	ldr	r1, [pc, #8]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]
 8006bdc:	e00c      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40007000 	.word	0x40007000
 8006be8:	42470e40 	.word	0x42470e40
 8006bec:	4b89      	ldr	r3, [pc, #548]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4a88      	ldr	r2, [pc, #544]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bf2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bf6:	6093      	str	r3, [r2, #8]
 8006bf8:	4b86      	ldr	r3, [pc, #536]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	4983      	ldr	r1, [pc, #524]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006c1c:	4b7e      	ldr	r3, [pc, #504]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006c1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006c2c:	4b79      	ldr	r3, [pc, #484]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	4976      	ldr	r1, [pc, #472]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c4e:	4b71      	ldr	r3, [pc, #452]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	496d      	ldr	r1, [pc, #436]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c7e:	4b65      	ldr	r3, [pc, #404]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	4961      	ldr	r1, [pc, #388]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d004      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	f040 80c6 	bne.w	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ca4:	4b5d      	ldr	r3, [pc, #372]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006caa:	f7fc f919 	bl	8002ee0 <HAL_GetTick>
 8006cae:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cb2:	f7fc f915 	bl	8002ee0 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e10b      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cc4:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006cd0:	4a53      	ldr	r2, [pc, #332]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d023      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d019      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d004      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d14:	d00e      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d019      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d115      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d32:	d110      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	019b      	lsls	r3, r3, #6
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	061b      	lsls	r3, r3, #24
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	071b      	lsls	r3, r3, #28
 8006d4e:	4931      	ldr	r1, [pc, #196]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d026      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d122      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d7e:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	019b      	lsls	r3, r3, #6
 8006d96:	431a      	orrs	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	071b      	lsls	r3, r3, #28
 8006da4:	491b      	ldr	r1, [pc, #108]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db2:	f023 021f 	bic.w	r2, r3, #31
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4915      	ldr	r1, [pc, #84]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	019b      	lsls	r3, r3, #6
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	061b      	lsls	r3, r3, #24
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	071b      	lsls	r3, r3, #28
 8006dea:	490a      	ldr	r1, [pc, #40]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006df8:	f7fc f872 	bl	8002ee0 <HAL_GetTick>
 8006dfc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dfe:	e011      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e00:	f7fc f86e 	bl	8002ee0 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d90a      	bls.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e064      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800
 8006e18:	424711e0 	.word	0x424711e0
 8006e1c:	42470068 	.word	0x42470068
 8006e20:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e24:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0e7      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e3c:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	4926      	ldr	r1, [pc, #152]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e64:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	491d      	ldr	r1, [pc, #116]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006e80:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	4915      	ldr	r1, [pc, #84]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	490c      	ldr	r1, [pc, #48]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	4904      	ldr	r1, [pc, #16]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800

08006ee8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d003      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f000 8098 	beq.w	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006f0c:	e12d      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006f0e:	4b9a      	ldr	r3, [pc, #616]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f14:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006f18:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f20:	d00c      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f26:	d802      	bhi.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006f2c:	e082      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f32:	d047      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006f34:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006f38:	d06f      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8006f3a:	e07b      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f3c:	4b8f      	ldr	r3, [pc, #572]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f3e:	617b      	str	r3, [r7, #20]
          break;
 8006f40:	e07b      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8006f42:	4b8d      	ldr	r3, [pc, #564]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f50:	d109      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f52:	4b89      	ldr	r3, [pc, #548]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f5c:	4a87      	ldr	r2, [pc, #540]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e019      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f66:	4b84      	ldr	r3, [pc, #528]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f74:	4b80      	ldr	r3, [pc, #512]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f7e:	4a80      	ldr	r2, [pc, #512]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	e008      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f88:	4b7b      	ldr	r3, [pc, #492]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f92:	4a7c      	ldr	r2, [pc, #496]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f9a:	4b77      	ldr	r3, [pc, #476]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa0:	099b      	lsrs	r3, r3, #6
 8006fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006fae:	4b72      	ldr	r3, [pc, #456]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb4:	0f1b      	lsrs	r3, r3, #28
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
          break;
 8006fc2:	e03a      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006fc4:	4b6c      	ldr	r3, [pc, #432]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd0:	d108      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fd2:	4b69      	ldr	r3, [pc, #420]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fda:	4a69      	ldr	r2, [pc, #420]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	e007      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fe4:	4b64      	ldr	r3, [pc, #400]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fec:	4a65      	ldr	r2, [pc, #404]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006ff4:	4b60      	ldr	r3, [pc, #384]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	099b      	lsrs	r3, r3, #6
 8006ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007006:	4b5c      	ldr	r3, [pc, #368]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	0f1b      	lsrs	r3, r3, #28
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
          break;
 8007018:	e00f      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800701a:	4b57      	ldr	r3, [pc, #348]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007026:	d102      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007028:	4b55      	ldr	r3, [pc, #340]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800702a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800702c:	e005      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800702e:	4b55      	ldr	r3, [pc, #340]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007030:	617b      	str	r3, [r7, #20]
          break;
 8007032:	e002      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
          break;
 8007038:	bf00      	nop
        }
      }
      break;
 800703a:	e096      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800703c:	4b4e      	ldr	r3, [pc, #312]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007042:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007046:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704e:	d00c      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007054:	d802      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800705a:	e082      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800705c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007060:	d047      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007062:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007066:	d06f      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007068:	e07b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800706a:	4b44      	ldr	r3, [pc, #272]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800706c:	617b      	str	r3, [r7, #20]
          break;
 800706e:	e07b      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007070:	4b41      	ldr	r3, [pc, #260]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800707e:	d109      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007080:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708a:	4a3c      	ldr	r2, [pc, #240]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e019      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007094:	4b38      	ldr	r3, [pc, #224]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800709c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a0:	d109      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070a2:	4b35      	ldr	r3, [pc, #212]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	4a34      	ldr	r2, [pc, #208]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e008      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070b6:	4b30      	ldr	r3, [pc, #192]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c0:	4a30      	ldr	r2, [pc, #192]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070c8:	4b2b      	ldr	r3, [pc, #172]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ce:	099b      	lsrs	r3, r3, #6
 80070d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070dc:	4b26      	ldr	r3, [pc, #152]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e2:	0f1b      	lsrs	r3, r3, #28
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	617b      	str	r3, [r7, #20]
          break;
 80070f0:	e03a      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070f2:	4b21      	ldr	r3, [pc, #132]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070fe:	d108      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007108:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800710a:	fbb2 f3f3 	udiv	r3, r2, r3
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	e007      	b.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007112:	4b19      	ldr	r3, [pc, #100]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	099b      	lsrs	r3, r3, #6
 8007128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007134:	4b10      	ldr	r3, [pc, #64]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	0f1b      	lsrs	r3, r3, #28
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	617b      	str	r3, [r7, #20]
          break;
 8007146:	e00f      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007154:	d102      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007158:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800715a:	e005      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800715e:	617b      	str	r3, [r7, #20]
          break;
 8007160:	e002      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
          break;
 8007166:	bf00      	nop
        }
      }
      break;
 8007168:	bf00      	nop
    }
  }
  return frequency;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40023800 	.word	0x40023800
 800717c:	00bb8000 	.word	0x00bb8000
 8007180:	017d7840 	.word	0x017d7840
 8007184:	00f42400 	.word	0x00f42400

08007188 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d075      	beq.n	800728c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071a0:	4ba2      	ldr	r3, [pc, #648]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d00c      	beq.n	80071c6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ac:	4b9f      	ldr	r3, [pc, #636]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d112      	bne.n	80071de <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071b8:	4b9c      	ldr	r3, [pc, #624]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071c4:	d10b      	bne.n	80071de <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c6:	4b99      	ldr	r3, [pc, #612]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d05b      	beq.n	800728a <HAL_RCC_OscConfig+0x102>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d157      	bne.n	800728a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e20b      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e6:	d106      	bne.n	80071f6 <HAL_RCC_OscConfig+0x6e>
 80071e8:	4b90      	ldr	r3, [pc, #576]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a8f      	ldr	r2, [pc, #572]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80071ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	e01d      	b.n	8007232 <HAL_RCC_OscConfig+0xaa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fe:	d10c      	bne.n	800721a <HAL_RCC_OscConfig+0x92>
 8007200:	4b8a      	ldr	r3, [pc, #552]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a89      	ldr	r2, [pc, #548]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4b87      	ldr	r3, [pc, #540]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a86      	ldr	r2, [pc, #536]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	e00b      	b.n	8007232 <HAL_RCC_OscConfig+0xaa>
 800721a:	4b84      	ldr	r3, [pc, #528]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a83      	ldr	r2, [pc, #524]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	4b81      	ldr	r3, [pc, #516]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a80      	ldr	r2, [pc, #512]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800722c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007230:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d013      	beq.n	8007262 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723a:	f7fb fe51 	bl	8002ee0 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007242:	f7fb fe4d 	bl	8002ee0 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b64      	cmp	r3, #100	; 0x64
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e1d0      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007254:	4b75      	ldr	r3, [pc, #468]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0xba>
 8007260:	e014      	b.n	800728c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fb fe3d 	bl	8002ee0 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800726a:	f7fb fe39 	bl	8002ee0 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b64      	cmp	r3, #100	; 0x64
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e1bc      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800727c:	4b6b      	ldr	r3, [pc, #428]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCC_OscConfig+0xe2>
 8007288:	e000      	b.n	800728c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800728a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d063      	beq.n	8007360 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007298:	4b64      	ldr	r3, [pc, #400]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072a4:	4b61      	ldr	r3, [pc, #388]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d11c      	bne.n	80072ea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072b0:	4b5e      	ldr	r3, [pc, #376]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d116      	bne.n	80072ea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072bc:	4b5b      	ldr	r3, [pc, #364]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_OscConfig+0x14c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e190      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d4:	4b55      	ldr	r3, [pc, #340]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	4952      	ldr	r1, [pc, #328]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e8:	e03a      	b.n	8007360 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d020      	beq.n	8007334 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f2:	4b4f      	ldr	r3, [pc, #316]	; (8007430 <HAL_RCC_OscConfig+0x2a8>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f8:	f7fb fdf2 	bl	8002ee0 <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007300:	f7fb fdee 	bl	8002ee0 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e171      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007312:	4b46      	ldr	r3, [pc, #280]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731e:	4b43      	ldr	r3, [pc, #268]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	493f      	ldr	r1, [pc, #252]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 800732e:	4313      	orrs	r3, r2
 8007330:	600b      	str	r3, [r1, #0]
 8007332:	e015      	b.n	8007360 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007334:	4b3e      	ldr	r3, [pc, #248]	; (8007430 <HAL_RCC_OscConfig+0x2a8>)
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733a:	f7fb fdd1 	bl	8002ee0 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007342:	f7fb fdcd 	bl	8002ee0 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e150      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007354:	4b35      	ldr	r3, [pc, #212]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d030      	beq.n	80073ce <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007374:	4b2f      	ldr	r3, [pc, #188]	; (8007434 <HAL_RCC_OscConfig+0x2ac>)
 8007376:	2201      	movs	r2, #1
 8007378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737a:	f7fb fdb1 	bl	8002ee0 <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007382:	f7fb fdad 	bl	8002ee0 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e130      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 8007396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <HAL_RCC_OscConfig+0x1fa>
 80073a0:	e015      	b.n	80073ce <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a8:	f7fb fd9a 	bl	8002ee0 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073b0:	f7fb fd96 	bl	8002ee0 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e119      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80073c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 809f 	beq.w	800751a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073e0:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10f      	bne.n	800740c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4b0e      	ldr	r3, [pc, #56]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6413      	str	r3, [r2, #64]	; 0x40
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <HAL_RCC_OscConfig+0x2a4>)
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <HAL_RCC_OscConfig+0x2b0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d120      	bne.n	800745a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <HAL_RCC_OscConfig+0x2b0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a06      	ldr	r2, [pc, #24]	; (8007438 <HAL_RCC_OscConfig+0x2b0>)
 800741e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007424:	f7fb fd5c 	bl	8002ee0 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742a:	e010      	b.n	800744e <HAL_RCC_OscConfig+0x2c6>
 800742c:	40023800 	.word	0x40023800
 8007430:	42470000 	.word	0x42470000
 8007434:	42470e80 	.word	0x42470e80
 8007438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800743c:	f7fb fd50 	bl	8002ee0 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e0d3      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744e:	4b6c      	ldr	r3, [pc, #432]	; (8007600 <HAL_RCC_OscConfig+0x478>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d106      	bne.n	8007470 <HAL_RCC_OscConfig+0x2e8>
 8007462:	4b68      	ldr	r3, [pc, #416]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	4a67      	ldr	r2, [pc, #412]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007468:	f043 0301 	orr.w	r3, r3, #1
 800746c:	6713      	str	r3, [r2, #112]	; 0x70
 800746e:	e01c      	b.n	80074aa <HAL_RCC_OscConfig+0x322>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b05      	cmp	r3, #5
 8007476:	d10c      	bne.n	8007492 <HAL_RCC_OscConfig+0x30a>
 8007478:	4b62      	ldr	r3, [pc, #392]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	4a61      	ldr	r2, [pc, #388]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 800747e:	f043 0304 	orr.w	r3, r3, #4
 8007482:	6713      	str	r3, [r2, #112]	; 0x70
 8007484:	4b5f      	ldr	r3, [pc, #380]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	4a5e      	ldr	r2, [pc, #376]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	6713      	str	r3, [r2, #112]	; 0x70
 8007490:	e00b      	b.n	80074aa <HAL_RCC_OscConfig+0x322>
 8007492:	4b5c      	ldr	r3, [pc, #368]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	4a5b      	ldr	r2, [pc, #364]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	6713      	str	r3, [r2, #112]	; 0x70
 800749e:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80074a4:	f023 0304 	bic.w	r3, r3, #4
 80074a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d015      	beq.n	80074de <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b2:	f7fb fd15 	bl	8002ee0 <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b8:	e00a      	b.n	80074d0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ba:	f7fb fd11 	bl	8002ee0 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e092      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d0:	4b4c      	ldr	r3, [pc, #304]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0ee      	beq.n	80074ba <HAL_RCC_OscConfig+0x332>
 80074dc:	e014      	b.n	8007508 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fb fcff 	bl	8002ee0 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fb fcfb 	bl	8002ee0 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e07c      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074fc:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1ee      	bne.n	80074e6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d105      	bne.n	800751a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800750e:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	4a3c      	ldr	r2, [pc, #240]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d068      	beq.n	80075f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007522:	4b38      	ldr	r3, [pc, #224]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 030c 	and.w	r3, r3, #12
 800752a:	2b08      	cmp	r3, #8
 800752c:	d060      	beq.n	80075f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d145      	bne.n	80075c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007536:	4b34      	ldr	r3, [pc, #208]	; (8007608 <HAL_RCC_OscConfig+0x480>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fb fcd0 	bl	8002ee0 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007544:	f7fb fccc 	bl	8002ee0 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04f      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	085b      	lsrs	r3, r3, #1
 800757a:	3b01      	subs	r3, #1
 800757c:	041b      	lsls	r3, r3, #16
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	071b      	lsls	r3, r3, #28
 800758e:	491d      	ldr	r1, [pc, #116]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007594:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <HAL_RCC_OscConfig+0x480>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fb fca1 	bl	8002ee0 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075a2:	f7fb fc9d 	bl	8002ee0 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e020      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b4:	4b13      	ldr	r3, [pc, #76]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x41a>
 80075c0:	e018      	b.n	80075f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c2:	4b11      	ldr	r3, [pc, #68]	; (8007608 <HAL_RCC_OscConfig+0x480>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fb fc8a 	bl	8002ee0 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d0:	f7fb fc86 	bl	8002ee0 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e009      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_RCC_OscConfig+0x47c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <HAL_RCC_OscConfig+0x448>
 80075ee:	e001      	b.n	80075f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40007000 	.word	0x40007000
 8007604:	40023800 	.word	0x40023800
 8007608:	42470060 	.word	0x42470060

0800760c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e022      	b.n	8007664 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fa f8e3 	bl	80017fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2203      	movs	r2, #3
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f814 	bl	800766c <HAL_SD_InitCard>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e00a      	b.n	8007664 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800766c:	b5b0      	push	{r4, r5, r7, lr}
 800766e:	b08e      	sub	sp, #56	; 0x38
 8007670:	af04      	add	r7, sp, #16
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007674:	2300      	movs	r3, #0
 8007676:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800767c:	2300      	movs	r3, #0
 800767e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007688:	2376      	movs	r3, #118	; 0x76
 800768a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681d      	ldr	r5, [r3, #0]
 8007690:	466c      	mov	r4, sp
 8007692:	f107 0314 	add.w	r3, r7, #20
 8007696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800769a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076a4:	4628      	mov	r0, r5
 80076a6:	f001 fa4b 	bl	8008b40 <SDIO_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80076b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e031      	b.n	8007720 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80076bc:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <HAL_SD_InitCard+0xbc>)
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f001 fa72 	bl	8008bb0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80076cc:	4b16      	ldr	r3, [pc, #88]	; (8007728 <HAL_SD_InitCard+0xbc>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fb18 	bl	8007d08 <SD_PowerON>
 80076d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e013      	b.n	8007720 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa37 	bl	8007b6c <SD_InitCard>
 80076fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3728      	adds	r7, #40	; 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bdb0      	pop	{r4, r5, r7, pc}
 8007728:	422580a0 	.word	0x422580a0

0800772c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773a:	0f9b      	lsrs	r3, r3, #30
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	0e9b      	lsrs	r3, r3, #26
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	b2da      	uxtb	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	b2da      	uxtb	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	b2da      	uxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b2da      	uxtb	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	b29a      	uxth	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007798:	0c1b      	lsrs	r3, r3, #16
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077aa:	0bdb      	lsrs	r3, r3, #15
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077bc:	0b9b      	lsrs	r3, r3, #14
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ce:	0b5b      	lsrs	r3, r3, #13
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e0:	0b1b      	lsrs	r3, r3, #12
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d163      	bne.n	80078c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007800:	009a      	lsls	r2, r3, #2
 8007802:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800780c:	0f92      	lsrs	r2, r2, #30
 800780e:	431a      	orrs	r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007818:	0edb      	lsrs	r3, r3, #27
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	b2da      	uxtb	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782a:	0e1b      	lsrs	r3, r3, #24
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	b2da      	uxtb	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783c:	0d5b      	lsrs	r3, r3, #21
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	b2da      	uxtb	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784e:	0c9b      	lsrs	r3, r3, #18
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	b2da      	uxtb	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007860:	0bdb      	lsrs	r3, r3, #15
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	7e1b      	ldrb	r3, [r3, #24]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	3302      	adds	r3, #2
 8007884:	2201      	movs	r2, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800788e:	fb02 f203 	mul.w	r2, r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	7a1b      	ldrb	r3, [r3, #8]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80078b0:	0a52      	lsrs	r2, r2, #9
 80078b2:	fb02 f203 	mul.w	r2, r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60
 80078c2:	e031      	b.n	8007928 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d11d      	bne.n	8007908 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	029a      	lsls	r2, r3, #10
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	661a      	str	r2, [r3, #96]	; 0x60
 8007906:	e00f      	b.n	8007928 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a58      	ldr	r2, [pc, #352]	; (8007a70 <HAL_SD_GetCardCSD+0x344>)
 800790e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e09d      	b.n	8007a64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	0b9b      	lsrs	r3, r3, #14
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793e:	09db      	lsrs	r3, r3, #7
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	b2da      	uxtb	r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	0fdb      	lsrs	r3, r3, #31
 8007962:	b2da      	uxtb	r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	0f5b      	lsrs	r3, r3, #29
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	b2da      	uxtb	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0e9b      	lsrs	r3, r3, #26
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	0d9b      	lsrs	r3, r3, #22
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	b2da      	uxtb	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	0d5b      	lsrs	r3, r3, #21
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	0bdb      	lsrs	r3, r3, #15
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	0b9b      	lsrs	r3, r3, #14
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	0b5b      	lsrs	r3, r3, #13
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	0b1b      	lsrs	r3, r3, #12
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	0a9b      	lsrs	r3, r3, #10
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	004005ff 	.word	0x004005ff

08007a74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a74:	b5b0      	push	{r4, r5, r7, lr}
 8007a76:	b08e      	sub	sp, #56	; 0x38
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d02e      	beq.n	8007aec <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a94:	d106      	bne.n	8007aa4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa2:	e029      	b.n	8007af8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9b9 	bl	8007e24 <SD_WideBus_Enable>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
 8007ac0:	e01a      	b.n	8007af8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9f6 	bl	8007eba <SD_WideBus_Disable>
 8007ace:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
 8007adc:	e00c      	b.n	8007af8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aea:	e005      	b.n	8007af8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e024      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681d      	ldr	r5, [r3, #0]
 8007b3a:	466c      	mov	r4, sp
 8007b3c:	f107 0318 	add.w	r3, r7, #24
 8007b40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b48:	f107 030c 	add.w	r3, r7, #12
 8007b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 fff6 	bl	8008b40 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bdb0      	pop	{r4, r5, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	004005ff 	.word	0x004005ff

08007b6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b6c:	b5b0      	push	{r4, r5, r7, lr}
 8007b6e:	b094      	sub	sp, #80	; 0x50
 8007b70:	af04      	add	r7, sp, #16
 8007b72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007b74:	2301      	movs	r3, #1
 8007b76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f826 	bl	8008bce <SDIO_GetPowerState>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b8c:	e0b7      	b.n	8007cfe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d02f      	beq.n	8007bf6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f9a5 	bl	8008eea <SDMMC_CmdSendCID>
 8007ba0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <SD_InitCard+0x40>
    {
      return errorstate;
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	e0a8      	b.n	8007cfe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 f850 	bl	8008c58 <SDIO_GetResponse>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2104      	movs	r1, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 f847 	bl	8008c58 <SDIO_GetResponse>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2108      	movs	r1, #8
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 f83e 	bl	8008c58 <SDIO_GetResponse>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	210c      	movs	r1, #12
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 f835 	bl	8008c58 <SDIO_GetResponse>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d00d      	beq.n	8007c1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f107 020e 	add.w	r2, r7, #14
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f9ab 	bl	8008f64 <SDMMC_CmdSetRelAdd>
 8007c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <SD_InitCard+0xae>
    {
      return errorstate;
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	e071      	b.n	8007cfe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d036      	beq.n	8007c90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c22:	89fb      	ldrh	r3, [r7, #14]
 8007c24:	461a      	mov	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f001 f975 	bl	8008f26 <SDMMC_CmdSendCSD>
 8007c3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c46:	e05a      	b.n	8007cfe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 f802 	bl	8008c58 <SDIO_GetResponse>
 8007c54:	4602      	mov	r2, r0
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2104      	movs	r1, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fff9 	bl	8008c58 <SDIO_GetResponse>
 8007c66:	4602      	mov	r2, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2108      	movs	r1, #8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fff0 	bl	8008c58 <SDIO_GetResponse>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	210c      	movs	r1, #12
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ffe7 	bl	8008c58 <SDIO_GetResponse>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2104      	movs	r1, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 ffde 	bl	8008c58 <SDIO_GetResponse>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	0d1a      	lsrs	r2, r3, #20
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ca4:	f107 0310 	add.w	r3, r7, #16
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fd3e 	bl	800772c <HAL_SD_GetCardCSD>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cba:	e020      	b.n	8007cfe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	041b      	lsls	r3, r3, #16
 8007cc6:	f04f 0400 	mov.w	r4, #0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4623      	mov	r3, r4
 8007cce:	4608      	mov	r0, r1
 8007cd0:	f001 f823 	bl	8008d1a <SDMMC_CmdSelDesel>
 8007cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <SD_InitCard+0x174>
  {
    return errorstate;
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	e00e      	b.n	8007cfe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681d      	ldr	r5, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	466c      	mov	r4, sp
 8007ce8:	f103 0210 	add.w	r2, r3, #16
 8007cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8007cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 ff22 	bl	8008b40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3740      	adds	r7, #64	; 0x40
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f81d 	bl	8008d60 <SDMMC_CmdGoIdleState>
 8007d26:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	e072      	b.n	8007e18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f830 	bl	8008d9c <SDMMC_CmdOperCond>
 8007d3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00d      	beq.n	8007d60 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f806 	bl	8008d60 <SDMMC_CmdGoIdleState>
 8007d54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	e05b      	b.n	8007e18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d137      	bne.n	8007dde <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f830 	bl	8008dda <SDMMC_CmdAppCommand>
 8007d7a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d02d      	beq.n	8007dde <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d86:	e047      	b.n	8007e18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 f823 	bl	8008dda <SDMMC_CmdAppCommand>
 8007d94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <SD_PowerON+0x98>
    {
      return errorstate;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	e03b      	b.n	8007e18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	491e      	ldr	r1, [pc, #120]	; (8007e20 <SD_PowerON+0x118>)
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 f839 	bl	8008e1e <SDMMC_CmdAppOperCommand>
 8007dac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007db8:	e02e      	b.n	8007e18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 ff49 	bl	8008c58 <SDIO_GetResponse>
 8007dc6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	0fdb      	lsrs	r3, r3, #31
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <SD_PowerON+0xcc>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <SD_PowerON+0xce>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]

    count++;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d802      	bhi.n	8007dee <SD_PowerON+0xe6>
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0cc      	beq.n	8007d88 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d902      	bls.n	8007dfe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dfc:	e00c      	b.n	8007e18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8007e0e:	e002      	b.n	8007e16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	c1100000 	.word	0xc1100000

08007e24 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	2300      	movs	r3, #0
 8007e32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 ff0c 	bl	8008c58 <SDIO_GetResponse>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e4a:	d102      	bne.n	8007e52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e50:	e02f      	b.n	8007eb2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e52:	f107 030c 	add.w	r3, r7, #12
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f879 	bl	8007f50 <SD_FindSCR>
 8007e5e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	e023      	b.n	8007eb2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01c      	beq.n	8007eae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f000 ffaa 	bl	8008dda <SDMMC_CmdAppCommand>
 8007e86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	e00f      	b.n	8007eb2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2102      	movs	r1, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 ffe3 	bl	8008e64 <SDMMC_CmdBusWidth>
 8007e9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	e003      	b.n	8007eb2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e001      	b.n	8007eb2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fec1 	bl	8008c58 <SDIO_GetResponse>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ee0:	d102      	bne.n	8007ee8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ee6:	e02f      	b.n	8007f48 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f82e 	bl	8007f50 <SD_FindSCR>
 8007ef4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	e023      	b.n	8007f48 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01c      	beq.n	8007f44 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f000 ff5f 	bl	8008dda <SDMMC_CmdAppCommand>
 8007f1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	e00f      	b.n	8007f48 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 ff98 	bl	8008e64 <SDMMC_CmdBusWidth>
 8007f34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	e003      	b.n	8007f48 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e001      	b.n	8007f48 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f50:	b590      	push	{r4, r7, lr}
 8007f52:	b08f      	sub	sp, #60	; 0x3c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f5a:	f7fa ffc1 	bl	8002ee0 <HAL_GetTick>
 8007f5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007f64:	2300      	movs	r3, #0
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2108      	movs	r1, #8
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fead 	bl	8008cd6 <SDMMC_CmdBlockLength>
 8007f7c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	e0a9      	b.n	80080dc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f000 ff20 	bl	8008dda <SDMMC_CmdAppCommand>
 8007f9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	e09a      	b.n	80080dc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007faa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007fac:	2308      	movs	r3, #8
 8007fae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007fb0:	2330      	movs	r3, #48	; 0x30
 8007fb2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f107 0210 	add.w	r2, r7, #16
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fe57 	bl	8008c7e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 ff67 	bl	8008ea8 <SDMMC_CmdSendSCR>
 8007fda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d022      	beq.n	8008028 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	e07a      	b.n	80080dc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	f107 0208 	add.w	r2, r7, #8
 8008000:	18d4      	adds	r4, r2, r3
 8008002:	4608      	mov	r0, r1
 8008004:	f000 fdc7 	bl	8008b96 <SDIO_ReadFIFO>
 8008008:	4603      	mov	r3, r0
 800800a:	6023      	str	r3, [r4, #0]
      index++;
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800e:	3301      	adds	r3, #1
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008012:	f7fa ff65 	bl	8002ee0 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d102      	bne.n	8008028 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008026:	e059      	b.n	80080dc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800802e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0d6      	beq.n	8007fe6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2208      	movs	r2, #8
 800804c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800804e:	2308      	movs	r3, #8
 8008050:	e044      	b.n	80080dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2202      	movs	r2, #2
 8008066:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	e037      	b.n	80080dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2220      	movs	r2, #32
 8008080:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008082:	2320      	movs	r3, #32
 8008084:	e02a      	b.n	80080dc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f240 523a 	movw	r2, #1338	; 0x53a
 800808e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	061a      	lsls	r2, r3, #24
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800809c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80080a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	0e1b      	lsrs	r3, r3, #24
 80080ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	601a      	str	r2, [r3, #0]
    scr++;
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	3304      	adds	r3, #4
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	061a      	lsls	r2, r3, #24
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	0e1b      	lsrs	r3, r3, #24
 80080d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	373c      	adds	r7, #60	; 0x3c
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd90      	pop	{r4, r7, pc}

080080e4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e034      	b.n	8008164 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7f9 fcca 	bl	8001aa8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3308      	adds	r3, #8
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f000 fc0a 	bl	8008938 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	461a      	mov	r2, r3
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	f000 fc72 	bl	8008a18 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6858      	ldr	r0, [r3, #4]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	f000 fcbd 	bl	8008ac0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	6892      	ldr	r2, [r2, #8]
 800814e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	6892      	ldr	r2, [r2, #8]
 800815a:	f041 0101 	orr.w	r1, r1, #1
 800815e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e03f      	b.n	80081fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f9 fb9a 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2224      	movs	r2, #36	; 0x24
 800819c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f829 	bl	8008208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800824a:	f023 030c 	bic.w	r3, r3, #12
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	430b      	orrs	r3, r1
 8008256:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008276:	f040 8199 	bne.w	80085ac <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4ac6      	ldr	r2, [pc, #792]	; (8008598 <UART_SetConfig+0x390>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00f      	beq.n	80082a4 <UART_SetConfig+0x9c>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4ac4      	ldr	r2, [pc, #784]	; (800859c <UART_SetConfig+0x394>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00a      	beq.n	80082a4 <UART_SetConfig+0x9c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4ac3      	ldr	r2, [pc, #780]	; (80085a0 <UART_SetConfig+0x398>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d005      	beq.n	80082a4 <UART_SetConfig+0x9c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4ac1      	ldr	r2, [pc, #772]	; (80085a4 <UART_SetConfig+0x39c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	f040 80bd 	bne.w	800841e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a4:	f7fe fb80 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 80082a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	461d      	mov	r5, r3
 80082ae:	f04f 0600 	mov.w	r6, #0
 80082b2:	46a8      	mov	r8, r5
 80082b4:	46b1      	mov	r9, r6
 80082b6:	eb18 0308 	adds.w	r3, r8, r8
 80082ba:	eb49 0409 	adc.w	r4, r9, r9
 80082be:	4698      	mov	r8, r3
 80082c0:	46a1      	mov	r9, r4
 80082c2:	eb18 0805 	adds.w	r8, r8, r5
 80082c6:	eb49 0906 	adc.w	r9, r9, r6
 80082ca:	f04f 0100 	mov.w	r1, #0
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082de:	4688      	mov	r8, r1
 80082e0:	4691      	mov	r9, r2
 80082e2:	eb18 0005 	adds.w	r0, r8, r5
 80082e6:	eb49 0106 	adc.w	r1, r9, r6
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	461d      	mov	r5, r3
 80082f0:	f04f 0600 	mov.w	r6, #0
 80082f4:	196b      	adds	r3, r5, r5
 80082f6:	eb46 0406 	adc.w	r4, r6, r6
 80082fa:	461a      	mov	r2, r3
 80082fc:	4623      	mov	r3, r4
 80082fe:	f7f7 ff8b 	bl	8000218 <__aeabi_uldivmod>
 8008302:	4603      	mov	r3, r0
 8008304:	460c      	mov	r4, r1
 8008306:	461a      	mov	r2, r3
 8008308:	4ba7      	ldr	r3, [pc, #668]	; (80085a8 <UART_SetConfig+0x3a0>)
 800830a:	fba3 2302 	umull	r2, r3, r3, r2
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	461d      	mov	r5, r3
 8008318:	f04f 0600 	mov.w	r6, #0
 800831c:	46a9      	mov	r9, r5
 800831e:	46b2      	mov	sl, r6
 8008320:	eb19 0309 	adds.w	r3, r9, r9
 8008324:	eb4a 040a 	adc.w	r4, sl, sl
 8008328:	4699      	mov	r9, r3
 800832a:	46a2      	mov	sl, r4
 800832c:	eb19 0905 	adds.w	r9, r9, r5
 8008330:	eb4a 0a06 	adc.w	sl, sl, r6
 8008334:	f04f 0100 	mov.w	r1, #0
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008348:	4689      	mov	r9, r1
 800834a:	4692      	mov	sl, r2
 800834c:	eb19 0005 	adds.w	r0, r9, r5
 8008350:	eb4a 0106 	adc.w	r1, sl, r6
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	461d      	mov	r5, r3
 800835a:	f04f 0600 	mov.w	r6, #0
 800835e:	196b      	adds	r3, r5, r5
 8008360:	eb46 0406 	adc.w	r4, r6, r6
 8008364:	461a      	mov	r2, r3
 8008366:	4623      	mov	r3, r4
 8008368:	f7f7 ff56 	bl	8000218 <__aeabi_uldivmod>
 800836c:	4603      	mov	r3, r0
 800836e:	460c      	mov	r4, r1
 8008370:	461a      	mov	r2, r3
 8008372:	4b8d      	ldr	r3, [pc, #564]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	; 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	3332      	adds	r3, #50	; 0x32
 8008386:	4a88      	ldr	r2, [pc, #544]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008394:	4498      	add	r8, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	461d      	mov	r5, r3
 800839a:	f04f 0600 	mov.w	r6, #0
 800839e:	46a9      	mov	r9, r5
 80083a0:	46b2      	mov	sl, r6
 80083a2:	eb19 0309 	adds.w	r3, r9, r9
 80083a6:	eb4a 040a 	adc.w	r4, sl, sl
 80083aa:	4699      	mov	r9, r3
 80083ac:	46a2      	mov	sl, r4
 80083ae:	eb19 0905 	adds.w	r9, r9, r5
 80083b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80083b6:	f04f 0100 	mov.w	r1, #0
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083ca:	4689      	mov	r9, r1
 80083cc:	4692      	mov	sl, r2
 80083ce:	eb19 0005 	adds.w	r0, r9, r5
 80083d2:	eb4a 0106 	adc.w	r1, sl, r6
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	461d      	mov	r5, r3
 80083dc:	f04f 0600 	mov.w	r6, #0
 80083e0:	196b      	adds	r3, r5, r5
 80083e2:	eb46 0406 	adc.w	r4, r6, r6
 80083e6:	461a      	mov	r2, r3
 80083e8:	4623      	mov	r3, r4
 80083ea:	f7f7 ff15 	bl	8000218 <__aeabi_uldivmod>
 80083ee:	4603      	mov	r3, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	461a      	mov	r2, r3
 80083f4:	4b6c      	ldr	r3, [pc, #432]	; (80085a8 <UART_SetConfig+0x3a0>)
 80083f6:	fba3 1302 	umull	r1, r3, r3, r2
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2164      	movs	r1, #100	; 0x64
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	3332      	adds	r3, #50	; 0x32
 8008408:	4a67      	ldr	r2, [pc, #412]	; (80085a8 <UART_SetConfig+0x3a0>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	f003 0207 	and.w	r2, r3, #7
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4442      	add	r2, r8
 800841a:	609a      	str	r2, [r3, #8]
 800841c:	e27d      	b.n	800891a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800841e:	f7fe faaf 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8008422:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	461d      	mov	r5, r3
 8008428:	f04f 0600 	mov.w	r6, #0
 800842c:	46a8      	mov	r8, r5
 800842e:	46b1      	mov	r9, r6
 8008430:	eb18 0308 	adds.w	r3, r8, r8
 8008434:	eb49 0409 	adc.w	r4, r9, r9
 8008438:	4698      	mov	r8, r3
 800843a:	46a1      	mov	r9, r4
 800843c:	eb18 0805 	adds.w	r8, r8, r5
 8008440:	eb49 0906 	adc.w	r9, r9, r6
 8008444:	f04f 0100 	mov.w	r1, #0
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008450:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008454:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008458:	4688      	mov	r8, r1
 800845a:	4691      	mov	r9, r2
 800845c:	eb18 0005 	adds.w	r0, r8, r5
 8008460:	eb49 0106 	adc.w	r1, r9, r6
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	461d      	mov	r5, r3
 800846a:	f04f 0600 	mov.w	r6, #0
 800846e:	196b      	adds	r3, r5, r5
 8008470:	eb46 0406 	adc.w	r4, r6, r6
 8008474:	461a      	mov	r2, r3
 8008476:	4623      	mov	r3, r4
 8008478:	f7f7 fece 	bl	8000218 <__aeabi_uldivmod>
 800847c:	4603      	mov	r3, r0
 800847e:	460c      	mov	r4, r1
 8008480:	461a      	mov	r2, r3
 8008482:	4b49      	ldr	r3, [pc, #292]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008484:	fba3 2302 	umull	r2, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	461d      	mov	r5, r3
 8008492:	f04f 0600 	mov.w	r6, #0
 8008496:	46a9      	mov	r9, r5
 8008498:	46b2      	mov	sl, r6
 800849a:	eb19 0309 	adds.w	r3, r9, r9
 800849e:	eb4a 040a 	adc.w	r4, sl, sl
 80084a2:	4699      	mov	r9, r3
 80084a4:	46a2      	mov	sl, r4
 80084a6:	eb19 0905 	adds.w	r9, r9, r5
 80084aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80084ae:	f04f 0100 	mov.w	r1, #0
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084c2:	4689      	mov	r9, r1
 80084c4:	4692      	mov	sl, r2
 80084c6:	eb19 0005 	adds.w	r0, r9, r5
 80084ca:	eb4a 0106 	adc.w	r1, sl, r6
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	461d      	mov	r5, r3
 80084d4:	f04f 0600 	mov.w	r6, #0
 80084d8:	196b      	adds	r3, r5, r5
 80084da:	eb46 0406 	adc.w	r4, r6, r6
 80084de:	461a      	mov	r2, r3
 80084e0:	4623      	mov	r3, r4
 80084e2:	f7f7 fe99 	bl	8000218 <__aeabi_uldivmod>
 80084e6:	4603      	mov	r3, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <UART_SetConfig+0x3a0>)
 80084ee:	fba3 1302 	umull	r1, r3, r3, r2
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	2164      	movs	r1, #100	; 0x64
 80084f6:	fb01 f303 	mul.w	r3, r1, r3
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	3332      	adds	r3, #50	; 0x32
 8008500:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800850e:	4498      	add	r8, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	461d      	mov	r5, r3
 8008514:	f04f 0600 	mov.w	r6, #0
 8008518:	46a9      	mov	r9, r5
 800851a:	46b2      	mov	sl, r6
 800851c:	eb19 0309 	adds.w	r3, r9, r9
 8008520:	eb4a 040a 	adc.w	r4, sl, sl
 8008524:	4699      	mov	r9, r3
 8008526:	46a2      	mov	sl, r4
 8008528:	eb19 0905 	adds.w	r9, r9, r5
 800852c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008530:	f04f 0100 	mov.w	r1, #0
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800853c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008544:	4689      	mov	r9, r1
 8008546:	4692      	mov	sl, r2
 8008548:	eb19 0005 	adds.w	r0, r9, r5
 800854c:	eb4a 0106 	adc.w	r1, sl, r6
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	461d      	mov	r5, r3
 8008556:	f04f 0600 	mov.w	r6, #0
 800855a:	196b      	adds	r3, r5, r5
 800855c:	eb46 0406 	adc.w	r4, r6, r6
 8008560:	461a      	mov	r2, r3
 8008562:	4623      	mov	r3, r4
 8008564:	f7f7 fe58 	bl	8000218 <__aeabi_uldivmod>
 8008568:	4603      	mov	r3, r0
 800856a:	460c      	mov	r4, r1
 800856c:	461a      	mov	r2, r3
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2164      	movs	r1, #100	; 0x64
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <UART_SetConfig+0x3a0>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 0207 	and.w	r2, r3, #7
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4442      	add	r2, r8
 8008594:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008596:	e1c0      	b.n	800891a <UART_SetConfig+0x712>
 8008598:	40011000 	.word	0x40011000
 800859c:	40011400 	.word	0x40011400
 80085a0:	40011800 	.word	0x40011800
 80085a4:	40011c00 	.word	0x40011c00
 80085a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4adc      	ldr	r2, [pc, #880]	; (8008924 <UART_SetConfig+0x71c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00f      	beq.n	80085d6 <UART_SetConfig+0x3ce>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4adb      	ldr	r2, [pc, #876]	; (8008928 <UART_SetConfig+0x720>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00a      	beq.n	80085d6 <UART_SetConfig+0x3ce>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4ad9      	ldr	r2, [pc, #868]	; (800892c <UART_SetConfig+0x724>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d005      	beq.n	80085d6 <UART_SetConfig+0x3ce>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4ad8      	ldr	r2, [pc, #864]	; (8008930 <UART_SetConfig+0x728>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	f040 80d1 	bne.w	8008778 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80085d6:	f7fe f9e7 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 80085da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	469a      	mov	sl, r3
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	46d0      	mov	r8, sl
 80085e6:	46d9      	mov	r9, fp
 80085e8:	eb18 0308 	adds.w	r3, r8, r8
 80085ec:	eb49 0409 	adc.w	r4, r9, r9
 80085f0:	4698      	mov	r8, r3
 80085f2:	46a1      	mov	r9, r4
 80085f4:	eb18 080a 	adds.w	r8, r8, sl
 80085f8:	eb49 090b 	adc.w	r9, r9, fp
 80085fc:	f04f 0100 	mov.w	r1, #0
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008608:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800860c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008610:	4688      	mov	r8, r1
 8008612:	4691      	mov	r9, r2
 8008614:	eb1a 0508 	adds.w	r5, sl, r8
 8008618:	eb4b 0609 	adc.w	r6, fp, r9
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4619      	mov	r1, r3
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 0400 	mov.w	r4, #0
 800862e:	0094      	lsls	r4, r2, #2
 8008630:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008634:	008b      	lsls	r3, r1, #2
 8008636:	461a      	mov	r2, r3
 8008638:	4623      	mov	r3, r4
 800863a:	4628      	mov	r0, r5
 800863c:	4631      	mov	r1, r6
 800863e:	f7f7 fdeb 	bl	8000218 <__aeabi_uldivmod>
 8008642:	4603      	mov	r3, r0
 8008644:	460c      	mov	r4, r1
 8008646:	461a      	mov	r2, r3
 8008648:	4bba      	ldr	r3, [pc, #744]	; (8008934 <UART_SetConfig+0x72c>)
 800864a:	fba3 2302 	umull	r2, r3, r3, r2
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	469b      	mov	fp, r3
 8008658:	f04f 0c00 	mov.w	ip, #0
 800865c:	46d9      	mov	r9, fp
 800865e:	46e2      	mov	sl, ip
 8008660:	eb19 0309 	adds.w	r3, r9, r9
 8008664:	eb4a 040a 	adc.w	r4, sl, sl
 8008668:	4699      	mov	r9, r3
 800866a:	46a2      	mov	sl, r4
 800866c:	eb19 090b 	adds.w	r9, r9, fp
 8008670:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008674:	f04f 0100 	mov.w	r1, #0
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008688:	4689      	mov	r9, r1
 800868a:	4692      	mov	sl, r2
 800868c:	eb1b 0509 	adds.w	r5, fp, r9
 8008690:	eb4c 060a 	adc.w	r6, ip, sl
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4619      	mov	r1, r3
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	f04f 0400 	mov.w	r4, #0
 80086a6:	0094      	lsls	r4, r2, #2
 80086a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086ac:	008b      	lsls	r3, r1, #2
 80086ae:	461a      	mov	r2, r3
 80086b0:	4623      	mov	r3, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	4631      	mov	r1, r6
 80086b6:	f7f7 fdaf 	bl	8000218 <__aeabi_uldivmod>
 80086ba:	4603      	mov	r3, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	461a      	mov	r2, r3
 80086c0:	4b9c      	ldr	r3, [pc, #624]	; (8008934 <UART_SetConfig+0x72c>)
 80086c2:	fba3 1302 	umull	r1, r3, r3, r2
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	2164      	movs	r1, #100	; 0x64
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	3332      	adds	r3, #50	; 0x32
 80086d4:	4a97      	ldr	r2, [pc, #604]	; (8008934 <UART_SetConfig+0x72c>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086e0:	4498      	add	r8, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	469b      	mov	fp, r3
 80086e6:	f04f 0c00 	mov.w	ip, #0
 80086ea:	46d9      	mov	r9, fp
 80086ec:	46e2      	mov	sl, ip
 80086ee:	eb19 0309 	adds.w	r3, r9, r9
 80086f2:	eb4a 040a 	adc.w	r4, sl, sl
 80086f6:	4699      	mov	r9, r3
 80086f8:	46a2      	mov	sl, r4
 80086fa:	eb19 090b 	adds.w	r9, r9, fp
 80086fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008702:	f04f 0100 	mov.w	r1, #0
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800870e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008716:	4689      	mov	r9, r1
 8008718:	4692      	mov	sl, r2
 800871a:	eb1b 0509 	adds.w	r5, fp, r9
 800871e:	eb4c 060a 	adc.w	r6, ip, sl
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	4619      	mov	r1, r3
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	f04f 0400 	mov.w	r4, #0
 8008734:	0094      	lsls	r4, r2, #2
 8008736:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800873a:	008b      	lsls	r3, r1, #2
 800873c:	461a      	mov	r2, r3
 800873e:	4623      	mov	r3, r4
 8008740:	4628      	mov	r0, r5
 8008742:	4631      	mov	r1, r6
 8008744:	f7f7 fd68 	bl	8000218 <__aeabi_uldivmod>
 8008748:	4603      	mov	r3, r0
 800874a:	460c      	mov	r4, r1
 800874c:	461a      	mov	r2, r3
 800874e:	4b79      	ldr	r3, [pc, #484]	; (8008934 <UART_SetConfig+0x72c>)
 8008750:	fba3 1302 	umull	r1, r3, r3, r2
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	2164      	movs	r1, #100	; 0x64
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	3332      	adds	r3, #50	; 0x32
 8008762:	4a74      	ldr	r2, [pc, #464]	; (8008934 <UART_SetConfig+0x72c>)
 8008764:	fba2 2303 	umull	r2, r3, r2, r3
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4442      	add	r2, r8
 8008774:	609a      	str	r2, [r3, #8]
 8008776:	e0d0      	b.n	800891a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fe f902 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 800877c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	469a      	mov	sl, r3
 8008782:	f04f 0b00 	mov.w	fp, #0
 8008786:	46d0      	mov	r8, sl
 8008788:	46d9      	mov	r9, fp
 800878a:	eb18 0308 	adds.w	r3, r8, r8
 800878e:	eb49 0409 	adc.w	r4, r9, r9
 8008792:	4698      	mov	r8, r3
 8008794:	46a1      	mov	r9, r4
 8008796:	eb18 080a 	adds.w	r8, r8, sl
 800879a:	eb49 090b 	adc.w	r9, r9, fp
 800879e:	f04f 0100 	mov.w	r1, #0
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087b2:	4688      	mov	r8, r1
 80087b4:	4691      	mov	r9, r2
 80087b6:	eb1a 0508 	adds.w	r5, sl, r8
 80087ba:	eb4b 0609 	adc.w	r6, fp, r9
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	f04f 0400 	mov.w	r4, #0
 80087d0:	0094      	lsls	r4, r2, #2
 80087d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087d6:	008b      	lsls	r3, r1, #2
 80087d8:	461a      	mov	r2, r3
 80087da:	4623      	mov	r3, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	4631      	mov	r1, r6
 80087e0:	f7f7 fd1a 	bl	8000218 <__aeabi_uldivmod>
 80087e4:	4603      	mov	r3, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	461a      	mov	r2, r3
 80087ea:	4b52      	ldr	r3, [pc, #328]	; (8008934 <UART_SetConfig+0x72c>)
 80087ec:	fba3 2302 	umull	r2, r3, r3, r2
 80087f0:	095b      	lsrs	r3, r3, #5
 80087f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	469b      	mov	fp, r3
 80087fa:	f04f 0c00 	mov.w	ip, #0
 80087fe:	46d9      	mov	r9, fp
 8008800:	46e2      	mov	sl, ip
 8008802:	eb19 0309 	adds.w	r3, r9, r9
 8008806:	eb4a 040a 	adc.w	r4, sl, sl
 800880a:	4699      	mov	r9, r3
 800880c:	46a2      	mov	sl, r4
 800880e:	eb19 090b 	adds.w	r9, r9, fp
 8008812:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008816:	f04f 0100 	mov.w	r1, #0
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800882a:	4689      	mov	r9, r1
 800882c:	4692      	mov	sl, r2
 800882e:	eb1b 0509 	adds.w	r5, fp, r9
 8008832:	eb4c 060a 	adc.w	r6, ip, sl
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4619      	mov	r1, r3
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	f04f 0400 	mov.w	r4, #0
 8008848:	0094      	lsls	r4, r2, #2
 800884a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800884e:	008b      	lsls	r3, r1, #2
 8008850:	461a      	mov	r2, r3
 8008852:	4623      	mov	r3, r4
 8008854:	4628      	mov	r0, r5
 8008856:	4631      	mov	r1, r6
 8008858:	f7f7 fcde 	bl	8000218 <__aeabi_uldivmod>
 800885c:	4603      	mov	r3, r0
 800885e:	460c      	mov	r4, r1
 8008860:	461a      	mov	r2, r3
 8008862:	4b34      	ldr	r3, [pc, #208]	; (8008934 <UART_SetConfig+0x72c>)
 8008864:	fba3 1302 	umull	r1, r3, r3, r2
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	2164      	movs	r1, #100	; 0x64
 800886c:	fb01 f303 	mul.w	r3, r1, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	3332      	adds	r3, #50	; 0x32
 8008876:	4a2f      	ldr	r2, [pc, #188]	; (8008934 <UART_SetConfig+0x72c>)
 8008878:	fba2 2303 	umull	r2, r3, r2, r3
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008882:	4498      	add	r8, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	469b      	mov	fp, r3
 8008888:	f04f 0c00 	mov.w	ip, #0
 800888c:	46d9      	mov	r9, fp
 800888e:	46e2      	mov	sl, ip
 8008890:	eb19 0309 	adds.w	r3, r9, r9
 8008894:	eb4a 040a 	adc.w	r4, sl, sl
 8008898:	4699      	mov	r9, r3
 800889a:	46a2      	mov	sl, r4
 800889c:	eb19 090b 	adds.w	r9, r9, fp
 80088a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088a4:	f04f 0100 	mov.w	r1, #0
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088b8:	4689      	mov	r9, r1
 80088ba:	4692      	mov	sl, r2
 80088bc:	eb1b 0509 	adds.w	r5, fp, r9
 80088c0:	eb4c 060a 	adc.w	r6, ip, sl
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f04f 0200 	mov.w	r2, #0
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	f04f 0400 	mov.w	r4, #0
 80088d6:	0094      	lsls	r4, r2, #2
 80088d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088dc:	008b      	lsls	r3, r1, #2
 80088de:	461a      	mov	r2, r3
 80088e0:	4623      	mov	r3, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	4631      	mov	r1, r6
 80088e6:	f7f7 fc97 	bl	8000218 <__aeabi_uldivmod>
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	461a      	mov	r2, r3
 80088f0:	4b10      	ldr	r3, [pc, #64]	; (8008934 <UART_SetConfig+0x72c>)
 80088f2:	fba3 1302 	umull	r1, r3, r3, r2
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	2164      	movs	r1, #100	; 0x64
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	3332      	adds	r3, #50	; 0x32
 8008904:	4a0b      	ldr	r2, [pc, #44]	; (8008934 <UART_SetConfig+0x72c>)
 8008906:	fba2 2303 	umull	r2, r3, r2, r3
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	f003 020f 	and.w	r2, r3, #15
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4442      	add	r2, r8
 8008916:	609a      	str	r2, [r3, #8]
}
 8008918:	e7ff      	b.n	800891a <UART_SetConfig+0x712>
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	40011000 	.word	0x40011000
 8008928:	40011400 	.word	0x40011400
 800892c:	40011800 	.word	0x40011800
 8008930:	40011c00 	.word	0x40011c00
 8008934:	51eb851f 	.word	0x51eb851f

08008938 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <FSMC_NORSRAM_Init+0xdc>)
 8008956:	4013      	ands	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008962:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008968:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800896e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008974:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800897a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008980:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008986:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800898c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008992:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008998:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800899e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80089a4:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80089aa:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d103      	bne.n	80089c2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d6:	d10a      	bne.n	80089ee <FSMC_NORSRAM_Init+0xb6>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d006      	beq.n	8008a04 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	ffc00480 	.word	0xffc00480

08008a18 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008a3a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a46:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008a4e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008a56:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a60:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	3b02      	subs	r3, #2
 8008a68:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008a6a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a70:	4313      	orrs	r3, r2
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6979      	ldr	r1, [r7, #20]
 8008a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a90:	d10e      	bne.n	8008ab0 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a9a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	051b      	lsls	r3, r3, #20
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
	...

08008ac0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad8:	d122      	bne.n	8008b20 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008af6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008afe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008b06:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b0c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008b1e:	e005      	b.n	8008b2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	cff00000 	.word	0xcff00000

08008b40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008b40:	b084      	sub	sp, #16
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	f107 001c 	add.w	r0, r7, #28
 8008b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008b56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008b58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008b5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008b5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008b62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008b66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008b6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008b7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	b004      	add	sp, #16
 8008b94:	4770      	bx	lr

08008b96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2203      	movs	r2, #3
 8008bbc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008bbe:	2002      	movs	r0, #2
 8008bc0:	f7fa f99a 	bl	8002ef8 <HAL_Delay>
  
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0303 	and.w	r3, r3, #3
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008c14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c24:	f023 030f 	bic.w	r3, r3, #15
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	b2db      	uxtb	r3, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3314      	adds	r3, #20
 8008c66:	461a      	mov	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
}  
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008ca4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008caa:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008cb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0

}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ce8:	2340      	movs	r3, #64	; 0x40
 8008cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cf6:	f107 0308 	add.w	r3, r7, #8
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff ff74 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d06:	2110      	movs	r1, #16
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f975 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d10:	69fb      	ldr	r3, [r7, #28]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3720      	adds	r7, #32
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b08a      	sub	sp, #40	; 0x28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d2a:	2307      	movs	r3, #7
 8008d2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d2e:	2340      	movs	r3, #64	; 0x40
 8008d30:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d3a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d3c:	f107 0310 	add.w	r3, r7, #16
 8008d40:	4619      	mov	r1, r3
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ff51 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4c:	2107      	movs	r1, #7
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 f952 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008d54:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3728      	adds	r7, #40	; 0x28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff ff30 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f90c 	bl	8008fa8 <SDMMC_GetCmdError>
 8008d90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d92:	69fb      	ldr	r3, [r7, #28]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008da4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008daa:	2308      	movs	r3, #8
 8008dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dae:	2340      	movs	r3, #64	; 0x40
 8008db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff ff11 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 faf5 	bl	80093b8 <SDMMC_GetCmdResp7>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008de8:	2337      	movs	r3, #55	; 0x37
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fef2 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0a:	2137      	movs	r1, #55	; 0x37
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8f3 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e14:	69fb      	ldr	r3, [r7, #28]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e34:	2329      	movs	r3, #41	; 0x29
 8008e36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e38:	2340      	movs	r3, #64	; 0x40
 8008e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fecc 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa02 	bl	800925c <SDMMC_GetCmdResp3>
 8008e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e72:	2306      	movs	r3, #6
 8008e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fead 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	2106      	movs	r1, #6
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8ae 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008eb4:	2333      	movs	r3, #51	; 0x33
 8008eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fe8c 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed6:	2133      	movs	r1, #51	; 0x33
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f88d 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b088      	sub	sp, #32
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008efa:	23c0      	movs	r3, #192	; 0xc0
 8008efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008efe:	2300      	movs	r3, #0
 8008f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fe6b 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f95b 	bl	80091d0 <SDMMC_GetCmdResp2>
 8008f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f34:	2309      	movs	r3, #9
 8008f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f38:	23c0      	movs	r3, #192	; 0xc0
 8008f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fe4c 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f93c 	bl	80091d0 <SDMMC_GetCmdResp2>
 8008f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f72:	2303      	movs	r3, #3
 8008f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe2d 	bl	8008bea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	2103      	movs	r1, #3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f99b 	bl	80092d0 <SDMMC_GetCmdResp6>
 8008f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008fa8:	b490      	push	{r4, r7}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <SDMMC_GetCmdError+0x48>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a0f      	ldr	r2, [pc, #60]	; (8008ff4 <SDMMC_GetCmdError+0x4c>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	0a5b      	lsrs	r3, r3, #9
 8008fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008fc4:	4623      	mov	r3, r4
 8008fc6:	1e5c      	subs	r4, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fd0:	e009      	b.n	8008fe6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f2      	beq.n	8008fc4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	22c5      	movs	r2, #197	; 0xc5
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc90      	pop	{r4, r7}
 8008fee:	4770      	bx	lr
 8008ff0:	20000000 	.word	0x20000000
 8008ff4:	10624dd3 	.word	0x10624dd3

08008ff8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	460b      	mov	r3, r1
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009006:	4b6f      	ldr	r3, [pc, #444]	; (80091c4 <SDMMC_GetCmdResp1+0x1cc>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a6f      	ldr	r2, [pc, #444]	; (80091c8 <SDMMC_GetCmdResp1+0x1d0>)
 800900c:	fba2 2303 	umull	r2, r3, r2, r3
 8009010:	0a5b      	lsrs	r3, r3, #9
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009018:	4623      	mov	r3, r4
 800901a:	1e5c      	subs	r4, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009020:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009024:	e0c9      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f0      	beq.n	8009018 <SDMMC_GetCmdResp1+0x20>
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1eb      	bne.n	8009018 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2204      	movs	r2, #4
 8009050:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009052:	2304      	movs	r3, #4
 8009054:	e0b1      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009068:	2301      	movs	r3, #1
 800906a:	e0a6      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	22c5      	movs	r2, #197	; 0xc5
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fde3 	bl	8008c3e <SDIO_GetCommandResponse>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	4293      	cmp	r3, r2
 8009080:	d001      	beq.n	8009086 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009082:	2301      	movs	r3, #1
 8009084:	e099      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff fde5 	bl	8008c58 <SDIO_GetResponse>
 800908e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	4b4e      	ldr	r3, [pc, #312]	; (80091cc <SDMMC_GetCmdResp1+0x1d4>)
 8009094:	4013      	ands	r3, r2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800909a:	2300      	movs	r3, #0
 800909c:	e08d      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da02      	bge.n	80090aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090a8:	e087      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	e080      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090c2:	2380      	movs	r3, #128	; 0x80
 80090c4:	e079      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	e071      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e4:	e069      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f4:	e061      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009104:	e059      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009114:	e051      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009124:	e049      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009134:	e041      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009144:	e039      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009154:	e031      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009164:	e029      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009170:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009174:	e021      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009180:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009184:	e019      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009190:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009194:	e011      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091a4:	e009      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091b4:	e001      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd90      	pop	{r4, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000000 	.word	0x20000000
 80091c8:	10624dd3 	.word	0x10624dd3
 80091cc:	fdffe008 	.word	0xfdffe008

080091d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80091d0:	b490      	push	{r4, r7}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <SDMMC_GetCmdResp2+0x84>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <SDMMC_GetCmdResp2+0x88>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	0a5b      	lsrs	r3, r3, #9
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80091ec:	4623      	mov	r3, r4
 80091ee:	1e5c      	subs	r4, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f8:	e026      	b.n	8009248 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f0      	beq.n	80091ec <SDMMC_GetCmdResp2+0x1c>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1eb      	bne.n	80091ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009226:	2304      	movs	r3, #4
 8009228:	e00e      	b.n	8009248 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800923c:	2301      	movs	r3, #1
 800923e:	e003      	b.n	8009248 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	22c5      	movs	r2, #197	; 0xc5
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bc90      	pop	{r4, r7}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000000 	.word	0x20000000
 8009258:	10624dd3 	.word	0x10624dd3

0800925c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800925c:	b490      	push	{r4, r7}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009264:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <SDMMC_GetCmdResp3+0x6c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a18      	ldr	r2, [pc, #96]	; (80092cc <SDMMC_GetCmdResp3+0x70>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	0a5b      	lsrs	r3, r3, #9
 8009270:	f241 3288 	movw	r2, #5000	; 0x1388
 8009274:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009278:	4623      	mov	r3, r4
 800927a:	1e5c      	subs	r4, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009284:	e01b      	b.n	80092be <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0f0      	beq.n	8009278 <SDMMC_GetCmdResp3+0x1c>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1eb      	bne.n	8009278 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2204      	movs	r2, #4
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092b2:	2304      	movs	r3, #4
 80092b4:	e003      	b.n	80092be <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	22c5      	movs	r2, #197	; 0xc5
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc90      	pop	{r4, r7}
 80092c6:	4770      	bx	lr
 80092c8:	20000000 	.word	0x20000000
 80092cc:	10624dd3 	.word	0x10624dd3

080092d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092d0:	b590      	push	{r4, r7, lr}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092de:	4b34      	ldr	r3, [pc, #208]	; (80093b0 <SDMMC_GetCmdResp6+0xe0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a34      	ldr	r2, [pc, #208]	; (80093b4 <SDMMC_GetCmdResp6+0xe4>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	0a5b      	lsrs	r3, r3, #9
 80092ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80092f2:	4623      	mov	r3, r4
 80092f4:	1e5c      	subs	r4, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092fe:	e052      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009304:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0f0      	beq.n	80092f2 <SDMMC_GetCmdResp6+0x22>
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1eb      	bne.n	80092f2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	f003 0304 	and.w	r3, r3, #4
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2204      	movs	r2, #4
 800932a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800932c:	2304      	movs	r3, #4
 800932e:	e03a      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2201      	movs	r2, #1
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009342:	2301      	movs	r3, #1
 8009344:	e02f      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff fc79 	bl	8008c3e <SDIO_GetCommandResponse>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	4293      	cmp	r3, r2
 8009354:	d001      	beq.n	800935a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009356:	2301      	movs	r3, #1
 8009358:	e025      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	22c5      	movs	r2, #197	; 0xc5
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009360:	2100      	movs	r1, #0
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fc78 	bl	8008c58 <SDIO_GetResponse>
 8009368:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800937e:	2300      	movs	r3, #0
 8009380:	e011      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800938c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009390:	e009      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800939c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093a0:	e001      	b.n	80093a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd90      	pop	{r4, r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000000 	.word	0x20000000
 80093b4:	10624dd3 	.word	0x10624dd3

080093b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80093b8:	b490      	push	{r4, r7}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093c0:	4b21      	ldr	r3, [pc, #132]	; (8009448 <SDMMC_GetCmdResp7+0x90>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a21      	ldr	r2, [pc, #132]	; (800944c <SDMMC_GetCmdResp7+0x94>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	0a5b      	lsrs	r3, r3, #9
 80093cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80093d4:	4623      	mov	r3, r4
 80093d6:	1e5c      	subs	r4, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d102      	bne.n	80093e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093e0:	e02c      	b.n	800943c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <SDMMC_GetCmdResp7+0x1c>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1eb      	bne.n	80093d4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800940e:	2304      	movs	r3, #4
 8009410:	e014      	b.n	800943c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d004      	beq.n	8009428 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009424:	2301      	movs	r3, #1
 8009426:	e009      	b.n	800943c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2240      	movs	r2, #64	; 0x40
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800943a:	2300      	movs	r3, #0
  
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bc90      	pop	{r4, r7}
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000000 	.word	0x20000000
 800944c:	10624dd3 	.word	0x10624dd3

08009450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009450:	b084      	sub	sp, #16
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	f107 001c 	add.w	r0, r7, #28
 800945e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2b01      	cmp	r3, #1
 8009466:	d122      	bne.n	80094ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800947c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d105      	bne.n	80094a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f94a 	bl	800973c <USB_CoreReset>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e01a      	b.n	80094e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f93e 	bl	800973c <USB_CoreReset>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
 80094d6:	e005      	b.n	80094e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d10b      	bne.n	8009502 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f043 0206 	orr.w	r2, r3, #6
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800950e:	b004      	add	sp, #16
 8009510:	4770      	bx	lr

08009512 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f043 0201 	orr.w	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f023 0201 	bic.w	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d106      	bne.n	8009582 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	e00b      	b.n	800959a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60da      	str	r2, [r3, #12]
 8009594:	e001      	b.n	800959a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e003      	b.n	80095a2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800959a:	2032      	movs	r0, #50	; 0x32
 800959c:	f7f9 fcac 	bl	8002ef8 <HAL_Delay>

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	019b      	lsls	r3, r3, #6
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <USB_FlushTxFifo+0x48>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d901      	bls.n	80095d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e006      	b.n	80095e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d0f0      	beq.n	80095c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	00030d40 	.word	0x00030d40

080095f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2210      	movs	r2, #16
 8009608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3301      	adds	r3, #1
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a09      	ldr	r2, [pc, #36]	; (8009638 <USB_FlushRxFifo+0x40>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d901      	bls.n	800961c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e006      	b.n	800962a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b10      	cmp	r3, #16
 8009626:	d0f0      	beq.n	800960a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	00030d40 	.word	0x00030d40

0800963c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	; 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4611      	mov	r1, r2
 8009648:	461a      	mov	r2, r3
 800964a:	460b      	mov	r3, r1
 800964c:	71fb      	strb	r3, [r7, #7]
 800964e:	4613      	mov	r3, r2
 8009650:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800965a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d11a      	bne.n	8009698 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009662:	88bb      	ldrh	r3, [r7, #4]
 8009664:	3303      	adds	r3, #3
 8009666:	089b      	lsrs	r3, r3, #2
 8009668:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800966a:	2300      	movs	r3, #0
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	e00f      	b.n	8009690 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	031a      	lsls	r2, r3, #12
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4413      	add	r3, r2
 8009678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967c:	461a      	mov	r2, r3
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3304      	adds	r3, #4
 8009688:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	3301      	adds	r3, #1
 800968e:	61bb      	str	r3, [r7, #24]
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	429a      	cmp	r2, r3
 8009696:	d3eb      	bcc.n	8009670 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3724      	adds	r7, #36	; 0x24
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b089      	sub	sp, #36	; 0x24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	4613      	mov	r3, r2
 80096b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80096bc:	88fb      	ldrh	r3, [r7, #6]
 80096be:	3303      	adds	r3, #3
 80096c0:	089b      	lsrs	r3, r3, #2
 80096c2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80096c4:	2300      	movs	r3, #0
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	e00b      	b.n	80096e2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3304      	adds	r3, #4
 80096da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	3301      	adds	r3, #1
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d3ef      	bcc.n	80096ca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80096ea:	69fb      	ldr	r3, [r7, #28]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3724      	adds	r7, #36	; 0x24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4013      	ands	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009710:	68fb      	ldr	r3, [r7, #12]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0301 	and.w	r3, r3, #1
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
	...

0800973c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <USB_CoreReset+0x64>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d901      	bls.n	800975a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e01b      	b.n	8009792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	daf2      	bge.n	8009748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f043 0201 	orr.w	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <USB_CoreReset+0x64>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d901      	bls.n	8009784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e006      	b.n	8009792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b01      	cmp	r3, #1
 800978e:	d0f0      	beq.n	8009772 <USB_CoreReset+0x36>

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	00030d40 	.word	0x00030d40

080097a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097a4:	b084      	sub	sp, #16
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	f107 001c 	add.w	r0, r7, #28
 80097b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097c0:	461a      	mov	r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d018      	beq.n	800981c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d10a      	bne.n	8009806 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097fe:	f043 0304 	orr.w	r3, r3, #4
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	e014      	b.n	8009830 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009814:	f023 0304 	bic.w	r3, r3, #4
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	e009      	b.n	8009830 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800982a:	f023 0304 	bic.w	r3, r3, #4
 800982e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009830:	2110      	movs	r1, #16
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff feba 	bl	80095ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fedd 	bl	80095f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	e015      	b.n	8009870 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4413      	add	r3, r2
 800984c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009850:	461a      	mov	r2, r3
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4413      	add	r3, r2
 8009860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009864:	461a      	mov	r2, r3
 8009866:	2300      	movs	r3, #0
 8009868:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d3e5      	bcc.n	8009844 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009878:	2101      	movs	r1, #1
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f8ac 	bl	80099d8 <USB_DriveVbus>

  HAL_Delay(200U);
 8009880:	20c8      	movs	r0, #200	; 0xc8
 8009882:	f7f9 fb39 	bl	8002ef8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a14      	ldr	r2, [pc, #80]	; (80098fc <USB_HostInit+0x158>)
 80098ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a13      	ldr	r2, [pc, #76]	; (8009900 <USB_HostInit+0x15c>)
 80098b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80098b6:	e009      	b.n	80098cc <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2280      	movs	r2, #128	; 0x80
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a10      	ldr	r2, [pc, #64]	; (8009904 <USB_HostInit+0x160>)
 80098c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a10      	ldr	r2, [pc, #64]	; (8009908 <USB_HostInit+0x164>)
 80098c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d105      	bne.n	80098de <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f043 0210 	orr.w	r2, r3, #16
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	4b0a      	ldr	r3, [pc, #40]	; (800990c <USB_HostInit+0x168>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098f6:	b004      	add	sp, #16
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	01000200 	.word	0x01000200
 8009900:	00e00300 	.word	0x00e00300
 8009904:	00600080 	.word	0x00600080
 8009908:	004000e0 	.word	0x004000e0
 800990c:	a3200008 	.word	0xa3200008

08009910 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009948:	4313      	orrs	r3, r2
 800994a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d107      	bne.n	8009962 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009958:	461a      	mov	r2, r3
 800995a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800995e:	6053      	str	r3, [r2, #4]
 8009960:	e009      	b.n	8009976 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d106      	bne.n	8009976 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996e:	461a      	mov	r2, r3
 8009970:	f241 7370 	movw	r3, #6000	; 0x1770
 8009974:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80099b4:	2064      	movs	r0, #100	; 0x64
 80099b6:	f7f9 fa9f 	bl	8002ef8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80099c8:	200a      	movs	r0, #10
 80099ca:	f7f9 fa95 	bl	8002ef8 <HAL_Delay>

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d109      	bne.n	8009a1c <USB_DriveVbus+0x44>
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d106      	bne.n	8009a1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a26:	d109      	bne.n	8009a3c <USB_DriveVbus+0x64>
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	0c5b      	lsrs	r3, r3, #17
 8009a68:	f003 0303 	and.w	r3, r3, #3
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	b29b      	uxth	r3, r3
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
	...

08009a9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	70fb      	strb	r3, [r7, #3]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70bb      	strb	r3, [r7, #2]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aca:	461a      	mov	r2, r3
 8009acc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009ad2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d87e      	bhi.n	8009bd8 <USB_HC_Init+0x13c>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USB_HC_Init+0x44>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b9b 	.word	0x08009b9b
 8009ae8:	08009af1 	.word	0x08009af1
 8009aec:	08009b5d 	.word	0x08009b5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afc:	461a      	mov	r2, r3
 8009afe:	f240 439d 	movw	r3, #1181	; 0x49d
 8009b02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009b04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da10      	bge.n	8009b2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	78fa      	ldrb	r2, [r7, #3]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b2a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009b2c:	e057      	b.n	8009bde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d051      	beq.n	8009bde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009b58:	60d3      	str	r3, [r2, #12]
      break;
 8009b5a:	e040      	b.n	8009bde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8009b6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da34      	bge.n	8009be2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b98:	e023      	b.n	8009be2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f240 2325 	movw	r3, #549	; 0x225
 8009bac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009bae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da17      	bge.n	8009be6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009bb6:	78fb      	ldrb	r3, [r7, #3]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009bd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009bd6:	e006      	b.n	8009be6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75fb      	strb	r3, [r7, #23]
      break;
 8009bdc:	e004      	b.n	8009be8 <USB_HC_Init+0x14c>
      break;
 8009bde:	bf00      	nop
 8009be0:	e002      	b.n	8009be8 <USB_HC_Init+0x14c>
      break;
 8009be2:	bf00      	nop
 8009be4:	e000      	b.n	8009be8 <USB_HC_Init+0x14c>
      break;
 8009be6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c02:	4313      	orrs	r3, r2
 8009c04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009c12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da03      	bge.n	8009c22 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	e001      	b.n	8009c26 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d103      	bne.n	8009c36 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e001      	b.n	8009c3a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c3a:	787b      	ldrb	r3, [r7, #1]
 8009c3c:	059b      	lsls	r3, r3, #22
 8009c3e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c42:	78bb      	ldrb	r3, [r7, #2]
 8009c44:	02db      	lsls	r3, r3, #11
 8009c46:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c4a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c50:	049b      	lsls	r3, r3, #18
 8009c52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c56:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	0159      	lsls	r1, r3, #5
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	440b      	add	r3, r1
 8009c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c70:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c76:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009c78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d10f      	bne.n	8009ca0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c9e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop

08009cb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ccc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d028      	beq.n	8009d2c <USB_HC_StartXfer+0x7c>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d124      	bne.n	8009d2c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <USB_HC_StartXfer+0x50>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	795b      	ldrb	r3, [r3, #5]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d107      	bne.n	8009d00 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fa30 	bl	800a15c <USB_DoPing>
      return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e114      	b.n	8009f2a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d112      	bne.n	8009d2c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	6a3a      	ldr	r2, [r7, #32]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d20:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009d24:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d018      	beq.n	8009d66 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	8912      	ldrh	r2, [r2, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	8912      	ldrh	r2, [r2, #8]
 8009d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d48:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009d4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d4c:	8b7b      	ldrh	r3, [r7, #26]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d90b      	bls.n	8009d6a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009d52:	8b7b      	ldrh	r3, [r7, #26]
 8009d54:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	8912      	ldrh	r2, [r2, #8]
 8009d5c:	fb02 f203 	mul.w	r2, r2, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	611a      	str	r2, [r3, #16]
 8009d64:	e001      	b.n	8009d6a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8009d66:	2301      	movs	r3, #1
 8009d68:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	78db      	ldrb	r3, [r3, #3]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d006      	beq.n	8009d80 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	8912      	ldrh	r2, [r2, #8]
 8009d78:	fb02 f203 	mul.w	r2, r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d8a:	04d9      	lsls	r1, r3, #19
 8009d8c:	4b69      	ldr	r3, [pc, #420]	; (8009f34 <USB_HC_StartXfer+0x284>)
 8009d8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	7a9b      	ldrb	r3, [r3, #10]
 8009d96:	075b      	lsls	r3, r3, #29
 8009d98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d9c:	69f9      	ldr	r1, [r7, #28]
 8009d9e:	0148      	lsls	r0, r1, #5
 8009da0:	6a39      	ldr	r1, [r7, #32]
 8009da2:	4401      	add	r1, r0
 8009da4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009da8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009daa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	68d9      	ldr	r1, [r3, #12]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc2:	460a      	mov	r2, r1
 8009dc4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bf0c      	ite	eq
 8009dd6:	2301      	moveq	r3, #1
 8009dd8:	2300      	movne	r3, #0
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69fa      	ldr	r2, [r7, #28]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	6a3a      	ldr	r2, [r7, #32]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009df8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009dfc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	7e7b      	ldrb	r3, [r7, #25]
 8009e0e:	075b      	lsls	r3, r3, #29
 8009e10:	69f9      	ldr	r1, [r7, #28]
 8009e12:	0148      	lsls	r0, r1, #5
 8009e14:	6a39      	ldr	r1, [r7, #32]
 8009e16:	4401      	add	r1, r0
 8009e18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a42      	ldr	r2, [pc, #264]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e30:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e32:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e3c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e46:	4b3c      	ldr	r3, [pc, #240]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4e:	4a3a      	ldr	r2, [pc, #232]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	e005      	b.n	8009e60 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e54:	4b38      	ldr	r3, [pc, #224]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e5c:	4a36      	ldr	r2, [pc, #216]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e5e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e60:	4b35      	ldr	r3, [pc, #212]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e68:	4a33      	ldr	r2, [pc, #204]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b2f      	ldr	r3, [pc, #188]	; (8009f38 <USB_HC_StartXfer+0x288>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e04f      	b.n	8009f2a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	78db      	ldrb	r3, [r3, #3]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d14a      	bne.n	8009f28 <USB_HC_StartXfer+0x278>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d046      	beq.n	8009f28 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	79db      	ldrb	r3, [r3, #7]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d830      	bhi.n	8009f04 <USB_HC_StartXfer+0x254>
 8009ea2:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <USB_HC_StartXfer+0x1f8>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009eb9 	.word	0x08009eb9
 8009eac:	08009edd 	.word	0x08009edd
 8009eb0:	08009eb9 	.word	0x08009eb9
 8009eb4:	08009edd 	.word	0x08009edd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	3303      	adds	r3, #3
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009ec2:	8afa      	ldrh	r2, [r7, #22]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d91c      	bls.n	8009f08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f043 0220 	orr.w	r2, r3, #32
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009eda:	e015      	b.n	8009f08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	3303      	adds	r3, #3
 8009ee2:	089b      	lsrs	r3, r3, #2
 8009ee4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009ee6:	8afa      	ldrh	r2, [r7, #22]
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d90a      	bls.n	8009f0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f02:	e003      	b.n	8009f0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009f04:	bf00      	nop
 8009f06:	e002      	b.n	8009f0e <USB_HC_StartXfer+0x25e>
        break;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <USB_HC_StartXfer+0x25e>
        break;
 8009f0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	68d9      	ldr	r1, [r3, #12]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	785a      	ldrb	r2, [r3, #1]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	b298      	uxth	r0, r3
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	4603      	mov	r3, r0
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fb8a 	bl	800963c <USB_WritePacket>
  }

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3728      	adds	r7, #40	; 0x28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	1ff80000 	.word	0x1ff80000
 8009f38:	2000014c 	.word	0x2000014c

08009f3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	b29b      	uxth	r3, r3
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b087      	sub	sp, #28
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	0c9b      	lsrs	r3, r3, #18
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <USB_HC_Halt+0x3a>
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d16c      	bne.n	800a072 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d143      	bne.n	800a04c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fe2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a002:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a01e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a022:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	3301      	adds	r3, #1
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a030:	d81d      	bhi.n	800a06e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a048:	d0ec      	beq.n	800a024 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a04a:	e080      	b.n	800a14e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	4413      	add	r3, r2
 800a054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	0151      	lsls	r1, r2, #5
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	440a      	add	r2, r1
 800a062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a06a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a06c:	e06f      	b.n	800a14e <USB_HC_Halt+0x1f0>
          break;
 800a06e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a070:	e06d      	b.n	800a14e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	440a      	add	r2, r1
 800a088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a08c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a090:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d143      	bne.n	800a12a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a100:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	3301      	adds	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a10e:	d81d      	bhi.n	800a14c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a126:	d0ec      	beq.n	800a102 <USB_HC_Halt+0x1a4>
 800a128:	e011      	b.n	800a14e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	4413      	add	r3, r2
 800a132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	e000      	b.n	800a14e <USB_HC_Halt+0x1f0>
          break;
 800a14c:	bf00      	nop
    }
  }

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a16c:	78fb      	ldrb	r3, [r7, #3]
 800a16e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a170:	2301      	movs	r3, #1
 800a172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	04da      	lsls	r2, r3, #19
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <USB_DoPing+0x74>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	440a      	add	r2, r1
 800a184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a18c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	4413      	add	r3, r2
 800a196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	1ff80000 	.word	0x1ff80000

0800a1d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff f9a5 	bl	8009534 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a1ea:	2110      	movs	r1, #16
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f9dd 	bl	80095ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff fa00 	bl	80095f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e01f      	b.n	800a23e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4413      	add	r3, r2
 800a206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a214:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a21c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a224:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a232:	461a      	mov	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3301      	adds	r3, #1
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b0f      	cmp	r3, #15
 800a242:	d9dc      	bls.n	800a1fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a244:	2300      	movs	r3, #0
 800a246:	613b      	str	r3, [r7, #16]
 800a248:	e034      	b.n	800a2b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4413      	add	r3, r2
 800a252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a260:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a268:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a270:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a27e:	461a      	mov	r2, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	3301      	adds	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a290:	d80c      	bhi.n	800a2ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2a8:	d0ec      	beq.n	800a284 <USB_StopHost+0xb0>
 800a2aa:	e000      	b.n	800a2ae <USB_StopHost+0xda>
        break;
 800a2ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	613b      	str	r3, [r7, #16]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b0f      	cmp	r3, #15
 800a2b8:	d9c7      	bls.n	800a24a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff f91e 	bl	8009512 <USB_EnableGlobalInt>

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b089      	sub	sp, #36	; 0x24
 800a2e4:	af04      	add	r7, sp, #16
 800a2e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	2102      	movs	r1, #2
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fc68 	bl	800abc4 <USBH_FindInterface>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	2bff      	cmp	r3, #255	; 0xff
 800a2fc:	d002      	beq.n	800a304 <USBH_CDC_InterfaceInit+0x24>
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d901      	bls.n	800a308 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	e13d      	b.n	800a584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fc3d 	bl	800ab8c <USBH_SelectInterface>
 800a312:	4603      	mov	r3, r0
 800a314:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a31c:	2302      	movs	r3, #2
 800a31e:	e131      	b.n	800a584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a326:	2050      	movs	r0, #80	; 0x50
 800a328:	f002 fa04 	bl	800c734 <malloc>
 800a32c:	4603      	mov	r3, r0
 800a32e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a340:	2302      	movs	r3, #2
 800a342:	e11f      	b.n	800a584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a344:	2250      	movs	r2, #80	; 0x50
 800a346:	2100      	movs	r1, #0
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f002 fa03 	bl	800c754 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	211a      	movs	r1, #26
 800a354:	fb01 f303 	mul.w	r3, r1, r3
 800a358:	4413      	add	r3, r2
 800a35a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b25b      	sxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	da15      	bge.n	800a392 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	211a      	movs	r1, #26
 800a36c:	fb01 f303 	mul.w	r3, r1, r3
 800a370:	4413      	add	r3, r2
 800a372:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	211a      	movs	r1, #26
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	4413      	add	r3, r2
 800a388:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a38c:	881a      	ldrh	r2, [r3, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fe36 	bl	800c00a <USBH_AllocPipe>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	7819      	ldrb	r1, [r3, #0]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	7858      	ldrb	r0, [r3, #1]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	8952      	ldrh	r2, [r2, #10]
 800a3be:	9202      	str	r2, [sp, #8]
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	9201      	str	r2, [sp, #4]
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	4623      	mov	r3, r4
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 fdee 	bl	800bfac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f002 f8fb 	bl	800c5d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	210a      	movs	r1, #10
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fbed 	bl	800abc4 <USBH_FindInterface>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	2bff      	cmp	r3, #255	; 0xff
 800a3f2:	d002      	beq.n	800a3fa <USBH_CDC_InterfaceInit+0x11a>
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d901      	bls.n	800a3fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e0c2      	b.n	800a584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	211a      	movs	r1, #26
 800a404:	fb01 f303 	mul.w	r3, r1, r3
 800a408:	4413      	add	r3, r2
 800a40a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	b25b      	sxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	da16      	bge.n	800a444 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	211a      	movs	r1, #26
 800a41c:	fb01 f303 	mul.w	r3, r1, r3
 800a420:	4413      	add	r3, r2
 800a422:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	211a      	movs	r1, #26
 800a432:	fb01 f303 	mul.w	r3, r1, r3
 800a436:	4413      	add	r3, r2
 800a438:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a43c:	881a      	ldrh	r2, [r3, #0]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	835a      	strh	r2, [r3, #26]
 800a442:	e015      	b.n	800a470 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	211a      	movs	r1, #26
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	4413      	add	r3, r2
 800a450:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a454:	781a      	ldrb	r2, [r3, #0]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	211a      	movs	r1, #26
 800a460:	fb01 f303 	mul.w	r3, r1, r3
 800a464:	4413      	add	r3, r2
 800a466:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a46a:	881a      	ldrh	r2, [r3, #0]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	211a      	movs	r1, #26
 800a476:	fb01 f303 	mul.w	r3, r1, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	b25b      	sxtb	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	da16      	bge.n	800a4b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	211a      	movs	r1, #26
 800a48e:	fb01 f303 	mul.w	r3, r1, r3
 800a492:	4413      	add	r3, r2
 800a494:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	211a      	movs	r1, #26
 800a4a4:	fb01 f303 	mul.w	r3, r1, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4ae:	881a      	ldrh	r2, [r3, #0]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	835a      	strh	r2, [r3, #26]
 800a4b4:	e015      	b.n	800a4e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	211a      	movs	r1, #26
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	211a      	movs	r1, #26
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4dc:	881a      	ldrh	r2, [r3, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	7b9b      	ldrb	r3, [r3, #14]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fd8e 	bl	800c00a <USBH_AllocPipe>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	7bdb      	ldrb	r3, [r3, #15]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fd84 	bl	800c00a <USBH_AllocPipe>
 800a502:	4603      	mov	r3, r0
 800a504:	461a      	mov	r2, r3
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	7b59      	ldrb	r1, [r3, #13]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	7b98      	ldrb	r0, [r3, #14]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	8b12      	ldrh	r2, [r2, #24]
 800a522:	9202      	str	r2, [sp, #8]
 800a524:	2202      	movs	r2, #2
 800a526:	9201      	str	r2, [sp, #4]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4623      	mov	r3, r4
 800a52c:	4602      	mov	r2, r0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fd3c 	bl	800bfac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	7b19      	ldrb	r1, [r3, #12]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	7bd8      	ldrb	r0, [r3, #15]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	8b52      	ldrh	r2, [r2, #26]
 800a54c:	9202      	str	r2, [sp, #8]
 800a54e:	2202      	movs	r2, #2
 800a550:	9201      	str	r2, [sp, #4]
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	4623      	mov	r3, r4
 800a556:	4602      	mov	r2, r0
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fd27 	bl	800bfac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	7b5b      	ldrb	r3, [r3, #13]
 800a56a:	2200      	movs	r2, #0
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f002 f830 	bl	800c5d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	7b1b      	ldrb	r3, [r3, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f002 f829 	bl	800c5d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}

0800a58c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00e      	beq.n	800a5c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 fd1c 	bl	800bfea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 fd47 	bl	800c04c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	7b1b      	ldrb	r3, [r3, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	7b1b      	ldrb	r3, [r3, #12]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fd09 	bl	800bfea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	7b1b      	ldrb	r3, [r3, #12]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fd34 	bl	800c04c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	7b5b      	ldrb	r3, [r3, #13]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00e      	beq.n	800a610 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	7b5b      	ldrb	r3, [r3, #13]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fcf6 	bl	800bfea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	7b5b      	ldrb	r3, [r3, #13]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fd21 	bl	800c04c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	4618      	mov	r0, r3
 800a626:	f002 f88d 	bl	800c744 <free>
    phost->pActiveClass->pData = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a630:	2200      	movs	r2, #0
 800a632:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3340      	adds	r3, #64	; 0x40
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f8b1 	bl	800a7be <GetLineCoding>
 800a65c:	4603      	mov	r3, r0
 800a65e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a66c:	2102      	movs	r1, #2
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a672:	7afb      	ldrb	r3, [r7, #11]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a684:	2301      	movs	r3, #1
 800a686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d877      	bhi.n	800a790 <USBH_CDC_Process+0x114>
 800a6a0:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <USBH_CDC_Process+0x2c>)
 800a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a6:	bf00      	nop
 800a6a8:	0800a6bd 	.word	0x0800a6bd
 800a6ac:	0800a6c3 	.word	0x0800a6c3
 800a6b0:	0800a6f3 	.word	0x0800a6f3
 800a6b4:	0800a767 	.word	0x0800a767
 800a6b8:	0800a775 	.word	0x0800a775
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e06d      	b.n	800a79e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f897 	bl	800a7fc <SetLineCoding>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6e0:	e058      	b.n	800a794 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d055      	beq.n	800a794 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a6f0:	e050      	b.n	800a794 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	3340      	adds	r3, #64	; 0x40
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f860 	bl	800a7be <GetLineCoding>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a702:	7bbb      	ldrb	r3, [r7, #14]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d126      	bne.n	800a756 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a71a:	791b      	ldrb	r3, [r3, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d13b      	bne.n	800a798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d133      	bne.n	800a798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d12b      	bne.n	800a798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a748:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d124      	bne.n	800a798 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f95a 	bl	800aa08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a754:	e020      	b.n	800a798 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d01d      	beq.n	800a798 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2204      	movs	r2, #4
 800a760:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a764:	e018      	b.n	800a798 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f867 	bl	800a83a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f8dc 	bl	800a92a <CDC_ProcessReception>
      break;
 800a772:	e014      	b.n	800a79e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a774:	2100      	movs	r1, #0
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 ffe5 	bl	800b746 <USBH_ClrFeature>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a78e:	e005      	b.n	800a79c <USBH_CDC_Process+0x120>

    default:
      break;
 800a790:	bf00      	nop
 800a792:	e004      	b.n	800a79e <USBH_CDC_Process+0x122>
      break;
 800a794:	bf00      	nop
 800a796:	e002      	b.n	800a79e <USBH_CDC_Process+0x122>
      break;
 800a798:	bf00      	nop
 800a79a:	e000      	b.n	800a79e <USBH_CDC_Process+0x122>
      break;
 800a79c:	bf00      	nop

  }

  return status;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	22a1      	movs	r2, #161	; 0xa1
 800a7cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2221      	movs	r2, #33	; 0x21
 800a7d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2207      	movs	r2, #7
 800a7e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f98a 	bl	800bb06 <USBH_CtlReq>
 800a7f2:	4603      	mov	r3, r0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2221      	movs	r2, #33	; 0x21
 800a80a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2207      	movs	r2, #7
 800a822:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2207      	movs	r2, #7
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 f96b 	bl	800bb06 <USBH_CtlReq>
 800a830:	4603      	mov	r3, r0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af02      	add	r7, sp, #8
 800a840:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a856:	2b01      	cmp	r3, #1
 800a858:	d002      	beq.n	800a860 <CDC_ProcessTransmission+0x26>
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d025      	beq.n	800a8aa <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800a85e:	e060      	b.n	800a922 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	8b12      	ldrh	r2, [r2, #24]
 800a868:	4293      	cmp	r3, r2
 800a86a:	d90c      	bls.n	800a886 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	69d9      	ldr	r1, [r3, #28]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8b1a      	ldrh	r2, [r3, #24]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	7b58      	ldrb	r0, [r3, #13]
 800a878:	2301      	movs	r3, #1
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4603      	mov	r3, r0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 fb51 	bl	800bf26 <USBH_BulkSendData>
 800a884:	e00c      	b.n	800a8a0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	7b58      	ldrb	r0, [r3, #13]
 800a894:	2301      	movs	r3, #1
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4603      	mov	r3, r0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fb43 	bl	800bf26 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8a8:	e03b      	b.n	800a922 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	7b5b      	ldrb	r3, [r3, #13]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fe65 	bl	800c580 <USBH_LL_GetURBState>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a8ba:	7afb      	ldrb	r3, [r7, #11]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d128      	bne.n	800a912 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	8b12      	ldrh	r2, [r2, #24]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d90e      	bls.n	800a8ea <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	8b12      	ldrh	r2, [r2, #24]
 800a8d4:	1a9a      	subs	r2, r3, r2
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	8b12      	ldrh	r2, [r2, #24]
 800a8e2:	441a      	add	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	61da      	str	r2, [r3, #28]
 800a8e8:	e002      	b.n	800a8f0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a900:	e00e      	b.n	800a920 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f868 	bl	800a9e0 <USBH_CDC_TransmitCallback>
      break;
 800a910:	e006      	b.n	800a920 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d103      	bne.n	800a920 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a920:	bf00      	nop
  }
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b086      	sub	sp, #24
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a946:	2b03      	cmp	r3, #3
 800a948:	d002      	beq.n	800a950 <CDC_ProcessReception+0x26>
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d00e      	beq.n	800a96c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a94e:	e043      	b.n	800a9d8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6a19      	ldr	r1, [r3, #32]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	8b5a      	ldrh	r2, [r3, #26]
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	7b1b      	ldrb	r3, [r3, #12]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 fb07 	bl	800bf70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2204      	movs	r2, #4
 800a966:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a96a:	e035      	b.n	800a9d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	7b1b      	ldrb	r3, [r3, #12]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fe04 	bl	800c580 <USBH_LL_GetURBState>
 800a978:	4603      	mov	r3, r0
 800a97a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a97c:	7cfb      	ldrb	r3, [r7, #19]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d129      	bne.n	800a9d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fd67 	bl	800c45c <USBH_LL_GetLastXferSize>
 800a98e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d016      	beq.n	800a9c8 <CDC_ProcessReception+0x9e>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	8b5b      	ldrh	r3, [r3, #26]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d910      	bls.n	800a9c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	1ad2      	subs	r2, r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	6a1a      	ldr	r2, [r3, #32]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	441a      	add	r2, r3
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2203      	movs	r2, #3
 800a9c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a9c6:	e006      	b.n	800a9d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f80f 	bl	800a9f4 <USBH_CDC_ReceiveCallback>
      break;
 800a9d6:	bf00      	nop
  }
}
 800a9d8:	bf00      	nop
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aa30:	2302      	movs	r3, #2
 800aa32:	e029      	b.n	800aa88 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	79fa      	ldrb	r2, [r7, #7]
 800aa38:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f81f 	bl	800aa90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f001 fc39 	bl	800c2f8 <USBH_LL_Init>

  return USBH_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	e009      	b.n	800aab6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	33e0      	adds	r3, #224	; 0xe0
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b0e      	cmp	r3, #14
 800aaba:	d9f2      	bls.n	800aaa2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e009      	b.n	800aad6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3301      	adds	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aadc:	d3f1      	bcc.n	800aac2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2240      	movs	r2, #64	; 0x40
 800ab02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d016      	beq.n	800ab7a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10e      	bne.n	800ab74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab5c:	1c59      	adds	r1, r3, #1
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	33de      	adds	r3, #222	; 0xde
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
 800ab72:	e004      	b.n	800ab7e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab74:	2302      	movs	r3, #2
 800ab76:	73fb      	strb	r3, [r7, #15]
 800ab78:	e001      	b.n	800ab7e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d204      	bcs.n	800abb2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	78fa      	ldrb	r2, [r7, #3]
 800abac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800abb0:	e001      	b.n	800abb6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800abb2:	2302      	movs	r3, #2
 800abb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	461a      	mov	r2, r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	70fb      	strb	r3, [r7, #3]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70bb      	strb	r3, [r7, #2]
 800abda:	4613      	mov	r3, r2
 800abdc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800abec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abee:	e025      	b.n	800ac3c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
 800abf2:	221a      	movs	r2, #26
 800abf4:	fb02 f303 	mul.w	r3, r2, r3
 800abf8:	3308      	adds	r3, #8
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	3302      	adds	r3, #2
 800ac00:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	795b      	ldrb	r3, [r3, #5]
 800ac06:	78fa      	ldrb	r2, [r7, #3]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d002      	beq.n	800ac12 <USBH_FindInterface+0x4e>
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	2bff      	cmp	r3, #255	; 0xff
 800ac10:	d111      	bne.n	800ac36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac16:	78ba      	ldrb	r2, [r7, #2]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d002      	beq.n	800ac22 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac1c:	78bb      	ldrb	r3, [r7, #2]
 800ac1e:	2bff      	cmp	r3, #255	; 0xff
 800ac20:	d109      	bne.n	800ac36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac26:	787a      	ldrb	r2, [r7, #1]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d002      	beq.n	800ac32 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac2c:	787b      	ldrb	r3, [r7, #1]
 800ac2e:	2bff      	cmp	r3, #255	; 0xff
 800ac30:	d101      	bne.n	800ac36 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	e006      	b.n	800ac44 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d9d6      	bls.n	800abf0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac42:	23ff      	movs	r3, #255	; 0xff
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	371c      	adds	r7, #28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 fb89 	bl	800c370 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ac5e:	2101      	movs	r1, #1
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 fca0 	bl	800c5a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af04      	add	r7, sp, #16
 800ac76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d102      	bne.n	800ac92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2203      	movs	r2, #3
 800ac90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b0b      	cmp	r3, #11
 800ac9a:	f200 81b3 	bhi.w	800b004 <USBH_Process+0x394>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <USBH_Process+0x34>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acd5 	.word	0x0800acd5
 800aca8:	0800ad07 	.word	0x0800ad07
 800acac:	0800ad6f 	.word	0x0800ad6f
 800acb0:	0800af9f 	.word	0x0800af9f
 800acb4:	0800b005 	.word	0x0800b005
 800acb8:	0800ae13 	.word	0x0800ae13
 800acbc:	0800af45 	.word	0x0800af45
 800acc0:	0800ae49 	.word	0x0800ae49
 800acc4:	0800ae69 	.word	0x0800ae69
 800acc8:	0800ae89 	.word	0x0800ae89
 800accc:	0800aeb7 	.word	0x0800aeb7
 800acd0:	0800af87 	.word	0x0800af87
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 8193 	beq.w	800b008 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ace8:	20c8      	movs	r0, #200	; 0xc8
 800acea:	f001 fca6 	bl	800c63a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 fb99 	bl	800c426 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad04:	e180      	b.n	800b008 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d107      	bne.n	800ad20 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad1e:	e182      	b.n	800b026 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad2a:	d914      	bls.n	800ad56 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d903      	bls.n	800ad4e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	220d      	movs	r2, #13
 800ad4a:	701a      	strb	r2, [r3, #0]
      break;
 800ad4c:	e16b      	b.n	800b026 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	701a      	strb	r2, [r3, #0]
      break;
 800ad54:	e167      	b.n	800b026 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad5c:	f103 020a 	add.w	r2, r3, #10
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ad66:	200a      	movs	r0, #10
 800ad68:	f001 fc67 	bl	800c63a <USBH_Delay>
      break;
 800ad6c:	e15b      	b.n	800b026 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad7e:	2104      	movs	r1, #4
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad84:	2064      	movs	r0, #100	; 0x64
 800ad86:	f001 fc58 	bl	800c63a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 fb26 	bl	800c3dc <USBH_LL_GetSpeed>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2205      	movs	r2, #5
 800ad9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ada0:	2100      	movs	r1, #0
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 f931 	bl	800c00a <USBH_AllocPipe>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800adb0:	2180      	movs	r1, #128	; 0x80
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 f929 	bl	800c00a <USBH_AllocPipe>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	7919      	ldrb	r1, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800add4:	b292      	uxth	r2, r2
 800add6:	9202      	str	r2, [sp, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	9201      	str	r2, [sp, #4]
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	4603      	mov	r3, r0
 800ade0:	2280      	movs	r2, #128	; 0x80
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f001 f8e2 	bl	800bfac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7959      	ldrb	r1, [r3, #5]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adfc:	b292      	uxth	r2, r2
 800adfe:	9202      	str	r2, [sp, #8]
 800ae00:	2200      	movs	r2, #0
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4603      	mov	r3, r0
 800ae08:	2200      	movs	r2, #0
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 f8ce 	bl	800bfac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae10:	e109      	b.n	800b026 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f90c 	bl	800b030 <USBH_HandleEnum>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 80f3 	bne.w	800b00c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d103      	bne.n	800ae40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae3e:	e0e5      	b.n	800b00c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2207      	movs	r2, #7
 800ae44:	701a      	strb	r2, [r3, #0]
      break;
 800ae46:	e0e1      	b.n	800b00c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 80de 	beq.w	800b010 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2208      	movs	r2, #8
 800ae64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ae66:	e0d3      	b.n	800b010 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fc20 	bl	800b6b8 <USBH_SetCfg>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f040 80ca 	bne.w	800b014 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2209      	movs	r2, #9
 800ae84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae86:	e0c5      	b.n	800b014 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00b      	beq.n	800aeae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ae96:	2101      	movs	r1, #1
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fc30 	bl	800b6fe <USBH_SetFeature>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f040 80b9 	bne.w	800b018 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	220a      	movs	r2, #10
 800aeaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aeac:	e0b4      	b.n	800b018 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	701a      	strb	r2, [r3, #0]
      break;
 800aeb4:	e0b0      	b.n	800b018 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 80ad 	beq.w	800b01c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
 800aece:	e016      	b.n	800aefe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aed0:	7bfa      	ldrb	r2, [r7, #15]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	32de      	adds	r2, #222	; 0xde
 800aed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeda:	791a      	ldrb	r2, [r3, #4]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d108      	bne.n	800aef8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	32de      	adds	r2, #222	; 0xde
 800aeec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aef6:	e005      	b.n	800af04 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	3301      	adds	r3, #1
 800aefc:	73fb      	strb	r3, [r7, #15]
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0e5      	beq.n	800aed0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d016      	beq.n	800af3c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d109      	bne.n	800af34 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2206      	movs	r2, #6
 800af24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af2c:	2103      	movs	r1, #3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af32:	e073      	b.n	800b01c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	220d      	movs	r2, #13
 800af38:	701a      	strb	r2, [r3, #0]
      break;
 800af3a:	e06f      	b.n	800b01c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	220d      	movs	r2, #13
 800af40:	701a      	strb	r2, [r3, #0]
      break;
 800af42:	e06b      	b.n	800b01c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d017      	beq.n	800af7e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
 800af5a:	4603      	mov	r3, r0
 800af5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	220b      	movs	r2, #11
 800af6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af6c:	e058      	b.n	800b020 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d154      	bne.n	800b020 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	220d      	movs	r2, #13
 800af7a:	701a      	strb	r2, [r3, #0]
      break;
 800af7c:	e050      	b.n	800b020 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	220d      	movs	r2, #13
 800af82:	701a      	strb	r2, [r3, #0]
      break;
 800af84:	e04c      	b.n	800b020 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d049      	beq.n	800b024 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	4798      	blx	r3
      }
      break;
 800af9c:	e042      	b.n	800b024 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fd72 	bl	800aa90 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d005      	beq.n	800afe0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afda:	2105      	movs	r1, #5
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d107      	bne.n	800affc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff fe2b 	bl	800ac50 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800affa:	e014      	b.n	800b026 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f9b7 	bl	800c370 <USBH_LL_Start>
      break;
 800b002:	e010      	b.n	800b026 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b004:	bf00      	nop
 800b006:	e00e      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b008:	bf00      	nop
 800b00a:	e00c      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b00c:	bf00      	nop
 800b00e:	e00a      	b.n	800b026 <USBH_Process+0x3b6>
    break;
 800b010:	bf00      	nop
 800b012:	e008      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b014:	bf00      	nop
 800b016:	e006      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b018:	bf00      	nop
 800b01a:	e004      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b01c:	bf00      	nop
 800b01e:	e002      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b020:	bf00      	nop
 800b022:	e000      	b.n	800b026 <USBH_Process+0x3b6>
      break;
 800b024:	bf00      	nop
  }
  return USBH_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af04      	add	r7, sp, #16
 800b036:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b038:	2301      	movs	r3, #1
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b03c:	2301      	movs	r3, #1
 800b03e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b07      	cmp	r3, #7
 800b046:	f200 81c1 	bhi.w	800b3cc <USBH_HandleEnum+0x39c>
 800b04a:	a201      	add	r2, pc, #4	; (adr r2, 800b050 <USBH_HandleEnum+0x20>)
 800b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b050:	0800b071 	.word	0x0800b071
 800b054:	0800b12f 	.word	0x0800b12f
 800b058:	0800b199 	.word	0x0800b199
 800b05c:	0800b227 	.word	0x0800b227
 800b060:	0800b291 	.word	0x0800b291
 800b064:	0800b301 	.word	0x0800b301
 800b068:	0800b347 	.word	0x0800b347
 800b06c:	0800b38d 	.word	0x0800b38d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b070:	2108      	movs	r1, #8
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa50 	bl	800b518 <USBH_Get_DevDesc>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d130      	bne.n	800b0e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7919      	ldrb	r1, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	9202      	str	r2, [sp, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2280      	movs	r2, #128	; 0x80
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 ff79 	bl	800bfac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	7959      	ldrb	r1, [r3, #5]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0ce:	b292      	uxth	r2, r2
 800b0d0:	9202      	str	r2, [sp, #8]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	9201      	str	r2, [sp, #4]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2200      	movs	r2, #0
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 ff65 	bl	800bfac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0e2:	e175      	b.n	800b3d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	f040 8172 	bne.w	800b3d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b102:	2b03      	cmp	r3, #3
 800b104:	d903      	bls.n	800b10e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	220d      	movs	r2, #13
 800b10a:	701a      	strb	r2, [r3, #0]
      break;
 800b10c:	e160      	b.n	800b3d0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	795b      	ldrb	r3, [r3, #5]
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 ff99 	bl	800c04c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	791b      	ldrb	r3, [r3, #4]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 ff93 	bl	800c04c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]
      break;
 800b12c:	e150      	b.n	800b3d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b12e:	2112      	movs	r1, #18
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f9f1 	bl	800b518 <USBH_Get_DevDesc>
 800b136:	4603      	mov	r3, r0
 800b138:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2202      	movs	r2, #2
 800b144:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b146:	e145      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	f040 8142 	bne.w	800b3d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b156:	3301      	adds	r3, #1
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b166:	2b03      	cmp	r3, #3
 800b168:	d903      	bls.n	800b172 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	220d      	movs	r2, #13
 800b16e:	701a      	strb	r2, [r3, #0]
      break;
 800b170:	e130      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	795b      	ldrb	r3, [r3, #5]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 ff67 	bl	800c04c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	791b      	ldrb	r3, [r3, #4]
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 ff61 	bl	800c04c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
      break;
 800b196:	e11d      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b198:	2101      	movs	r1, #1
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa68 	bl	800b670 <USBH_SetAddress>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d132      	bne.n	800b210 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b1aa:	2002      	movs	r0, #2
 800b1ac:	f001 fa45 	bl	800c63a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2203      	movs	r2, #3
 800b1bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	7919      	ldrb	r1, [r3, #4]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b1d2:	b292      	uxth	r2, r2
 800b1d4:	9202      	str	r2, [sp, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	9201      	str	r2, [sp, #4]
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2280      	movs	r2, #128	; 0x80
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fee3 	bl	800bfac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	7959      	ldrb	r1, [r3, #5]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1fa:	b292      	uxth	r2, r2
 800b1fc:	9202      	str	r2, [sp, #8]
 800b1fe:	2200      	movs	r2, #0
 800b200:	9201      	str	r2, [sp, #4]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	4603      	mov	r3, r0
 800b206:	2200      	movs	r2, #0
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fecf 	bl	800bfac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b20e:	e0e3      	b.n	800b3d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	2b03      	cmp	r3, #3
 800b214:	f040 80e0 	bne.w	800b3d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	220d      	movs	r2, #13
 800b21c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	705a      	strb	r2, [r3, #1]
      break;
 800b224:	e0d8      	b.n	800b3d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b226:	2109      	movs	r1, #9
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f99d 	bl	800b568 <USBH_Get_CfgDesc>
 800b22e:	4603      	mov	r3, r0
 800b230:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d103      	bne.n	800b240 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2204      	movs	r2, #4
 800b23c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b23e:	e0cd      	b.n	800b3dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	2b03      	cmp	r3, #3
 800b244:	f040 80ca 	bne.w	800b3dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b24e:	3301      	adds	r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d903      	bls.n	800b26a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	220d      	movs	r2, #13
 800b266:	701a      	strb	r2, [r3, #0]
      break;
 800b268:	e0b8      	b.n	800b3dc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	795b      	ldrb	r3, [r3, #5]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 feeb 	bl	800c04c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	791b      	ldrb	r3, [r3, #4]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fee5 	bl	800c04c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
      break;
 800b28e:	e0a5      	b.n	800b3dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f965 	bl	800b568 <USBH_Get_CfgDesc>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d103      	bne.n	800b2b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2205      	movs	r2, #5
 800b2ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b2ae:	e097      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	f040 8094 	bne.w	800b3e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2be:	3301      	adds	r3, #1
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d903      	bls.n	800b2da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	220d      	movs	r2, #13
 800b2d6:	701a      	strb	r2, [r3, #0]
      break;
 800b2d8:	e082      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	795b      	ldrb	r3, [r3, #5]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 feb3 	bl	800c04c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	791b      	ldrb	r3, [r3, #4]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fead 	bl	800c04c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
      break;
 800b2fe:	e06f      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b306:	2b00      	cmp	r3, #0
 800b308:	d019      	beq.n	800b33e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b316:	23ff      	movs	r3, #255	; 0xff
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f949 	bl	800b5b0 <USBH_Get_StringDesc>
 800b31e:	4603      	mov	r3, r0
 800b320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d103      	bne.n	800b330 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2206      	movs	r2, #6
 800b32c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b32e:	e059      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	2b03      	cmp	r3, #3
 800b334:	d156      	bne.n	800b3e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2206      	movs	r2, #6
 800b33a:	705a      	strb	r2, [r3, #1]
      break;
 800b33c:	e052      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2206      	movs	r2, #6
 800b342:	705a      	strb	r2, [r3, #1]
      break;
 800b344:	e04e      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d019      	beq.n	800b384 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b35c:	23ff      	movs	r3, #255	; 0xff
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f926 	bl	800b5b0 <USBH_Get_StringDesc>
 800b364:	4603      	mov	r3, r0
 800b366:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2207      	movs	r2, #7
 800b372:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b374:	e038      	b.n	800b3e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d135      	bne.n	800b3e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2207      	movs	r2, #7
 800b380:	705a      	strb	r2, [r3, #1]
      break;
 800b382:	e031      	b.n	800b3e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2207      	movs	r2, #7
 800b388:	705a      	strb	r2, [r3, #1]
      break;
 800b38a:	e02d      	b.n	800b3e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b392:	2b00      	cmp	r3, #0
 800b394:	d017      	beq.n	800b3c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b3a2:	23ff      	movs	r3, #255	; 0xff
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f903 	bl	800b5b0 <USBH_Get_StringDesc>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b3b8:	e018      	b.n	800b3ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	d115      	bne.n	800b3ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c4:	e012      	b.n	800b3ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ca:	e00f      	b.n	800b3ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b3cc:	bf00      	nop
 800b3ce:	e00e      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3d0:	bf00      	nop
 800b3d2:	e00c      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3d4:	bf00      	nop
 800b3d6:	e00a      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3d8:	bf00      	nop
 800b3da:	e008      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3dc:	bf00      	nop
 800b3de:	e006      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3e0:	bf00      	nop
 800b3e2:	e004      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3e4:	bf00      	nop
 800b3e6:	e002      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3e8:	bf00      	nop
 800b3ea:	e000      	b.n	800b3ee <USBH_HandleEnum+0x3be>
      break;
 800b3ec:	bf00      	nop
  }
  return Status;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f804 	bl	800b43a <USBH_HandleSof>
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b0b      	cmp	r3, #11
 800b44a:	d10a      	bne.n	800b462 <USBH_HandleSof+0x28>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d005      	beq.n	800b462 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
  }
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b083      	sub	sp, #12
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b47a:	bf00      	nop
}
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b496:	bf00      	nop
}
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 ff58 	bl	800c3a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	791b      	ldrb	r3, [r3, #4]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fda5 	bl	800c04c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	795b      	ldrb	r3, [r3, #5]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fd9f 	bl	800c04c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b536:	2100      	movs	r1, #0
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f864 	bl	800b606 <USBH_GetDescriptor>
 800b53e:	4603      	mov	r3, r0
 800b540:	73fb      	strb	r3, [r7, #15]
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b554:	78fa      	ldrb	r2, [r7, #3]
 800b556:	b292      	uxth	r2, r2
 800b558:	4619      	mov	r1, r3
 800b55a:	f000 f918 	bl	800b78e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	331c      	adds	r3, #28
 800b578:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b584:	2100      	movs	r1, #0
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f83d 	bl	800b606 <USBH_GetDescriptor>
 800b58c:	4603      	mov	r3, r0
 800b58e:	72fb      	strb	r3, [r7, #11]
 800b590:	7afb      	ldrb	r3, [r7, #11]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d107      	bne.n	800b5a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b59c:	887a      	ldrh	r2, [r7, #2]
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 f964 	bl	800b86e <USBH_ParseCfgDesc>
  }

  return status;
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	460b      	mov	r3, r1
 800b5be:	72fb      	strb	r3, [r7, #11]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b5cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b5d4:	893b      	ldrh	r3, [r7, #8]
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	2100      	movs	r1, #0
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f812 	bl	800b606 <USBH_GetDescriptor>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d107      	bne.n	800b5fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5f2:	893a      	ldrh	r2, [r7, #8]
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fa37 	bl	800ba6a <USBH_ParseStringDesc>
  }

  return status;
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	607b      	str	r3, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	72fb      	strb	r3, [r7, #11]
 800b614:	4613      	mov	r3, r2
 800b616:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	789b      	ldrb	r3, [r3, #2]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d11c      	bne.n	800b65a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b626:	b2da      	uxtb	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2206      	movs	r2, #6
 800b630:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	893a      	ldrh	r2, [r7, #8]
 800b636:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b638:	893b      	ldrh	r3, [r7, #8]
 800b63a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b63e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b642:	d104      	bne.n	800b64e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f240 4209 	movw	r2, #1033	; 0x409
 800b64a:	829a      	strh	r2, [r3, #20]
 800b64c:	e002      	b.n	800b654 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8b3a      	ldrh	r2, [r7, #24]
 800b658:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b65a:	8b3b      	ldrh	r3, [r7, #24]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 fa50 	bl	800bb06 <USBH_CtlReq>
 800b666:	4603      	mov	r3, r0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	789b      	ldrb	r3, [r3, #2]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d10f      	bne.n	800b6a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2205      	movs	r2, #5
 800b68e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	b29a      	uxth	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fa2c 	bl	800bb06 <USBH_CtlReq>
 800b6ae:	4603      	mov	r3, r0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	789b      	ldrb	r3, [r3, #2]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d10e      	bne.n	800b6ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2209      	movs	r2, #9
 800b6d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	887a      	ldrh	r2, [r7, #2]
 800b6dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa09 	bl	800bb06 <USBH_CtlReq>
 800b6f4:	4603      	mov	r3, r0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	789b      	ldrb	r3, [r3, #2]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d10f      	bne.n	800b732 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2203      	movs	r2, #3
 800b71c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	b29a      	uxth	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f9e5 	bl	800bb06 <USBH_CtlReq>
 800b73c:	4603      	mov	r3, r0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b082      	sub	sp, #8
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	789b      	ldrb	r3, [r3, #2]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d10f      	bne.n	800b77a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2202      	movs	r2, #2
 800b75e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b77a:	2200      	movs	r2, #0
 800b77c:	2100      	movs	r1, #0
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f9c1 	bl	800bb06 <USBH_CtlReq>
 800b784:	4603      	mov	r3, r0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	4613      	mov	r3, r2
 800b79a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	781a      	ldrb	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	785a      	ldrb	r2, [r3, #1]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	3303      	adds	r3, #3
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	791a      	ldrb	r2, [r3, #4]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	795a      	ldrb	r2, [r3, #5]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	799a      	ldrb	r2, [r3, #6]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	79da      	ldrb	r2, [r3, #7]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d939      	bls.n	800b862 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	3309      	adds	r3, #9
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	021b      	lsls	r3, r3, #8
 800b800:	b29b      	uxth	r3, r3
 800b802:	4313      	orrs	r3, r2
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	330a      	adds	r3, #10
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b29a      	uxth	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	330b      	adds	r3, #11
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	330c      	adds	r3, #12
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	330d      	adds	r3, #13
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	b29b      	uxth	r3, r3
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	7b9a      	ldrb	r2, [r3, #14]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	7bda      	ldrb	r2, [r3, #15]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	7c1a      	ldrb	r2, [r3, #16]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	7c5a      	ldrb	r2, [r3, #17]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	745a      	strb	r2, [r3, #17]
  }
}
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b08a      	sub	sp, #40	; 0x28
 800b872:	af00      	add	r7, sp, #0
 800b874:	60f8      	str	r0, [r7, #12]
 800b876:	60b9      	str	r1, [r7, #8]
 800b878:	4613      	mov	r3, r2
 800b87a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	785a      	ldrb	r2, [r3, #1]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	3302      	adds	r3, #2
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	3303      	adds	r3, #3
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	021b      	lsls	r3, r3, #8
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	791a      	ldrb	r2, [r3, #4]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	795a      	ldrb	r2, [r3, #5]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	799a      	ldrb	r2, [r3, #6]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	79da      	ldrb	r2, [r3, #7]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	7a1a      	ldrb	r2, [r3, #8]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8e4:	88fb      	ldrh	r3, [r7, #6]
 800b8e6:	2b09      	cmp	r3, #9
 800b8e8:	d95f      	bls.n	800b9aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8ea:	2309      	movs	r3, #9
 800b8ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8f2:	e051      	b.n	800b998 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8f4:	f107 0316 	add.w	r3, r7, #22
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8fc:	f000 f8e8 	bl	800bad0 <USBH_GetNextDesc>
 800b900:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	2b04      	cmp	r3, #4
 800b908:	d146      	bne.n	800b998 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b90a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b90e:	221a      	movs	r2, #26
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	3308      	adds	r3, #8
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	4413      	add	r3, r2
 800b91a:	3302      	adds	r3, #2
 800b91c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b91e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b920:	69f8      	ldr	r0, [r7, #28]
 800b922:	f000 f846 	bl	800b9b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b930:	e022      	b.n	800b978 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b932:	f107 0316 	add.w	r3, r7, #22
 800b936:	4619      	mov	r1, r3
 800b938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b93a:	f000 f8c9 	bl	800bad0 <USBH_GetNextDesc>
 800b93e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	2b05      	cmp	r3, #5
 800b946:	d117      	bne.n	800b978 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b94c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b950:	3201      	adds	r2, #1
 800b952:	00d2      	lsls	r2, r2, #3
 800b954:	211a      	movs	r1, #26
 800b956:	fb01 f303 	mul.w	r3, r1, r3
 800b95a:	4413      	add	r3, r2
 800b95c:	3308      	adds	r3, #8
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	3304      	adds	r3, #4
 800b964:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b968:	69b8      	ldr	r0, [r7, #24]
 800b96a:	f000 f851 	bl	800ba10 <USBH_ParseEPDesc>
            ep_ix++;
 800b96e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b972:	3301      	adds	r3, #1
 800b974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	791b      	ldrb	r3, [r3, #4]
 800b97c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b980:	429a      	cmp	r2, r3
 800b982:	d204      	bcs.n	800b98e <USBH_ParseCfgDesc+0x120>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	885a      	ldrh	r2, [r3, #2]
 800b988:	8afb      	ldrh	r3, [r7, #22]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d8d1      	bhi.n	800b932 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b98e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b992:	3301      	adds	r3, #1
 800b994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d804      	bhi.n	800b9aa <USBH_ParseCfgDesc+0x13c>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	885a      	ldrh	r2, [r3, #2]
 800b9a4:	8afb      	ldrh	r3, [r7, #22]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d8a4      	bhi.n	800b8f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b9aa:	bf00      	nop
 800b9ac:	3728      	adds	r7, #40	; 0x28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	785a      	ldrb	r2, [r3, #1]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	789a      	ldrb	r2, [r3, #2]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	78da      	ldrb	r2, [r3, #3]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	791a      	ldrb	r2, [r3, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	795a      	ldrb	r2, [r3, #5]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	799a      	ldrb	r2, [r3, #6]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	79da      	ldrb	r2, [r3, #7]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	7a1a      	ldrb	r2, [r3, #8]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	721a      	strb	r2, [r3, #8]
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781a      	ldrb	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	785a      	ldrb	r2, [r3, #1]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	789a      	ldrb	r2, [r3, #2]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	78da      	ldrb	r2, [r3, #3]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	3305      	adds	r3, #5
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	799a      	ldrb	r2, [r3, #6]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	719a      	strb	r2, [r3, #6]
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b087      	sub	sp, #28
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	60f8      	str	r0, [r7, #12]
 800ba72:	60b9      	str	r1, [r7, #8]
 800ba74:	4613      	mov	r3, r2
 800ba76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d120      	bne.n	800bac4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	1e9a      	subs	r2, r3, #2
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	bf28      	it	cs
 800ba8e:	4613      	movcs	r3, r2
 800ba90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3302      	adds	r3, #2
 800ba96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	82fb      	strh	r3, [r7, #22]
 800ba9c:	e00b      	b.n	800bab6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba9e:	8afb      	ldrh	r3, [r7, #22]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4413      	add	r3, r2
 800baa4:	781a      	ldrb	r2, [r3, #0]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	3301      	adds	r3, #1
 800baae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bab0:	8afb      	ldrh	r3, [r7, #22]
 800bab2:	3302      	adds	r3, #2
 800bab4:	82fb      	strh	r3, [r7, #22]
 800bab6:	8afa      	ldrh	r2, [r7, #22]
 800bab8:	8abb      	ldrh	r3, [r7, #20]
 800baba:	429a      	cmp	r2, r3
 800babc:	d3ef      	bcc.n	800ba9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2200      	movs	r2, #0
 800bac2:	701a      	strb	r2, [r3, #0]
  }
}
 800bac4:	bf00      	nop
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	881a      	ldrh	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	4413      	add	r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4413      	add	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800baf8:	68fb      	ldr	r3, [r7, #12]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b086      	sub	sp, #24
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	4613      	mov	r3, r2
 800bb12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bb14:	2301      	movs	r3, #1
 800bb16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	789b      	ldrb	r3, [r3, #2]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d002      	beq.n	800bb26 <USBH_CtlReq+0x20>
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d00f      	beq.n	800bb44 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bb24:	e027      	b.n	800bb76 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	88fa      	ldrh	r2, [r7, #6]
 800bb30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	75fb      	strb	r3, [r7, #23]
      break;
 800bb42:	e018      	b.n	800bb76 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 f81b 	bl	800bb80 <USBH_HandleControl>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <USBH_CtlReq+0x54>
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	d106      	bne.n	800bb68 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	761a      	strb	r2, [r3, #24]
      break;
 800bb66:	e005      	b.n	800bb74 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d102      	bne.n	800bb74 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	709a      	strb	r2, [r3, #2]
      break;
 800bb74:	bf00      	nop
  }
  return status;
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7e1b      	ldrb	r3, [r3, #24]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	2b0a      	cmp	r3, #10
 800bb98:	f200 8158 	bhi.w	800be4c <USBH_HandleControl+0x2cc>
 800bb9c:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <USBH_HandleControl+0x24>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbd1 	.word	0x0800bbd1
 800bba8:	0800bbeb 	.word	0x0800bbeb
 800bbac:	0800bc55 	.word	0x0800bc55
 800bbb0:	0800bc7b 	.word	0x0800bc7b
 800bbb4:	0800bcb3 	.word	0x0800bcb3
 800bbb8:	0800bcdf 	.word	0x0800bcdf
 800bbbc:	0800bd31 	.word	0x0800bd31
 800bbc0:	0800bd53 	.word	0x0800bd53
 800bbc4:	0800bd8f 	.word	0x0800bd8f
 800bbc8:	0800bdb7 	.word	0x0800bdb7
 800bbcc:	0800bdf5 	.word	0x0800bdf5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f103 0110 	add.w	r1, r3, #16
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	795b      	ldrb	r3, [r3, #5]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f945 	bl	800be6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	761a      	strb	r2, [r3, #24]
      break;
 800bbe8:	e13b      	b.n	800be62 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	795b      	ldrb	r3, [r3, #5]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fcc5 	bl	800c580 <USBH_LL_GetURBState>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d11e      	bne.n	800bc3e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7c1b      	ldrb	r3, [r3, #16]
 800bc04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8adb      	ldrh	r3, [r3, #22]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bc12:	7b7b      	ldrb	r3, [r7, #13]
 800bc14:	2b80      	cmp	r3, #128	; 0x80
 800bc16:	d103      	bne.n	800bc20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc1e:	e117      	b.n	800be50 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2205      	movs	r2, #5
 800bc24:	761a      	strb	r2, [r3, #24]
      break;
 800bc26:	e113      	b.n	800be50 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800bc28:	7b7b      	ldrb	r3, [r7, #13]
 800bc2a:	2b80      	cmp	r3, #128	; 0x80
 800bc2c:	d103      	bne.n	800bc36 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2209      	movs	r2, #9
 800bc32:	761a      	strb	r2, [r3, #24]
      break;
 800bc34:	e10c      	b.n	800be50 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2207      	movs	r2, #7
 800bc3a:	761a      	strb	r2, [r3, #24]
      break;
 800bc3c:	e108      	b.n	800be50 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
 800bc40:	2b04      	cmp	r3, #4
 800bc42:	d003      	beq.n	800bc4c <USBH_HandleControl+0xcc>
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	f040 8102 	bne.w	800be50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	220b      	movs	r2, #11
 800bc50:	761a      	strb	r2, [r3, #24]
      break;
 800bc52:	e0fd      	b.n	800be50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6899      	ldr	r1, [r3, #8]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	899a      	ldrh	r2, [r3, #12]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	791b      	ldrb	r3, [r3, #4]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f93c 	bl	800beea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2204      	movs	r2, #4
 800bc76:	761a      	strb	r2, [r3, #24]
      break;
 800bc78:	e0f3      	b.n	800be62 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fc7d 	bl	800c580 <USBH_LL_GetURBState>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d102      	bne.n	800bc96 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2209      	movs	r2, #9
 800bc94:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	2b05      	cmp	r3, #5
 800bc9a:	d102      	bne.n	800bca2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bca0:	e0d8      	b.n	800be54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	f040 80d5 	bne.w	800be54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	220b      	movs	r2, #11
 800bcae:	761a      	strb	r2, [r3, #24]
      break;
 800bcb0:	e0d0      	b.n	800be54 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6899      	ldr	r1, [r3, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	899a      	ldrh	r2, [r3, #12]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7958      	ldrb	r0, [r3, #5]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f8eb 	bl	800bea0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2206      	movs	r2, #6
 800bcda:	761a      	strb	r2, [r3, #24]
      break;
 800bcdc:	e0c1      	b.n	800be62 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	795b      	ldrb	r3, [r3, #5]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc4b 	bl	800c580 <USBH_LL_GetURBState>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d103      	bne.n	800bcfc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2207      	movs	r2, #7
 800bcf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcfa:	e0ad      	b.n	800be58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d105      	bne.n	800bd0e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	220c      	movs	r2, #12
 800bd06:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0c:	e0a4      	b.n	800be58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d103      	bne.n	800bd1c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2205      	movs	r2, #5
 800bd18:	761a      	strb	r2, [r3, #24]
      break;
 800bd1a:	e09d      	b.n	800be58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b04      	cmp	r3, #4
 800bd20:	f040 809a 	bne.w	800be58 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	220b      	movs	r2, #11
 800bd28:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd2e:	e093      	b.n	800be58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	791b      	ldrb	r3, [r3, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	2100      	movs	r1, #0
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f8d6 	bl	800beea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2208      	movs	r2, #8
 800bd4e:	761a      	strb	r2, [r3, #24]

      break;
 800bd50:	e087      	b.n	800be62 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	791b      	ldrb	r3, [r3, #4]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fc11 	bl	800c580 <USBH_LL_GetURBState>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d105      	bne.n	800bd74 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	220d      	movs	r2, #13
 800bd6c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd72:	e073      	b.n	800be5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d103      	bne.n	800bd82 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	220b      	movs	r2, #11
 800bd7e:	761a      	strb	r2, [r3, #24]
      break;
 800bd80:	e06c      	b.n	800be5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	d169      	bne.n	800be5c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd8c:	e066      	b.n	800be5c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	795a      	ldrb	r2, [r3, #5]
 800bd92:	2301      	movs	r3, #1
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4613      	mov	r3, r2
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f87f 	bl	800bea0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	220a      	movs	r2, #10
 800bdb2:	761a      	strb	r2, [r3, #24]
      break;
 800bdb4:	e055      	b.n	800be62 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	795b      	ldrb	r3, [r3, #5]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fbdf 	bl	800c580 <USBH_LL_GetURBState>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d105      	bne.n	800bdd8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	220d      	movs	r2, #13
 800bdd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bdd6:	e043      	b.n	800be60 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2209      	movs	r2, #9
 800bde2:	761a      	strb	r2, [r3, #24]
      break;
 800bde4:	e03c      	b.n	800be60 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	d139      	bne.n	800be60 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	220b      	movs	r2, #11
 800bdf0:	761a      	strb	r2, [r3, #24]
      break;
 800bdf2:	e035      	b.n	800be60 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7e5b      	ldrb	r3, [r3, #25]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	765a      	strb	r2, [r3, #25]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	7e5b      	ldrb	r3, [r3, #25]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d806      	bhi.n	800be16 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800be14:	e025      	b.n	800be62 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be1c:	2106      	movs	r1, #6
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	795b      	ldrb	r3, [r3, #5]
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f90c 	bl	800c04c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	791b      	ldrb	r3, [r3, #4]
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f906 	bl	800c04c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be46:	2302      	movs	r3, #2
 800be48:	73fb      	strb	r3, [r7, #15]
      break;
 800be4a:	e00a      	b.n	800be62 <USBH_HandleControl+0x2e2>

    default:
      break;
 800be4c:	bf00      	nop
 800be4e:	e008      	b.n	800be62 <USBH_HandleControl+0x2e2>
      break;
 800be50:	bf00      	nop
 800be52:	e006      	b.n	800be62 <USBH_HandleControl+0x2e2>
      break;
 800be54:	bf00      	nop
 800be56:	e004      	b.n	800be62 <USBH_HandleControl+0x2e2>
      break;
 800be58:	bf00      	nop
 800be5a:	e002      	b.n	800be62 <USBH_HandleControl+0x2e2>
      break;
 800be5c:	bf00      	nop
 800be5e:	e000      	b.n	800be62 <USBH_HandleControl+0x2e2>
      break;
 800be60:	bf00      	nop
  }

  return status;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af04      	add	r7, sp, #16
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	4613      	mov	r3, r2
 800be78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be7a:	79f9      	ldrb	r1, [r7, #7]
 800be7c:	2300      	movs	r3, #0
 800be7e:	9303      	str	r3, [sp, #12]
 800be80:	2308      	movs	r3, #8
 800be82:	9302      	str	r3, [sp, #8]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	2300      	movs	r3, #0
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2300      	movs	r3, #0
 800be8e:	2200      	movs	r2, #0
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fb44 	bl	800c51e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af04      	add	r7, sp, #16
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	4611      	mov	r1, r2
 800beac:	461a      	mov	r2, r3
 800beae:	460b      	mov	r3, r1
 800beb0:	80fb      	strh	r3, [r7, #6]
 800beb2:	4613      	mov	r3, r2
 800beb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bec4:	7979      	ldrb	r1, [r7, #5]
 800bec6:	7e3b      	ldrb	r3, [r7, #24]
 800bec8:	9303      	str	r3, [sp, #12]
 800beca:	88fb      	ldrh	r3, [r7, #6]
 800becc:	9302      	str	r3, [sp, #8]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	2301      	movs	r3, #1
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	2200      	movs	r2, #0
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fb1f 	bl	800c51e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b088      	sub	sp, #32
 800beee:	af04      	add	r7, sp, #16
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	4611      	mov	r1, r2
 800bef6:	461a      	mov	r2, r3
 800bef8:	460b      	mov	r3, r1
 800befa:	80fb      	strh	r3, [r7, #6]
 800befc:	4613      	mov	r3, r2
 800befe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf00:	7979      	ldrb	r1, [r7, #5]
 800bf02:	2300      	movs	r3, #0
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	88fb      	ldrh	r3, [r7, #6]
 800bf08:	9302      	str	r3, [sp, #8]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	2301      	movs	r3, #1
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	2300      	movs	r3, #0
 800bf14:	2201      	movs	r2, #1
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 fb01 	bl	800c51e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bf1c:	2300      	movs	r3, #0

}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b088      	sub	sp, #32
 800bf2a:	af04      	add	r7, sp, #16
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	460b      	mov	r3, r1
 800bf36:	80fb      	strh	r3, [r7, #6]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf46:	2300      	movs	r3, #0
 800bf48:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf4a:	7979      	ldrb	r1, [r7, #5]
 800bf4c:	7e3b      	ldrb	r3, [r7, #24]
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	88fb      	ldrh	r3, [r7, #6]
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	2301      	movs	r3, #1
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 fadc 	bl	800c51e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af04      	add	r7, sp, #16
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	460b      	mov	r3, r1
 800bf80:	80fb      	strh	r3, [r7, #6]
 800bf82:	4613      	mov	r3, r2
 800bf84:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf86:	7979      	ldrb	r1, [r7, #5]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9303      	str	r3, [sp, #12]
 800bf8c:	88fb      	ldrh	r3, [r7, #6]
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	2301      	movs	r3, #1
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2302      	movs	r3, #2
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 fabe 	bl	800c51e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af04      	add	r7, sp, #16
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	70fb      	strb	r3, [r7, #3]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70bb      	strb	r3, [r7, #2]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bfc6:	7878      	ldrb	r0, [r7, #1]
 800bfc8:	78ba      	ldrb	r2, [r7, #2]
 800bfca:	78f9      	ldrb	r1, [r7, #3]
 800bfcc:	8b3b      	ldrh	r3, [r7, #24]
 800bfce:	9302      	str	r3, [sp, #8]
 800bfd0:	7d3b      	ldrb	r3, [r7, #20]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	7c3b      	ldrb	r3, [r7, #16]
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	4603      	mov	r3, r0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fa51 	bl	800c482 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fa70 	bl	800c4e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f836 	bl	800c088 <USBH_GetFreePipe>
 800c01c:	4603      	mov	r3, r0
 800c01e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c020:	89fb      	ldrh	r3, [r7, #14]
 800c022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c026:	4293      	cmp	r3, r2
 800c028:	d00a      	beq.n	800c040 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c02a:	78fa      	ldrb	r2, [r7, #3]
 800c02c:	89fb      	ldrh	r3, [r7, #14]
 800c02e:	f003 030f 	and.w	r3, r3, #15
 800c032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	33e0      	adds	r3, #224	; 0xe0
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c040:	89fb      	ldrh	r3, [r7, #14]
 800c042:	b2db      	uxtb	r3, r3
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	2b0a      	cmp	r3, #10
 800c05c:	d80d      	bhi.n	800c07a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c05e:	78fb      	ldrb	r3, [r7, #3]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	33e0      	adds	r3, #224	; 0xe0
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	33e0      	adds	r3, #224	; 0xe0
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	440b      	add	r3, r1
 800c078:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	e00f      	b.n	800c0ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	33e0      	adds	r3, #224	; 0xe0
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d102      	bne.n	800c0b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	e007      	b.n	800c0c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	73fb      	strb	r3, [r7, #15]
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	2b0a      	cmp	r3, #10
 800c0be:	d9ec      	bls.n	800c09a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c0c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	490e      	ldr	r1, [pc, #56]	; (800c110 <MX_USB_HOST_Init+0x40>)
 800c0d8:	480e      	ldr	r0, [pc, #56]	; (800c114 <MX_USB_HOST_Init+0x44>)
 800c0da:	f7fe fc9f 	bl	800aa1c <USBH_Init>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0e4:	f7f4 ff74 	bl	8000fd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c0e8:	490b      	ldr	r1, [pc, #44]	; (800c118 <MX_USB_HOST_Init+0x48>)
 800c0ea:	480a      	ldr	r0, [pc, #40]	; (800c114 <MX_USB_HOST_Init+0x44>)
 800c0ec:	f7fe fd24 	bl	800ab38 <USBH_RegisterClass>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0f6:	f7f4 ff6b 	bl	8000fd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0fa:	4806      	ldr	r0, [pc, #24]	; (800c114 <MX_USB_HOST_Init+0x44>)
 800c0fc:	f7fe fda8 	bl	800ac50 <USBH_Start>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c106:	f7f4 ff63 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c10a:	bf00      	nop
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	0800c131 	.word	0x0800c131
 800c114:	20000548 	.word	0x20000548
 800c118:	2000005c 	.word	0x2000005c

0800c11c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c120:	4802      	ldr	r0, [pc, #8]	; (800c12c <MX_USB_HOST_Process+0x10>)
 800c122:	f7fe fda5 	bl	800ac70 <USBH_Process>
}
 800c126:	bf00      	nop
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20000548 	.word	0x20000548

0800c130 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c13c:	78fb      	ldrb	r3, [r7, #3]
 800c13e:	3b01      	subs	r3, #1
 800c140:	2b04      	cmp	r3, #4
 800c142:	d819      	bhi.n	800c178 <USBH_UserProcess+0x48>
 800c144:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <USBH_UserProcess+0x1c>)
 800c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14a:	bf00      	nop
 800c14c:	0800c179 	.word	0x0800c179
 800c150:	0800c169 	.word	0x0800c169
 800c154:	0800c179 	.word	0x0800c179
 800c158:	0800c171 	.word	0x0800c171
 800c15c:	0800c161 	.word	0x0800c161
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c160:	4b09      	ldr	r3, [pc, #36]	; (800c188 <USBH_UserProcess+0x58>)
 800c162:	2203      	movs	r2, #3
 800c164:	701a      	strb	r2, [r3, #0]
  break;
 800c166:	e008      	b.n	800c17a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <USBH_UserProcess+0x58>)
 800c16a:	2202      	movs	r2, #2
 800c16c:	701a      	strb	r2, [r3, #0]
  break;
 800c16e:	e004      	b.n	800c17a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <USBH_UserProcess+0x58>)
 800c172:	2201      	movs	r2, #1
 800c174:	701a      	strb	r2, [r3, #0]
  break;
 800c176:	e000      	b.n	800c17a <USBH_UserProcess+0x4a>

  default:
  break;
 800c178:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c17a:	bf00      	nop
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	20000150 	.word	0x20000150

0800c18c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08a      	sub	sp, #40	; 0x28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	605a      	str	r2, [r3, #4]
 800c19e:	609a      	str	r2, [r3, #8]
 800c1a0:	60da      	str	r2, [r3, #12]
 800c1a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1ac:	d147      	bne.n	800c23e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	4b25      	ldr	r3, [pc, #148]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b6:	4a24      	ldr	r2, [pc, #144]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c1b8:	f043 0301 	orr.w	r3, r3, #1
 800c1bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c1be:	4b22      	ldr	r3, [pc, #136]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800c1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c1d8:	f107 0314 	add.w	r3, r7, #20
 800c1dc:	4619      	mov	r1, r3
 800c1de:	481b      	ldr	r0, [pc, #108]	; (800c24c <HAL_HCD_MspInit+0xc0>)
 800c1e0:	f7f7 fccc 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c1e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c1e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c1f6:	230a      	movs	r3, #10
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1fa:	f107 0314 	add.w	r3, r7, #20
 800c1fe:	4619      	mov	r1, r3
 800c200:	4812      	ldr	r0, [pc, #72]	; (800c24c <HAL_HCD_MspInit+0xc0>)
 800c202:	f7f7 fcbb 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c206:	4b10      	ldr	r3, [pc, #64]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20a:	4a0f      	ldr	r2, [pc, #60]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c210:	6353      	str	r3, [r2, #52]	; 0x34
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c21a:	4a0b      	ldr	r2, [pc, #44]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c21c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c220:	6453      	str	r3, [r2, #68]	; 0x44
 800c222:	4b09      	ldr	r3, [pc, #36]	; (800c248 <HAL_HCD_MspInit+0xbc>)
 800c224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c22a:	60fb      	str	r3, [r7, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c22e:	2200      	movs	r2, #0
 800c230:	2100      	movs	r1, #0
 800c232:	2043      	movs	r0, #67	; 0x43
 800c234:	f7f7 f9cf 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c238:	2043      	movs	r0, #67	; 0x43
 800c23a:	f7f7 f9e8 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c23e:	bf00      	nop
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	40023800 	.word	0x40023800
 800c24c:	40020000 	.word	0x40020000

0800c250 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f8d9 	bl	800b416 <USBH_LL_IncTimer>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff f911 	bl	800b4a2 <USBH_LL_Connect>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff f91a 	bl	800b4d0 <USBH_LL_Disconnect>
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff f8cb 	bl	800b46a <USBH_LL_PortEnabled>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff f8cb 	bl	800b486 <USBH_LL_PortDisabled>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c306:	2b01      	cmp	r3, #1
 800c308:	d12a      	bne.n	800c360 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c30a:	4a18      	ldr	r2, [pc, #96]	; (800c36c <USBH_LL_Init+0x74>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a15      	ldr	r2, [pc, #84]	; (800c36c <USBH_LL_Init+0x74>)
 800c316:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c31a:	4b14      	ldr	r3, [pc, #80]	; (800c36c <USBH_LL_Init+0x74>)
 800c31c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c320:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <USBH_LL_Init+0x74>)
 800c324:	220c      	movs	r2, #12
 800c326:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c328:	4b10      	ldr	r3, [pc, #64]	; (800c36c <USBH_LL_Init+0x74>)
 800c32a:	2201      	movs	r2, #1
 800c32c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <USBH_LL_Init+0x74>)
 800c330:	2200      	movs	r2, #0
 800c332:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c334:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <USBH_LL_Init+0x74>)
 800c336:	2202      	movs	r2, #2
 800c338:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <USBH_LL_Init+0x74>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c340:	480a      	ldr	r0, [pc, #40]	; (800c36c <USBH_LL_Init+0x74>)
 800c342:	f7f7 fdea 	bl	8003f1a <HAL_HCD_Init>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c34c:	f7f4 fe40 	bl	8000fd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c350:	4806      	ldr	r0, [pc, #24]	; (800c36c <USBH_LL_Init+0x74>)
 800c352:	f7f8 f9ed 	bl	8004730 <HAL_HCD_GetCurrentFrame>
 800c356:	4603      	mov	r3, r0
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff f84c 	bl	800b3f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20000920 	.word	0x20000920

0800c370 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c386:	4618      	mov	r0, r3
 800c388:	f7f8 f95a 	bl	8004640 <HAL_HCD_Start>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f95c 	bl	800c650 <USBH_Get_USB_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7f8 f962 	bl	8004686 <HAL_HCD_Stop>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f941 	bl	800c650 <USBH_Get_USB_Status>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f8 f9ac 	bl	800474c <HAL_HCD_GetCurrentSpeed>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d007      	beq.n	800c40a <USBH_LL_GetSpeed+0x2e>
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d302      	bcc.n	800c404 <USBH_LL_GetSpeed+0x28>
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d006      	beq.n	800c410 <USBH_LL_GetSpeed+0x34>
 800c402:	e008      	b.n	800c416 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c404:	2300      	movs	r3, #0
 800c406:	73fb      	strb	r3, [r7, #15]
    break;
 800c408:	e008      	b.n	800c41c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c40a:	2301      	movs	r3, #1
 800c40c:	73fb      	strb	r3, [r7, #15]
    break;
 800c40e:	e005      	b.n	800c41c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c410:	2302      	movs	r3, #2
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	e002      	b.n	800c41c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c416:	2301      	movs	r3, #1
 800c418:	73fb      	strb	r3, [r7, #15]
    break;
 800c41a:	bf00      	nop
  }
  return  speed;
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7f8 f93f 	bl	80046c0 <HAL_HCD_ResetPort>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f901 	bl	800c650 <USBH_Get_USB_Status>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c452:	7bbb      	ldrb	r3, [r7, #14]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7f8 f947 	bl	8004706 <HAL_HCD_HC_GetXferCount>
 800c478:	4603      	mov	r3, r0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c482:	b590      	push	{r4, r7, lr}
 800c484:	b089      	sub	sp, #36	; 0x24
 800c486:	af04      	add	r7, sp, #16
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	461a      	mov	r2, r3
 800c490:	4603      	mov	r3, r0
 800c492:	70fb      	strb	r3, [r7, #3]
 800c494:	460b      	mov	r3, r1
 800c496:	70bb      	strb	r3, [r7, #2]
 800c498:	4613      	mov	r3, r2
 800c49a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c4aa:	787c      	ldrb	r4, [r7, #1]
 800c4ac:	78ba      	ldrb	r2, [r7, #2]
 800c4ae:	78f9      	ldrb	r1, [r7, #3]
 800c4b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c4b2:	9302      	str	r3, [sp, #8]
 800c4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4623      	mov	r3, r4
 800c4c2:	f7f7 fd8c 	bl	8003fde <HAL_HCD_HC_Init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 f8bf 	bl	800c650 <USBH_Get_USB_Status>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd90      	pop	{r4, r7, pc}

0800c4e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4fa:	78fa      	ldrb	r2, [r7, #3]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f7 fe05 	bl	800410e <HAL_HCD_HC_Halt>
 800c504:	4603      	mov	r3, r0
 800c506:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f8a0 	bl	800c650 <USBH_Get_USB_Status>
 800c510:	4603      	mov	r3, r0
 800c512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c514:	7bbb      	ldrb	r3, [r7, #14]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c51e:	b590      	push	{r4, r7, lr}
 800c520:	b089      	sub	sp, #36	; 0x24
 800c522:	af04      	add	r7, sp, #16
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	4608      	mov	r0, r1
 800c528:	4611      	mov	r1, r2
 800c52a:	461a      	mov	r2, r3
 800c52c:	4603      	mov	r3, r0
 800c52e:	70fb      	strb	r3, [r7, #3]
 800c530:	460b      	mov	r3, r1
 800c532:	70bb      	strb	r3, [r7, #2]
 800c534:	4613      	mov	r3, r2
 800c536:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c546:	787c      	ldrb	r4, [r7, #1]
 800c548:	78ba      	ldrb	r2, [r7, #2]
 800c54a:	78f9      	ldrb	r1, [r7, #3]
 800c54c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c554:	9302      	str	r3, [sp, #8]
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	4623      	mov	r3, r4
 800c562:	f7f7 fdf7 	bl	8004154 <HAL_HCD_HC_SubmitRequest>
 800c566:	4603      	mov	r3, r0
 800c568:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 f86f 	bl	800c650 <USBH_Get_USB_Status>
 800c572:	4603      	mov	r3, r0
 800c574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c576:	7bbb      	ldrb	r3, [r7, #14]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd90      	pop	{r4, r7, pc}

0800c580 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7f8 f8a0 	bl	80046dc <HAL_HCD_HC_GetURBState>
 800c59c:	4603      	mov	r3, r0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d103      	bne.n	800c5c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 f872 	bl	800c6a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c5c4:	20c8      	movs	r0, #200	; 0xc8
 800c5c6:	f7f6 fc97 	bl	8002ef8 <HAL_Delay>
  return USBH_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c5ec:	78fa      	ldrb	r2, [r7, #3]
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	440b      	add	r3, r1
 800c5fa:	333b      	adds	r3, #59	; 0x3b
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c602:	78fa      	ldrb	r2, [r7, #3]
 800c604:	68f9      	ldr	r1, [r7, #12]
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	440b      	add	r3, r1
 800c610:	3350      	adds	r3, #80	; 0x50
 800c612:	78ba      	ldrb	r2, [r7, #2]
 800c614:	701a      	strb	r2, [r3, #0]
 800c616:	e009      	b.n	800c62c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	68f9      	ldr	r1, [r7, #12]
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	440b      	add	r3, r1
 800c626:	3351      	adds	r3, #81	; 0x51
 800c628:	78ba      	ldrb	r2, [r7, #2]
 800c62a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b082      	sub	sp, #8
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7f6 fc58 	bl	8002ef8 <HAL_Delay>
}
 800c648:	bf00      	nop
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b03      	cmp	r3, #3
 800c662:	d817      	bhi.n	800c694 <USBH_Get_USB_Status+0x44>
 800c664:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <USBH_Get_USB_Status+0x1c>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c67d 	.word	0x0800c67d
 800c670:	0800c683 	.word	0x0800c683
 800c674:	0800c689 	.word	0x0800c689
 800c678:	0800c68f 	.word	0x0800c68f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
    break;
 800c680:	e00b      	b.n	800c69a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c682:	2302      	movs	r3, #2
 800c684:	73fb      	strb	r3, [r7, #15]
    break;
 800c686:	e008      	b.n	800c69a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c688:	2301      	movs	r3, #1
 800c68a:	73fb      	strb	r3, [r7, #15]
    break;
 800c68c:	e005      	b.n	800c69a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c68e:	2302      	movs	r3, #2
 800c690:	73fb      	strb	r3, [r7, #15]
    break;
 800c692:	e002      	b.n	800c69a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c694:	2302      	movs	r3, #2
 800c696:	73fb      	strb	r3, [r7, #15]
    break;
 800c698:	bf00      	nop
  }
  return usb_status;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
 800c6c0:	e001      	b.n	800c6c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6ce:	4803      	ldr	r0, [pc, #12]	; (800c6dc <MX_DriverVbusFS+0x34>)
 800c6d0:	f7f7 fbe6 	bl	8003ea0 <HAL_GPIO_WritePin>
}
 800c6d4:	bf00      	nop
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	40021800 	.word	0x40021800

0800c6e0 <__errno>:
 800c6e0:	4b01      	ldr	r3, [pc, #4]	; (800c6e8 <__errno+0x8>)
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	2000007c 	.word	0x2000007c

0800c6ec <__libc_init_array>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4e0d      	ldr	r6, [pc, #52]	; (800c724 <__libc_init_array+0x38>)
 800c6f0:	4c0d      	ldr	r4, [pc, #52]	; (800c728 <__libc_init_array+0x3c>)
 800c6f2:	1ba4      	subs	r4, r4, r6
 800c6f4:	10a4      	asrs	r4, r4, #2
 800c6f6:	2500      	movs	r5, #0
 800c6f8:	42a5      	cmp	r5, r4
 800c6fa:	d109      	bne.n	800c710 <__libc_init_array+0x24>
 800c6fc:	4e0b      	ldr	r6, [pc, #44]	; (800c72c <__libc_init_array+0x40>)
 800c6fe:	4c0c      	ldr	r4, [pc, #48]	; (800c730 <__libc_init_array+0x44>)
 800c700:	f000 f8ea 	bl	800c8d8 <_init>
 800c704:	1ba4      	subs	r4, r4, r6
 800c706:	10a4      	asrs	r4, r4, #2
 800c708:	2500      	movs	r5, #0
 800c70a:	42a5      	cmp	r5, r4
 800c70c:	d105      	bne.n	800c71a <__libc_init_array+0x2e>
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c714:	4798      	blx	r3
 800c716:	3501      	adds	r5, #1
 800c718:	e7ee      	b.n	800c6f8 <__libc_init_array+0xc>
 800c71a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c71e:	4798      	blx	r3
 800c720:	3501      	adds	r5, #1
 800c722:	e7f2      	b.n	800c70a <__libc_init_array+0x1e>
 800c724:	0800e844 	.word	0x0800e844
 800c728:	0800e844 	.word	0x0800e844
 800c72c:	0800e844 	.word	0x0800e844
 800c730:	0800e848 	.word	0x0800e848

0800c734 <malloc>:
 800c734:	4b02      	ldr	r3, [pc, #8]	; (800c740 <malloc+0xc>)
 800c736:	4601      	mov	r1, r0
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	f000 b861 	b.w	800c800 <_malloc_r>
 800c73e:	bf00      	nop
 800c740:	2000007c 	.word	0x2000007c

0800c744 <free>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <free+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f000 b80b 	b.w	800c764 <_free_r>
 800c74e:	bf00      	nop
 800c750:	2000007c 	.word	0x2000007c

0800c754 <memset>:
 800c754:	4402      	add	r2, r0
 800c756:	4603      	mov	r3, r0
 800c758:	4293      	cmp	r3, r2
 800c75a:	d100      	bne.n	800c75e <memset+0xa>
 800c75c:	4770      	bx	lr
 800c75e:	f803 1b01 	strb.w	r1, [r3], #1
 800c762:	e7f9      	b.n	800c758 <memset+0x4>

0800c764 <_free_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4605      	mov	r5, r0
 800c768:	2900      	cmp	r1, #0
 800c76a:	d045      	beq.n	800c7f8 <_free_r+0x94>
 800c76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c770:	1f0c      	subs	r4, r1, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	bfb8      	it	lt
 800c776:	18e4      	addlt	r4, r4, r3
 800c778:	f000 f8ac 	bl	800c8d4 <__malloc_lock>
 800c77c:	4a1f      	ldr	r2, [pc, #124]	; (800c7fc <_free_r+0x98>)
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	4610      	mov	r0, r2
 800c782:	b933      	cbnz	r3, 800c792 <_free_r+0x2e>
 800c784:	6063      	str	r3, [r4, #4]
 800c786:	6014      	str	r4, [r2, #0]
 800c788:	4628      	mov	r0, r5
 800c78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78e:	f000 b8a2 	b.w	800c8d6 <__malloc_unlock>
 800c792:	42a3      	cmp	r3, r4
 800c794:	d90c      	bls.n	800c7b0 <_free_r+0x4c>
 800c796:	6821      	ldr	r1, [r4, #0]
 800c798:	1862      	adds	r2, r4, r1
 800c79a:	4293      	cmp	r3, r2
 800c79c:	bf04      	itt	eq
 800c79e:	681a      	ldreq	r2, [r3, #0]
 800c7a0:	685b      	ldreq	r3, [r3, #4]
 800c7a2:	6063      	str	r3, [r4, #4]
 800c7a4:	bf04      	itt	eq
 800c7a6:	1852      	addeq	r2, r2, r1
 800c7a8:	6022      	streq	r2, [r4, #0]
 800c7aa:	6004      	str	r4, [r0, #0]
 800c7ac:	e7ec      	b.n	800c788 <_free_r+0x24>
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	b10a      	cbz	r2, 800c7b8 <_free_r+0x54>
 800c7b4:	42a2      	cmp	r2, r4
 800c7b6:	d9fa      	bls.n	800c7ae <_free_r+0x4a>
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	1858      	adds	r0, r3, r1
 800c7bc:	42a0      	cmp	r0, r4
 800c7be:	d10b      	bne.n	800c7d8 <_free_r+0x74>
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	4401      	add	r1, r0
 800c7c4:	1858      	adds	r0, r3, r1
 800c7c6:	4282      	cmp	r2, r0
 800c7c8:	6019      	str	r1, [r3, #0]
 800c7ca:	d1dd      	bne.n	800c788 <_free_r+0x24>
 800c7cc:	6810      	ldr	r0, [r2, #0]
 800c7ce:	6852      	ldr	r2, [r2, #4]
 800c7d0:	605a      	str	r2, [r3, #4]
 800c7d2:	4401      	add	r1, r0
 800c7d4:	6019      	str	r1, [r3, #0]
 800c7d6:	e7d7      	b.n	800c788 <_free_r+0x24>
 800c7d8:	d902      	bls.n	800c7e0 <_free_r+0x7c>
 800c7da:	230c      	movs	r3, #12
 800c7dc:	602b      	str	r3, [r5, #0]
 800c7de:	e7d3      	b.n	800c788 <_free_r+0x24>
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	1821      	adds	r1, r4, r0
 800c7e4:	428a      	cmp	r2, r1
 800c7e6:	bf04      	itt	eq
 800c7e8:	6811      	ldreq	r1, [r2, #0]
 800c7ea:	6852      	ldreq	r2, [r2, #4]
 800c7ec:	6062      	str	r2, [r4, #4]
 800c7ee:	bf04      	itt	eq
 800c7f0:	1809      	addeq	r1, r1, r0
 800c7f2:	6021      	streq	r1, [r4, #0]
 800c7f4:	605c      	str	r4, [r3, #4]
 800c7f6:	e7c7      	b.n	800c788 <_free_r+0x24>
 800c7f8:	bd38      	pop	{r3, r4, r5, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000154 	.word	0x20000154

0800c800 <_malloc_r>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	1ccd      	adds	r5, r1, #3
 800c804:	f025 0503 	bic.w	r5, r5, #3
 800c808:	3508      	adds	r5, #8
 800c80a:	2d0c      	cmp	r5, #12
 800c80c:	bf38      	it	cc
 800c80e:	250c      	movcc	r5, #12
 800c810:	2d00      	cmp	r5, #0
 800c812:	4606      	mov	r6, r0
 800c814:	db01      	blt.n	800c81a <_malloc_r+0x1a>
 800c816:	42a9      	cmp	r1, r5
 800c818:	d903      	bls.n	800c822 <_malloc_r+0x22>
 800c81a:	230c      	movs	r3, #12
 800c81c:	6033      	str	r3, [r6, #0]
 800c81e:	2000      	movs	r0, #0
 800c820:	bd70      	pop	{r4, r5, r6, pc}
 800c822:	f000 f857 	bl	800c8d4 <__malloc_lock>
 800c826:	4a21      	ldr	r2, [pc, #132]	; (800c8ac <_malloc_r+0xac>)
 800c828:	6814      	ldr	r4, [r2, #0]
 800c82a:	4621      	mov	r1, r4
 800c82c:	b991      	cbnz	r1, 800c854 <_malloc_r+0x54>
 800c82e:	4c20      	ldr	r4, [pc, #128]	; (800c8b0 <_malloc_r+0xb0>)
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	b91b      	cbnz	r3, 800c83c <_malloc_r+0x3c>
 800c834:	4630      	mov	r0, r6
 800c836:	f000 f83d 	bl	800c8b4 <_sbrk_r>
 800c83a:	6020      	str	r0, [r4, #0]
 800c83c:	4629      	mov	r1, r5
 800c83e:	4630      	mov	r0, r6
 800c840:	f000 f838 	bl	800c8b4 <_sbrk_r>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d124      	bne.n	800c892 <_malloc_r+0x92>
 800c848:	230c      	movs	r3, #12
 800c84a:	6033      	str	r3, [r6, #0]
 800c84c:	4630      	mov	r0, r6
 800c84e:	f000 f842 	bl	800c8d6 <__malloc_unlock>
 800c852:	e7e4      	b.n	800c81e <_malloc_r+0x1e>
 800c854:	680b      	ldr	r3, [r1, #0]
 800c856:	1b5b      	subs	r3, r3, r5
 800c858:	d418      	bmi.n	800c88c <_malloc_r+0x8c>
 800c85a:	2b0b      	cmp	r3, #11
 800c85c:	d90f      	bls.n	800c87e <_malloc_r+0x7e>
 800c85e:	600b      	str	r3, [r1, #0]
 800c860:	50cd      	str	r5, [r1, r3]
 800c862:	18cc      	adds	r4, r1, r3
 800c864:	4630      	mov	r0, r6
 800c866:	f000 f836 	bl	800c8d6 <__malloc_unlock>
 800c86a:	f104 000b 	add.w	r0, r4, #11
 800c86e:	1d23      	adds	r3, r4, #4
 800c870:	f020 0007 	bic.w	r0, r0, #7
 800c874:	1ac3      	subs	r3, r0, r3
 800c876:	d0d3      	beq.n	800c820 <_malloc_r+0x20>
 800c878:	425a      	negs	r2, r3
 800c87a:	50e2      	str	r2, [r4, r3]
 800c87c:	e7d0      	b.n	800c820 <_malloc_r+0x20>
 800c87e:	428c      	cmp	r4, r1
 800c880:	684b      	ldr	r3, [r1, #4]
 800c882:	bf16      	itet	ne
 800c884:	6063      	strne	r3, [r4, #4]
 800c886:	6013      	streq	r3, [r2, #0]
 800c888:	460c      	movne	r4, r1
 800c88a:	e7eb      	b.n	800c864 <_malloc_r+0x64>
 800c88c:	460c      	mov	r4, r1
 800c88e:	6849      	ldr	r1, [r1, #4]
 800c890:	e7cc      	b.n	800c82c <_malloc_r+0x2c>
 800c892:	1cc4      	adds	r4, r0, #3
 800c894:	f024 0403 	bic.w	r4, r4, #3
 800c898:	42a0      	cmp	r0, r4
 800c89a:	d005      	beq.n	800c8a8 <_malloc_r+0xa8>
 800c89c:	1a21      	subs	r1, r4, r0
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f000 f808 	bl	800c8b4 <_sbrk_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d0cf      	beq.n	800c848 <_malloc_r+0x48>
 800c8a8:	6025      	str	r5, [r4, #0]
 800c8aa:	e7db      	b.n	800c864 <_malloc_r+0x64>
 800c8ac:	20000154 	.word	0x20000154
 800c8b0:	20000158 	.word	0x20000158

0800c8b4 <_sbrk_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4c06      	ldr	r4, [pc, #24]	; (800c8d0 <_sbrk_r+0x1c>)
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	4608      	mov	r0, r1
 800c8be:	6023      	str	r3, [r4, #0]
 800c8c0:	f7f5 f960 	bl	8001b84 <_sbrk>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_sbrk_r+0x1a>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_sbrk_r+0x1a>
 800c8cc:	602b      	str	r3, [r5, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20000be4 	.word	0x20000be4

0800c8d4 <__malloc_lock>:
 800c8d4:	4770      	bx	lr

0800c8d6 <__malloc_unlock>:
 800c8d6:	4770      	bx	lr

0800c8d8 <_init>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	bf00      	nop
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr

0800c8e4 <_fini>:
 800c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e6:	bf00      	nop
 800c8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ea:	bc08      	pop	{r3}
 800c8ec:	469e      	mov	lr, r3
 800c8ee:	4770      	bx	lr
