
InClass26.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cb8  08011aa0  08011aa0  00021aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015758  08015758  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  08015758  08015758  00025758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015760  08015760  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015760  08015760  00025760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015764  08015764  00025764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08015768  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055c8  20000118  08015880  00030118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200056e0  08015880  000356e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004276b  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007493  00000000  00000000  000728b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003190  00000000  00000000  00079d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002e90  00000000  00000000  0007ced8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c450  00000000  00000000  0007fd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c2ca  00000000  00000000  0008c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fde1d  00000000  00000000  000b8482  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b629f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d5f8  00000000  00000000  001b631c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011a88 	.word	0x08011a88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	08011a88 	.word	0x08011a88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <ScreenOneGameOperation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

ScreenOneGameOperation(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	if (chosenButton != -1 && handlingPress)
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <ScreenOneGameOperation+0x84>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800053c:	d034      	beq.n	80005a8 <ScreenOneGameOperation+0x78>
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <ScreenOneGameOperation+0x88>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d030      	beq.n	80005a8 <ScreenOneGameOperation+0x78>
	{
		if(chosenButton == 0)
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <ScreenOneGameOperation+0x84>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <ScreenOneGameOperation+0x26>
		{
			dificulty = 0;
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <ScreenOneGameOperation+0x8c>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e01e      	b.n	8000594 <ScreenOneGameOperation+0x64>
		}
		else if(chosenButton == 1)
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <ScreenOneGameOperation+0x84>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d103      	bne.n	8000566 <ScreenOneGameOperation+0x36>
		{
			dificulty = 1;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <ScreenOneGameOperation+0x8c>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	e016      	b.n	8000594 <ScreenOneGameOperation+0x64>
		}
		else if(chosenButton == 2)
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <ScreenOneGameOperation+0x84>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d103      	bne.n	8000576 <ScreenOneGameOperation+0x46>
		{
			dificulty = 2;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <ScreenOneGameOperation+0x8c>)
 8000570:	2202      	movs	r2, #2
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e00e      	b.n	8000594 <ScreenOneGameOperation+0x64>
		}
		else if(chosenButton == 6)
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <ScreenOneGameOperation+0x84>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b06      	cmp	r3, #6
 800057c:	d10a      	bne.n	8000594 <ScreenOneGameOperation+0x64>
		{
			if (dificulty != -1)
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <ScreenOneGameOperation+0x8c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000586:	d005      	beq.n	8000594 <ScreenOneGameOperation+0x64>
			{
				screenNum = 2;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <ScreenOneGameOperation+0x90>)
 800058a:	2202      	movs	r2, #2
 800058c:	601a      	str	r2, [r3, #0]
				clearScreen = true;
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <ScreenOneGameOperation+0x94>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
			}
		}

		 	 handlingPress = false;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <ScreenOneGameOperation+0x88>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
		 	 chosenButton = -1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <ScreenOneGameOperation+0x84>)
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	601a      	str	r2, [r3, #0]
		 	 drawScreen = true;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <ScreenOneGameOperation+0x98>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
	  }
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000141 	.word	0x20000141
 80005bc:	2000001c 	.word	0x2000001c
 80005c0:	20000018 	.word	0x20000018
 80005c4:	20000016 	.word	0x20000016
 80005c8:	20000017 	.word	0x20000017

080005cc <ScreenTwoGameOperation>:

ScreenTwoGameOperation(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
	if(generateSolution)
 80005d2:	4ba1      	ldr	r3, [pc, #644]	; (8000858 <ScreenTwoGameOperation+0x28c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d02c      	beq.n	8000634 <ScreenTwoGameOperation+0x68>
	{
	 for(int i = 0; i < 4; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e020      	b.n	8000622 <ScreenTwoGameOperation+0x56>
	 {
		 // Range will be 0 -> 5
		 int index = rand() % 6;
 80005e0:	f011 fa0c 	bl	80119fc <rand>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b9d      	ldr	r3, [pc, #628]	; (800085c <ScreenTwoGameOperation+0x290>)
 80005e8:	fb83 3102 	smull	r3, r1, r3, r2
 80005ec:	17d3      	asrs	r3, r2, #31
 80005ee:	1ac9      	subs	r1, r1, r3
 80005f0:	460b      	mov	r3, r1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	440b      	add	r3, r1
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	603b      	str	r3, [r7, #0]
		 //solution[i] = colorOptions[index];
		 solution[0] = LCD_COLOR_RED;
 80005fc:	4b98      	ldr	r3, [pc, #608]	; (8000860 <ScreenTwoGameOperation+0x294>)
 80005fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000602:	801a      	strh	r2, [r3, #0]
		 solution[1] = LCD_COLOR_RED;
 8000604:	4b96      	ldr	r3, [pc, #600]	; (8000860 <ScreenTwoGameOperation+0x294>)
 8000606:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800060a:	805a      	strh	r2, [r3, #2]
		 solution[2] = LCD_COLOR_GREEN;
 800060c:	4b94      	ldr	r3, [pc, #592]	; (8000860 <ScreenTwoGameOperation+0x294>)
 800060e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000612:	809a      	strh	r2, [r3, #4]
		 solution[3] = LCD_COLOR_GREEN;
 8000614:	4b92      	ldr	r3, [pc, #584]	; (8000860 <ScreenTwoGameOperation+0x294>)
 8000616:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800061a:	80da      	strh	r2, [r3, #6]
	 for(int i = 0; i < 4; i++)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2b03      	cmp	r3, #3
 8000626:	dddb      	ble.n	80005e0 <ScreenTwoGameOperation+0x14>
	 }

	 generateSolution = false;
 8000628:	4b8b      	ldr	r3, [pc, #556]	; (8000858 <ScreenTwoGameOperation+0x28c>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	 drawScreen = true;
 800062e:	4b8d      	ldr	r3, [pc, #564]	; (8000864 <ScreenTwoGameOperation+0x298>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
	}

	if(checkSolution)
 8000634:	4b8c      	ldr	r3, [pc, #560]	; (8000868 <ScreenTwoGameOperation+0x29c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80e1 	beq.w	8000800 <ScreenTwoGameOperation+0x234>
	{
	  // Make sure we aren't out of bounds
	  if(gameRound - 1 < 10)
 800063e:	4b8b      	ldr	r3, [pc, #556]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	2b09      	cmp	r3, #9
 8000646:	f300 80ca 	bgt.w	80007de <ScreenTwoGameOperation+0x212>
	  {
		  for(int col = 0; col < 4; col++)
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	e020      	b.n	8000692 <ScreenTwoGameOperation+0xc6>
		  {
			  if(currentColorMap[gameRound - 1][col] == solution[col])
 8000650:	4b86      	ldr	r3, [pc, #536]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4986      	ldr	r1, [pc, #536]	; (8000870 <ScreenTwoGameOperation+0x2a4>)
 8000658:	009a      	lsls	r2, r3, #2
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000662:	497f      	ldr	r1, [pc, #508]	; (8000860 <ScreenTwoGameOperation+0x294>)
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	d10e      	bne.n	800068c <ScreenTwoGameOperation+0xc0>
			  {
				  correctGuesses++;
 800066e:	4b81      	ldr	r3, [pc, #516]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	4a7f      	ldr	r2, [pc, #508]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 8000676:	6013      	str	r3, [r2, #0]
				  positionUsedSolution[col] = true;
 8000678:	4a7f      	ldr	r2, [pc, #508]	; (8000878 <ScreenTwoGameOperation+0x2ac>)
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	4413      	add	r3, r2
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
				  positionUsedGuess[col] = true;
 8000682:	4a7e      	ldr	r2, [pc, #504]	; (800087c <ScreenTwoGameOperation+0x2b0>)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4413      	add	r3, r2
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
		  for(int col = 0; col < 4; col++)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	3301      	adds	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b03      	cmp	r3, #3
 8000696:	dddb      	ble.n	8000650 <ScreenTwoGameOperation+0x84>
			  }

		  }

		  if (correctGuesses == 4)
 8000698:	4b76      	ldr	r3, [pc, #472]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b04      	cmp	r3, #4
 800069e:	d106      	bne.n	80006ae <ScreenTwoGameOperation+0xe2>
		  {
			  win = true;
 80006a0:	4b77      	ldr	r3, [pc, #476]	; (8000880 <ScreenTwoGameOperation+0x2b4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			  gameover = true;
 80006a6:	4b77      	ldr	r3, [pc, #476]	; (8000884 <ScreenTwoGameOperation+0x2b8>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e043      	b.n	8000736 <ScreenTwoGameOperation+0x16a>
		  }
		  else
		  {
			  for(int col = 0; col < 4; col++){
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e03d      	b.n	8000730 <ScreenTwoGameOperation+0x164>
				  if (!positionUsedGuess[col])
 80006b4:	4a71      	ldr	r2, [pc, #452]	; (800087c <ScreenTwoGameOperation+0x2b0>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f083 0301 	eor.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d031      	beq.n	800072a <ScreenTwoGameOperation+0x15e>
				  {
					  for (int solutionCol = 0; solutionCol < 4; solutionCol++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	e02b      	b.n	8000724 <ScreenTwoGameOperation+0x158>
					  {
						  if (currentColorMap[gameRound - 1][col] == solution[solutionCol])
 80006cc:	4b67      	ldr	r3, [pc, #412]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4967      	ldr	r1, [pc, #412]	; (8000870 <ScreenTwoGameOperation+0x2a4>)
 80006d4:	009a      	lsls	r2, r3, #2
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4413      	add	r3, r2
 80006da:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80006de:	4960      	ldr	r1, [pc, #384]	; (8000860 <ScreenTwoGameOperation+0x294>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d119      	bne.n	800071e <ScreenTwoGameOperation+0x152>
						  {
							  if (!positionUsedSolution[solutionCol])
 80006ea:	4a63      	ldr	r2, [pc, #396]	; (8000878 <ScreenTwoGameOperation+0x2ac>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d010      	beq.n	800071e <ScreenTwoGameOperation+0x152>
							  {
								  wrongPositions++;
 80006fc:	4b62      	ldr	r3, [pc, #392]	; (8000888 <ScreenTwoGameOperation+0x2bc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a61      	ldr	r2, [pc, #388]	; (8000888 <ScreenTwoGameOperation+0x2bc>)
 8000704:	6013      	str	r3, [r2, #0]
								  positionUsedSolution[solutionCol] = true;
 8000706:	4a5c      	ldr	r2, [pc, #368]	; (8000878 <ScreenTwoGameOperation+0x2ac>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
								  positionUsedGuess[col] = true;
 8000710:	4a5a      	ldr	r2, [pc, #360]	; (800087c <ScreenTwoGameOperation+0x2b0>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
								  solutionCol = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
					  for (int solutionCol = 0; solutionCol < 4; solutionCol++)
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b03      	cmp	r3, #3
 8000728:	ddd0      	ble.n	80006cc <ScreenTwoGameOperation+0x100>
			  for(int col = 0; col < 4; col++){
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b03      	cmp	r3, #3
 8000734:	ddbe      	ble.n	80006b4 <ScreenTwoGameOperation+0xe8>
					  }
				  }
			  }
		  }

		  strcpy(clue, "");
 8000736:	4b55      	ldr	r3, [pc, #340]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

		  for(int i = 0; i < 4; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e044      	b.n	80007cc <ScreenTwoGameOperation+0x200>
		  {
			  positionUsedSolution[i] = false;
 8000742:	4a4d      	ldr	r2, [pc, #308]	; (8000878 <ScreenTwoGameOperation+0x2ac>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
			  positionUsedGuess[i] = false;
 800074c:	4a4b      	ldr	r2, [pc, #300]	; (800087c <ScreenTwoGameOperation+0x2b0>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

			  if (correctGuesses != 0)
 8000756:	4b47      	ldr	r3, [pc, #284]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d011      	beq.n	8000782 <ScreenTwoGameOperation+0x1b6>
			  {
				  strcat(clue, "!   ");
 800075e:	484b      	ldr	r0, [pc, #300]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 8000760:	f7ff fd5e 	bl	8000220 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 800076a:	4413      	add	r3, r2
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <ScreenTwoGameOperation+0x2c4>)
 800076e:	6810      	ldr	r0, [r2, #0]
 8000770:	6018      	str	r0, [r3, #0]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	711a      	strb	r2, [r3, #4]
				  correctGuesses--;
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a3d      	ldr	r2, [pc, #244]	; (8000874 <ScreenTwoGameOperation+0x2a8>)
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	e021      	b.n	80007c6 <ScreenTwoGameOperation+0x1fa>
			  }
			  else if (wrongPositions != 0)
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <ScreenTwoGameOperation+0x2bc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d011      	beq.n	80007ae <ScreenTwoGameOperation+0x1e2>
			  {
				  strcat(clue, "?   ");
 800078a:	4840      	ldr	r0, [pc, #256]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 800078c:	f7ff fd48 	bl	8000220 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b3d      	ldr	r3, [pc, #244]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 8000796:	4413      	add	r3, r2
 8000798:	4a3e      	ldr	r2, [pc, #248]	; (8000894 <ScreenTwoGameOperation+0x2c8>)
 800079a:	6810      	ldr	r0, [r2, #0]
 800079c:	6018      	str	r0, [r3, #0]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	711a      	strb	r2, [r3, #4]
				  wrongPositions--;
 80007a2:	4b39      	ldr	r3, [pc, #228]	; (8000888 <ScreenTwoGameOperation+0x2bc>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	4a37      	ldr	r2, [pc, #220]	; (8000888 <ScreenTwoGameOperation+0x2bc>)
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e00b      	b.n	80007c6 <ScreenTwoGameOperation+0x1fa>
			  }
			  else
			  {
				  strcat(clue, "-   ");
 80007ae:	4837      	ldr	r0, [pc, #220]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 80007b0:	f7ff fd36 	bl	8000220 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <ScreenTwoGameOperation+0x2c0>)
 80007ba:	4413      	add	r3, r2
 80007bc:	4a36      	ldr	r2, [pc, #216]	; (8000898 <ScreenTwoGameOperation+0x2cc>)
 80007be:	6810      	ldr	r0, [r2, #0]
 80007c0:	6018      	str	r0, [r3, #0]
 80007c2:	7912      	ldrb	r2, [r2, #4]
 80007c4:	711a      	strb	r2, [r3, #4]
		  for(int i = 0; i < 4; i++)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	ddb7      	ble.n	8000742 <ScreenTwoGameOperation+0x176>
			  }
		  }
		  drawScreen = true;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <ScreenTwoGameOperation+0x298>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
		  drawClue = true;
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <ScreenTwoGameOperation+0x2d0>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
	  }

	  if (gameRound == 10  && !gameover)
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d109      	bne.n	80007fa <ScreenTwoGameOperation+0x22e>
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <ScreenTwoGameOperation+0x2b8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <ScreenTwoGameOperation+0x22e>
	  {
		  gameover = true;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <ScreenTwoGameOperation+0x2b8>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
	  }

	  checkSolution = false;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <ScreenTwoGameOperation+0x29c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	}

	if (chosenButton != -1 && handlingPress)
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <ScreenTwoGameOperation+0x2d4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000808:	d06f      	beq.n	80008ea <ScreenTwoGameOperation+0x31e>
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <ScreenTwoGameOperation+0x2d8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d06b      	beq.n	80008ea <ScreenTwoGameOperation+0x31e>
	{
	  if(chosenButton == 6)
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <ScreenTwoGameOperation+0x2d4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b06      	cmp	r3, #6
 8000818:	d14a      	bne.n	80008b0 <ScreenTwoGameOperation+0x2e4>
	  {
		  if (chosenColor != LCD_COLOR_WHITE)
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <ScreenTwoGameOperation+0x2dc>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000822:	4293      	cmp	r3, r2
 8000824:	d05a      	beq.n	80008dc <ScreenTwoGameOperation+0x310>
		  {
			  currentCol++;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <ScreenTwoGameOperation+0x2e0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <ScreenTwoGameOperation+0x2e0>)
 800082e:	6013      	str	r3, [r2, #0]
			  if (currentCol == 4)
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <ScreenTwoGameOperation+0x2e0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d10a      	bne.n	800084e <ScreenTwoGameOperation+0x282>
			  {
				  currentCol = 0;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <ScreenTwoGameOperation+0x2e0>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
				  gameRound++;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a09      	ldr	r2, [pc, #36]	; (800086c <ScreenTwoGameOperation+0x2a0>)
 8000846:	6013      	str	r3, [r2, #0]

				  checkSolution = true;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <ScreenTwoGameOperation+0x29c>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
			  }
			  chosenColor = LCD_COLOR_WHITE;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <ScreenTwoGameOperation+0x2dc>)
 8000850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	e041      	b.n	80008dc <ScreenTwoGameOperation+0x310>
 8000858:	2000000c 	.word	0x2000000c
 800085c:	2aaaaaab 	.word	0x2aaaaaab
 8000860:	20004ee0 	.word	0x20004ee0
 8000864:	20000017 	.word	0x20000017
 8000868:	20000134 	.word	0x20000134
 800086c:	20000138 	.word	0x20000138
 8000870:	20004b70 	.word	0x20004b70
 8000874:	20000144 	.word	0x20000144
 8000878:	2000014c 	.word	0x2000014c
 800087c:	20000150 	.word	0x20000150
 8000880:	20000171 	.word	0x20000171
 8000884:	20000140 	.word	0x20000140
 8000888:	20000148 	.word	0x20000148
 800088c:	20000154 	.word	0x20000154
 8000890:	08011ad4 	.word	0x08011ad4
 8000894:	08011adc 	.word	0x08011adc
 8000898:	08011ae4 	.word	0x08011ae4
 800089c:	20000170 	.word	0x20000170
 80008a0:	20000010 	.word	0x20000010
 80008a4:	20000141 	.word	0x20000141
 80008a8:	20000014 	.word	0x20000014
 80008ac:	2000013c 	.word	0x2000013c
		  }
	  }
	  else
	  {
		  chosenColor = colorOptions[chosenButton];
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <ScreenTwoGameOperation+0x340>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a16      	ldr	r2, [pc, #88]	; (8000910 <ScreenTwoGameOperation+0x344>)
 80008b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <ScreenTwoGameOperation+0x348>)
 80008bc:	801a      	strh	r2, [r3, #0]

		  newColorMap[gameRound][currentCol] = chosenColor;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <ScreenTwoGameOperation+0x34c>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <ScreenTwoGameOperation+0x350>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4913      	ldr	r1, [pc, #76]	; (8000914 <ScreenTwoGameOperation+0x348>)
 80008c8:	8808      	ldrh	r0, [r1, #0]
 80008ca:	4915      	ldr	r1, [pc, #84]	; (8000920 <ScreenTwoGameOperation+0x354>)
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	4602      	mov	r2, r0
 80008d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		  drawScreen = true;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <ScreenTwoGameOperation+0x358>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
	  }

	  handlingPress = false;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <ScreenTwoGameOperation+0x35c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	  chosenButton = -1;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <ScreenTwoGameOperation+0x340>)
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	601a      	str	r2, [r3, #0]
	}


	if (gameover)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <ScreenTwoGameOperation+0x360>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d008      	beq.n	8000904 <ScreenTwoGameOperation+0x338>
	{
	  screenNum = 3;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <ScreenTwoGameOperation+0x364>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	601a      	str	r2, [r3, #0]
	  clearScreen = true;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <ScreenTwoGameOperation+0x368>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	  drawScreen = true;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <ScreenTwoGameOperation+0x358>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
	}
}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000010 	.word	0x20000010
 8000910:	20000000 	.word	0x20000000
 8000914:	20000014 	.word	0x20000014
 8000918:	20000138 	.word	0x20000138
 800091c:	2000013c 	.word	0x2000013c
 8000920:	20004d7c 	.word	0x20004d7c
 8000924:	20000017 	.word	0x20000017
 8000928:	20000141 	.word	0x20000141
 800092c:	20000140 	.word	0x20000140
 8000930:	20000018 	.word	0x20000018
 8000934:	20000016 	.word	0x20000016

08000938 <ScreenThreeGameOperation>:

ScreenThreeGameOperation(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if (chosenButton != -1 && handlingPress)
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <ScreenThreeGameOperation+0x6c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d02b      	beq.n	800099e <ScreenThreeGameOperation+0x66>
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <ScreenThreeGameOperation+0x70>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d027      	beq.n	800099e <ScreenThreeGameOperation+0x66>
	{
	  if(chosenButton == 0)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <ScreenThreeGameOperation+0x6c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <ScreenThreeGameOperation+0x24>
	  {
		  replayChoice = 0;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <ScreenThreeGameOperation+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	  }
	  if(chosenButton == 1)
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <ScreenThreeGameOperation+0x6c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d102      	bne.n	800096a <ScreenThreeGameOperation+0x32>
	  {
		  replayChoice = 1;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <ScreenThreeGameOperation+0x74>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
	  }
	  if(chosenButton == 6)
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <ScreenThreeGameOperation+0x6c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b06      	cmp	r3, #6
 8000970:	d10b      	bne.n	800098a <ScreenThreeGameOperation+0x52>
	  {
		  if (replayChoice == 0)
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <ScreenThreeGameOperation+0x74>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d107      	bne.n	800098a <ScreenThreeGameOperation+0x52>
		  {
			  screenNum = 1;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <ScreenThreeGameOperation+0x78>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
			  clearScreen = true;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <ScreenThreeGameOperation+0x7c>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
			  resetGame();
 8000986:	f001 f807 	bl	8001998 <resetGame>
		  else{
			  //exit the system
		  }
	  }

	  handlingPress = false;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <ScreenThreeGameOperation+0x70>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	  chosenButton = -1;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <ScreenThreeGameOperation+0x6c>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	601a      	str	r2, [r3, #0]
	  drawScreen = true;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <ScreenThreeGameOperation+0x80>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]

	}
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000010 	.word	0x20000010
 80009a8:	20000141 	.word	0x20000141
 80009ac:	20000020 	.word	0x20000020
 80009b0:	20000018 	.word	0x20000018
 80009b4:	20000016 	.word	0x20000016
 80009b8:	20000017 	.word	0x20000017

080009bc <DrawScreenOne>:

void DrawScreenOne()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 80009c0:	4852      	ldr	r0, [pc, #328]	; (8000b0c <DrawScreenOne+0x150>)
 80009c2:	f002 fef3 	bl	80037ac <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80009c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009ca:	f002 fecf 	bl	800376c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(35, 30, "MASTERMIND", LEFT_MODE);
 80009ce:	2303      	movs	r3, #3
 80009d0:	4a4f      	ldr	r2, [pc, #316]	; (8000b10 <DrawScreenOne+0x154>)
 80009d2:	211e      	movs	r1, #30
 80009d4:	2023      	movs	r0, #35	; 0x23
 80009d6:	f002 ff59 	bl	800388c <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 80009da:	484e      	ldr	r0, [pc, #312]	; (8000b14 <DrawScreenOne+0x158>)
 80009dc:	f002 fee6 	bl	80037ac <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f002 fec3 	bl	800376c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(20, 140, "Easy", LEFT_MODE);
 80009e6:	2303      	movs	r3, #3
 80009e8:	4a4b      	ldr	r2, [pc, #300]	; (8000b18 <DrawScreenOne+0x15c>)
 80009ea:	218c      	movs	r1, #140	; 0x8c
 80009ec:	2014      	movs	r0, #20
 80009ee:	f002 ff4d 	bl	800388c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(85, 140, "Medium", LEFT_MODE);
 80009f2:	2303      	movs	r3, #3
 80009f4:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <DrawScreenOne+0x160>)
 80009f6:	218c      	movs	r1, #140	; 0x8c
 80009f8:	2055      	movs	r0, #85	; 0x55
 80009fa:	f002 ff47 	bl	800388c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(170, 140, "Hard", LEFT_MODE);
 80009fe:	2303      	movs	r3, #3
 8000a00:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <DrawScreenOne+0x164>)
 8000a02:	218c      	movs	r1, #140	; 0x8c
 8000a04:	20aa      	movs	r0, #170	; 0xaa
 8000a06:	f002 ff41 	bl	800388c <BSP_LCD_DisplayStringAt>

	if (dificulty == 0)
 8000a0a:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <DrawScreenOne+0x168>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11d      	bne.n	8000a4e <DrawScreenOne+0x92>
	{
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a12:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000a16:	f002 fea9 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(35, 160, radius);
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	21a0      	movs	r1, #160	; 0xa0
 8000a22:	2023      	movs	r0, #35	; 0x23
 8000a24:	f003 f8d6 	bl	8003bd4 <BSP_LCD_FillCircle>

	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a2c:	f002 fe9e 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(100, 160, radius);
 8000a30:	2308      	movs	r3, #8
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	21a0      	movs	r1, #160	; 0xa0
 8000a38:	2064      	movs	r0, #100	; 0x64
 8000a3a:	f003 f8cb 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(185, 160, radius);
 8000a3e:	2308      	movs	r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	21a0      	movs	r1, #160	; 0xa0
 8000a46:	20b9      	movs	r0, #185	; 0xb9
 8000a48:	f003 f8c4 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	  BSP_LCD_FillCircle(35, 160, radius);
	  BSP_LCD_FillCircle(100, 160, radius);
	  BSP_LCD_FillCircle(185, 160, radius);
	}
}
 8000a4c:	e05c      	b.n	8000b08 <DrawScreenOne+0x14c>
	else if (dificulty == 1)
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <DrawScreenOne+0x168>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d11d      	bne.n	8000a92 <DrawScreenOne+0xd6>
	  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000a56:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000a5a:	f002 fe87 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(100, 160, radius);
 8000a5e:	2308      	movs	r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	21a0      	movs	r1, #160	; 0xa0
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f003 f8b4 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a70:	f002 fe7c 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(35, 160, radius);
 8000a74:	2308      	movs	r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	21a0      	movs	r1, #160	; 0xa0
 8000a7c:	2023      	movs	r0, #35	; 0x23
 8000a7e:	f003 f8a9 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(185, 160, radius);
 8000a82:	2308      	movs	r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	21a0      	movs	r1, #160	; 0xa0
 8000a8a:	20b9      	movs	r0, #185	; 0xb9
 8000a8c:	f003 f8a2 	bl	8003bd4 <BSP_LCD_FillCircle>
}
 8000a90:	e03a      	b.n	8000b08 <DrawScreenOne+0x14c>
	else if (dificulty == 2)
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <DrawScreenOne+0x168>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d11d      	bne.n	8000ad6 <DrawScreenOne+0x11a>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000a9a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000a9e:	f002 fe65 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(185, 160, radius);
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	21a0      	movs	r1, #160	; 0xa0
 8000aaa:	20b9      	movs	r0, #185	; 0xb9
 8000aac:	f003 f892 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ab0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ab4:	f002 fe5a 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(100, 160, radius);
 8000ab8:	2308      	movs	r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	21a0      	movs	r1, #160	; 0xa0
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f003 f887 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(35, 160, radius);
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	21a0      	movs	r1, #160	; 0xa0
 8000ace:	2023      	movs	r0, #35	; 0x23
 8000ad0:	f003 f880 	bl	8003bd4 <BSP_LCD_FillCircle>
}
 8000ad4:	e018      	b.n	8000b08 <DrawScreenOne+0x14c>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ad6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ada:	f002 fe47 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(35, 160, radius);
 8000ade:	2308      	movs	r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	21a0      	movs	r1, #160	; 0xa0
 8000ae6:	2023      	movs	r0, #35	; 0x23
 8000ae8:	f003 f874 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(100, 160, radius);
 8000aec:	2308      	movs	r3, #8
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	21a0      	movs	r1, #160	; 0xa0
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f003 f86d 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(185, 160, radius);
 8000afa:	2308      	movs	r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	21a0      	movs	r1, #160	; 0xa0
 8000b02:	20b9      	movs	r0, #185	; 0xb9
 8000b04:	f003 f866 	bl	8003bd4 <BSP_LCD_FillCircle>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	08011aec 	.word	0x08011aec
 8000b14:	20000078 	.word	0x20000078
 8000b18:	08011af8 	.word	0x08011af8
 8000b1c:	08011b00 	.word	0x08011b00
 8000b20:	08011b08 	.word	0x08011b08
 8000b24:	2000001c 	.word	0x2000001c

08000b28 <DrawScreenTwo>:

void DrawScreenTwo()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	for (int i = 0; i <10; i++ )
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e061      	b.n	8000bf8 <DrawScreenTwo+0xd0>
	{
	  for (int j = 0; j < 4; j++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	e058      	b.n	8000bec <DrawScreenTwo+0xc4>
	  {
		  if (currentColorMap[i][j] != newColorMap[i][j])
 8000b3a:	493e      	ldr	r1, [pc, #248]	; (8000c34 <DrawScreenTwo+0x10c>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	009a      	lsls	r2, r3, #2
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000b48:	483b      	ldr	r0, [pc, #236]	; (8000c38 <DrawScreenTwo+0x110>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	0099      	lsls	r1, r3, #2
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	440b      	add	r3, r1
 8000b52:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d045      	beq.n	8000be6 <DrawScreenTwo+0xbe>
		  {
			  BSP_LCD_SetTextColor(newColorMap[i][j]);
 8000b5a:	4937      	ldr	r1, [pc, #220]	; (8000c38 <DrawScreenTwo+0x110>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	009a      	lsls	r2, r3, #2
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fdff 	bl	800376c <BSP_LCD_SetTextColor>
			  BSP_LCD_FillCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 8000b6e:	4933      	ldr	r1, [pc, #204]	; (8000c3c <DrawScreenTwo+0x114>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	009a      	lsls	r2, r3, #2
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	4930      	ldr	r1, [pc, #192]	; (8000c40 <DrawScreenTwo+0x118>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	009a      	lsls	r2, r3, #2
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	2208      	movs	r2, #8
 8000b90:	b292      	uxth	r2, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	f003 f81e 	bl	8003bd4 <BSP_LCD_FillCircle>
			  currentColorMap[i][j] = newColorMap[i][j];
 8000b98:	4927      	ldr	r1, [pc, #156]	; (8000c38 <DrawScreenTwo+0x110>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	009a      	lsls	r2, r3, #2
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8000ba6:	4923      	ldr	r1, [pc, #140]	; (8000c34 <DrawScreenTwo+0x10c>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	009a      	lsls	r2, r3, #2
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 fdd8 	bl	800376c <BSP_LCD_SetTextColor>
			  BSP_LCD_DrawCircle(xPositionMap[i][j], yPositionMap[i][j], radius);
 8000bbc:	491f      	ldr	r1, [pc, #124]	; (8000c3c <DrawScreenTwo+0x114>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bca:	b298      	uxth	r0, r3
 8000bcc:	491c      	ldr	r1, [pc, #112]	; (8000c40 <DrawScreenTwo+0x118>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2208      	movs	r2, #8
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f002 ff3b 	bl	8003a5c <BSP_LCD_DrawCircle>
	  for (int j = 0; j < 4; j++)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	dda3      	ble.n	8000b3a <DrawScreenTwo+0x12>
	for (int i = 0; i <10; i++ )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b09      	cmp	r3, #9
 8000bfc:	dd9a      	ble.n	8000b34 <DrawScreenTwo+0xc>
		  }
	  }
	}

	if (drawClue)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <DrawScreenTwo+0x11c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d012      	beq.n	8000c2c <DrawScreenTwo+0x104>
	{
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f002 fdb0 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(90, yPositionMap[gameRound-1][0], clue, LEFT_MODE);
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <DrawScreenTwo+0x120>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <DrawScreenTwo+0x118>)
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4413      	add	r3, r2
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <DrawScreenTwo+0x124>)
 8000c20:	205a      	movs	r0, #90	; 0x5a
 8000c22:	f002 fe33 	bl	800388c <BSP_LCD_DisplayStringAt>
	  drawClue = false;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <DrawScreenTwo+0x11c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20004b70 	.word	0x20004b70
 8000c38:	20004d7c 	.word	0x20004d7c
 8000c3c:	08011c1c 	.word	0x08011c1c
 8000c40:	08011cbc 	.word	0x08011cbc
 8000c44:	20000170 	.word	0x20000170
 8000c48:	20000138 	.word	0x20000138
 8000c4c:	20000154 	.word	0x20000154

08000c50 <DrawScreenThree>:

void DrawScreenThree()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	if(replayChoice == 0)
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <DrawScreenThree+0xe0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d115      	bne.n	8000c88 <DrawScreenThree+0x38>
	{
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f002 fd85 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(40, 130, radius);
 8000c62:	2308      	movs	r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	2182      	movs	r1, #130	; 0x82
 8000c6a:	2028      	movs	r0, #40	; 0x28
 8000c6c:	f002 ffb2 	bl	8003bd4 <BSP_LCD_FillCircle>

	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c74:	f002 fd7a 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(40, 170, radius);
 8000c78:	2308      	movs	r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	21aa      	movs	r1, #170	; 0xaa
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f002 ffa7 	bl	8003bd4 <BSP_LCD_FillCircle>

	  BSP_LCD_SetFont(&Font20);
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	  BSP_LCD_DisplayStringAt(50, 165, "Exit", LEFT_MODE);
	}
}
 8000c86:	e050      	b.n	8000d2a <DrawScreenThree+0xda>
	else if(replayChoice == 1)
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <DrawScreenThree+0xe0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d115      	bne.n	8000cbc <DrawScreenThree+0x6c>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f002 fd6b 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(40, 170, radius);
 8000c96:	2308      	movs	r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	21aa      	movs	r1, #170	; 0xaa
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f002 ff98 	bl	8003bd4 <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ca4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ca8:	f002 fd60 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(40, 130, radius);
 8000cac:	2308      	movs	r3, #8
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2182      	movs	r1, #130	; 0x82
 8000cb4:	2028      	movs	r0, #40	; 0x28
 8000cb6:	f002 ff8d 	bl	8003bd4 <BSP_LCD_FillCircle>
}
 8000cba:	e036      	b.n	8000d2a <DrawScreenThree+0xda>
	  if(win){
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <DrawScreenThree+0xe4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00d      	beq.n	8000ce0 <DrawScreenThree+0x90>
		  BSP_LCD_SetFont(&Font24);
 8000cc4:	481c      	ldr	r0, [pc, #112]	; (8000d38 <DrawScreenThree+0xe8>)
 8000cc6:	f002 fd71 	bl	80037ac <BSP_LCD_SetFont>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000cca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000cce:	f002 fd4d 	bl	800376c <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(35, 30, "YOU WON!! :)", LEFT_MODE);
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <DrawScreenThree+0xec>)
 8000cd6:	211e      	movs	r1, #30
 8000cd8:	2023      	movs	r0, #35	; 0x23
 8000cda:	f002 fdd7 	bl	800388c <BSP_LCD_DisplayStringAt>
 8000cde:	e00c      	b.n	8000cfa <DrawScreenThree+0xaa>
		  BSP_LCD_SetFont(&Font24);
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <DrawScreenThree+0xe8>)
 8000ce2:	f002 fd63 	bl	80037ac <BSP_LCD_SetFont>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ce6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000cea:	f002 fd3f 	bl	800376c <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(35, 30, "YOU LOST :(", LEFT_MODE);
 8000cee:	2303      	movs	r3, #3
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <DrawScreenThree+0xf0>)
 8000cf2:	211e      	movs	r1, #30
 8000cf4:	2023      	movs	r0, #35	; 0x23
 8000cf6:	f002 fdc9 	bl	800388c <BSP_LCD_DisplayStringAt>
	  BSP_LCD_SetFont(&Font20);
 8000cfa:	4812      	ldr	r0, [pc, #72]	; (8000d44 <DrawScreenThree+0xf4>)
 8000cfc:	f002 fd56 	bl	80037ac <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f002 fd33 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(50, 125, "Replay", LEFT_MODE);
 8000d06:	2303      	movs	r3, #3
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <DrawScreenThree+0xf8>)
 8000d0a:	217d      	movs	r1, #125	; 0x7d
 8000d0c:	2032      	movs	r0, #50	; 0x32
 8000d0e:	f002 fdbd 	bl	800388c <BSP_LCD_DisplayStringAt>
	  BSP_LCD_SetFont(&Font20);
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <DrawScreenThree+0xf4>)
 8000d14:	f002 fd4a 	bl	80037ac <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f002 fd27 	bl	800376c <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(50, 165, "Exit", LEFT_MODE);
 8000d1e:	2303      	movs	r3, #3
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <DrawScreenThree+0xfc>)
 8000d22:	21a5      	movs	r1, #165	; 0xa5
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f002 fdb1 	bl	800388c <BSP_LCD_DisplayStringAt>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000020 	.word	0x20000020
 8000d34:	20000171 	.word	0x20000171
 8000d38:	20000068 	.word	0x20000068
 8000d3c:	08011b10 	.word	0x08011b10
 8000d40:	08011b20 	.word	0x08011b20
 8000d44:	20000070 	.word	0x20000070
 8000d48:	08011b2c 	.word	0x08011b2c
 8000d4c:	08011b34 	.word	0x08011b34

08000d50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// indicate we have received a message via RED LED
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	4814      	ldr	r0, [pc, #80]	; (8000db0 <HAL_UART_RxCpltCallback+0x60>)
 8000d5e:	f004 f93f 	bl	8004fe0 <HAL_GPIO_WritePin>

	// Notify the transmit task
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]

	/* At this point xTaskToNotify should not be NULL as
	a transmission was in progress. */
	configASSERT( xTaskToNotifyTx != NULL );
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_UART_RxCpltCallback+0x64>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_UART_RxCpltCallback+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d72:	f383 8811 	msr	BASEPRI, r3
 8000d76:	f3bf 8f6f 	isb	sy
 8000d7a:	f3bf 8f4f 	dsb	sy
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e7fe      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x30>

	/* Notify the Tx task that a message has been received */
	vTaskNotifyGiveFromISR( xTaskToNotifyTx, &xHigherPriorityTaskWoken );
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_UART_RxCpltCallback+0x64>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f107 0208 	add.w	r2, r7, #8
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00f f9ff 	bl	8010190 <vTaskNotifyGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <HAL_UART_RxCpltCallback+0x58>
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_UART_RxCpltCallback+0x68>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy

	// listen again for
	//HAL_UART_Receive_IT(&huart6, Rx_data, 4);

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	20000168 	.word	0x20000168
 8000db8:	e000ed04 	.word	0xe000ed04

08000dbc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	// indicate we have transmitted our message via turning off the RED LED
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4814      	ldr	r0, [pc, #80]	; (8000e1c <HAL_UART_TxCpltCallback+0x60>)
 8000dca:	f004 f909 	bl	8004fe0 <HAL_GPIO_WritePin>

	// Notify the transmit task
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]

	/* At this point xTaskToNotify should not be NULL as
	a transmission was in progress. */
	configASSERT( xTaskToNotifyRx != NULL );
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_UART_TxCpltCallback+0x64>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <HAL_UART_TxCpltCallback+0x32>
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e7fe      	b.n	8000dec <HAL_UART_TxCpltCallback+0x30>

	/* Notify the Tx task that a message has been received */
	vTaskNotifyGiveFromISR( xTaskToNotifyRx, &xHigherPriorityTaskWoken );
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_UART_TxCpltCallback+0x64>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f107 0208 	add.w	r2, r7, #8
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00f f9c9 	bl	8010190 <vTaskNotifyGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <HAL_UART_TxCpltCallback+0x58>
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_UART_TxCpltCallback+0x68>)
 8000e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	f3bf 8f6f 	isb	sy
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	2000016c 	.word	0x2000016c
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

 for (int i = 0; i <10; i++ )
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e014      	b.n	8000e5e <main+0x36>
  {
	  for (int j = 0; j < 4; j++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	e00b      	b.n	8000e52 <main+0x2a>
	  {
		  newColorMap[i][j] = LCD_COLOR_WHITE;
 8000e3a:	493b      	ldr	r1, [pc, #236]	; (8000f28 <main+0x100>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	009a      	lsls	r2, r3, #2
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for (int j = 0; j < 4; j++)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	ddf0      	ble.n	8000e3a <main+0x12>
 for (int i = 0; i <10; i++ )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	dde7      	ble.n	8000e34 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f003 f83c 	bl	8003ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f880 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 fb92 	bl	8001594 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e70:	f000 f930 	bl	80010d4 <MX_ADC1_Init>
  MX_DAC_Init();
 8000e74:	f000 f980 	bl	8001178 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000e78:	f000 f9a8 	bl	80011cc <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000e7c:	f000 f9de 	bl	800123c <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000e80:	f000 fa46 	bl	8001310 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000e84:	f000 fcd6 	bl	8001834 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000e88:	f000 faa6 	bl	80013d8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000e8c:	f000 fad2 	bl	8001434 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000e90:	f000 fafc 	bl	800148c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000e94:	f000 fb2a 	bl	80014ec <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000e98:	f000 fb52 	bl	8001540 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000e9c:	f000 fa6e 	bl	800137c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ea0:	f000 f904 	bl	80010ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // LCD Setup
  BSP_LCD_Init();
 8000ea4:	f002 fbd3 	bl	800364e <BSP_LCD_Init>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eac:	f002 fc8e 	bl	80037cc <BSP_LCD_Clear>

  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f002 fa16 	bl	80032e4 <BSP_PB_Init>

  BSP_LCD_SetFont(&Font24);
 8000eb8:	481c      	ldr	r0, [pc, #112]	; (8000f2c <main+0x104>)
 8000eba:	f002 fc77 	bl	80037ac <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8000ebe:	f24a 1045 	movw	r0, #41285	; 0xa145
 8000ec2:	f002 fc53 	bl	800376c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000ec6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eca:	f002 fc5f 	bl	800378c <BSP_LCD_SetBackColor>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ece:	f00d f951 	bl	800e174 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task01 */
  task01Handle = osThreadNew(StartTask01, NULL, &task01_attributes);
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <main+0x108>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <main+0x10c>)
 8000ed8:	f00d f9b6 	bl	800e248 <osThreadNew>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <main+0x110>)
 8000ee0:	601a      	str	r2, [r3, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(StartTask02, NULL, &task02_attributes);
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <main+0x114>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <main+0x118>)
 8000ee8:	f00d f9ae 	bl	800e248 <osThreadNew>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <main+0x11c>)
 8000ef0:	601a      	str	r2, [r3, #0]

  /* creation of task03 */
  task03Handle = osThreadNew(StartTask03, NULL, &task03_attributes);
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <main+0x120>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4815      	ldr	r0, [pc, #84]	; (8000f4c <main+0x124>)
 8000ef8:	f00d f9a6 	bl	800e248 <osThreadNew>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <main+0x128>)
 8000f00:	601a      	str	r2, [r3, #0]

  /* creation of gameControlTask */
  gameControlTaskHandle = osThreadNew(StartGameControlTask, NULL, &gameControlTask_attributes);
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <main+0x12c>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <main+0x130>)
 8000f08:	f00d f99e 	bl	800e248 <osThreadNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <main+0x134>)
 8000f10:	601a      	str	r2, [r3, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <main+0x138>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <main+0x13c>)
 8000f18:	f00d f996 	bl	800e248 <osThreadNew>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <main+0x140>)
 8000f20:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f22:	f00d f95b 	bl	800e1dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0xfe>
 8000f28:	20004d7c 	.word	0x20004d7c
 8000f2c:	20000068 	.word	0x20000068
 8000f30:	08011b68 	.word	0x08011b68
 8000f34:	08001ab5 	.word	0x08001ab5
 8000f38:	20004b14 	.word	0x20004b14
 8000f3c:	08011b8c 	.word	0x08011b8c
 8000f40:	08001ad9 	.word	0x08001ad9
 8000f44:	20004cd0 	.word	0x20004cd0
 8000f48:	08011bb0 	.word	0x08011bb0
 8000f4c:	08001b25 	.word	0x08001b25
 8000f50:	20004b6c 	.word	0x20004b6c
 8000f54:	08011bd4 	.word	0x08011bd4
 8000f58:	08001b65 	.word	0x08001b65
 8000f5c:	20004f30 	.word	0x20004f30
 8000f60:	08011bf8 	.word	0x08011bf8
 8000f64:	08001b9d 	.word	0x08001b9d
 8000f68:	20004bf8 	.word	0x20004bf8

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0aa      	sub	sp, #168	; 0xa8
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f76:	2234      	movs	r2, #52	; 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f010 fc8d 	bl	801189a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2258      	movs	r2, #88	; 0x58
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f010 fc7e 	bl	801189a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <SystemClock_Config+0x138>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <SystemClock_Config+0x138>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <SystemClock_Config+0x138>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <SystemClock_Config+0x13c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a39      	ldr	r2, [pc, #228]	; (80010a8 <SystemClock_Config+0x13c>)
 8000fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <SystemClock_Config+0x13c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fda:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fde:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001000:	2390      	movs	r3, #144	; 0x90
 8001002:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800101c:	4618      	mov	r0, r3
 800101e:	f007 f99f 	bl	8008360 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001028:	f000 fdfc 	bl	8001c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001040:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fbb0 	bl	80077ac <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001052:	f000 fde7 	bl	8001c24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8001056:	f240 1371 	movw	r3, #369	; 0x171
 800105a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800105c:	2332      	movs	r3, #50	; 0x32
 800105e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8001060:	230c      	movs	r3, #12
 8001062:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8001074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800107a:	2300      	movs	r3, #0
 800107c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f006 fd8c 	bl	8007ba8 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001096:	f000 fdc5 	bl	8001c24 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	37a8      	adds	r7, #168	; 0xa8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2017      	movs	r0, #23
 80010b6:	f003 faa1 	bl	80045fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ba:	2017      	movs	r0, #23
 80010bc:	f003 faba 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f003 fa99 	bl	80045fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ca:	2028      	movs	r0, #40	; 0x28
 80010cc:	f003 fab2 	bl	8004634 <HAL_NVIC_EnableIRQ>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC1_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_ADC1_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_ADC1_Init+0x98>)
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_ADC1_Init+0xa0>)
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_ADC1_Init+0x98>)
 8001134:	f002 ff38 	bl	8003fa8 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 fd71 	bl	8001c24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001142:	230a      	movs	r3, #10
 8001144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_ADC1_Init+0x98>)
 8001154:	f002 ff6c 	bl	8004030 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800115e:	f000 fd61 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004cd4 	.word	0x20004cd4
 8001170:	40012000 	.word	0x40012000
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_DAC_Init+0x4c>)
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <MX_DAC_Init+0x50>)
 800118a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_DAC_Init+0x4c>)
 800118e:	f003 fa5f 	bl	8004650 <HAL_DAC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001198:	f000 fd44 	bl	8001c24 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_DAC_Init+0x4c>)
 80011ac:	f003 fac6 	bl	800473c <HAL_DAC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011b6:	f000 fd35 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20004d1c 	.word	0x20004d1c
 80011c8:	40007400 	.word	0x40007400

080011cc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <MX_DFSDM1_Init+0x6c>)
 80011d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011d8:	2201      	movs	r2, #1
 80011da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_DFSDM1_Init+0x68>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DFSDM1_Init+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_DFSDM1_Init+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DFSDM1_Init+0x68>)
 800120e:	2201      	movs	r2, #1
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_DFSDM1_Init+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_DFSDM1_Init+0x68>)
 800121a:	2200      	movs	r2, #0
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_DFSDM1_Init+0x68>)
 8001220:	f003 fae4 	bl	80047ec <HAL_DFSDM_ChannelInit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800122a:	f000 fcfb 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20004adc 	.word	0x20004adc
 8001238:	40016020 	.word	0x40016020

0800123c <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <MX_DFSDM2_Init+0xc8>)
 8001244:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001248:	2201      	movs	r2, #1
 800124a:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001254:	2202      	movs	r2, #2
 8001256:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 800126c:	2202      	movs	r2, #2
 800126e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 800127e:	2201      	movs	r2, #1
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800128e:	481c      	ldr	r0, [pc, #112]	; (8001300 <MX_DFSDM2_Init+0xc4>)
 8001290:	f003 faac 	bl	80047ec <HAL_DFSDM_ChannelInit>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800129a:	f000 fcc3 	bl	8001c24 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <MX_DFSDM2_Init+0xd0>)
 80012a2:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012dc:	2201      	movs	r2, #1
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_DFSDM2_Init+0xcc>)
 80012ee:	f003 fa7d 	bl	80047ec <HAL_DFSDM_ChannelInit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80012f8:	f000 fc94 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20004c98 	.word	0x20004c98
 8001304:	40016420 	.word	0x40016420
 8001308:	20004bc0 	.word	0x20004bc0
 800130c:	400164e0 	.word	0x400164e0

08001310 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <MX_FMPI2C1_Init+0x64>)
 8001318:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 800131c:	4a16      	ldr	r2, [pc, #88]	; (8001378 <MX_FMPI2C1_Init+0x68>)
 800131e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 800134c:	f003 fbc4 	bl	8004ad8 <HAL_FMPI2C_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001356:	f000 fc65 	bl	8001c24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135a:	2100      	movs	r1, #0
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_FMPI2C1_Init+0x60>)
 800135e:	f003 fc4a 	bl	8004bf6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001368:	f000 fc5c 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20004d30 	.word	0x20004d30
 8001374:	40006000 	.word	0x40006000
 8001378:	00303d5b 	.word	0x00303d5b

0800137c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C2_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <MX_I2C2_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2C2_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_I2C2_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2C2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_I2C2_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_I2C2_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_I2C2_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_I2C2_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_I2C2_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_I2C2_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_I2C2_Init+0x50>)
 80013ba:	f005 fb59 	bl	8006a70 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 fc2e 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20004b18 	.word	0x20004b18
 80013d0:	40005800 	.word	0x40005800
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_I2S2_Init+0x54>)
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <MX_I2S2_Init+0x58>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2S2_Init+0x54>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_I2S2_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_I2S2_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_I2S2_Init+0x54>)
 80013f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_I2S2_Init+0x54>)
 8001400:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001404:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_I2S2_Init+0x54>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_I2S2_Init+0x54>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_I2S2_Init+0x54>)
 8001414:	2201      	movs	r2, #1
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2S2_Init+0x54>)
 800141a:	f005 fc61 	bl	8006ce0 <HAL_I2S_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001424:	f000 fbfe 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20004ee8 	.word	0x20004ee8
 8001430:	40003800 	.word	0x40003800

08001434 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_QUADSPI_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_QUADSPI_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001440:	22ff      	movs	r2, #255	; 0xff
 8001442:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001446:	2201      	movs	r2, #1
 8001448:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_QUADSPI_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001452:	2201      	movs	r2, #1
 8001454:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_QUADSPI_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_QUADSPI_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_QUADSPI_Init+0x50>)
 8001470:	f006 f8da 	bl	8007628 <HAL_QSPI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800147a:	f000 fbd3 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20004f34 	.word	0x20004f34
 8001488:	a0001000 	.word	0xa0001000

0800148c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_SDIO_SD_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014bc:	f007 f992 	bl	80087e4 <HAL_SD_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80014c6:	f000 fbad 	bl	8001c24 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80014ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_SDIO_SD_Init+0x58>)
 80014d0:	f007 fbbc 	bl	8008c4c <HAL_SD_ConfigWideBusOperation>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 fba3 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004e1c 	.word	0x20004e1c
 80014e8:	40012c00 	.word	0x40012c00

080014ec <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_UART10_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_UART10_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_UART10_Init+0x4c>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_UART10_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_UART10_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_UART10_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_UART10_Init+0x4c>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_UART10_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_UART10_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_UART10_Init+0x4c>)
 8001524:	f008 f94c 	bl	80097c0 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 800152e:	f000 fb79 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20004c08 	.word	0x20004c08
 800153c:	40011c00 	.word	0x40011c00

08001540 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART6_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001578:	f008 f922 	bl	80097c0 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 fb4f 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20004ea0 	.word	0x20004ea0
 8001590:	40011400 	.word	0x40011400

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	4b99      	ldr	r3, [pc, #612]	; (8001814 <MX_GPIO_Init+0x280>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a98      	ldr	r2, [pc, #608]	; (8001814 <MX_GPIO_Init+0x280>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b96      	ldr	r3, [pc, #600]	; (8001814 <MX_GPIO_Init+0x280>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	4b92      	ldr	r3, [pc, #584]	; (8001814 <MX_GPIO_Init+0x280>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a91      	ldr	r2, [pc, #580]	; (8001814 <MX_GPIO_Init+0x280>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <MX_GPIO_Init+0x280>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <MX_GPIO_Init+0x280>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <MX_GPIO_Init+0x280>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <MX_GPIO_Init+0x280>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b84      	ldr	r3, [pc, #528]	; (8001814 <MX_GPIO_Init+0x280>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a83      	ldr	r2, [pc, #524]	; (8001814 <MX_GPIO_Init+0x280>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b81      	ldr	r3, [pc, #516]	; (8001814 <MX_GPIO_Init+0x280>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <MX_GPIO_Init+0x280>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <MX_GPIO_Init+0x280>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <MX_GPIO_Init+0x280>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <MX_GPIO_Init+0x280>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a75      	ldr	r2, [pc, #468]	; (8001814 <MX_GPIO_Init+0x280>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b73      	ldr	r3, [pc, #460]	; (8001814 <MX_GPIO_Init+0x280>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <MX_GPIO_Init+0x280>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <MX_GPIO_Init+0x280>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <MX_GPIO_Init+0x280>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <MX_GPIO_Init+0x280>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a67      	ldr	r2, [pc, #412]	; (8001814 <MX_GPIO_Init+0x280>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <MX_GPIO_Init+0x280>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2138      	movs	r1, #56	; 0x38
 800168e:	4862      	ldr	r0, [pc, #392]	; (8001818 <MX_GPIO_Init+0x284>)
 8001690:	f003 fca6 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2120      	movs	r1, #32
 8001698:	4860      	ldr	r0, [pc, #384]	; (800181c <MX_GPIO_Init+0x288>)
 800169a:	f003 fca1 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016a4:	485e      	ldr	r0, [pc, #376]	; (8001820 <MX_GPIO_Init+0x28c>)
 80016a6:	f003 fc9b 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	485c      	ldr	r0, [pc, #368]	; (8001824 <MX_GPIO_Init+0x290>)
 80016b2:	f003 fc95 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 80016b6:	2338      	movs	r3, #56	; 0x38
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4852      	ldr	r0, [pc, #328]	; (8001818 <MX_GPIO_Init+0x284>)
 80016ce:	f003 fadd 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80016e2:	2303      	movs	r3, #3
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	484a      	ldr	r0, [pc, #296]	; (8001818 <MX_GPIO_Init+0x284>)
 80016ee:	f003 facd 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 SD_Detect_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|SD_Detect_Pin;
 80016f2:	f44f 634c 	mov.w	r3, #3264	; 0xcc0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <MX_GPIO_Init+0x294>)
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4849      	ldr	r0, [pc, #292]	; (800182c <MX_GPIO_Init+0x298>)
 8001708:	f003 fac0 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800170c:	2302      	movs	r3, #2
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001710:	4b45      	ldr	r3, [pc, #276]	; (8001828 <MX_GPIO_Init+0x294>)
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	483f      	ldr	r0, [pc, #252]	; (800181c <MX_GPIO_Init+0x288>)
 8001720:	f003 fab4 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_USER_Pin PA15 */
  GPIO_InitStruct.Pin = B_USER_Pin|GPIO_PIN_15;
 8001724:	f248 0301 	movw	r3, #32769	; 0x8001
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <MX_GPIO_Init+0x294>)
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	483d      	ldr	r0, [pc, #244]	; (8001830 <MX_GPIO_Init+0x29c>)
 800173a:	f003 faa7 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4831      	ldr	r0, [pc, #196]	; (800181c <MX_GPIO_Init+0x288>)
 8001756:	f003 fa99 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800176a:	2302      	movs	r3, #2
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	482a      	ldr	r0, [pc, #168]	; (8001820 <MX_GPIO_Init+0x28c>)
 8001776:	f003 fa89 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800177a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <MX_GPIO_Init+0x294>)
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4824      	ldr	r0, [pc, #144]	; (8001820 <MX_GPIO_Init+0x28c>)
 8001790:	f003 fa7c 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001794:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	481c      	ldr	r0, [pc, #112]	; (8001820 <MX_GPIO_Init+0x28c>)
 80017ae:	f003 fa6d 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4816      	ldr	r0, [pc, #88]	; (8001824 <MX_GPIO_Init+0x290>)
 80017cc:	f003 fa5e 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_GPIO_Init+0x294>)
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <MX_GPIO_Init+0x290>)
 80017e6:	f003 fa51 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80017ea:	2330      	movs	r3, #48	; 0x30
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017fa:	2306      	movs	r3, #6
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_GPIO_Init+0x28c>)
 8001806:	f003 fa41 	bl	8004c8c <HAL_GPIO_Init>

}
 800180a:	bf00      	nop
 800180c:	3738      	adds	r7, #56	; 0x38
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40020800 	.word	0x40020800
 8001820:	40020400 	.word	0x40020400
 8001824:	40021800 	.word	0x40021800
 8001828:	10110000 	.word	0x10110000
 800182c:	40021400 	.word	0x40021400
 8001830:	40020000 	.word	0x40020000

08001834 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <MX_FSMC_Init+0x158>)
 800184e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001852:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <MX_FSMC_Init+0x158>)
 8001856:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <MX_FSMC_Init+0x15c>)
 8001858:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <MX_FSMC_Init+0x158>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <MX_FSMC_Init+0x158>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <MX_FSMC_Init+0x158>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <MX_FSMC_Init+0x158>)
 800186e:	2210      	movs	r2, #16
 8001870:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001872:	4b46      	ldr	r3, [pc, #280]	; (800198c <MX_FSMC_Init+0x158>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <MX_FSMC_Init+0x158>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <MX_FSMC_Init+0x158>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <MX_FSMC_Init+0x158>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <MX_FSMC_Init+0x158>)
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <MX_FSMC_Init+0x158>)
 8001892:	2200      	movs	r2, #0
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <MX_FSMC_Init+0x158>)
 8001898:	2200      	movs	r2, #0
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <MX_FSMC_Init+0x158>)
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <MX_FSMC_Init+0x158>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <MX_FSMC_Init+0x158>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <MX_FSMC_Init+0x158>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018b4:	230f      	movs	r3, #15
 80018b6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018b8:	230f      	movs	r3, #15
 80018ba:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80018bc:	23ff      	movs	r3, #255	; 0xff
 80018be:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80018c0:	230f      	movs	r3, #15
 80018c2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018c4:	2310      	movs	r3, #16
 80018c6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018c8:	2311      	movs	r3, #17
 80018ca:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	482d      	ldr	r0, [pc, #180]	; (800198c <MX_FSMC_Init+0x158>)
 80018d8:	f007 fcf0 	bl	80092bc <HAL_SRAM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 80018e2:	f000 f99f 	bl	8001c24 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <MX_FSMC_Init+0x160>)
 80018e8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80018ec:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <MX_FSMC_Init+0x160>)
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <MX_FSMC_Init+0x15c>)
 80018f2:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <MX_FSMC_Init+0x160>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <MX_FSMC_Init+0x160>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <MX_FSMC_Init+0x160>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <MX_FSMC_Init+0x160>)
 8001908:	2210      	movs	r2, #16
 800190a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_FSMC_Init+0x160>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <MX_FSMC_Init+0x160>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_FSMC_Init+0x160>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_FSMC_Init+0x160>)
 8001920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_FSMC_Init+0x160>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_FSMC_Init+0x160>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_FSMC_Init+0x160>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_FSMC_Init+0x160>)
 800193a:	2200      	movs	r2, #0
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_FSMC_Init+0x160>)
 8001940:	2200      	movs	r2, #0
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_FSMC_Init+0x160>)
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_FSMC_Init+0x160>)
 800194c:	2200      	movs	r2, #0
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001950:	230f      	movs	r3, #15
 8001952:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001954:	230f      	movs	r3, #15
 8001956:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001958:	23ff      	movs	r3, #255	; 0xff
 800195a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800195c:	230f      	movs	r3, #15
 800195e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001960:	2310      	movs	r3, #16
 8001962:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001964:	2311      	movs	r3, #17
 8001966:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	4619      	mov	r1, r3
 8001972:	4808      	ldr	r0, [pc, #32]	; (8001994 <MX_FSMC_Init+0x160>)
 8001974:	f007 fca2 	bl	80092bc <HAL_SRAM_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800197e:	f000 f951 	bl	8001c24 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20004c48 	.word	0x20004c48
 8001990:	a0000104 	.word	0xa0000104
 8001994:	20004dcc 	.word	0x20004dcc

08001998 <resetGame>:

/* USER CODE BEGIN 4 */

void resetGame()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	 memset(solution, LCD_COLOR_WHITE, sizeof solution);
 800199c:	2208      	movs	r2, #8
 800199e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a2:	482c      	ldr	r0, [pc, #176]	; (8001a54 <resetGame+0xbc>)
 80019a4:	f00f ff79 	bl	801189a <memset>
	 generateSolution = true;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <resetGame+0xc0>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
	 checkSolution = false;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <resetGame+0xc4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

	 gameRound = 0;
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <resetGame+0xc8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
	 currentCol = 0;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <resetGame+0xcc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

	 gameover = false;
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <resetGame+0xd0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]

	 handlingPress = false;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <resetGame+0xd4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]

	 chosenButton = -1;
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <resetGame+0xd8>)
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	601a      	str	r2, [r3, #0]
	 chosenColor = LCD_COLOR_WHITE;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <resetGame+0xdc>)
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	801a      	strh	r2, [r3, #0]

	 correctGuesses = 0;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <resetGame+0xe0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
	 wrongPositions = 0;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <resetGame+0xe4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

	 memset(positionUsedSolution, false, sizeof positionUsedSolution);
 80019e8:	2204      	movs	r2, #4
 80019ea:	2100      	movs	r1, #0
 80019ec:	4824      	ldr	r0, [pc, #144]	; (8001a80 <resetGame+0xe8>)
 80019ee:	f00f ff54 	bl	801189a <memset>
	 memset(positionUsedGuess, false, sizeof positionUsedGuess);
 80019f2:	2204      	movs	r2, #4
 80019f4:	2100      	movs	r1, #0
 80019f6:	4823      	ldr	r0, [pc, #140]	; (8001a84 <resetGame+0xec>)
 80019f8:	f00f ff4f 	bl	801189a <memset>

	 memset(clue, "", sizeof clue);
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <resetGame+0xf0>)
 80019fe:	2214      	movs	r2, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4822      	ldr	r0, [pc, #136]	; (8001a8c <resetGame+0xf4>)
 8001a04:	f00f ff49 	bl	801189a <memset>

	 // UI Variables:

	 clearScreen = true;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <resetGame+0xf8>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

	 drawScreen = true;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <resetGame+0xfc>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
	 drawClue = false;
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <resetGame+0x100>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	 screenNum = 1;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <resetGame+0x104>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
	 win = false;
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <resetGame+0x108>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

	 memset(currentColorMap, LCD_COLOR_RED, sizeof currentColorMap);
 8001a26:	2250      	movs	r2, #80	; 0x50
 8001a28:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <resetGame+0x10c>)
 8001a2e:	f00f ff34 	bl	801189a <memset>
	 memset(newColorMap, LCD_COLOR_WHITE, sizeof newColorMap);
 8001a32:	2250      	movs	r2, #80	; 0x50
 8001a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a38:	481b      	ldr	r0, [pc, #108]	; (8001aa8 <resetGame+0x110>)
 8001a3a:	f00f ff2e 	bl	801189a <memset>

	 // Screen 1&3 variables

	 dificulty = -1;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <resetGame+0x114>)
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	601a      	str	r2, [r3, #0]
	 replayChoice = -1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <resetGame+0x118>)
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20004ee0 	.word	0x20004ee0
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	20000134 	.word	0x20000134
 8001a60:	20000138 	.word	0x20000138
 8001a64:	2000013c 	.word	0x2000013c
 8001a68:	20000140 	.word	0x20000140
 8001a6c:	20000141 	.word	0x20000141
 8001a70:	20000010 	.word	0x20000010
 8001a74:	20000014 	.word	0x20000014
 8001a78:	20000144 	.word	0x20000144
 8001a7c:	20000148 	.word	0x20000148
 8001a80:	2000014c 	.word	0x2000014c
 8001a84:	20000150 	.word	0x20000150
 8001a88:	08011b3c 	.word	0x08011b3c
 8001a8c:	20000154 	.word	0x20000154
 8001a90:	20000016 	.word	0x20000016
 8001a94:	20000017 	.word	0x20000017
 8001a98:	20000170 	.word	0x20000170
 8001a9c:	20000018 	.word	0x20000018
 8001aa0:	20000171 	.word	0x20000171
 8001aa4:	20004b70 	.word	0x20004b70
 8001aa8:	20004d7c 	.word	0x20004d7c
 8001aac:	2000001c 	.word	0x2000001c
 8001ab0:	20000020 	.word	0x20000020

08001ab4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001abc:	f00f fba6 	bl	801120c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// use the default task to toggle the green LED to indicate proper running
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <StartTask01+0x20>)
 8001ac4:	f003 faa5 	bl	8005012 <HAL_GPIO_TogglePin>
	osDelay(500);
 8001ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001acc:	f00c fc62 	bl	800e394 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8001ad0:	e7f6      	b.n	8001ac0 <StartTask01+0xc>
 8001ad2:	bf00      	nop
 8001ad4:	40020800 	.word	0x40020800

08001ad8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	// Receive task
	xTaskToNotifyRx = xTaskGetCurrentTaskHandle();
 8001ae0:	f00e fa74 	bl	800ffcc <xTaskGetCurrentTaskHandle>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <StartTask02+0x40>)
 8001ae8:	601a      	str	r2, [r3, #0]

	// Setup initial listen
	HAL_UART_Receive_IT(&huart6, Rx_data, 4);
 8001aea:	2204      	movs	r2, #4
 8001aec:	490b      	ldr	r1, [pc, #44]	; (8001b1c <StartTask02+0x44>)
 8001aee:	480c      	ldr	r0, [pc, #48]	; (8001b20 <StartTask02+0x48>)
 8001af0:	f007 fef8 	bl	80098e4 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for(;;)
	{
	  uint32_t ulNotificationValue;
	  //const TickType_t xMaxBlockTime = portMAX_DELAY; 		// infinite wait time
	  const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 10000 );	// 10 second wait time
 8001af4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001af8:	60fb      	str	r3, [r7, #12]

	  /* Wait to be notified that the transmission is complete.  Note
	  the first parameter is pdTRUE, which has the effect of clearing
	  the task's notification value back to 0, making the notification
	  value act like a binary (rather than a counting) semaphore.  */
	  ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime );
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	2001      	movs	r0, #1
 8001afe:	f00e faff 	bl	8010100 <ulTaskNotifyTake>
 8001b02:	60b8      	str	r0, [r7, #8]

	  if( ulNotificationValue == 1 )
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d1f4      	bne.n	8001af4 <StartTask02+0x1c>
	  {
		  /* Start the transmission - just send the same message back */
		  HAL_UART_Receive_IT(&huart6, Rx_data, 4);
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <StartTask02+0x44>)
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <StartTask02+0x48>)
 8001b10:	f007 fee8 	bl	80098e4 <HAL_UART_Receive_IT>
	{
 8001b14:	e7ee      	b.n	8001af4 <StartTask02+0x1c>
 8001b16:	bf00      	nop
 8001b18:	2000016c 	.word	0x2000016c
 8001b1c:	20004bfc 	.word	0x20004bfc
 8001b20:	20004ea0 	.word	0x20004ea0

08001b24 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	// Transmit task
	xTaskToNotifyTx = xTaskGetCurrentTaskHandle();
 8001b2c:	f00e fa4e 	bl	800ffcc <xTaskGetCurrentTaskHandle>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <StartTask03+0x34>)
 8001b34:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
	  uint32_t ulNotificationValue;
	  //const TickType_t xMaxBlockTime = portMAX_DELAY; 		// infinite wait time
	  const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 10000 );	// 10 second wait time
 8001b36:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b3a:	60fb      	str	r3, [r7, #12]

	  /* Wait to be notified that the transmission is complete.  Note
	  the first parameter is pdTRUE, which has the effect of clearing
	  the task's notification value back to 0, making the notification
	  value act like a binary (rather than a counting) semaphore.  */
	  ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime );
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f00e fade 	bl	8010100 <ulTaskNotifyTake>
 8001b44:	60b8      	str	r0, [r7, #8]

	  if( ulNotificationValue == 1 )
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d1f4      	bne.n	8001b36 <StartTask03+0x12>
	  {
		  /* Start the transmission - just send the same message back */
		  HAL_UART_Transmit_IT(&huart6, Rx_data, 4);
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4903      	ldr	r1, [pc, #12]	; (8001b5c <StartTask03+0x38>)
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <StartTask03+0x3c>)
 8001b52:	f007 fe82 	bl	800985a <HAL_UART_Transmit_IT>
	{
 8001b56:	e7ee      	b.n	8001b36 <StartTask03+0x12>
 8001b58:	20000168 	.word	0x20000168
 8001b5c:	20004bfc 	.word	0x20004bfc
 8001b60:	20004ea0 	.word	0x20004ea0

08001b64 <StartGameControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGameControlTask */
void StartGameControlTask(void *argument)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGameControlTask */
  /* Infinite loop */
  for(;;)
  {
	  if (screenNum == 1)
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <StartGameControlTask+0x34>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <StartGameControlTask+0x16>
	  {
		  ScreenOneGameOperation();
 8001b74:	f7fe fcdc 	bl	8000530 <ScreenOneGameOperation>
 8001b78:	e7f8      	b.n	8001b6c <StartGameControlTask+0x8>
	  }
	  else if (screenNum == 2)
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <StartGameControlTask+0x34>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <StartGameControlTask+0x24>
	  {
		  ScreenTwoGameOperation();
 8001b82:	f7fe fd23 	bl	80005cc <ScreenTwoGameOperation>
 8001b86:	e7f1      	b.n	8001b6c <StartGameControlTask+0x8>
	  }
	  else if (screenNum == 3)
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <StartGameControlTask+0x34>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d1ed      	bne.n	8001b6c <StartGameControlTask+0x8>
	  {
		  ScreenThreeGameOperation();
 8001b90:	f7fe fed2 	bl	8000938 <ScreenThreeGameOperation>
	  if (screenNum == 1)
 8001b94:	e7ea      	b.n	8001b6c <StartGameControlTask+0x8>
 8001b96:	bf00      	nop
 8001b98:	20000018 	.word	0x20000018

08001b9c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
	  if (drawScreen)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <StartDisplayTask+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0fb      	beq.n	8001ba4 <StartDisplayTask+0x8>
	  {
		  if (clearScreen)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <StartDisplayTask+0x5c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <StartDisplayTask+0x26>
		  {
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001bb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bb8:	f001 fe08 	bl	80037cc <BSP_LCD_Clear>
			clearScreen = false;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <StartDisplayTask+0x5c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
		  }

		  if (screenNum == 1)
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <StartDisplayTask+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <StartDisplayTask+0x34>
		  {
			  DrawScreenOne();
 8001bca:	f7fe fef7 	bl	80009bc <DrawScreenOne>
 8001bce:	e00c      	b.n	8001bea <StartDisplayTask+0x4e>
		  }
		  else if (screenNum == 2)
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <StartDisplayTask+0x60>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d102      	bne.n	8001bde <StartDisplayTask+0x42>
		  {
			  DrawScreenTwo();
 8001bd8:	f7fe ffa6 	bl	8000b28 <DrawScreenTwo>
 8001bdc:	e005      	b.n	8001bea <StartDisplayTask+0x4e>
		  }
		  else if (screenNum == 3)
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <StartDisplayTask+0x60>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d101      	bne.n	8001bea <StartDisplayTask+0x4e>
		  {
			  DrawScreenThree();
 8001be6:	f7ff f833 	bl	8000c50 <DrawScreenThree>
		  }

		  drawScreen = false;
 8001bea:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <StartDisplayTask+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
	  if (drawScreen)
 8001bf0:	e7d8      	b.n	8001ba4 <StartDisplayTask+0x8>
 8001bf2:	bf00      	nop
 8001bf4:	20000017 	.word	0x20000017
 8001bf8:	20000016 	.word	0x20000016
 8001bfc:	20000018 	.word	0x20000018

08001c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c12:	f002 f987 	bl	8003f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40001000 	.word	0x40001000

08001c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_ADC_MspInit+0xe4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d15b      	bne.n	8001d5e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_ADC_MspInit+0xe8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001d16:	2311      	movs	r3, #17
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <HAL_ADC_MspInit+0xec>)
 8001d2a:	f002 ffaf 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001d2e:	2326      	movs	r3, #38	; 0x26
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <HAL_ADC_MspInit+0xf0>)
 8001d42:	f002 ffa3 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <HAL_ADC_MspInit+0xf4>)
 8001d5a:	f002 ff97 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_DAC_MspInit+0x8c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12f      	bne.n	8001dfe <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_DAC_MspInit+0x90>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4809      	ldr	r0, [pc, #36]	; (8001e10 <HAL_DAC_MspInit+0x94>)
 8001dea:	f002 ff4f 	bl	8004c8c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	2036      	movs	r0, #54	; 0x36
 8001df4:	f002 fc02 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001df8:	2036      	movs	r0, #54	; 0x36
 8001dfa:	f002 fc1b 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40007400 	.word	0x40007400
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a77      	ldr	r2, [pc, #476]	; (8002010 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a76      	ldr	r2, [pc, #472]	; (8002014 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a74      	ldr	r2, [pc, #464]	; (8002018 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a73      	ldr	r2, [pc, #460]	; (800201c <HAL_DFSDM_ChannelMspInit+0x208>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d154      	bne.n	8001efe <HAL_DFSDM_ChannelMspInit+0xea>
 8001e54:	4b72      	ldr	r3, [pc, #456]	; (8002020 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d150      	bne.n	8001efe <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	4a6f      	ldr	r2, [pc, #444]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	4b62      	ldr	r3, [pc, #392]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a61      	ldr	r2, [pc, #388]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4856      	ldr	r0, [pc, #344]	; (8002028 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001ece:	f002 fedd 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	484f      	ldr	r0, [pc, #316]	; (800202c <HAL_DFSDM_ChannelMspInit+0x218>)
 8001eee:	f002 fecd 	bl	8004c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001efa:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001efc:	e084      	b.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d07f      	beq.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d07a      	beq.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a40      	ldr	r2, [pc, #256]	; (8002018 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d075      	beq.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_DFSDM_ChannelMspInit+0x208>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d070      	beq.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d16c      	bne.n	8002008 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a26      	ldr	r2, [pc, #152]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481b      	ldr	r0, [pc, #108]	; (8002028 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001fba:	f002 fe67 	bl	8004c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4814      	ldr	r0, [pc, #80]	; (800202c <HAL_DFSDM_ChannelMspInit+0x218>)
 8001fda:	f002 fe57 	bl	8004c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001ffa:	f002 fe47 	bl	8004c8c <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40016000 	.word	0x40016000
 8002014:	40016020 	.word	0x40016020
 8002018:	40016040 	.word	0x40016040
 800201c:	40016060 	.word	0x40016060
 8002020:	20000174 	.word	0x20000174
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020c00 	.word	0x40020c00
 8002030:	20000178 	.word	0x20000178
 8002034:	40020400 	.word	0x40020400

08002038 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_FMPI2C_MspInit+0x84>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12b      	bne.n	80020b2 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207a:	2312      	movs	r3, #18
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002086:	2304      	movs	r3, #4
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <HAL_FMPI2C_MspInit+0x8c>)
 8002092:	f002 fdfb 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 80020a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_FMPI2C_MspInit+0x88>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40006000 	.word	0x40006000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020800 	.word	0x40020800

080020c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_I2C_MspInit+0x84>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12c      	bne.n	8002144 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_I2C_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_I2C_MspInit+0x88>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_I2C_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002106:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002118:	2304      	movs	r3, #4
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	480c      	ldr	r0, [pc, #48]	; (8002154 <HAL_I2C_MspInit+0x8c>)
 8002124:	f002 fdb2 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_I2C_MspInit+0x88>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_I2C_MspInit+0x88>)
 8002132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_I2C_MspInit+0x88>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40005800 	.word	0x40005800
 8002150:	40023800 	.word	0x40023800
 8002154:	40020400 	.word	0x40020400

08002158 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a4f      	ldr	r2, [pc, #316]	; (80022b4 <HAL_I2S_MspInit+0x15c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 8097 	bne.w	80022aa <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
 800218c:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	4a45      	ldr	r2, [pc, #276]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6313      	str	r3, [r2, #48]	; 0x30
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a3e      	ldr	r2, [pc, #248]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4a37      	ldr	r2, [pc, #220]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6313      	str	r3, [r2, #48]	; 0x30
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_I2S_MspInit+0x160>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8002208:	2304      	movs	r3, #4
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8002218:	2306      	movs	r3, #6
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4826      	ldr	r0, [pc, #152]	; (80022bc <HAL_I2S_MspInit+0x164>)
 8002224:	f002 fd32 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8002228:	2308      	movs	r3, #8
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002238:	2305      	movs	r3, #5
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	481e      	ldr	r0, [pc, #120]	; (80022bc <HAL_I2S_MspInit+0x164>)
 8002244:	f002 fd22 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8002248:	2308      	movs	r3, #8
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002258:	2305      	movs	r3, #5
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4817      	ldr	r0, [pc, #92]	; (80022c0 <HAL_I2S_MspInit+0x168>)
 8002264:	f002 fd12 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8002268:	2308      	movs	r3, #8
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002278:	2305      	movs	r3, #5
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <HAL_I2S_MspInit+0x16c>)
 8002284:	f002 fd02 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8002288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800229a:	2305      	movs	r3, #5
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <HAL_I2S_MspInit+0x170>)
 80022a6:	f002 fcf1 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40003800 	.word	0x40003800
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a56      	ldr	r2, [pc, #344]	; (8002444 <HAL_QSPI_MspInit+0x178>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 80a6 	bne.w	800243c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	4b54      	ldr	r3, [pc, #336]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	4a53      	ldr	r2, [pc, #332]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	6393      	str	r3, [r2, #56]	; 0x38
 8002300:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6313      	str	r3, [r2, #48]	; 0x30
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a45      	ldr	r2, [pc, #276]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002332:	f043 0320 	orr.w	r3, r3, #32
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a37      	ldr	r2, [pc, #220]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 8002386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_QSPI_MspInit+0x17c>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8002398:	2304      	movs	r3, #4
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023a8:	2309      	movs	r3, #9
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4826      	ldr	r0, [pc, #152]	; (800244c <HAL_QSPI_MspInit+0x180>)
 80023b4:	f002 fc6a 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80023b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ca:	230a      	movs	r3, #10
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	481e      	ldr	r0, [pc, #120]	; (8002450 <HAL_QSPI_MspInit+0x184>)
 80023d6:	f002 fc59 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80023da:	2304      	movs	r3, #4
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023ea:	2309      	movs	r3, #9
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	4619      	mov	r1, r3
 80023f4:	4817      	ldr	r0, [pc, #92]	; (8002454 <HAL_QSPI_MspInit+0x188>)
 80023f6:	f002 fc49 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80023fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800240c:	2309      	movs	r3, #9
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4810      	ldr	r0, [pc, #64]	; (8002458 <HAL_QSPI_MspInit+0x18c>)
 8002418:	f002 fc38 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800241c:	2340      	movs	r3, #64	; 0x40
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800242c:	230a      	movs	r3, #10
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <HAL_QSPI_MspInit+0x190>)
 8002438:	f002 fc28 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800243c:	bf00      	nop
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	a0001000 	.word	0xa0001000
 8002448:	40023800 	.word	0x40023800
 800244c:	40021000 	.word	0x40021000
 8002450:	40021400 	.word	0x40021400
 8002454:	40020400 	.word	0x40020400
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021800 	.word	0x40021800

08002460 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_SD_MspInit+0xc0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d14a      	bne.n	8002518 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_SD_MspInit+0xc4>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_SD_MspInit+0xc4>)
 800248c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_SD_MspInit+0xc4>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_SD_MspInit+0xc4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80024d6:	2340      	movs	r3, #64	; 0x40
 80024d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024e6:	230c      	movs	r3, #12
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	480d      	ldr	r0, [pc, #52]	; (8002528 <HAL_SD_MspInit+0xc8>)
 80024f2:	f002 fbcb 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80024f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80024fa:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002508:	230c      	movs	r3, #12
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	4806      	ldr	r0, [pc, #24]	; (800252c <HAL_SD_MspInit+0xcc>)
 8002514:	f002 fbba 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020800 	.word	0x40020800

08002530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_UART_MspInit+0xfc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12d      	bne.n	80025ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_UART_MspInit+0x100>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a35      	ldr	r2, [pc, #212]	; (8002630 <HAL_UART_MspInit+0x100>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_UART_MspInit+0x100>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_UART_MspInit+0x100>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_UART_MspInit+0x100>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_UART_MspInit+0x100>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800258a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002594:	2301      	movs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 800259c:	230b      	movs	r3, #11
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4823      	ldr	r0, [pc, #140]	; (8002634 <HAL_UART_MspInit+0x104>)
 80025a8:	f002 fb70 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025ac:	e039      	b.n	8002622 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_UART_MspInit+0x108>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d134      	bne.n	8002622 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025c2:	f043 0320 	orr.w	r3, r3, #32
 80025c6:	6453      	str	r3, [r2, #68]	; 0x44
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_UART_MspInit+0x100>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80025f0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002602:	2308      	movs	r3, #8
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4809      	ldr	r0, [pc, #36]	; (8002634 <HAL_UART_MspInit+0x104>)
 800260e:	f002 fb3d 	bl	8004c8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 15, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	210f      	movs	r1, #15
 8002616:	2047      	movs	r0, #71	; 0x47
 8002618:	f001 fff0 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800261c:	2047      	movs	r0, #71	; 0x47
 800261e:	f002 f809 	bl	8004634 <HAL_NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40011c00 	.word	0x40011c00
 8002630:	40023800 	.word	0x40023800
 8002634:	40021800 	.word	0x40021800
 8002638:	40011400 	.word	0x40011400

0800263c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_FSMC_MspInit+0xc8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d151      	bne.n	80026fc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_FSMC_MspInit+0xc8>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_FSMC_MspInit+0xcc>)
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_FSMC_MspInit+0xcc>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6393      	str	r3, [r2, #56]	; 0x38
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_FSMC_MspInit+0xcc>)
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800267a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800267e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800268c:	230c      	movs	r3, #12
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	481d      	ldr	r0, [pc, #116]	; (800270c <HAL_FSMC_MspInit+0xd0>)
 8002696:	f002 faf9 	bl	8004c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 800269a:	f240 433f 	movw	r3, #1087	; 0x43f
 800269e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <HAL_FSMC_MspInit+0xd4>)
 80026b6:	f002 fae9 	bl	8004c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80026ba:	f64f 7383 	movw	r3, #65411	; 0xff83
 80026be:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026cc:	230c      	movs	r3, #12
 80026ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <HAL_FSMC_MspInit+0xd8>)
 80026d6:	f002 fad9 	bl	8004c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80026da:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80026de:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026ec:	230c      	movs	r3, #12
 80026ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4808      	ldr	r0, [pc, #32]	; (8002718 <HAL_FSMC_MspInit+0xdc>)
 80026f6:	f002 fac9 	bl	8004c8c <HAL_GPIO_Init>
 80026fa:	e000      	b.n	80026fe <HAL_FSMC_MspInit+0xc2>
    return;
 80026fc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000017c 	.word	0x2000017c
 8002708:	40023800 	.word	0x40023800
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021000 	.word	0x40021000
 8002718:	40020c00 	.word	0x40020c00

0800271c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002724:	f7ff ff8a 	bl	800263c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	2036      	movs	r0, #54	; 0x36
 8002746:	f001 ff59 	bl	80045fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800274a:	2036      	movs	r0, #54	; 0x36
 800274c:	f001 ff72 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_InitTick+0xa0>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_InitTick+0xa0>)
 800275a:	f043 0310 	orr.w	r3, r3, #16
 800275e:	6413      	str	r3, [r2, #64]	; 0x40
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_InitTick+0xa0>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800276c:	f107 0210 	add.w	r2, r7, #16
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f005 f9e4 	bl	8007b44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800277c:	f005 f9ba 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 8002780:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_InitTick+0xa4>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0c9b      	lsrs	r3, r3, #18
 800278c:	3b01      	subs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_InitTick+0xa8>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <HAL_InitTick+0xac>)
 8002794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_InitTick+0xa8>)
 8002798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800279c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800279e:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_InitTick+0xa8>)
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_InitTick+0xa8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_InitTick+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <HAL_InitTick+0xa8>)
 80027b2:	f006 fdc7 	bl	8009344 <HAL_TIM_Base_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027bc:	4806      	ldr	r0, [pc, #24]	; (80027d8 <HAL_InitTick+0xa8>)
 80027be:	f006 fdf6 	bl	80093ae <HAL_TIM_Base_Start_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3730      	adds	r7, #48	; 0x30
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	20004f80 	.word	0x20004f80
 80027dc:	40001000 	.word	0x40001000

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002818:	2040      	movs	r0, #64	; 0x40
 800281a:	f002 fc15 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800281e:	2080      	movs	r0, #128	; 0x80
 8002820:	f002 fc12 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002824:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002828:	f002 fc0e 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  	if (!handlingPress)
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <EXTI9_5_IRQHandler+0x80>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d029      	beq.n	800288e <EXTI9_5_IRQHandler+0x7a>
	{

	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6))
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	4816      	ldr	r0, [pc, #88]	; (8002898 <EXTI9_5_IRQHandler+0x84>)
 800283e:	f002 fbb7 	bl	8004fb0 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <EXTI9_5_IRQHandler+0x42>
	  {
		  chosenButton = 0;
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <EXTI9_5_IRQHandler+0x88>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <EXTI9_5_IRQHandler+0x80>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
		  handlingPress = true;
	  }
	}

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002854:	e01b      	b.n	800288e <EXTI9_5_IRQHandler+0x7a>
	  else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7))
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <EXTI9_5_IRQHandler+0x84>)
 800285a:	f002 fba9 	bl	8004fb0 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <EXTI9_5_IRQHandler+0x5e>
		  chosenButton = 1;
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <EXTI9_5_IRQHandler+0x88>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <EXTI9_5_IRQHandler+0x80>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
}
 8002870:	e00d      	b.n	800288e <EXTI9_5_IRQHandler+0x7a>
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002876:	480a      	ldr	r0, [pc, #40]	; (80028a0 <EXTI9_5_IRQHandler+0x8c>)
 8002878:	f002 fb9a 	bl	8004fb0 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <EXTI9_5_IRQHandler+0x7a>
		  chosenButton = 4;
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <EXTI9_5_IRQHandler+0x88>)
 8002884:	2204      	movs	r2, #4
 8002886:	601a      	str	r2, [r3, #0]
		  handlingPress = true;
 8002888:	4b02      	ldr	r3, [pc, #8]	; (8002894 <EXTI9_5_IRQHandler+0x80>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000141 	.word	0x20000141
 8002898:	40021400 	.word	0x40021400
 800289c:	20000010 	.word	0x20000010
 80028a0:	40020400 	.word	0x40020400

080028a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80028a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028ac:	f002 fbcc 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80028b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028b4:	f002 fbc8 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80028b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028bc:	f002 fbc4 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80028c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028c4:	f002 fbc0 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80028c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028cc:	f002 fbbc 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

   if (!handlingPress)
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <EXTI15_10_IRQHandler+0xb4>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d03a      	beq.n	8002954 <EXTI15_10_IRQHandler+0xb0>
   {
 	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10))
 80028de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e2:	481e      	ldr	r0, [pc, #120]	; (800295c <EXTI15_10_IRQHandler+0xb8>)
 80028e4:	f002 fb64 	bl	8004fb0 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <EXTI15_10_IRQHandler+0x58>
 	  {
 		  chosenButton = 3;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <EXTI15_10_IRQHandler+0xbc>)
 80028f0:	2203      	movs	r2, #3
 80028f2:	601a      	str	r2, [r3, #0]
 		  handlingPress = true;
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <EXTI15_10_IRQHandler+0xb4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
 		  handlingPress = true;
 	  }
   }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028fa:	e02b      	b.n	8002954 <EXTI15_10_IRQHandler+0xb0>
 	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 80028fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002900:	4818      	ldr	r0, [pc, #96]	; (8002964 <EXTI15_10_IRQHandler+0xc0>)
 8002902:	f002 fb55 	bl	8004fb0 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <EXTI15_10_IRQHandler+0x76>
 		  chosenButton = 6;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <EXTI15_10_IRQHandler+0xbc>)
 800290e:	2206      	movs	r2, #6
 8002910:	601a      	str	r2, [r3, #0]
 		  handlingPress = true;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <EXTI15_10_IRQHandler+0xb4>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
}
 8002918:	e01c      	b.n	8002954 <EXTI15_10_IRQHandler+0xb0>
 	  else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13))
 800291a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291e:	4812      	ldr	r0, [pc, #72]	; (8002968 <EXTI15_10_IRQHandler+0xc4>)
 8002920:	f002 fb46 	bl	8004fb0 <HAL_GPIO_ReadPin>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <EXTI15_10_IRQHandler+0x94>
 		  chosenButton = 2;
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <EXTI15_10_IRQHandler+0xbc>)
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
 		  handlingPress = true;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <EXTI15_10_IRQHandler+0xb4>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
}
 8002936:	e00d      	b.n	8002954 <EXTI15_10_IRQHandler+0xb0>
 	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	480b      	ldr	r0, [pc, #44]	; (800296c <EXTI15_10_IRQHandler+0xc8>)
 800293e:	f002 fb37 	bl	8004fb0 <HAL_GPIO_ReadPin>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <EXTI15_10_IRQHandler+0xb0>
 		  chosenButton = 5;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <EXTI15_10_IRQHandler+0xbc>)
 800294a:	2205      	movs	r2, #5
 800294c:	601a      	str	r2, [r3, #0]
 		  handlingPress = true;
 800294e:	4b02      	ldr	r3, [pc, #8]	; (8002958 <EXTI15_10_IRQHandler+0xb4>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000141 	.word	0x20000141
 800295c:	40021400 	.word	0x40021400
 8002960:	20000010 	.word	0x20000010
 8002964:	40020400 	.word	0x40020400
 8002968:	40021800 	.word	0x40021800
 800296c:	40020000 	.word	0x40020000

08002970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002974:	4803      	ldr	r0, [pc, #12]	; (8002984 <TIM6_DAC_IRQHandler+0x14>)
 8002976:	f001 fe8d 	bl	8004694 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <TIM6_DAC_IRQHandler+0x18>)
 800297c:	f006 fd3b 	bl	80093f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20004d1c 	.word	0x20004d1c
 8002988:	20004f80 	.word	0x20004f80

0800298c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <OTG_FS_IRQHandler+0x10>)
 8002992:	f002 fe0b 	bl	80055ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20005418 	.word	0x20005418

080029a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <USART6_IRQHandler+0x10>)
 80029a6:	f006 fff3 	bl	8009990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20004ea0 	.word	0x20004ea0

080029b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <_sbrk+0x5c>)
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <_sbrk+0x60>)
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <_sbrk+0x64>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <_sbrk+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d207      	bcs.n	80029f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e4:	f00e ff14 	bl	8011810 <__errno>
 80029e8:	4602      	mov	r2, r0
 80029ea:	230c      	movs	r3, #12
 80029ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e009      	b.n	8002a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <_sbrk+0x64>)
 8002a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20050000 	.word	0x20050000
 8002a14:	00000400 	.word	0x00000400
 8002a18:	20000180 	.word	0x20000180
 8002a1c:	200056e0 	.word	0x200056e0

08002a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <SystemInit+0x28>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <SystemInit+0x28>)
 8002a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SystemInit+0x28>)
 8002a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002a50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a52:	e003      	b.n	8002a5c <LoopCopyDataInit>

08002a54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a5a:	3104      	adds	r1, #4

08002a5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a64:	d3f6      	bcc.n	8002a54 <CopyDataInit>
  ldr  r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a68:	e002      	b.n	8002a70 <LoopFillZerobss>

08002a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a6c:	f842 3b04 	str.w	r3, [r2], #4

08002a70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a74:	d3f9      	bcc.n	8002a6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a76:	f7ff ffd3 	bl	8002a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f00e fecf 	bl	801181c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7fe f9d3 	bl	8000e28 <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a84:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a88:	08015768 	.word	0x08015768
  ldr  r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a90:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8002a94:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8002a98:	200056e0 	.word	0x200056e0

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>

08002a9e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002aa4:	f000 fd6e 	bl	8003584 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2010      	movs	r0, #16
 8002aae:	f000 f9e4 	bl	8002e7a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f000 fd8d 	bl	80035d2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	2001      	movs	r0, #1
 8002abe:	f000 f9dc 	bl	8002e7a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002ac2:	20c8      	movs	r0, #200	; 0xc8
 8002ac4:	f000 fd85 	bl	80035d2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2100      	movs	r1, #0
 8002acc:	2011      	movs	r0, #17
 8002ace:	f000 f9d4 	bl	8002e7a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8002ad2:	2078      	movs	r0, #120	; 0x78
 8002ad4:	f000 fd7d 	bl	80035d2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002ad8:	2300      	movs	r3, #0
 8002ada:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002adc:	463b      	mov	r3, r7
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2036      	movs	r0, #54	; 0x36
 8002ae4:	f000 f9c9 	bl	8002e7a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002ae8:	2305      	movs	r3, #5
 8002aea:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002aec:	463b      	mov	r3, r7
 8002aee:	2201      	movs	r2, #1
 8002af0:	4619      	mov	r1, r3
 8002af2:	203a      	movs	r0, #58	; 0x3a
 8002af4:	f000 f9c1 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	2021      	movs	r0, #33	; 0x21
 8002afe:	f000 f9bc 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002b0e:	23ef      	movs	r3, #239	; 0xef
 8002b10:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002b12:	463b      	mov	r3, r7
 8002b14:	2204      	movs	r2, #4
 8002b16:	4619      	mov	r1, r3
 8002b18:	202a      	movs	r0, #42	; 0x2a
 8002b1a:	f000 f9ae 	bl	8002e7a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002b2a:	23ef      	movs	r3, #239	; 0xef
 8002b2c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002b2e:	463b      	mov	r3, r7
 8002b30:	2204      	movs	r2, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	202b      	movs	r0, #43	; 0x2b
 8002b36:	f000 f9a0 	bl	8002e7a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8002b3e:	230c      	movs	r3, #12
 8002b40:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002b42:	2300      	movs	r3, #0
 8002b44:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002b46:	2333      	movs	r3, #51	; 0x33
 8002b48:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8002b4a:	2333      	movs	r3, #51	; 0x33
 8002b4c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2205      	movs	r2, #5
 8002b52:	4619      	mov	r1, r3
 8002b54:	20b2      	movs	r0, #178	; 0xb2
 8002b56:	f000 f990 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8002b5a:	2335      	movs	r3, #53	; 0x35
 8002b5c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2201      	movs	r2, #1
 8002b62:	4619      	mov	r1, r3
 8002b64:	20b7      	movs	r0, #183	; 0xb7
 8002b66:	f000 f988 	bl	8002e7a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002b6a:	231f      	movs	r3, #31
 8002b6c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002b6e:	463b      	mov	r3, r7
 8002b70:	2201      	movs	r2, #1
 8002b72:	4619      	mov	r1, r3
 8002b74:	20bb      	movs	r0, #187	; 0xbb
 8002b76:	f000 f980 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002b7a:	232c      	movs	r3, #44	; 0x2c
 8002b7c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002b7e:	463b      	mov	r3, r7
 8002b80:	2201      	movs	r2, #1
 8002b82:	4619      	mov	r1, r3
 8002b84:	20c0      	movs	r0, #192	; 0xc0
 8002b86:	f000 f978 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002b8e:	23c3      	movs	r3, #195	; 0xc3
 8002b90:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002b92:	463b      	mov	r3, r7
 8002b94:	2202      	movs	r2, #2
 8002b96:	4619      	mov	r1, r3
 8002b98:	20c2      	movs	r0, #194	; 0xc2
 8002b9a:	f000 f96e 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	20c4      	movs	r0, #196	; 0xc4
 8002baa:	f000 f966 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002bae:	230f      	movs	r3, #15
 8002bb0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	20c6      	movs	r0, #198	; 0xc6
 8002bba:	f000 f95e 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002bbe:	23a4      	movs	r3, #164	; 0xa4
 8002bc0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002bc2:	23a1      	movs	r3, #161	; 0xa1
 8002bc4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4619      	mov	r1, r3
 8002bcc:	20d0      	movs	r0, #208	; 0xd0
 8002bce:	f000 f954 	bl	8002e7a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002bd2:	23d0      	movs	r3, #208	; 0xd0
 8002bd4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002bda:	2311      	movs	r3, #17
 8002bdc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002bde:	2308      	movs	r3, #8
 8002be0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002be2:	230c      	movs	r3, #12
 8002be4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002be6:	2315      	movs	r3, #21
 8002be8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002bea:	2339      	movs	r3, #57	; 0x39
 8002bec:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002bee:	2333      	movs	r3, #51	; 0x33
 8002bf0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002bf2:	2350      	movs	r3, #80	; 0x50
 8002bf4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002bf6:	2336      	movs	r3, #54	; 0x36
 8002bf8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002bfa:	2313      	movs	r3, #19
 8002bfc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002bfe:	2314      	movs	r3, #20
 8002c00:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002c02:	2329      	movs	r3, #41	; 0x29
 8002c04:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002c06:	232d      	movs	r3, #45	; 0x2d
 8002c08:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	220e      	movs	r2, #14
 8002c0e:	4619      	mov	r1, r3
 8002c10:	20e0      	movs	r0, #224	; 0xe0
 8002c12:	f000 f932 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002c16:	23d0      	movs	r3, #208	; 0xd0
 8002c18:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002c22:	2308      	movs	r3, #8
 8002c24:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002c26:	2306      	movs	r3, #6
 8002c28:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002c2e:	2339      	movs	r3, #57	; 0x39
 8002c30:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002c32:	2344      	movs	r3, #68	; 0x44
 8002c34:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002c36:	2351      	movs	r3, #81	; 0x51
 8002c38:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002c3a:	230b      	movs	r3, #11
 8002c3c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002c3e:	2316      	movs	r3, #22
 8002c40:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002c42:	2314      	movs	r3, #20
 8002c44:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002c46:	232f      	movs	r3, #47	; 0x2f
 8002c48:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002c4a:	2331      	movs	r3, #49	; 0x31
 8002c4c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002c4e:	463b      	mov	r3, r7
 8002c50:	220e      	movs	r2, #14
 8002c52:	4619      	mov	r1, r3
 8002c54:	20e1      	movs	r0, #225	; 0xe1
 8002c56:	f000 f910 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002c5a:	f000 f847 	bl	8002cec <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002c5e:	2300      	movs	r3, #0
 8002c60:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002c62:	463b      	mov	r3, r7
 8002c64:	2201      	movs	r2, #1
 8002c66:	4619      	mov	r1, r3
 8002c68:	2035      	movs	r0, #53	; 0x35
 8002c6a:	f000 f906 	bl	8002e7a <ST7789H2_WriteReg>

}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002c84:	2300      	movs	r3, #0
 8002c86:	723b      	strb	r3, [r7, #8]
 8002c88:	e025      	b.n	8002cd6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d120      	bne.n	8002cd2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002c90:	2300      	movs	r3, #0
 8002c92:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002c94:	2300      	movs	r3, #0
 8002c96:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002c9c:	23f0      	movs	r3, #240	; 0xf0
 8002c9e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	2206      	movs	r2, #6
 8002cae:	4619      	mov	r1, r3
 8002cb0:	2033      	movs	r0, #51	; 0x33
 8002cb2:	f000 f8e2 	bl	8002e7a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002cba:	2350      	movs	r3, #80	; 0x50
 8002cbc:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	2037      	movs	r0, #55	; 0x37
 8002cc8:	f000 f8d7 	bl	8002e7a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	723b      	strb	r3, [r7, #8]
 8002cd0:	e001      	b.n	8002cd6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002cd2:	2360      	movs	r3, #96	; 0x60
 8002cd4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4619      	mov	r1, r3
 8002cde:	2036      	movs	r0, #54	; 0x36
 8002ce0:	f000 f8cb 	bl	8002e7a <ST7789H2_WriteReg>
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2029      	movs	r0, #41	; 0x29
 8002cf6:	f000 f8c0 	bl	8002e7a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2011      	movs	r0, #17
 8002d00:	f000 f8bb 	bl	8002e7a <ST7789H2_WriteReg>
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002d0e:	23fe      	movs	r3, #254	; 0xfe
 8002d10:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2201      	movs	r2, #1
 8002d16:	4619      	mov	r1, r3
 8002d18:	20bd      	movs	r0, #189	; 0xbd
 8002d1a:	f000 f8ae 	bl	8002e7a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2010      	movs	r0, #16
 8002d24:	f000 f8a9 	bl	8002e7a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f000 fc52 	bl	80035d2 <LCD_IO_Delay>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002d3a:	23f0      	movs	r3, #240	; 0xf0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002d4a:	23f0      	movs	r3, #240	; 0xf0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002d5a:	f000 fc13 	bl	8003584 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002d5e:	2004      	movs	r0, #4
 8002d60:	f000 f8ad 	bl	8002ebe <ST7789H2_ReadReg>
 8002d64:	4603      	mov	r3, r0
 8002d66:	b29b      	uxth	r3, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	460a      	mov	r2, r1
 8002d76:	80fb      	strh	r3, [r7, #6]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b11      	subs	r3, #17
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2204      	movs	r2, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	202a      	movs	r0, #42	; 0x2a
 8002d9e:	f000 f86c 	bl	8002e7a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002da2:	2300      	movs	r3, #0
 8002da4:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002da6:	88bb      	ldrh	r3, [r7, #4]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3b11      	subs	r3, #17
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	202b      	movs	r0, #43	; 0x2b
 8002dc4:	f000 f859 	bl	8002e7a <ST7789H2_WriteReg>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	80bb      	strh	r3, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002de2:	88ba      	ldrh	r2, [r7, #4]
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffbf 	bl	8002d6c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	202c      	movs	r0, #44	; 0x2c
 8002df4:	f000 f841 	bl	8002e7a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fbc8 	bl	8003590 <LCD_IO_WriteData>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	80fb      	strh	r3, [r7, #6]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002e18:	88ba      	ldrh	r2, [r7, #4]
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ffa4 	bl	8002d6c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002e24:	88ba      	ldrh	r2, [r7, #4]
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f9bd 	bl	80031aa <ST7789H2_ReadPixel_rgb888>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	733a      	strb	r2, [r7, #12]
 8002e36:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002e3a:	737a      	strb	r2, [r7, #13]
 8002e3c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002e40:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002e48:	7b7b      	ldrb	r3, [r7, #13]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002e4e:	7bbb      	ldrb	r3, [r7, #14]
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	02db      	lsls	r3, r3, #11
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	7dbb      	ldrb	r3, [r7, #22]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	015b      	lsls	r3, r3, #5
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	7d7b      	ldrb	r3, [r7, #21]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002e70:	8a7b      	ldrh	r3, [r7, #18]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	6039      	str	r1, [r7, #0]
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	4613      	mov	r3, r2
 8002e88:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fb8c 	bl	80035aa <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e00a      	b.n	8002eae <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fb74 	bl	8003590 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d3f0      	bcc.n	8002e98 <ST7789H2_WriteReg+0x1e>
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb6d 	bl	80035aa <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002ed0:	f000 fb78 	bl	80035c4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002ed4:	f000 fb76 	bl	80035c4 <LCD_IO_ReadData>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b2db      	uxtb	r3, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002ee4:	b490      	push	{r4, r7}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	80fb      	strh	r3, [r7, #6]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80bb      	strh	r3, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2bef      	cmp	r3, #239	; 0xef
 8002f06:	d803      	bhi.n	8002f10 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <ST7789H2_SetDisplayWindow+0x94>)
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	8013      	strh	r3, [r2, #0]
 8002f0e:	e002      	b.n	8002f16 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <ST7789H2_SetDisplayWindow+0x94>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	2bef      	cmp	r3, #239	; 0xef
 8002f1a:	d803      	bhi.n	8002f24 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <ST7789H2_SetDisplayWindow+0x98>)
 8002f1e:	88bb      	ldrh	r3, [r7, #4]
 8002f20:	8013      	strh	r3, [r2, #0]
 8002f22:	e002      	b.n	8002f2a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <ST7789H2_SetDisplayWindow+0x98>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	4413      	add	r3, r2
 8002f30:	2bf0      	cmp	r3, #240	; 0xf0
 8002f32:	dc08      	bgt.n	8002f46 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002f34:	887a      	ldrh	r2, [r7, #2]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4413      	add	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <ST7789H2_SetDisplayWindow+0x9c>)
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <ST7789H2_SetDisplayWindow+0x9c>)
 8002f48:	22ef      	movs	r2, #239	; 0xef
 8002f4a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002f4c:	883a      	ldrh	r2, [r7, #0]
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	2bf0      	cmp	r3, #240	; 0xf0
 8002f54:	dc08      	bgt.n	8002f68 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002f56:	883a      	ldrh	r2, [r7, #0]
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <ST7789H2_SetDisplayWindow+0xa0>)
 8002f64:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002f66:	e002      	b.n	8002f6e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <ST7789H2_SetDisplayWindow+0xa0>)
 8002f6a:	22ef      	movs	r2, #239	; 0xef
 8002f6c:	801a      	strh	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc90      	pop	{r4, r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000184 	.word	0x20000184
 8002f7c:	20000186 	.word	0x20000186
 8002f80:	20000060 	.word	0x20000060
 8002f84:	20000062 	.word	0x20000062

08002f88 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	80fb      	strh	r3, [r7, #6]
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80bb      	strh	r3, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	807b      	strh	r3, [r7, #2]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fedb 	bl	8002d6c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	202c      	movs	r0, #44	; 0x2c
 8002fbc:	f7ff ff5d 	bl	8002e7a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	81fb      	strh	r3, [r7, #14]
 8002fc4:	e006      	b.n	8002fd4 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fae1 	bl	8003590 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	81fb      	strh	r3, [r7, #14]
 8002fd4:	89fa      	ldrh	r2, [r7, #14]
 8002fd6:	883b      	ldrh	r3, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3f4      	bcc.n	8002fc6 <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}

08002fe4 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4604      	mov	r4, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	80fb      	strh	r3, [r7, #6]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80bb      	strh	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	807b      	strh	r3, [r7, #2]
 8002ffe:	4613      	mov	r3, r2
 8003000:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fead 	bl	8002d6c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	202c      	movs	r0, #44	; 0x2c
 8003018:	f7ff ff2f 	bl	8002e7a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800301c:	2300      	movs	r3, #0
 800301e:	81fb      	strh	r3, [r7, #14]
 8003020:	e00b      	b.n	800303a <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	89fb      	ldrh	r3, [r7, #14]
 8003026:	4413      	add	r3, r2
 8003028:	b299      	uxth	r1, r3
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	88bb      	ldrh	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fece 	bl	8002dd0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003034:	89fb      	ldrh	r3, [r7, #14]
 8003036:	3301      	adds	r3, #1
 8003038:	81fb      	strh	r3, [r7, #14]
 800303a:	89fa      	ldrh	r2, [r7, #14]
 800303c:	883b      	ldrh	r3, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3ef      	bcc.n	8003022 <ST7789H2_DrawVLine+0x3e>
  }
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
	...

0800304c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	603a      	str	r2, [r7, #0]
 8003056:	80fb      	strh	r3, [r7, #6]
 8003058:	460b      	mov	r3, r1
 800305a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <ST7789H2_DrawBitmap+0xdc>)
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <ST7789H2_DrawBitmap+0xe0>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	b29b      	uxth	r3, r3
 8003074:	3301      	adds	r3, #1
 8003076:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <ST7789H2_DrawBitmap+0xe4>)
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <ST7789H2_DrawBitmap+0xe8>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3302      	adds	r3, #2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	3304      	adds	r3, #4
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	461a      	mov	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	330a      	adds	r3, #10
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	461a      	mov	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4413      	add	r3, r2
 80030d0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80030d2:	88ba      	ldrh	r2, [r7, #4]
 80030d4:	89bb      	ldrh	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e01d      	b.n	8003118 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fe3f 	bl	8002d6c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b299      	uxth	r1, r3
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	89fa      	ldrh	r2, [r7, #14]
 8003106:	88f8      	ldrh	r0, [r7, #6]
 8003108:	f000 f898 	bl	800323c <ST7789H2_DrawRGBHLine>
    nb_line++;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	3301      	adds	r3, #1
 8003110:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b01      	subs	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	d8dd      	bhi.n	80030dc <ST7789H2_DrawBitmap+0x90>
  }
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000060 	.word	0x20000060
 800312c:	20000184 	.word	0x20000184
 8003130:	20000062 	.word	0x20000062
 8003134:	20000186 	.word	0x20000186

08003138 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4623      	mov	r3, r4
 8003148:	80fb      	strh	r3, [r7, #6]
 800314a:	4603      	mov	r3, r0
 800314c:	80bb      	strh	r3, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]
 8003152:	4613      	mov	r3, r2
 8003154:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800315a:	88bb      	ldrh	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e019      	b.n	8003194 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	b29a      	uxth	r2, r3
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fdff 	bl	8002d6c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	b299      	uxth	r1, r3
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	4413      	add	r3, r2
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	88f8      	ldrh	r0, [r7, #6]
 8003184:	f000 f85a 	bl	800323c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	88ba      	ldrh	r2, [r7, #4]
 8003196:	883b      	ldrh	r3, [r7, #0]
 8003198:	4413      	add	r3, r2
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4293      	cmp	r3, r2
 80031a0:	d3de      	bcc.n	8003160 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	460a      	mov	r2, r1
 80031b4:	80fb      	strh	r3, [r7, #6]
 80031b6:	4613      	mov	r3, r2
 80031b8:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80031ba:	88ba      	ldrh	r2, [r7, #4]
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fdd3 	bl	8002d6c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	202e      	movs	r0, #46	; 0x2e
 80031cc:	f7ff fe55 	bl	8002e7a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80031d0:	f000 f9f8 	bl	80035c4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80031d4:	f000 f9f6 	bl	80035c4 <LCD_IO_ReadData>
 80031d8:	4603      	mov	r3, r0
 80031da:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80031dc:	f000 f9f2 	bl	80035c4 <LCD_IO_ReadData>
 80031e0:	4603      	mov	r3, r0
 80031e2:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	121b      	asrs	r3, r3, #8
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80031f2:	8afb      	ldrh	r3, [r7, #22]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80031fe:	8abb      	ldrh	r3, [r7, #20]
 8003200:	121b      	asrs	r3, r3, #8
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f023 0303 	bic.w	r3, r3, #3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	f107 020c 	add.w	r2, r7, #12
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4611      	mov	r1, r2
 8003218:	8019      	strh	r1, [r3, #0]
 800321a:	3302      	adds	r3, #2
 800321c:	0c12      	lsrs	r2, r2, #16
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	7c3a      	ldrb	r2, [r7, #16]
 8003224:	f362 0307 	bfi	r3, r2, #0, #8
 8003228:	7c7a      	ldrb	r2, [r7, #17]
 800322a:	f362 230f 	bfi	r3, r2, #8, #8
 800322e:	7cba      	ldrb	r2, [r7, #18]
 8003230:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	4603      	mov	r3, r0
 8003246:	81fb      	strh	r3, [r7, #14]
 8003248:	460b      	mov	r3, r1
 800324a:	81bb      	strh	r3, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	202c      	movs	r0, #44	; 0x2c
 800325e:	f7ff fe0c 	bl	8002e7a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e02a      	b.n	80032be <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <ST7789H2_DrawRGBHLine+0x98>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4293      	cmp	r3, r2
 8003272:	d321      	bcc.n	80032b8 <ST7789H2_DrawRGBHLine+0x7c>
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <ST7789H2_DrawRGBHLine+0x9c>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	89ba      	ldrh	r2, [r7, #12]
 800327a:	429a      	cmp	r2, r3
 800327c:	d31c      	bcc.n	80032b8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <ST7789H2_DrawRGBHLine+0xa0>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4293      	cmp	r3, r2
 8003288:	d816      	bhi.n	80032b8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <ST7789H2_DrawRGBHLine+0xa4>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	89ba      	ldrh	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d811      	bhi.n	80032b8 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003294:	897a      	ldrh	r2, [r7, #10]
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	4413      	add	r3, r2
 800329a:	461a      	mov	r2, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4413      	add	r3, r2
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f96f 	bl	8003590 <LCD_IO_WriteData>
      }      
      i++;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	897a      	ldrh	r2, [r7, #10]
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	4413      	add	r3, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d3cd      	bcc.n	8003268 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000184 	.word	0x20000184
 80032d8:	20000186 	.word	0x20000186
 80032dc:	20000060 	.word	0x20000060
 80032e0:	20000062 	.word	0x20000062

080032e4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	460a      	mov	r2, r1
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <BSP_PB_Init+0xa0>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <BSP_PB_Init+0xa0>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6313      	str	r3, [r2, #48]	; 0x30
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <BSP_PB_Init+0xa0>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003310:	79bb      	ldrb	r3, [r7, #6]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d111      	bne.n	800333a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003316:	2301      	movs	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 800331e:	2302      	movs	r3, #2
 8003320:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003322:	2302      	movs	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <BSP_PB_Init+0xa4>)
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	f107 020c 	add.w	r2, r7, #12
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fca9 	bl	8004c8c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800333a:	79bb      	ldrb	r3, [r7, #6]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d11d      	bne.n	800337c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003340:	2301      	movs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003344:	2302      	movs	r3, #2
 8003346:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <BSP_PB_Init+0xa8>)
 800334e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <BSP_PB_Init+0xa4>)
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	f107 020c 	add.w	r2, r7, #12
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fc94 	bl	8004c8c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003364:	2306      	movs	r3, #6
 8003366:	b25b      	sxtb	r3, r3
 8003368:	2200      	movs	r2, #0
 800336a:	210f      	movs	r1, #15
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f945 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003372:	2306      	movs	r3, #6
 8003374:	b25b      	sxtb	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f001 f95c 	bl	8004634 <HAL_NVIC_EnableIRQ>
  }
}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	20000064 	.word	0x20000064
 800338c:	10110000 	.word	0x10110000

08003390 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4a39      	ldr	r2, [pc, #228]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6393      	str	r3, [r2, #56]	; 0x38
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a32      	ldr	r2, [pc, #200]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033d8:	f043 0310 	orr.w	r3, r3, #16
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 8003410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <FMC_BANK3_MspInit+0xf4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003426:	2301      	movs	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800342e:	230c      	movs	r3, #12
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8003432:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003436:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	4619      	mov	r1, r3
 800343e:	4812      	ldr	r0, [pc, #72]	; (8003488 <FMC_BANK3_MspInit+0xf8>)
 8003440:	f001 fc24 	bl	8004c8c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8003444:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003448:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	480e      	ldr	r0, [pc, #56]	; (800348c <FMC_BANK3_MspInit+0xfc>)
 8003452:	f001 fc1b 	bl	8004c8c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003456:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800345a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	480b      	ldr	r0, [pc, #44]	; (8003490 <FMC_BANK3_MspInit+0x100>)
 8003464:	f001 fc12 	bl	8004c8c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003468:	f240 433f 	movw	r3, #1087	; 0x43f
 800346c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4807      	ldr	r0, [pc, #28]	; (8003494 <FMC_BANK3_MspInit+0x104>)
 8003476:	f001 fc09 	bl	8004c8c <HAL_GPIO_Init>
}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	40020c00 	.word	0x40020c00
 800348c:	40021000 	.word	0x40021000
 8003490:	40021400 	.word	0x40021400
 8003494:	40021800 	.word	0x40021800

08003498 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8003498:	b580      	push	{r7, lr}
 800349a:	b09c      	sub	sp, #112	; 0x70
 800349c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800349e:	f7ff ff77 	bl	8003390 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80034a2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80034a6:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <FMC_BANK3_Init+0x8c>)
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 80034ac:	2303      	movs	r3, #3
 80034ae:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 80034b4:	2304      	movs	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 80034bc:	2302      	movs	r3, #2
 80034be:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 80034c0:	2302      	movs	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 80034c8:	2304      	movs	r3, #4
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80034d4:	2310      	movs	r3, #16
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80034e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80034f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8003500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800350a:	2300      	movs	r3, #0
 800350c:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 800350e:	1d3a      	adds	r2, r7, #4
 8003510:	1d39      	adds	r1, r7, #4
 8003512:	f107 0320 	add.w	r3, r7, #32
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fed0 	bl	80092bc <HAL_SRAM_Init>
}
 800351c:	bf00      	nop
 800351e:	3770      	adds	r7, #112	; 0x70
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	a0000104 	.word	0xa0000104

08003528 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8003532:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800353a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8003554:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	b292      	uxth	r2, r2
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8003572:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003576:	885b      	ldrh	r3, [r3, #2]
 8003578:	b29b      	uxth	r3, r3
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8003588:	f7ff ff86 	bl	8003498 <FMC_BANK3_Init>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}

08003590 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ffc3 	bl	8003528 <FMC_BANK3_WriteData>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffc7 	bl	800354a <FMC_BANK3_WriteReg>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 80035c8:	f7ff ffd1 	bl	800356e <FMC_BANK3_ReadData>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fcc2 	bl	8003f64 <HAL_Delay>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80035f0:	f000 f80e 	bl	8003610 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8003604:	f000 f80b 	bl	800361e <BSP_AUDIO_OUT_Error_CallBack>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003634:	f000 f804 	bl	8003640 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003652:	2001      	movs	r0, #1
 8003654:	f000 f804 	bl	8003660 <BSP_LCD_InitEx>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <BSP_LCD_InitEx+0xc0>)
 800366e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003672:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <BSP_LCD_InitEx+0xc0>)
 8003676:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <BSP_LCD_InitEx+0xc4>)
 8003678:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <BSP_LCD_InitEx+0xc0>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8003680:	f000 fb3a 	bl	8003cf8 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2120      	movs	r1, #32
 8003688:	4827      	ldr	r0, [pc, #156]	; (8003728 <BSP_LCD_InitEx+0xc8>)
 800368a:	f001 fca9 	bl	8004fe0 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003694:	4825      	ldr	r0, [pc, #148]	; (800372c <BSP_LCD_InitEx+0xcc>)
 8003696:	f001 fca3 	bl	8004fe0 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800369a:	2005      	movs	r0, #5
 800369c:	f000 fc62 	bl	8003f64 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80036a0:	2201      	movs	r2, #1
 80036a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a6:	4821      	ldr	r0, [pc, #132]	; (800372c <BSP_LCD_InitEx+0xcc>)
 80036a8:	f001 fc9a 	bl	8004fe0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80036ac:	200a      	movs	r0, #10
 80036ae:	f000 fc59 	bl	8003f64 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036b8:	481c      	ldr	r0, [pc, #112]	; (800372c <BSP_LCD_InitEx+0xcc>)
 80036ba:	f001 fc91 	bl	8004fe0 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 80036be:	2014      	movs	r0, #20
 80036c0:	f000 fc50 	bl	8003f64 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ca:	4818      	ldr	r0, [pc, #96]	; (800372c <BSP_LCD_InitEx+0xcc>)
 80036cc:	f001 fc88 	bl	8004fe0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80036d0:	200a      	movs	r0, #10
 80036d2:	f000 fc47 	bl	8003f64 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <BSP_LCD_InitEx+0xd0>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4798      	blx	r3
 80036dc:	4603      	mov	r3, r0
 80036de:	2b85      	cmp	r3, #133	; 0x85
 80036e0:	d118      	bne.n	8003714 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <BSP_LCD_InitEx+0xd4>)
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <BSP_LCD_InitEx+0xd0>)
 80036e6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <BSP_LCD_InitEx+0xd4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7ff fabd 	bl	8002c76 <ST7789H2_SetOrientation>
 80036fc:	e005      	b.n	800370a <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d102      	bne.n	800370a <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8003704:	2002      	movs	r0, #2
 8003706:	f7ff fab6 	bl	8002c76 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800370a:	480b      	ldr	r0, [pc, #44]	; (8003738 <BSP_LCD_InitEx+0xd8>)
 800370c:	f000 f84e 	bl	80037ac <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20004fc0 	.word	0x20004fc0
 8003724:	20000068 	.word	0x20000068
 8003728:	40021000 	.word	0x40021000
 800372c:	40020400 	.word	0x40020400
 8003730:	20000028 	.word	0x20000028
 8003734:	20000188 	.word	0x20000188
 8003738:	20000080 	.word	0x20000080

0800373c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <BSP_LCD_GetXSize+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	4798      	blx	r3
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000188 	.word	0x20000188

08003754 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <BSP_LCD_GetYSize+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	4798      	blx	r3
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000188 	.word	0x20000188

0800376c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	4a03      	ldr	r2, [pc, #12]	; (8003788 <BSP_LCD_SetTextColor+0x1c>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20004fc0 	.word	0x20004fc0

0800378c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <BSP_LCD_SetBackColor+0x1c>)
 800379a:	6053      	str	r3, [r2, #4]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20004fc0 	.word	0x20004fc0

080037ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <BSP_LCD_SetFont+0x1c>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6093      	str	r3, [r2, #8]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20004fc0 	.word	0x20004fc0

080037cc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <BSP_LCD_Clear+0x68>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <BSP_LCD_Clear+0x68>)
 80037e8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80037ea:	f7ff ffb3 	bl	8003754 <BSP_LCD_GetYSize>
 80037ee:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e00d      	b.n	8003812 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	b29c      	uxth	r4, r3
 80037fa:	f7ff ff9f 	bl	800373c <BSP_LCD_GetXSize>
 80037fe:	4603      	mov	r3, r0
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	4621      	mov	r1, r4
 8003806:	2000      	movs	r0, #0
 8003808:	f000 f8ee 	bl	80039e8 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3301      	adds	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	429a      	cmp	r2, r3
 8003818:	d3ed      	bcc.n	80037f6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 800381a:	4a06      	ldr	r2, [pc, #24]	; (8003834 <BSP_LCD_Clear+0x68>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <BSP_LCD_Clear+0x68>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ffa0 	bl	800376c <BSP_LCD_SetTextColor>
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	20004fc0 	.word	0x20004fc0

08003838 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
 8003842:	460b      	mov	r3, r1
 8003844:	80bb      	strh	r3, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <BSP_LCD_DisplayChar+0x50>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003854:	490c      	ldr	r1, [pc, #48]	; (8003888 <BSP_LCD_DisplayChar+0x50>)
 8003856:	6889      	ldr	r1, [r1, #8]
 8003858:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800385a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <BSP_LCD_DisplayChar+0x50>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	889b      	ldrh	r3, [r3, #4]
 8003864:	3307      	adds	r3, #7
 8003866:	2b00      	cmp	r3, #0
 8003868:	da00      	bge.n	800386c <BSP_LCD_DisplayChar+0x34>
 800386a:	3307      	adds	r3, #7
 800386c:	10db      	asrs	r3, r3, #3
 800386e:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003872:	441a      	add	r2, r3
 8003874:	88b9      	ldrh	r1, [r7, #4]
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa99 	bl	8003db0 <DrawChar>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20004fc0 	.word	0x20004fc0

0800388c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60ba      	str	r2, [r7, #8]
 8003894:	461a      	mov	r2, r3
 8003896:	4603      	mov	r3, r0
 8003898:	81fb      	strh	r3, [r7, #14]
 800389a:	460b      	mov	r3, r1
 800389c:	81bb      	strh	r3, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80038a2:	2301      	movs	r3, #1
 80038a4:	83fb      	strh	r3, [r7, #30]
 80038a6:	2300      	movs	r3, #0
 80038a8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80038b6:	e002      	b.n	80038be <BSP_LCD_DisplayStringAt+0x32>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	617a      	str	r2, [r7, #20]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f6      	bne.n	80038b8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80038ca:	f7ff ff37 	bl	800373c <BSP_LCD_GetXSize>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	889b      	ldrh	r3, [r3, #4]
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d014      	beq.n	800390c <BSP_LCD_DisplayStringAt+0x80>
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d00f      	beq.n	8003906 <BSP_LCD_DisplayStringAt+0x7a>
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11e      	bne.n	8003928 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	8892      	ldrh	r2, [r2, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	4413      	add	r3, r2
 8003902:	83fb      	strh	r3, [r7, #30]
      break;
 8003904:	e013      	b.n	800392e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003906:	89fb      	ldrh	r3, [r7, #14]
 8003908:	83fb      	strh	r3, [r7, #30]
      break;
 800390a:	e010      	b.n	800392e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29a      	uxth	r2, r3
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	fb12 f303 	smulbb	r3, r2, r3
 800391e:	b29a      	uxth	r2, r3
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	83fb      	strh	r3, [r7, #30]
      break;
 8003926:	e002      	b.n	800392e <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	83fb      	strh	r3, [r7, #30]
      break;
 800392c:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800392e:	8bfb      	ldrh	r3, [r7, #30]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <BSP_LCD_DisplayStringAt+0xb0>
 8003934:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da15      	bge.n	8003968 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 800393c:	2301      	movs	r3, #1
 800393e:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003940:	e012      	b.n	8003968 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	89b9      	ldrh	r1, [r7, #12]
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff74 	bl	8003838 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	889a      	ldrh	r2, [r3, #4]
 8003956:	8bfb      	ldrh	r3, [r7, #30]
 8003958:	4413      	add	r3, r2
 800395a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3301      	adds	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
    i++;
 8003962:	8bbb      	ldrh	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2dc      	uxtb	r4, r3
 8003976:	f7ff fee1 	bl	800373c <BSP_LCD_GetXSize>
 800397a:	4601      	mov	r1, r0
 800397c:	8bbb      	ldrh	r3, [r7, #28]
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 8003980:	6892      	ldr	r2, [r2, #8]
 8003982:	8892      	ldrh	r2, [r2, #4]
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	1acb      	subs	r3, r1, r3
 800398a:	b29b      	uxth	r3, r3
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <BSP_LCD_DisplayStringAt+0x120>)
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	8892      	ldrh	r2, [r2, #4]
 8003992:	4293      	cmp	r3, r2
 8003994:	bf2c      	ite	cs
 8003996:	2301      	movcs	r3, #1
 8003998:	2300      	movcc	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4023      	ands	r3, r4
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ce      	bne.n	8003942 <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 80039a4:	bf00      	nop
 80039a6:	3724      	adds	r7, #36	; 0x24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	20004fc0 	.word	0x20004fc0

080039b0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
 80039ba:	460b      	mov	r3, r1
 80039bc:	80bb      	strh	r3, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <BSP_LCD_DrawPixel+0x34>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <BSP_LCD_DrawPixel+0x34>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	88b9      	ldrh	r1, [r7, #4]
 80039d6:	88f8      	ldrh	r0, [r7, #6]
 80039d8:	4798      	blx	r3
  }
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000188 	.word	0x20000188

080039e8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]
 80039f2:	460b      	mov	r3, r1
 80039f4:	80bb      	strh	r3, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <BSP_LCD_DrawHLine+0x6c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <BSP_LCD_DrawHLine+0x6c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1c      	ldr	r4, [r3, #32]
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <BSP_LCD_DrawHLine+0x70>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b298      	uxth	r0, r3
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	88ba      	ldrh	r2, [r7, #4]
 8003a18:	88f9      	ldrh	r1, [r7, #6]
 8003a1a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003a1c:	e015      	b.n	8003a4a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e00e      	b.n	8003a42 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b298      	uxth	r0, r3
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <BSP_LCD_DrawHLine+0x70>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	88bb      	ldrh	r3, [r7, #4]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7ff ffba 	bl	80039b0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3ec      	bcc.n	8003a24 <BSP_LCD_DrawHLine+0x3c>
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000188 	.word	0x20000188
 8003a58:	20004fc0 	.word	0x20004fc0

08003a5c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	80fb      	strh	r3, [r7, #6]
 8003a66:	460b      	mov	r3, r1
 8003a68:	80bb      	strh	r3, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	f1c3 0303 	rsb	r3, r3, #3
 8003a76:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003a80:	e09a      	b.n	8003bb8 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	4413      	add	r3, r2
 8003a8a:	b298      	uxth	r0, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	88ba      	ldrh	r2, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	b299      	uxth	r1, r3
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f7ff ff87 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	88ba      	ldrh	r2, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	4b45      	ldr	r3, [pc, #276]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	f7ff ff77 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	4413      	add	r3, r2
 8003aca:	b298      	uxth	r0, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	88ba      	ldrh	r2, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	b299      	uxth	r1, r3
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff ff67 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	b298      	uxth	r0, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	88ba      	ldrh	r2, [r7, #4]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b299      	uxth	r1, r3
 8003af6:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	f7ff ff57 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4413      	add	r3, r2
 8003b0a:	b298      	uxth	r0, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	88bb      	ldrh	r3, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	b299      	uxth	r1, r3
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7ff ff47 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	b298      	uxth	r0, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	b299      	uxth	r1, r3
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f7ff ff37 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4413      	add	r3, r2
 8003b4a:	b298      	uxth	r0, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	88bb      	ldrh	r3, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	b299      	uxth	r1, r3
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f7ff ff27 	bl	80039b0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	b298      	uxth	r0, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	88bb      	ldrh	r3, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	b299      	uxth	r1, r3
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <BSP_LCD_DrawCircle+0x170>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7ff ff17 	bl	80039b0 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003b82:	4813      	ldr	r0, [pc, #76]	; (8003bd0 <BSP_LCD_DrawCircle+0x174>)
 8003b84:	f7ff fe12 	bl	80037ac <BSP_LCD_SetFont>

    if (decision < 0)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da06      	bge.n	8003b9c <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	009a      	lsls	r2, r3, #2
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	3306      	adds	r3, #6
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e00a      	b.n	8003bb2 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	330a      	adds	r3, #10
 8003baa:	617b      	str	r3, [r7, #20]
      current_y--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f67f af60 	bls.w	8003a82 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20004fc0 	.word	0x20004fc0
 8003bd0:	20000080 	.word	0x20000080

08003bd4 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
 8003bde:	460b      	mov	r3, r1
 8003be0:	80bb      	strh	r3, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	f1c3 0303 	rsb	r3, r3, #3
 8003bee:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <BSP_LCD_FillCircle+0x120>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fdb4 	bl	800376c <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 8003c04:	e061      	b.n	8003cca <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b298      	uxth	r0, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	88bb      	ldrh	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b299      	uxth	r1, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f7ff fedd 	bl	80039e8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b298      	uxth	r0, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	88ba      	ldrh	r2, [r7, #4]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b299      	uxth	r1, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff fecc 	bl	80039e8 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d021      	beq.n	8003c9a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b298      	uxth	r0, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	88ba      	ldrh	r2, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b299      	uxth	r1, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7ff feb8 	bl	80039e8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b298      	uxth	r0, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	88bb      	ldrh	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	f7ff fea7 	bl	80039e8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da06      	bge.n	8003cae <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3306      	adds	r3, #6
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e00a      	b.n	8003cc4 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	330a      	adds	r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
      current_y--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d999      	bls.n	8003c06 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <BSP_LCD_FillCircle+0x120>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fd47 	bl	800376c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	88b9      	ldrh	r1, [r7, #4]
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff feb9 	bl	8003a5c <BSP_LCD_DrawCircle>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20004fc0 	.word	0x20004fc0

08003cf8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d40:	f043 0310 	orr.w	r3, r3, #16
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <BSP_LCD_MspInit+0xac>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8003d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d56:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480f      	ldr	r0, [pc, #60]	; (8003da8 <BSP_LCD_MspInit+0xb0>)
 8003d6c:	f000 ff8e 	bl	8004c8c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003d70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d74:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	; (8003da8 <BSP_LCD_MspInit+0xb0>)
 8003d82:	f000 ff83 	bl	8004c8c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003d86:	2320      	movs	r3, #32
 8003d88:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <BSP_LCD_MspInit+0xb4>)
 8003d96:	f000 ff79 	bl	8004c8c <HAL_GPIO_Init>
}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020400 	.word	0x40020400
 8003dac:	40021000 	.word	0x40021000

08003db0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	603a      	str	r2, [r7, #0]
 8003dba:	80fb      	strh	r3, [r7, #6]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003dc8:	4b44      	ldr	r3, [pc, #272]	; (8003edc <DrawChar+0x12c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	88db      	ldrh	r3, [r3, #6]
 8003dce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003dd0:	4b42      	ldr	r3, [pc, #264]	; (8003edc <DrawChar+0x12c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	889b      	ldrh	r3, [r3, #4]
 8003dd6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003dd8:	8a3b      	ldrh	r3, [r7, #16]
 8003dda:	3307      	adds	r3, #7
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da00      	bge.n	8003de2 <DrawChar+0x32>
 8003de0:	3307      	adds	r3, #7
 8003de2:	10db      	asrs	r3, r3, #3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	8a3b      	ldrh	r3, [r7, #16]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e069      	b.n	8003ecc <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003df8:	8a3b      	ldrh	r3, [r7, #16]
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da00      	bge.n	8003e02 <DrawChar+0x52>
 8003e00:	3307      	adds	r3, #7
 8003e02:	10db      	asrs	r3, r3, #3
 8003e04:	461a      	mov	r2, r3
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fb03 f302 	mul.w	r3, r3, r2
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003e12:	8a3b      	ldrh	r3, [r7, #16]
 8003e14:	3307      	adds	r3, #7
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da00      	bge.n	8003e1c <DrawChar+0x6c>
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	10db      	asrs	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d002      	beq.n	8003e28 <DrawChar+0x78>
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d004      	beq.n	8003e30 <DrawChar+0x80>
 8003e26:	e00c      	b.n	8003e42 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	617b      	str	r3, [r7, #20]
      break;    
 8003e2e:	e016      	b.n	8003e5e <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	3201      	adds	r2, #1
 8003e3a:	7812      	ldrb	r2, [r2, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
      break;
 8003e40:	e00d      	b.n	8003e5e <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	041a      	lsls	r2, r3, #16
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	4313      	orrs	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	3202      	adds	r2, #2
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
      break;
 8003e5c:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e029      	b.n	8003eb8 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003e64:	8a3a      	ldrh	r2, [r7, #16]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	2201      	movs	r2, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	4413      	add	r3, r2
 8003e88:	b298      	uxth	r0, r3
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <DrawChar+0x12c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	88bb      	ldrh	r3, [r7, #4]
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7ff fd8c 	bl	80039b0 <BSP_LCD_DrawPixel>
 8003e98:	e00b      	b.n	8003eb2 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b298      	uxth	r0, r3
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <DrawChar+0x12c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	88bb      	ldrh	r3, [r7, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7ff fd7f 	bl	80039b0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	8a3b      	ldrh	r3, [r7, #16]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3d1      	bcc.n	8003e64 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003ec0:	88bb      	ldrh	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d391      	bcc.n	8003df8 <DrawChar+0x48>
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20004fc0 	.word	0x20004fc0

08003ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <HAL_Init+0x40>)
 8003eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_Init+0x40>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <HAL_Init+0x40>)
 8003ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_Init+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a07      	ldr	r2, [pc, #28]	; (8003f20 <HAL_Init+0x40>)
 8003f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f000 fb6c 	bl	80045e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fe fc0e 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f14:	f7fd fe8e 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00

08003f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_IncTick+0x20>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_IncTick+0x24>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_IncTick+0x24>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000008c 	.word	0x2000008c
 8003f48:	20004fcc 	.word	0x20004fcc

08003f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_GetTick+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20004fcc 	.word	0x20004fcc

08003f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f6c:	f7ff ffee 	bl	8003f4c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d005      	beq.n	8003f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_Delay+0x40>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8a:	bf00      	nop
 8003f8c:	f7ff ffde 	bl	8003f4c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8f7      	bhi.n	8003f8c <HAL_Delay+0x28>
  {
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	2000008c 	.word	0x2000008c

08003fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e033      	b.n	8004026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fe5c 	bl	8001c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fee:	f023 0302 	bic.w	r3, r3, #2
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f94a 	bl	8004294 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
 8004016:	e001      	b.n	800401c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x1c>
 8004048:	2302      	movs	r3, #2
 800404a:	e113      	b.n	8004274 <HAL_ADC_ConfigChannel+0x244>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b09      	cmp	r3, #9
 800405a:	d925      	bls.n	80040a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	3b1e      	subs	r3, #30
 8004072:	2207      	movs	r2, #7
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43da      	mvns	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	400a      	ands	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68d9      	ldr	r1, [r3, #12]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	4618      	mov	r0, r3
 8004094:	4603      	mov	r3, r0
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4403      	add	r3, r0
 800409a:	3b1e      	subs	r3, #30
 800409c:	409a      	lsls	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e022      	b.n	80040ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	2207      	movs	r2, #7
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	400a      	ands	r2, r1
 80040ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6919      	ldr	r1, [r3, #16]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4618      	mov	r0, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4403      	add	r3, r0
 80040e4:	409a      	lsls	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d824      	bhi.n	8004140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	3b05      	subs	r3, #5
 8004108:	221f      	movs	r2, #31
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	400a      	ands	r2, r1
 8004116:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b05      	subs	r3, #5
 8004132:	fa00 f203 	lsl.w	r2, r0, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	635a      	str	r2, [r3, #52]	; 0x34
 800413e:	e04c      	b.n	80041da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d824      	bhi.n	8004192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	3b23      	subs	r3, #35	; 0x23
 800415a:	221f      	movs	r2, #31
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43da      	mvns	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	400a      	ands	r2, r1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	4618      	mov	r0, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	3b23      	subs	r3, #35	; 0x23
 8004184:	fa00 f203 	lsl.w	r2, r0, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
 8004190:	e023      	b.n	80041da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b41      	subs	r3, #65	; 0x41
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b41      	subs	r3, #65	; 0x41
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_ADC_ConfigChannel+0x250>)
 80041dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_ADC_ConfigChannel+0x254>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10f      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1d8>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d10b      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_ADC_ConfigChannel+0x254>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12b      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_ADC_ConfigChannel+0x258>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x1f4>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b11      	cmp	r3, #17
 8004222:	d122      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <HAL_ADC_ConfigChannel+0x258>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_ADC_ConfigChannel+0x25c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_ADC_ConfigChannel+0x260>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	0c9a      	lsrs	r2, r3, #18
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800425c:	e002      	b.n	8004264 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f9      	bne.n	800425e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012300 	.word	0x40012300
 8004284:	40012000 	.word	0x40012000
 8004288:	10000012 	.word	0x10000012
 800428c:	20000024 	.word	0x20000024
 8004290:	431bde83 	.word	0x431bde83

08004294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800429c:	4b79      	ldr	r3, [pc, #484]	; (8004484 <ADC_Init+0x1f0>)
 800429e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	021a      	lsls	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	4a58      	ldr	r2, [pc, #352]	; (8004488 <ADC_Init+0x1f4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800433a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800435c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	e00f      	b.n	8004392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004390:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0202 	bic.w	r2, r2, #2
 80043a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6899      	ldr	r1, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7e1b      	ldrb	r3, [r3, #24]
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	3b01      	subs	r3, #1
 80043ec:	035a      	lsls	r2, r3, #13
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e007      	b.n	8004408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004406:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	3b01      	subs	r3, #1
 8004424:	051a      	lsls	r2, r3, #20
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800443c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800444a:	025a      	lsls	r2, r3, #9
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	029a      	lsls	r2, r3, #10
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012300 	.word	0x40012300
 8004488:	0f000001 	.word	0x0f000001

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff4c 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800460e:	f7ff ff61 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004612:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f7ff ffb1 	bl	8004580 <NVIC_EncodePriority>
 800461e:	4602      	mov	r2, r0
 8004620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff80 	bl	800452c <__NVIC_SetPriority>
}
 800462c:	bf00      	nop
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff54 	bl	80044f0 <__NVIC_EnableIRQ>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e014      	b.n	800468c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	791b      	ldrb	r3, [r3, #4]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fb82 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046aa:	d118      	bne.n	80046de <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2204      	movs	r2, #4
 80046b0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f825 	bl	8004728 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d118      	bne.n	8004720 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2204      	movs	r2, #4
 80046f2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f043 0202 	orr.w	r2, r3, #2
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f85b 	bl	80047d6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	795b      	ldrb	r3, [r3, #5]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_DAC_ConfigChannel+0x20>
 8004758:	2302      	movs	r3, #2
 800475a:	e036      	b.n	80047ca <HAL_DAC_ConfigChannel+0x8e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004770:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4013      	ands	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6819      	ldr	r1, [r3, #0]
 80047aa:	22c0      	movs	r2, #192	; 0xc0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	400a      	ands	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0cf      	b.n	800499e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_DFSDM_ChannelInit+0x3a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a67      	ldr	r2, [pc, #412]	; (80049ac <HAL_DFSDM_ChannelInit+0x1c0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_DFSDM_ChannelInit+0x3a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a66      	ldr	r2, [pc, #408]	; (80049b0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_DFSDM_ChannelInit+0x3a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a64      	ldr	r2, [pc, #400]	; (80049b4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d106      	bne.n	8004834 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004826:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004828:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800482a:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_DFSDM_ChannelInit+0x1d0>)
 800482c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800482e:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e005      	b.n	8004840 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_DFSDM_ChannelInit+0x1d4>)
 8004836:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004838:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <HAL_DFSDM_ChannelInit+0x1d8>)
 800483a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800483c:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_DFSDM_ChannelInit+0x1dc>)
 800483e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f8c1 	bl	80049cc <DFSDM_GetChannelFromInstance>
 800484a:	4603      	mov	r3, r0
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4413      	add	r3, r2
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0a0      	b.n	800499e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fd fad9 	bl	8001e14 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d125      	bne.n	80048c0 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d108      	bne.n	80048b4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80048ce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80048de:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80048e4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 020f 	bic.w	r2, r2, #15
 80048fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004924:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 0207 	and.w	r2, r2, #7
 8004950:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800497c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f81e 	bl	80049cc <DFSDM_GetChannelFromInstance>
 8004990:	4603      	mov	r3, r0
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40016000 	.word	0x40016000
 80049ac:	40016020 	.word	0x40016020
 80049b0:	40016040 	.word	0x40016040
 80049b4:	40016060 	.word	0x40016060
 80049b8:	2000018c 	.word	0x2000018c
 80049bc:	20000190 	.word	0x20000190
 80049c0:	200001a0 	.word	0x200001a0
 80049c4:	200001a4 	.word	0x200001a4
 80049c8:	40016400 	.word	0x40016400

080049cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <DFSDM_GetChannelFromInstance+0x9c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <DFSDM_GetChannelFromInstance+0x18>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <DFSDM_GetChannelFromInstance+0xa0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d102      	bne.n	80049ea <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e037      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <DFSDM_GetChannelFromInstance+0xa4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <DFSDM_GetChannelFromInstance+0x2e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <DFSDM_GetChannelFromInstance+0xa8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d102      	bne.n	8004a00 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80049fa:	2301      	movs	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e02c      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <DFSDM_GetChannelFromInstance+0xac>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <DFSDM_GetChannelFromInstance+0x44>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <DFSDM_GetChannelFromInstance+0xb0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d102      	bne.n	8004a16 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004a10:	2302      	movs	r3, #2
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e021      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <DFSDM_GetChannelFromInstance+0xb4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <DFSDM_GetChannelFromInstance+0x5a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <DFSDM_GetChannelFromInstance+0xb8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d102      	bne.n	8004a2c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004a26:	2303      	movs	r3, #3
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e016      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <DFSDM_GetChannelFromInstance+0xbc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d102      	bne.n	8004a3a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004a34:	2304      	movs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e00f      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <DFSDM_GetChannelFromInstance+0xc0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d102      	bne.n	8004a48 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004a42:	2305      	movs	r3, #5
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e008      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <DFSDM_GetChannelFromInstance+0xc4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004a50:	2306      	movs	r3, #6
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8004a56:	2307      	movs	r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40016000 	.word	0x40016000
 8004a6c:	40016400 	.word	0x40016400
 8004a70:	40016020 	.word	0x40016020
 8004a74:	40016420 	.word	0x40016420
 8004a78:	40016040 	.word	0x40016040
 8004a7c:	40016440 	.word	0x40016440
 8004a80:	40016060 	.word	0x40016060
 8004a84:	40016460 	.word	0x40016460
 8004a88:	40016480 	.word	0x40016480
 8004a8c:	400164a0 	.word	0x400164a0
 8004a90:	400164c0 	.word	0x400164c0

08004a94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e00c      	b.n	8004acc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2205      	movs	r2, #5
 8004ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e081      	b.n	8004bee <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fa9a 	bl	8002038 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b38:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e006      	b.n	8004b60 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d104      	bne.n	8004b72 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b84:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d138      	bne.n	8004c7e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e032      	b.n	8004c80 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2224      	movs	r2, #36	; 0x24
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e165      	b.n	8004f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	f040 8154 	bne.w	8004f6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_GPIO_Init+0x5a>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d007      	beq.n	8004ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cda:	2b11      	cmp	r3, #17
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b12      	cmp	r3, #18
 8004ce4:	d130      	bne.n	8004d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 0201 	and.w	r2, r3, #1
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0xfc>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d123      	bne.n	8004dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3208      	adds	r2, #8
 8004d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	220f      	movs	r2, #15
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	08da      	lsrs	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0203 	and.w	r2, r3, #3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80ae 	beq.w	8004f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	4b5c      	ldr	r3, [pc, #368]	; (8004f88 <HAL_GPIO_Init+0x2fc>)
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	4a5b      	ldr	r2, [pc, #364]	; (8004f88 <HAL_GPIO_Init+0x2fc>)
 8004e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e20:	6453      	str	r3, [r2, #68]	; 0x44
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_GPIO_Init+0x2fc>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e2e:	4a57      	ldr	r2, [pc, #348]	; (8004f8c <HAL_GPIO_Init+0x300>)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <HAL_GPIO_Init+0x304>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d025      	beq.n	8004ea6 <HAL_GPIO_Init+0x21a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4d      	ldr	r2, [pc, #308]	; (8004f94 <HAL_GPIO_Init+0x308>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <HAL_GPIO_Init+0x216>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <HAL_GPIO_Init+0x30c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d019      	beq.n	8004e9e <HAL_GPIO_Init+0x212>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a4b      	ldr	r2, [pc, #300]	; (8004f9c <HAL_GPIO_Init+0x310>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <HAL_GPIO_Init+0x20e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4a      	ldr	r2, [pc, #296]	; (8004fa0 <HAL_GPIO_Init+0x314>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00d      	beq.n	8004e96 <HAL_GPIO_Init+0x20a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a49      	ldr	r2, [pc, #292]	; (8004fa4 <HAL_GPIO_Init+0x318>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <HAL_GPIO_Init+0x206>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a48      	ldr	r2, [pc, #288]	; (8004fa8 <HAL_GPIO_Init+0x31c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_GPIO_Init+0x202>
 8004e8a:	2306      	movs	r3, #6
 8004e8c:	e00c      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004e8e:	2307      	movs	r3, #7
 8004e90:	e00a      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004e92:	2305      	movs	r3, #5
 8004e94:	e008      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004e96:	2304      	movs	r3, #4
 8004e98:	e006      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e004      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e002      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_GPIO_Init+0x21c>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	f002 0203 	and.w	r2, r2, #3
 8004eae:	0092      	lsls	r2, r2, #2
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb8:	4934      	ldr	r1, [pc, #208]	; (8004f8c <HAL_GPIO_Init+0x300>)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eea:	4a30      	ldr	r2, [pc, #192]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f68:	4a10      	ldr	r2, [pc, #64]	; (8004fac <HAL_GPIO_Init+0x320>)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3301      	adds	r3, #1
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	f67f ae96 	bls.w	8004ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3724      	adds	r7, #36	; 0x24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40013c00 	.word	0x40013c00

08004fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e001      	b.n	8004fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	807b      	strh	r3, [r7, #2]
 8004fec:	4613      	mov	r3, r2
 8004fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ff0:	787b      	ldrb	r3, [r7, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ffc:	e003      	b.n	8005006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	041a      	lsls	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	619a      	str	r2, [r3, #24]
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	887b      	ldrh	r3, [r7, #2]
 8005024:	401a      	ands	r2, r3
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	429a      	cmp	r2, r3
 800502a:	d104      	bne.n	8005036 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	041a      	lsls	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005034:	e002      	b.n	800503c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d006      	beq.n	800506c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800505e:	4a05      	ldr	r2, [pc, #20]	; (8005074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f806 	bl	8005078 <HAL_GPIO_EXTI_Callback>
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40013c00 	.word	0x40013c00

08005078 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800508e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005090:	b08f      	sub	sp, #60	; 0x3c
 8005092:	af0a      	add	r7, sp, #40	; 0x28
 8005094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e054      	b.n	800514a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f00c f8fa 	bl	80112b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2203      	movs	r2, #3
 80050c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f006 f818 	bl	800b114 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	687e      	ldr	r6, [r7, #4]
 80050ec:	466d      	mov	r5, sp
 80050ee:	f106 0410 	add.w	r4, r6, #16
 80050f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005102:	1d33      	adds	r3, r6, #4
 8005104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005106:	6838      	ldr	r0, [r7, #0]
 8005108:	f005 ff92 	bl	800b030 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2101      	movs	r1, #1
 8005112:	4618      	mov	r0, r3
 8005114:	f006 f80f 	bl	800b136 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	687e      	ldr	r6, [r7, #4]
 8005120:	466d      	mov	r5, sp
 8005122:	f106 0410 	add.w	r4, r6, #16
 8005126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800512a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800512c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800512e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005132:	e885 0003 	stmia.w	r5, {r0, r1}
 8005136:	1d33      	adds	r3, r6, #4
 8005138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f006 f922 	bl	800b384 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005152 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005152:	b590      	push	{r4, r7, lr}
 8005154:	b089      	sub	sp, #36	; 0x24
 8005156:	af04      	add	r7, sp, #16
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	4608      	mov	r0, r1
 800515c:	4611      	mov	r1, r2
 800515e:	461a      	mov	r2, r3
 8005160:	4603      	mov	r3, r0
 8005162:	70fb      	strb	r3, [r7, #3]
 8005164:	460b      	mov	r3, r1
 8005166:	70bb      	strb	r3, [r7, #2]
 8005168:	4613      	mov	r3, r2
 800516a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_HCD_HC_Init+0x28>
 8005176:	2302      	movs	r3, #2
 8005178:	e07f      	b.n	800527a <HAL_HCD_HC_Init+0x128>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	333d      	adds	r3, #61	; 0x3d
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	3338      	adds	r3, #56	; 0x38
 80051a6:	787a      	ldrb	r2, [r7, #1]
 80051a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	3340      	adds	r3, #64	; 0x40
 80051ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80051bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	3339      	adds	r3, #57	; 0x39
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	333f      	adds	r3, #63	; 0x3f
 80051e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80051e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	78bb      	ldrb	r3, [r7, #2]
 80051ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f0:	b2d8      	uxtb	r0, r3
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	333a      	adds	r3, #58	; 0x3a
 8005200:	4602      	mov	r2, r0
 8005202:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005208:	2b00      	cmp	r3, #0
 800520a:	da0a      	bge.n	8005222 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	333b      	adds	r3, #59	; 0x3b
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e009      	b.n	8005236 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	333b      	adds	r3, #59	; 0x3b
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	333c      	adds	r3, #60	; 0x3c
 8005246:	f897 2020 	ldrb.w	r2, [r7, #32]
 800524a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	787c      	ldrb	r4, [r7, #1]
 8005252:	78ba      	ldrb	r2, [r7, #2]
 8005254:	78f9      	ldrb	r1, [r7, #3]
 8005256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005258:	9302      	str	r3, [sp, #8]
 800525a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	4623      	mov	r3, r4
 8005268:	f006 fa08 	bl	800b67c <USB_HC_Init>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}

08005282 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_HCD_HC_Halt+0x1e>
 800529c:	2302      	movs	r3, #2
 800529e:	e00f      	b.n	80052c0 <HAL_HCD_HC_Halt+0x3e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f006 fc44 	bl	800bb3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	70fb      	strb	r3, [r7, #3]
 80052da:	460b      	mov	r3, r1
 80052dc:	70bb      	strb	r3, [r7, #2]
 80052de:	4613      	mov	r3, r2
 80052e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	333b      	adds	r3, #59	; 0x3b
 80052f2:	78ba      	ldrb	r2, [r7, #2]
 80052f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	333f      	adds	r3, #63	; 0x3f
 8005306:	787a      	ldrb	r2, [r7, #1]
 8005308:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800530a:	7c3b      	ldrb	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d114      	bne.n	800533a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	440b      	add	r3, r1
 800531e:	3342      	adds	r3, #66	; 0x42
 8005320:	2203      	movs	r2, #3
 8005322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	440b      	add	r3, r1
 8005332:	333d      	adds	r3, #61	; 0x3d
 8005334:	7f3a      	ldrb	r2, [r7, #28]
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e009      	b.n	800534e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	440b      	add	r3, r1
 8005348:	3342      	adds	r3, #66	; 0x42
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800534e:	787b      	ldrb	r3, [r7, #1]
 8005350:	2b03      	cmp	r3, #3
 8005352:	f200 80d6 	bhi.w	8005502 <HAL_HCD_HC_SubmitRequest+0x23a>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_HCD_HC_SubmitRequest+0x94>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800536d 	.word	0x0800536d
 8005360:	080054ed 	.word	0x080054ed
 8005364:	080053d9 	.word	0x080053d9
 8005368:	08005463 	.word	0x08005463
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800536c:	7c3b      	ldrb	r3, [r7, #16]
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 80c9 	bne.w	8005506 <HAL_HCD_HC_SubmitRequest+0x23e>
 8005374:	78bb      	ldrb	r3, [r7, #2]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 80c5 	bne.w	8005506 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800537c:	8b3b      	ldrh	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	3351      	adds	r3, #81	; 0x51
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	3351      	adds	r3, #81	; 0x51
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	3342      	adds	r3, #66	; 0x42
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80053c0:	e0a1      	b.n	8005506 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	3342      	adds	r3, #66	; 0x42
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e096      	b.n	8005506 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80053d8:	78bb      	ldrb	r3, [r7, #2]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d120      	bne.n	8005420 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	3351      	adds	r3, #81	; 0x51
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	3342      	adds	r3, #66	; 0x42
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005408:	e07e      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	440b      	add	r3, r1
 8005418:	3342      	adds	r3, #66	; 0x42
 800541a:	2202      	movs	r2, #2
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	e073      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	3350      	adds	r3, #80	; 0x50
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3342      	adds	r3, #66	; 0x42
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
      break;
 800544a:	e05d      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	3342      	adds	r3, #66	; 0x42
 800545c:	2202      	movs	r2, #2
 800545e:	701a      	strb	r2, [r3, #0]
      break;
 8005460:	e052      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005462:	78bb      	ldrb	r3, [r7, #2]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d120      	bne.n	80054aa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	440b      	add	r3, r1
 8005476:	3351      	adds	r3, #81	; 0x51
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	440b      	add	r3, r1
 800548c:	3342      	adds	r3, #66	; 0x42
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005492:	e039      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3342      	adds	r3, #66	; 0x42
 80054a4:	2202      	movs	r2, #2
 80054a6:	701a      	strb	r2, [r3, #0]
      break;
 80054a8:	e02e      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3350      	adds	r3, #80	; 0x50
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	3342      	adds	r3, #66	; 0x42
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
      break;
 80054d4:	e018      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	3342      	adds	r3, #66	; 0x42
 80054e6:	2202      	movs	r2, #2
 80054e8:	701a      	strb	r2, [r3, #0]
      break;
 80054ea:	e00d      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	440b      	add	r3, r1
 80054fa:	3342      	adds	r3, #66	; 0x42
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
      break;
 8005500:	e002      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005506:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	440b      	add	r3, r1
 8005516:	3344      	adds	r3, #68	; 0x44
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	8b39      	ldrh	r1, [r7, #24]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4403      	add	r3, r0
 800552c:	3348      	adds	r3, #72	; 0x48
 800552e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	440b      	add	r3, r1
 800553e:	335c      	adds	r3, #92	; 0x5c
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	440b      	add	r3, r1
 8005552:	334c      	adds	r3, #76	; 0x4c
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	3339      	adds	r3, #57	; 0x39
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	440b      	add	r3, r1
 800557a:	335d      	adds	r3, #93	; 0x5d
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	3338      	adds	r3, #56	; 0x38
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	18d1      	adds	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	f006 f978 	bl	800b890 <USB_HC_StartXfer>
 80055a0:	4603      	mov	r3, r0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop

080055ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 fe9b 	bl	800b2fe <USB_GetMode>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	f040 80ef 	bne.w	80057ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f005 fe7f 	bl	800b2d8 <USB_ReadInterrupts>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80e5 	beq.w	80057ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f005 fe76 	bl	800b2d8 <USB_ReadInterrupts>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f6:	d104      	bne.n	8005602 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fe66 	bl	800b2d8 <USB_ReadInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005616:	d104      	bne.n	8005622 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f005 fe56 	bl	800b2d8 <USB_ReadInterrupts>
 800562c:	4603      	mov	r3, r0
 800562e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005636:	d104      	bne.n	8005642 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005640:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f005 fe46 	bl	800b2d8 <USB_ReadInterrupts>
 800564c:	4603      	mov	r3, r0
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2202      	movs	r2, #2
 800565c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f005 fe38 	bl	800b2d8 <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005672:	d115      	bne.n	80056a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800567c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f00b fe8e 	bl	80113b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f005 ff28 	bl	800b4f0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f005 fe17 	bl	800b2d8 <USB_ReadInterrupts>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b4:	d102      	bne.n	80056bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 f966 	bl	8006988 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f005 fe09 	bl	800b2d8 <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d106      	bne.n	80056de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f00b fe51 	bl	8011378 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2208      	movs	r2, #8
 80056dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f005 fdf8 	bl	800b2d8 <USB_ReadInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f2:	d138      	bne.n	8005766 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f006 fa0f 	bl	800bb1c <USB_HC_ReadInterrupt>
 80056fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e025      	b.n	8005752 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005730:	d106      	bne.n	8005740 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8cf 	bl	80058dc <HCD_HC_IN_IRQHandler>
 800573e:	e005      	b.n	800574c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fcfd 	bl	8006146 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3301      	adds	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3d4      	bcc.n	8005706 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f005 fdb4 	bl	800b2d8 <USB_ReadInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d101      	bne.n	800577e <HAL_HCD_IRQHandler+0x1d2>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_HCD_IRQHandler+0x1d4>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0210 	bic.w	r2, r2, #16
 8005792:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 f84b 	bl	8006830 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0210 	orr.w	r2, r2, #16
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	e000      	b.n	80057ae <HAL_HCD_IRQHandler+0x202>
      return;
 80057ac:	bf00      	nop
    }
  }
}
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_HCD_Start+0x16>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e013      	b.n	80057f2 <HAL_HCD_Start+0x3e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f005 fc8b 	bl	800b0f2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f005 fee8 	bl	800b5b8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_HCD_Stop+0x16>
 800580c:	2302      	movs	r3, #2
 800580e:	e00d      	b.n	800582c <HAL_HCD_Stop+0x32>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f006 fac9 	bl	800bdb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f005 fe8f 	bl	800b564 <USB_ResetPort>
 8005846:	4603      	mov	r3, r0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	335c      	adds	r3, #92	; 0x5c
 800586c:	781b      	ldrb	r3, [r3, #0]
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	334c      	adds	r3, #76	; 0x4c
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f005 fed1 	bl	800b658 <USB_GetCurrentFrame>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f005 feac 	bl	800b62a <USB_GetHostSpeed>
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b04      	cmp	r3, #4
 800590a:	d119      	bne.n	8005940 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	461a      	mov	r2, r3
 800591a:	2304      	movs	r3, #4
 800591c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	440a      	add	r2, r1
 8005934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	60d3      	str	r3, [r2, #12]
 800593e:	e0ce      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d12c      	bne.n	80059b2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	461a      	mov	r2, r3
 8005966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	440b      	add	r3, r1
 800597a:	335d      	adds	r3, #93	; 0x5d
 800597c:	2207      	movs	r2, #7
 800597e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	440a      	add	r2, r1
 8005996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f006 f8c7 	bl	800bb3e <USB_HC_Halt>
 80059b0:	e095      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d109      	bne.n	80059dc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	461a      	mov	r2, r3
 80059d6:	2320      	movs	r3, #32
 80059d8:	6093      	str	r3, [r2, #8]
 80059da:	e080      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d134      	bne.n	8005a5c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	440b      	add	r3, r1
 8005a20:	335d      	adds	r3, #93	; 0x5d
 8005a22:	2205      	movs	r2, #5
 8005a24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	461a      	mov	r2, r3
 8005a34:	2310      	movs	r3, #16
 8005a36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a44:	461a      	mov	r2, r3
 8005a46:	2308      	movs	r3, #8
 8005a48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f006 f872 	bl	800bb3e <USB_HC_Halt>
 8005a5a:	e040      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d134      	bne.n	8005ade <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8e:	f043 0302 	orr.w	r3, r3, #2
 8005a92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f006 f84d 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	335d      	adds	r3, #93	; 0x5d
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005adc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af4:	d122      	bne.n	8005b3c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f006 f80c 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b32:	461a      	mov	r2, r3
 8005b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b38:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005b3a:	e300      	b.n	800613e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f040 80fd 	bne.w	8005d4e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	440b      	add	r3, r1
 8005b6a:	3348      	adds	r3, #72	; 0x48
 8005b6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	0159      	lsls	r1, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	440b      	add	r3, r1
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005b80:	1ad1      	subs	r1, r2, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4403      	add	r3, r0
 8005b90:	334c      	adds	r3, #76	; 0x4c
 8005b92:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	335d      	adds	r3, #93	; 0x5d
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3358      	adds	r3, #88	; 0x58
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2301      	movs	r3, #1
 8005bcc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	333f      	adds	r3, #63	; 0x3f
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	333f      	adds	r3, #63	; 0x3f
 8005bf4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d121      	bne.n	8005c3e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f005 ff8a 	bl	800bb3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	2310      	movs	r3, #16
 8005c3a:	6093      	str	r3, [r2, #8]
 8005c3c:	e070      	b.n	8005d20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	440b      	add	r3, r1
 8005c4c:	333f      	adds	r3, #63	; 0x3f
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d12a      	bne.n	8005caa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c72:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	335c      	adds	r3, #92	; 0x5c
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	b2d8      	uxtb	r0, r3
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	440b      	add	r3, r1
 8005c9a:	335c      	adds	r3, #92	; 0x5c
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f00b fb92 	bl	80113cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ca8:	e03a      	b.n	8005d20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	440b      	add	r3, r1
 8005cb8:	333f      	adds	r3, #63	; 0x3f
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d12f      	bne.n	8005d20 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	440b      	add	r3, r1
 8005cce:	335c      	adds	r3, #92	; 0x5c
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3350      	adds	r3, #80	; 0x50
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f083 0301 	eor.w	r3, r3, #1
 8005cea:	b2d8      	uxtb	r0, r3
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3350      	adds	r3, #80	; 0x50
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	b2d8      	uxtb	r0, r3
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	335c      	adds	r3, #92	; 0x5c
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	4601      	mov	r1, r0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f00b fb56 	bl	80113cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3350      	adds	r3, #80	; 0x50
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2d8      	uxtb	r0, r3
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	3350      	adds	r3, #80	; 0x50
 8005d48:	4602      	mov	r2, r0
 8005d4a:	701a      	strb	r2, [r3, #0]
}
 8005d4c:	e1f7      	b.n	800613e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f040 811a 	bne.w	8005f9a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f023 0302 	bic.w	r3, r3, #2
 8005d84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	335d      	adds	r3, #93	; 0x5d
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d10a      	bne.n	8005db2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	335c      	adds	r3, #92	; 0x5c
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e0d9      	b.n	8005f66 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	335d      	adds	r3, #93	; 0x5d
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b05      	cmp	r3, #5
 8005dc6:	d10a      	bne.n	8005dde <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	335c      	adds	r3, #92	; 0x5c
 8005dd8:	2205      	movs	r2, #5
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e0c3      	b.n	8005f66 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	335d      	adds	r3, #93	; 0x5d
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d00a      	beq.n	8005e0a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	440b      	add	r3, r1
 8005e02:	335d      	adds	r3, #93	; 0x5d
 8005e04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d156      	bne.n	8005eb8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	3358      	adds	r3, #88	; 0x58
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4403      	add	r3, r0
 8005e2c:	3358      	adds	r3, #88	; 0x58
 8005e2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3358      	adds	r3, #88	; 0x58
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d914      	bls.n	8005e70 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	440b      	add	r3, r1
 8005e54:	3358      	adds	r3, #88	; 0x58
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	335c      	adds	r3, #92	; 0x5c
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e009      	b.n	8005e84 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	335c      	adds	r3, #92	; 0x5c
 8005e80:	2202      	movs	r2, #2
 8005e82:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e9a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e056      	b.n	8005f66 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	335d      	adds	r3, #93	; 0x5d
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d123      	bne.n	8005f16 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	335c      	adds	r3, #92	; 0x5c
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e027      	b.n	8005f66 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	335d      	adds	r3, #93	; 0x5d
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d11c      	bne.n	8005f66 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	3358      	adds	r3, #88	; 0x58
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4403      	add	r3, r0
 8005f4e:	3358      	adds	r3, #88	; 0x58
 8005f50:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	440b      	add	r3, r1
 8005f60:	335c      	adds	r3, #92	; 0x5c
 8005f62:	2204      	movs	r2, #4
 8005f64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	461a      	mov	r2, r3
 8005f74:	2302      	movs	r3, #2
 8005f76:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	b2d8      	uxtb	r0, r3
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	335c      	adds	r3, #92	; 0x5c
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4601      	mov	r1, r0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f00b fa1a 	bl	80113cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005f98:	e0d1      	b.n	800613e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d13e      	bne.n	800602e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fca:	f043 0302 	orr.w	r3, r3, #2
 8005fce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	3358      	adds	r3, #88	; 0x58
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4403      	add	r3, r0
 8005ff2:	3358      	adds	r3, #88	; 0x58
 8005ff4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	440b      	add	r3, r1
 8006004:	335d      	adds	r3, #93	; 0x5d
 8006006:	2206      	movs	r2, #6
 8006008:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f005 fd92 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	6093      	str	r3, [r2, #8]
}
 800602c:	e087      	b.n	800613e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b10      	cmp	r3, #16
 8006042:	d17c      	bne.n	800613e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	440b      	add	r3, r1
 8006052:	333f      	adds	r3, #63	; 0x3f
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d122      	bne.n	80060a0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	3358      	adds	r3, #88	; 0x58
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	440a      	add	r2, r1
 8006084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006088:	f043 0302 	orr.w	r3, r3, #2
 800608c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f005 fd50 	bl	800bb3e <USB_HC_Halt>
 800609e:	e045      	b.n	800612c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	440b      	add	r3, r1
 80060ae:	333f      	adds	r3, #63	; 0x3f
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	440b      	add	r3, r1
 80060c4:	333f      	adds	r3, #63	; 0x3f
 80060c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d12f      	bne.n	800612c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	440b      	add	r3, r1
 80060da:	3358      	adds	r3, #88	; 0x58
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d121      	bne.n	800612c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	440b      	add	r3, r1
 80060f6:	335d      	adds	r3, #93	; 0x5d
 80060f8:	2203      	movs	r2, #3
 80060fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	440a      	add	r2, r1
 8006112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006116:	f043 0302 	orr.w	r3, r3, #2
 800611a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f005 fd09 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006138:	461a      	mov	r2, r3
 800613a:	2310      	movs	r3, #16
 800613c:	6093      	str	r3, [r2, #8]
}
 800613e:	bf00      	nop
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d119      	bne.n	80061aa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	461a      	mov	r2, r3
 8006184:	2304      	movs	r3, #4
 8006186:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	440a      	add	r2, r1
 800619e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a2:	f043 0302 	orr.w	r3, r3, #2
 80061a6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80061a8:	e33e      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d141      	bne.n	8006244 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	461a      	mov	r2, r3
 80061ce:	2320      	movs	r3, #32
 80061d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	440b      	add	r3, r1
 80061e0:	333d      	adds	r3, #61	; 0x3d
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 831f 	bne.w	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	440b      	add	r3, r1
 80061f8:	333d      	adds	r3, #61	; 0x3d
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	335c      	adds	r3, #92	; 0x5c
 800620e:	2202      	movs	r2, #2
 8006210:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	440a      	add	r2, r1
 8006228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f005 fc7e 	bl	800bb3e <USB_HC_Halt>
}
 8006242:	e2f1      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d13f      	bne.n	80062da <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	335d      	adds	r3, #93	; 0x5d
 800626a:	2204      	movs	r2, #4
 800626c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	440b      	add	r3, r1
 800627c:	333d      	adds	r3, #61	; 0x3d
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	440b      	add	r3, r1
 8006290:	3358      	adds	r3, #88	; 0x58
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b0:	f043 0302 	orr.w	r3, r3, #2
 80062b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	4611      	mov	r1, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f005 fc3c 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	461a      	mov	r2, r3
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	6093      	str	r3, [r2, #8]
}
 80062d8:	e2a6      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f0:	d122      	bne.n	8006338 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	4611      	mov	r1, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f005 fc0e 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	461a      	mov	r2, r3
 8006330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006334:	6093      	str	r3, [r2, #8]
}
 8006336:	e277      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d135      	bne.n	80063ba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	440b      	add	r3, r1
 800635c:	3358      	adds	r3, #88	; 0x58
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	440a      	add	r2, r1
 8006378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f005 fbd6 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	461a      	mov	r2, r3
 80063a0:	2301      	movs	r3, #1
 80063a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	440b      	add	r3, r1
 80063b2:	335d      	adds	r3, #93	; 0x5d
 80063b4:	2201      	movs	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
}
 80063b8:	e236      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d12b      	bne.n	8006428 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	461a      	mov	r2, r3
 80063de:	2308      	movs	r3, #8
 80063e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f005 fb96 	bl	800bb3e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	440b      	add	r3, r1
 8006420:	335d      	adds	r3, #93	; 0x5d
 8006422:	2205      	movs	r2, #5
 8006424:	701a      	strb	r2, [r3, #0]
}
 8006426:	e1ff      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d155      	bne.n	80064ea <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	440b      	add	r3, r1
 800644c:	3358      	adds	r3, #88	; 0x58
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	440b      	add	r3, r1
 8006460:	335d      	adds	r3, #93	; 0x5d
 8006462:	2203      	movs	r2, #3
 8006464:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	333d      	adds	r3, #61	; 0x3d
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d114      	bne.n	80064a6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	440b      	add	r3, r1
 800648a:	333c      	adds	r3, #60	; 0x3c
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	440b      	add	r3, r1
 80064a0:	333d      	adds	r3, #61	; 0x3d
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f005 fb34 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	461a      	mov	r2, r3
 80064e4:	2310      	movs	r3, #16
 80064e6:	6093      	str	r3, [r2, #8]
}
 80064e8:	e19e      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d12b      	bne.n	8006558 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	440a      	add	r2, r1
 8006516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651a:	f043 0302 	orr.w	r3, r3, #2
 800651e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f005 fb07 	bl	800bb3e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	440b      	add	r3, r1
 800653e:	335d      	adds	r3, #93	; 0x5d
 8006540:	2206      	movs	r2, #6
 8006542:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	461a      	mov	r2, r3
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	6093      	str	r3, [r2, #8]
}
 8006556:	e167      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656e:	d135      	bne.n	80065dc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	440a      	add	r2, r1
 8006586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f005 facf 	bl	800bb3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ac:	461a      	mov	r2, r3
 80065ae:	2310      	movs	r3, #16
 80065b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	461a      	mov	r2, r3
 80065c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	335d      	adds	r3, #93	; 0x5d
 80065d6:	2208      	movs	r2, #8
 80065d8:	701a      	strb	r2, [r3, #0]
}
 80065da:	e125      	b.n	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	f040 811a 	bne.w	8006828 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f023 0302 	bic.w	r3, r3, #2
 8006612:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	440b      	add	r3, r1
 8006622:	335d      	adds	r3, #93	; 0x5d
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d137      	bne.n	800669a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	440b      	add	r3, r1
 8006638:	335c      	adds	r3, #92	; 0x5c
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	440b      	add	r3, r1
 800664c:	333f      	adds	r3, #63	; 0x3f
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d00b      	beq.n	800666c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	440b      	add	r3, r1
 8006662:	333f      	adds	r3, #63	; 0x3f
 8006664:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006666:	2b03      	cmp	r3, #3
 8006668:	f040 80c5 	bne.w	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	440b      	add	r3, r1
 800667a:	3351      	adds	r3, #81	; 0x51
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2d8      	uxtb	r0, r3
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	440b      	add	r3, r1
 8006692:	3351      	adds	r3, #81	; 0x51
 8006694:	4602      	mov	r2, r0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e0ad      	b.n	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	440b      	add	r3, r1
 80066a8:	335d      	adds	r3, #93	; 0x5d
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d10a      	bne.n	80066c6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	440b      	add	r3, r1
 80066be:	335c      	adds	r3, #92	; 0x5c
 80066c0:	2202      	movs	r2, #2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e097      	b.n	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	440b      	add	r3, r1
 80066d4:	335d      	adds	r3, #93	; 0x5d
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d10a      	bne.n	80066f2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	440b      	add	r3, r1
 80066ea:	335c      	adds	r3, #92	; 0x5c
 80066ec:	2202      	movs	r2, #2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e081      	b.n	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	440b      	add	r3, r1
 8006700:	335d      	adds	r3, #93	; 0x5d
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d10a      	bne.n	800671e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	440b      	add	r3, r1
 8006716:	335c      	adds	r3, #92	; 0x5c
 8006718:	2205      	movs	r2, #5
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e06b      	b.n	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	335d      	adds	r3, #93	; 0x5d
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d00a      	beq.n	800674a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	440b      	add	r3, r1
 8006742:	335d      	adds	r3, #93	; 0x5d
 8006744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006746:	2b08      	cmp	r3, #8
 8006748:	d155      	bne.n	80067f6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	3358      	adds	r3, #88	; 0x58
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4403      	add	r3, r0
 800676c:	3358      	adds	r3, #88	; 0x58
 800676e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	440b      	add	r3, r1
 800677e:	3358      	adds	r3, #88	; 0x58
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b03      	cmp	r3, #3
 8006784:	d914      	bls.n	80067b0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	440b      	add	r3, r1
 8006794:	3358      	adds	r3, #88	; 0x58
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	440b      	add	r3, r1
 80067a8:	335c      	adds	r3, #92	; 0x5c
 80067aa:	2204      	movs	r2, #4
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e009      	b.n	80067c4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	440b      	add	r3, r1
 80067be:	335c      	adds	r3, #92	; 0x5c
 80067c0:	2202      	movs	r2, #2
 80067c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	461a      	mov	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	461a      	mov	r2, r3
 8006804:	2302      	movs	r3, #2
 8006806:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	b2d8      	uxtb	r0, r3
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	440b      	add	r3, r1
 800681a:	335c      	adds	r3, #92	; 0x5c
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	4601      	mov	r1, r0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f00a fdd2 	bl	80113cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	0c5b      	lsrs	r3, r3, #17
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006864:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d003      	beq.n	8006874 <HCD_RXQLVL_IRQHandler+0x44>
 800686c:	2b05      	cmp	r3, #5
 800686e:	f000 8082 	beq.w	8006976 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006872:	e083      	b.n	800697c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d07f      	beq.n	800697a <HCD_RXQLVL_IRQHandler+0x14a>
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	440b      	add	r3, r1
 8006888:	3344      	adds	r3, #68	; 0x44
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d074      	beq.n	800697a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	440b      	add	r3, r1
 80068a2:	3344      	adds	r3, #68	; 0x44
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	b292      	uxth	r2, r2
 80068aa:	4619      	mov	r1, r3
 80068ac:	f004 fceb 	bl	800b286 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	440b      	add	r3, r1
 80068be:	3344      	adds	r3, #68	; 0x44
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	18d1      	adds	r1, r2, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4403      	add	r3, r0
 80068d4:	3344      	adds	r3, #68	; 0x44
 80068d6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	440b      	add	r3, r1
 80068e6:	334c      	adds	r3, #76	; 0x4c
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	18d1      	adds	r1, r2, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	4403      	add	r3, r0
 80068fc:	334c      	adds	r3, #76	; 0x4c
 80068fe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <HCD_RXQLVL_IRQHandler+0x154>)
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d031      	beq.n	800697a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800692c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006934:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	461a      	mov	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	440b      	add	r3, r1
 8006956:	3350      	adds	r3, #80	; 0x50
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2d8      	uxtb	r0, r3
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	440b      	add	r3, r1
 800696e:	3350      	adds	r3, #80	; 0x50
 8006970:	4602      	mov	r2, r0
 8006972:	701a      	strb	r2, [r3, #0]
      break;
 8006974:	e001      	b.n	800697a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800697a:	bf00      	nop
  }
}
 800697c:	bf00      	nop
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	1ff80000 	.word	0x1ff80000

08006988 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80069b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d10b      	bne.n	80069d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f00a fce2 	bl	8011394 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f043 0302 	orr.w	r3, r3, #2
 80069d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d132      	bne.n	8006a48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f043 0308 	orr.w	r3, r3, #8
 80069e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d126      	bne.n	8006a42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d113      	bne.n	8006a24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a06:	d106      	bne.n	8006a16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f004 fd6e 	bl	800b4f0 <USB_InitFSLSPClkSel>
 8006a14:	e011      	b.n	8006a3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f004 fd67 	bl	800b4f0 <USB_InitFSLSPClkSel>
 8006a22:	e00a      	b.n	8006a3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d106      	bne.n	8006a3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a32:	461a      	mov	r2, r3
 8006a34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006a38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f00a fcd8 	bl	80113f0 <HAL_HCD_PortEnabled_Callback>
 8006a40:	e002      	b.n	8006a48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f00a fce2 	bl	801140c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d103      	bne.n	8006a5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f043 0320 	orr.w	r3, r3, #32
 8006a58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e11f      	b.n	8006cc2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb fb16 	bl	80020c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2224      	movs	r2, #36	; 0x24
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f001 f80e 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 8006ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a7b      	ldr	r2, [pc, #492]	; (8006ccc <HAL_I2C_Init+0x25c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d807      	bhi.n	8006af4 <HAL_I2C_Init+0x84>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a7a      	ldr	r2, [pc, #488]	; (8006cd0 <HAL_I2C_Init+0x260>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bf94      	ite	ls
 8006aec:	2301      	movls	r3, #1
 8006aee:	2300      	movhi	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e006      	b.n	8006b02 <HAL_I2C_Init+0x92>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a77      	ldr	r2, [pc, #476]	; (8006cd4 <HAL_I2C_Init+0x264>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf94      	ite	ls
 8006afc:	2301      	movls	r3, #1
 8006afe:	2300      	movhi	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0db      	b.n	8006cc2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a72      	ldr	r2, [pc, #456]	; (8006cd8 <HAL_I2C_Init+0x268>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0c9b      	lsrs	r3, r3, #18
 8006b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a64      	ldr	r2, [pc, #400]	; (8006ccc <HAL_I2C_Init+0x25c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <HAL_I2C_Init+0xd4>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3301      	adds	r3, #1
 8006b42:	e009      	b.n	8006b58 <HAL_I2C_Init+0xe8>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	4a63      	ldr	r2, [pc, #396]	; (8006cdc <HAL_I2C_Init+0x26c>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	099b      	lsrs	r3, r3, #6
 8006b56:	3301      	adds	r3, #1
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4956      	ldr	r1, [pc, #344]	; (8006ccc <HAL_I2C_Init+0x25c>)
 8006b74:	428b      	cmp	r3, r1
 8006b76:	d80d      	bhi.n	8006b94 <HAL_I2C_Init+0x124>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1e59      	subs	r1, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b86:	3301      	adds	r3, #1
 8006b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf38      	it	cc
 8006b90:	2304      	movcc	r3, #4
 8006b92:	e04f      	b.n	8006c34 <HAL_I2C_Init+0x1c4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d111      	bne.n	8006bc0 <HAL_I2C_Init+0x150>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1e58      	subs	r0, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	440b      	add	r3, r1
 8006baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2301      	moveq	r3, #1
 8006bba:	2300      	movne	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	e012      	b.n	8006be6 <HAL_I2C_Init+0x176>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1e58      	subs	r0, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	0099      	lsls	r1, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_I2C_Init+0x17e>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e022      	b.n	8006c34 <HAL_I2C_Init+0x1c4>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10e      	bne.n	8006c14 <HAL_I2C_Init+0x1a4>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1e58      	subs	r0, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6859      	ldr	r1, [r3, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	440b      	add	r3, r1
 8006c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c12:	e00f      	b.n	8006c34 <HAL_I2C_Init+0x1c4>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	1e58      	subs	r0, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6859      	ldr	r1, [r3, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	0099      	lsls	r1, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	6809      	ldr	r1, [r1, #0]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6911      	ldr	r1, [r2, #16]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68d2      	ldr	r2, [r2, #12]
 8006c6e:	4311      	orrs	r1, r2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	000186a0 	.word	0x000186a0
 8006cd0:	001e847f 	.word	0x001e847f
 8006cd4:	003d08ff 	.word	0x003d08ff
 8006cd8:	431bde83 	.word	0x431bde83
 8006cdc:	10624dd3 	.word	0x10624dd3

08006ce0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e154      	b.n	8006f9c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a98      	ldr	r2, [pc, #608]	; (8006f6c <HAL_I2S_Init+0x28c>)
 8006d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fb fa23 	bl	8002158 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d28:	f023 030f 	bic.w	r3, r3, #15
 8006d2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2202      	movs	r2, #2
 8006d34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d06f      	beq.n	8006e1e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d102      	bne.n	8006d4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006d46:	2310      	movs	r3, #16
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e001      	b.n	8006d50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d802      	bhi.n	8006d5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a83      	ldr	r2, [pc, #524]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_I2S_Init+0x92>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a81      	ldr	r2, [pc, #516]	; (8006f74 <HAL_I2S_Init+0x294>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d104      	bne.n	8006d7c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006d72:	2001      	movs	r0, #1
 8006d74:	f001 f9a4 	bl	80080c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	e003      	b.n	8006d84 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006d7c:	2002      	movs	r0, #2
 8006d7e:	f001 f99f 	bl	80080c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d82:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d125      	bne.n	8006dda <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	461a      	mov	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	3305      	adds	r3, #5
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e01f      	b.n	8006df8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	3305      	adds	r3, #5
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	e00e      	b.n	8006df8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	3305      	adds	r3, #5
 8006df6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4a5f      	ldr	r2, [pc, #380]	; (8006f78 <HAL_I2S_Init+0x298>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	085b      	lsrs	r3, r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	e003      	b.n	8006e26 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d902      	bls.n	8006e32 <HAL_I2S_Init+0x152>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2bff      	cmp	r3, #255	; 0xff
 8006e30:	d907      	bls.n	8006e42 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	f043 0210 	orr.w	r2, r3, #16
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e0ac      	b.n	8006f9c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	ea42 0103 	orr.w	r1, r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e60:	f023 030f 	bic.w	r3, r3, #15
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6851      	ldr	r1, [r2, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6892      	ldr	r2, [r2, #8]
 8006e6c:	4311      	orrs	r1, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68d2      	ldr	r2, [r2, #12]
 8006e72:	4311      	orrs	r1, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6992      	ldr	r2, [r2, #24]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e84:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b30      	cmp	r3, #48	; 0x30
 8006e8c:	d003      	beq.n	8006e96 <HAL_I2S_Init+0x1b6>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2bb0      	cmp	r3, #176	; 0xb0
 8006e94:	d107      	bne.n	8006ea6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ea4:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d16e      	bne.n	8006f8c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a32      	ldr	r2, [pc, #200]	; (8006f7c <HAL_I2S_Init+0x29c>)
 8006eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2d      	ldr	r2, [pc, #180]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <HAL_I2S_Init+0x1e2>
 8006ebe:	4b30      	ldr	r3, [pc, #192]	; (8006f80 <HAL_I2S_Init+0x2a0>)
 8006ec0:	e001      	b.n	8006ec6 <HAL_I2S_Init+0x1e6>
 8006ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	4928      	ldr	r1, [pc, #160]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006ece:	428a      	cmp	r2, r1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2S_Init+0x1f6>
 8006ed2:	4a2b      	ldr	r2, [pc, #172]	; (8006f80 <HAL_I2S_Init+0x2a0>)
 8006ed4:	e001      	b.n	8006eda <HAL_I2S_Init+0x1fa>
 8006ed6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006eda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ede:	f023 030f 	bic.w	r3, r3, #15
 8006ee2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d101      	bne.n	8006ef2 <HAL_I2S_Init+0x212>
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_I2S_Init+0x2a0>)
 8006ef0:	e001      	b.n	8006ef6 <HAL_I2S_Init+0x216>
 8006ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1c      	ldr	r2, [pc, #112]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d101      	bne.n	8006f08 <HAL_I2S_Init+0x228>
 8006f04:	4b1e      	ldr	r3, [pc, #120]	; (8006f80 <HAL_I2S_Init+0x2a0>)
 8006f06:	e001      	b.n	8006f0c <HAL_I2S_Init+0x22c>
 8006f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f18:	d003      	beq.n	8006f22 <HAL_I2S_Init+0x242>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	e001      	b.n	8006f2e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	b299      	uxth	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006f44:	4303      	orrs	r3, r0
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	897b      	ldrh	r3, [r7, #10]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f5a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a03      	ldr	r2, [pc, #12]	; (8006f70 <HAL_I2S_Init+0x290>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10e      	bne.n	8006f84 <HAL_I2S_Init+0x2a4>
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <HAL_I2S_Init+0x2a0>)
 8006f68:	e00e      	b.n	8006f88 <HAL_I2S_Init+0x2a8>
 8006f6a:	bf00      	nop
 8006f6c:	0800705f 	.word	0x0800705f
 8006f70:	40003800 	.word	0x40003800
 8006f74:	40003c00 	.word	0x40003c00
 8006f78:	cccccccd 	.word	0xcccccccd
 8006f7c:	08007175 	.word	0x08007175
 8006f80:	40003400 	.word	0x40003400
 8006f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f88:	897a      	ldrh	r2, [r7, #10]
 8006f8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10e      	bne.n	8006ff8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fe8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fc faf8 	bl	80035e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	b292      	uxth	r2, r2
 8007014:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10e      	bne.n	8007056 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007046:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fc faeb 	bl	800362c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b04      	cmp	r3, #4
 8007078:	d13a      	bne.n	80070f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	d109      	bne.n	8007098 <I2S_IRQHandler+0x3a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b40      	cmp	r3, #64	; 0x40
 8007090:	d102      	bne.n	8007098 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff ffb4 	bl	8007000 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d126      	bne.n	80070f0 <I2S_IRQHandler+0x92>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d11f      	bne.n	80070f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	f043 0202 	orr.w	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc fa86 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d136      	bne.n	800716a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b02      	cmp	r3, #2
 8007104:	d109      	bne.n	800711a <I2S_IRQHandler+0xbc>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d102      	bne.n	800711a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff45 	bl	8006fa4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b08      	cmp	r3, #8
 8007122:	d122      	bne.n	800716a <I2S_IRQHandler+0x10c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b20      	cmp	r3, #32
 8007130:	d11b      	bne.n	800716a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007140:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fc fa49 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800716a:	bf00      	nop
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4aa2      	ldr	r2, [pc, #648]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800718e:	4ba2      	ldr	r3, [pc, #648]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007190:	e001      	b.n	8007196 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007192:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a9b      	ldr	r2, [pc, #620]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80071ac:	4b9a      	ldr	r3, [pc, #616]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071ae:	e001      	b.n	80071b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80071b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c0:	d004      	beq.n	80071cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 8099 	bne.w	80072fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d107      	bne.n	80071e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f925 	bl	8007430 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d107      	bne.n	8007200 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f9c8 	bl	8007590 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d13a      	bne.n	8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d035      	beq.n	8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a7e      	ldr	r2, [pc, #504]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800721e:	4b7e      	ldr	r3, [pc, #504]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007220:	e001      	b.n	8007226 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4979      	ldr	r1, [pc, #484]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800722e:	428b      	cmp	r3, r1
 8007230:	d101      	bne.n	8007236 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007232:	4b79      	ldr	r3, [pc, #484]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007234:	e001      	b.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800723a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800723e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800724e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007272:	f043 0202 	orr.w	r2, r3, #2
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fc f9be 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b08      	cmp	r3, #8
 8007288:	f040 80be 	bne.w	8007408 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80b8 	beq.w	8007408 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a59      	ldr	r2, [pc, #356]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d101      	bne.n	80072b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80072b2:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072b4:	e001      	b.n	80072ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80072b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4954      	ldr	r1, [pc, #336]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072c2:	428b      	cmp	r3, r1
 80072c4:	d101      	bne.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80072c6:	4b54      	ldr	r3, [pc, #336]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072c8:	e001      	b.n	80072ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80072ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072d4:	2300      	movs	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	60bb      	str	r3, [r7, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	f043 0204 	orr.w	r2, r3, #4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fc f980 	bl	80035fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072fc:	e084      	b.n	8007408 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d107      	bne.n	8007318 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8be 	bl	8007494 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b01      	cmp	r3, #1
 8007320:	d107      	bne.n	8007332 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f8fd 	bl	800752c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	d12f      	bne.n	800739c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d02a      	beq.n	800739c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007354:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2e      	ldr	r2, [pc, #184]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007360:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007362:	e001      	b.n	8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007364:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4929      	ldr	r1, [pc, #164]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007370:	428b      	cmp	r3, r1
 8007372:	d101      	bne.n	8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007374:	4b28      	ldr	r3, [pc, #160]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007376:	e001      	b.n	800737c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800737c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007380:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	f043 0202 	orr.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fc f930 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d131      	bne.n	800740a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d02c      	beq.n	800740a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a17      	ldr	r2, [pc, #92]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073bc:	e001      	b.n	80073c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80073be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4912      	ldr	r1, [pc, #72]	; (8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073ca:	428b      	cmp	r3, r1
 80073cc:	d101      	bne.n	80073d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073d0:	e001      	b.n	80073d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80073d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073ea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	f043 0204 	orr.w	r2, r3, #4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fc f8fb 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007406:	e000      	b.n	800740a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007408:	bf00      	nop
}
 800740a:	bf00      	nop
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40003800 	.word	0x40003800
 8007418:	40003400 	.word	0x40003400

0800741c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	1c99      	adds	r1, r3, #2
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6251      	str	r1, [r2, #36]	; 0x24
 8007442:	881a      	ldrh	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d113      	bne.n	800748a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007470:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ffc9 	bl	800741c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	1c99      	adds	r1, r3, #2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6251      	str	r1, [r2, #36]	; 0x24
 80074a6:	8819      	ldrh	r1, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <I2SEx_TxISR_I2SExt+0x90>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d101      	bne.n	80074b6 <I2SEx_TxISR_I2SExt+0x22>
 80074b2:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <I2SEx_TxISR_I2SExt+0x94>)
 80074b4:	e001      	b.n	80074ba <I2SEx_TxISR_I2SExt+0x26>
 80074b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074ba:	460a      	mov	r2, r1
 80074bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d121      	bne.n	800751a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a12      	ldr	r2, [pc, #72]	; (8007524 <I2SEx_TxISR_I2SExt+0x90>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d101      	bne.n	80074e4 <I2SEx_TxISR_I2SExt+0x50>
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <I2SEx_TxISR_I2SExt+0x94>)
 80074e2:	e001      	b.n	80074e8 <I2SEx_TxISR_I2SExt+0x54>
 80074e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	490d      	ldr	r1, [pc, #52]	; (8007524 <I2SEx_TxISR_I2SExt+0x90>)
 80074f0:	428b      	cmp	r3, r1
 80074f2:	d101      	bne.n	80074f8 <I2SEx_TxISR_I2SExt+0x64>
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <I2SEx_TxISR_I2SExt+0x94>)
 80074f6:	e001      	b.n	80074fc <I2SEx_TxISR_I2SExt+0x68>
 80074f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007500:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff81 	bl	800741c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40003800 	.word	0x40003800
 8007528:	40003400 	.word	0x40003400

0800752c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68d8      	ldr	r0, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	1c99      	adds	r1, r3, #2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007544:	b282      	uxth	r2, r0
 8007546:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d113      	bne.n	8007588 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800756e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ff4a 	bl	800741c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <I2SEx_RxISR_I2SExt+0x90>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <I2SEx_RxISR_I2SExt+0x16>
 80075a2:	4b20      	ldr	r3, [pc, #128]	; (8007624 <I2SEx_RxISR_I2SExt+0x94>)
 80075a4:	e001      	b.n	80075aa <I2SEx_RxISR_I2SExt+0x1a>
 80075a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075aa:	68d8      	ldr	r0, [r3, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	1c99      	adds	r1, r3, #2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80075b6:	b282      	uxth	r2, r0
 80075b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d121      	bne.n	8007616 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a12      	ldr	r2, [pc, #72]	; (8007620 <I2SEx_RxISR_I2SExt+0x90>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d101      	bne.n	80075e0 <I2SEx_RxISR_I2SExt+0x50>
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <I2SEx_RxISR_I2SExt+0x94>)
 80075de:	e001      	b.n	80075e4 <I2SEx_RxISR_I2SExt+0x54>
 80075e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	490d      	ldr	r1, [pc, #52]	; (8007620 <I2SEx_RxISR_I2SExt+0x90>)
 80075ec:	428b      	cmp	r3, r1
 80075ee:	d101      	bne.n	80075f4 <I2SEx_RxISR_I2SExt+0x64>
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <I2SEx_RxISR_I2SExt+0x94>)
 80075f2:	e001      	b.n	80075f8 <I2SEx_RxISR_I2SExt+0x68>
 80075f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ff03 	bl	800741c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40003800 	.word	0x40003800
 8007624:	40003400 	.word	0x40003400

08007628 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007630:	f7fc fc8c 	bl	8003f4c <HAL_GetTick>
 8007634:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e069      	b.n	8007714 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fa fe39 	bl	80022cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800765a:	f241 3188 	movw	r1, #5000	; 0x1388
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f85e 	bl	8007720 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	021a      	lsls	r2, r3, #8
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	2120      	movs	r1, #32
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f856 	bl	800773c <QSPI_WaitFlagStateUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d137      	bne.n	800770a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076a4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6852      	ldr	r2, [r2, #4]
 80076ac:	0611      	lsls	r1, r2, #24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	68d2      	ldr	r2, [r2, #12]
 80076b2:	4311      	orrs	r1, r2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	69d2      	ldr	r2, [r2, #28]
 80076b8:	4311      	orrs	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6a12      	ldr	r2, [r2, #32]
 80076be:	4311      	orrs	r1, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <HAL_QSPI_Init+0xf4>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6912      	ldr	r2, [r2, #16]
 80076d6:	0411      	lsls	r1, r2, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6952      	ldr	r2, [r2, #20]
 80076dc:	4311      	orrs	r1, r2
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6992      	ldr	r2, [r2, #24]
 80076e2:	4311      	orrs	r1, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007712:	7afb      	ldrb	r3, [r7, #11]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	ffe0f8fe 	.word	0xffe0f8fe

08007720 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800774c:	e01a      	b.n	8007784 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d016      	beq.n	8007784 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fc fbf9 	bl	8003f4c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2204      	movs	r2, #4
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	f043 0201 	orr.w	r2, r3, #1
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e00e      	b.n	80077a2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	bf14      	ite	ne
 8007792:	2301      	movne	r3, #1
 8007794:	2300      	moveq	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	429a      	cmp	r2, r3
 800779e:	d1d6      	bne.n	800774e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0cc      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077c0:	4b68      	ldr	r3, [pc, #416]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d90c      	bls.n	80077e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ce:	4b65      	ldr	r3, [pc, #404]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d6:	4b63      	ldr	r3, [pc, #396]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d001      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0b8      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d020      	beq.n	8007836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007800:	4b59      	ldr	r3, [pc, #356]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4a58      	ldr	r2, [pc, #352]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800780a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007818:	4b53      	ldr	r3, [pc, #332]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4a52      	ldr	r2, [pc, #328]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007824:	4b50      	ldr	r3, [pc, #320]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	494d      	ldr	r1, [pc, #308]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	4313      	orrs	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d044      	beq.n	80078cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d107      	bne.n	800785a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784a:	4b47      	ldr	r3, [pc, #284]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d119      	bne.n	800788a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e07f      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d003      	beq.n	800786a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007866:	2b03      	cmp	r3, #3
 8007868:	d107      	bne.n	800787a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800786a:	4b3f      	ldr	r3, [pc, #252]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e06f      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800787a:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e067      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800788a:	4b37      	ldr	r3, [pc, #220]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 0203 	bic.w	r2, r3, #3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4934      	ldr	r1, [pc, #208]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800789c:	f7fc fb56 	bl	8003f4c <HAL_GetTick>
 80078a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a2:	e00a      	b.n	80078ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a4:	f7fc fb52 	bl	8003f4c <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e04f      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ba:	4b2b      	ldr	r3, [pc, #172]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 020c 	and.w	r2, r3, #12
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d1eb      	bne.n	80078a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078cc:	4b25      	ldr	r3, [pc, #148]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d20c      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e2:	4b20      	ldr	r3, [pc, #128]	; (8007964 <HAL_RCC_ClockConfig+0x1b8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e032      	b.n	800795a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007900:	4b19      	ldr	r3, [pc, #100]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4916      	ldr	r1, [pc, #88]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	490e      	ldr	r1, [pc, #56]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007932:	f000 f821 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8007936:	4601      	mov	r1, r0
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	091b      	lsrs	r3, r3, #4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	4a0a      	ldr	r2, [pc, #40]	; (800796c <HAL_RCC_ClockConfig+0x1c0>)
 8007944:	5cd3      	ldrb	r3, [r2, r3]
 8007946:	fa21 f303 	lsr.w	r3, r1, r3
 800794a:	4a09      	ldr	r2, [pc, #36]	; (8007970 <HAL_RCC_ClockConfig+0x1c4>)
 800794c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800794e:	4b09      	ldr	r3, [pc, #36]	; (8007974 <HAL_RCC_ClockConfig+0x1c8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fa feec 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023c00 	.word	0x40023c00
 8007968:	40023800 	.word	0x40023800
 800796c:	08011d5c 	.word	0x08011d5c
 8007970:	20000024 	.word	0x20000024
 8007974:	20000088 	.word	0x20000088

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	2300      	movs	r3, #0
 8007988:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800798e:	4b50      	ldr	r3, [pc, #320]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 030c 	and.w	r3, r3, #12
 8007996:	2b04      	cmp	r3, #4
 8007998:	d007      	beq.n	80079aa <HAL_RCC_GetSysClockFreq+0x32>
 800799a:	2b08      	cmp	r3, #8
 800799c:	d008      	beq.n	80079b0 <HAL_RCC_GetSysClockFreq+0x38>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 808d 	bne.w	8007abe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a4:	4b4b      	ldr	r3, [pc, #300]	; (8007ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80079a6:	60bb      	str	r3, [r7, #8]
       break;
 80079a8:	e08c      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079aa:	4b4b      	ldr	r3, [pc, #300]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80079ac:	60bb      	str	r3, [r7, #8]
      break;
 80079ae:	e089      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b0:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ba:	4b45      	ldr	r3, [pc, #276]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d023      	beq.n	8007a0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c6:	4b42      	ldr	r3, [pc, #264]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	099b      	lsrs	r3, r3, #6
 80079cc:	f04f 0400 	mov.w	r4, #0
 80079d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	ea03 0501 	and.w	r5, r3, r1
 80079dc:	ea04 0602 	and.w	r6, r4, r2
 80079e0:	4a3d      	ldr	r2, [pc, #244]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80079e2:	fb02 f106 	mul.w	r1, r2, r6
 80079e6:	2200      	movs	r2, #0
 80079e8:	fb02 f205 	mul.w	r2, r2, r5
 80079ec:	440a      	add	r2, r1
 80079ee:	493a      	ldr	r1, [pc, #232]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80079f0:	fba5 0101 	umull	r0, r1, r5, r1
 80079f4:	1853      	adds	r3, r2, r1
 80079f6:	4619      	mov	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f04f 0400 	mov.w	r4, #0
 80079fe:	461a      	mov	r2, r3
 8007a00:	4623      	mov	r3, r4
 8007a02:	f7f8 fc15 	bl	8000230 <__aeabi_uldivmod>
 8007a06:	4603      	mov	r3, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e049      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	099b      	lsrs	r3, r3, #6
 8007a14:	f04f 0400 	mov.w	r4, #0
 8007a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	ea03 0501 	and.w	r5, r3, r1
 8007a24:	ea04 0602 	and.w	r6, r4, r2
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	0154      	lsls	r4, r2, #5
 8007a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a3a:	014b      	lsls	r3, r1, #5
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4622      	mov	r2, r4
 8007a40:	1b49      	subs	r1, r1, r5
 8007a42:	eb62 0206 	sbc.w	r2, r2, r6
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	f04f 0400 	mov.w	r4, #0
 8007a4e:	0194      	lsls	r4, r2, #6
 8007a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a54:	018b      	lsls	r3, r1, #6
 8007a56:	1a5b      	subs	r3, r3, r1
 8007a58:	eb64 0402 	sbc.w	r4, r4, r2
 8007a5c:	f04f 0100 	mov.w	r1, #0
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	00e2      	lsls	r2, r4, #3
 8007a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a6a:	00d9      	lsls	r1, r3, #3
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4614      	mov	r4, r2
 8007a70:	195b      	adds	r3, r3, r5
 8007a72:	eb44 0406 	adc.w	r4, r4, r6
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	02a2      	lsls	r2, r4, #10
 8007a80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a84:	0299      	lsls	r1, r3, #10
 8007a86:	460b      	mov	r3, r1
 8007a88:	4614      	mov	r4, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f04f 0400 	mov.w	r4, #0
 8007a94:	461a      	mov	r2, r3
 8007a96:	4623      	mov	r3, r4
 8007a98:	f7f8 fbca 	bl	8000230 <__aeabi_uldivmod>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	3301      	adds	r3, #1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aba:	60bb      	str	r3, [r7, #8]
      break;
 8007abc:	e002      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007ac0:	60bb      	str	r3, [r7, #8]
      break;
 8007ac2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	017d7840 	.word	0x017d7840

08007adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ae0:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000024 	.word	0x20000024

08007af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007af8:	f7ff fff0 	bl	8007adc <HAL_RCC_GetHCLKFreq>
 8007afc:	4601      	mov	r1, r0
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	0a9b      	lsrs	r3, r3, #10
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	4a03      	ldr	r2, [pc, #12]	; (8007b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b0a:	5cd3      	ldrb	r3, [r2, r3]
 8007b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40023800 	.word	0x40023800
 8007b18:	08011d6c 	.word	0x08011d6c

08007b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b20:	f7ff ffdc 	bl	8007adc <HAL_RCC_GetHCLKFreq>
 8007b24:	4601      	mov	r1, r0
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	0b5b      	lsrs	r3, r3, #13
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	4a03      	ldr	r2, [pc, #12]	; (8007b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b32:	5cd3      	ldrb	r3, [r2, r3]
 8007b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	08011d6c 	.word	0x08011d6c

08007b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220f      	movs	r2, #15
 8007b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0203 	and.w	r2, r3, #3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b78:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	08db      	lsrs	r3, r3, #3
 8007b7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <HAL_RCC_GetClockConfig+0x60>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 020f 	and.w	r2, r3, #15
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	601a      	str	r2, [r3, #0]
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40023c00 	.word	0x40023c00

08007ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007bcc:	4b7a      	ldr	r3, [pc, #488]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4977      	ldr	r1, [pc, #476]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007bea:	2301      	movs	r3, #1
 8007bec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d010      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007bfa:	4b6f      	ldr	r3, [pc, #444]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	496b      	ldr	r1, [pc, #428]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d022      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007c28:	4b63      	ldr	r3, [pc, #396]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c36:	4960      	ldr	r1, [pc, #384]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c52:	d10c      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007c54:	4b58      	ldr	r3, [pc, #352]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	4954      	ldr	r1, [pc, #336]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d022      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007c7a:	4b4f      	ldr	r3, [pc, #316]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c88:	494b      	ldr	r1, [pc, #300]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ca4:	d10c      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	493f      	ldr	r1, [pc, #252]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 808a 	beq.w	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	4a38      	ldr	r2, [pc, #224]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007cea:	4b34      	ldr	r3, [pc, #208]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a33      	ldr	r2, [pc, #204]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf6:	f7fc f929 	bl	8003f4c <HAL_GetTick>
 8007cfa:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cfe:	f7fc f925 	bl	8003f4c <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e1d1      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d10:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0f0      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d1c:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d24:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02f      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d028      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d3a:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d44:	4b1e      	ldr	r3, [pc, #120]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d50:	4a19      	ldr	r2, [pc, #100]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d114      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d62:	f7fc f8f3 	bl	8003f4c <HAL_GetTick>
 8007d66:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d68:	e00a      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d6a:	f7fc f8ef 	bl	8003f4c <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e199      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ee      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d98:	d114      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	4902      	ldr	r1, [pc, #8]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]
 8007db4:	e00c      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007db6:	bf00      	nop
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40007000 	.word	0x40007000
 8007dc0:	42470e40 	.word	0x42470e40
 8007dc4:	4b89      	ldr	r3, [pc, #548]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	4a88      	ldr	r2, [pc, #544]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dce:	6093      	str	r3, [r2, #8]
 8007dd0:	4b86      	ldr	r3, [pc, #536]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ddc:	4983      	ldr	r1, [pc, #524]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007df4:	4b7e      	ldr	r3, [pc, #504]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007df6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007e04:	4b79      	ldr	r3, [pc, #484]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	4976      	ldr	r1, [pc, #472]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d011      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e26:	4b71      	ldr	r3, [pc, #452]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	496d      	ldr	r1, [pc, #436]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e44:	d101      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007e46:	2301      	movs	r3, #1
 8007e48:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007e56:	4b65      	ldr	r3, [pc, #404]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	4961      	ldr	r1, [pc, #388]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d004      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	f040 80c6 	bne.w	8008008 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e7c:	4b5d      	ldr	r3, [pc, #372]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e82:	f7fc f863 	bl	8003f4c <HAL_GetTick>
 8007e86:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e88:	e008      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e8a:	f7fc f85f 	bl	8003f4c <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e10b      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e9c:	4b53      	ldr	r3, [pc, #332]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007ea8:	4a53      	ldr	r2, [pc, #332]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d023      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d019      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eec:	d00e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d019      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d115      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f0a:	d110      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	019b      	lsls	r3, r3, #6
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	061b      	lsls	r3, r3, #24
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	4931      	ldr	r1, [pc, #196]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d026      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d122      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f56:	4b25      	ldr	r3, [pc, #148]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5c:	0e1b      	lsrs	r3, r3, #24
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	019b      	lsls	r3, r3, #6
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	071b      	lsls	r3, r3, #28
 8007f7c:	491b      	ldr	r1, [pc, #108]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007f84:	4b19      	ldr	r3, [pc, #100]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8a:	f023 021f 	bic.w	r2, r3, #31
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	4915      	ldr	r1, [pc, #84]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	019b      	lsls	r3, r3, #6
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	490a      	ldr	r1, [pc, #40]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fca:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fd0:	f7fb ffbc 	bl	8003f4c <HAL_GetTick>
 8007fd4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fd6:	e011      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fd8:	f7fb ffb8 	bl	8003f4c <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d90a      	bls.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e064      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007fea:	bf00      	nop
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	424711e0 	.word	0x424711e0
 8007ff4:	42470068 	.word	0x42470068
 8007ff8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ffc:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0e7      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	4926      	ldr	r1, [pc, #152]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008024:	4313      	orrs	r3, r2
 8008026:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008036:	4b21      	ldr	r3, [pc, #132]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	491d      	ldr	r1, [pc, #116]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008046:	4313      	orrs	r3, r2
 8008048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008058:	4b18      	ldr	r3, [pc, #96]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	4915      	ldr	r1, [pc, #84]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008068:	4313      	orrs	r3, r2
 800806a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800807c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008080:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	490c      	ldr	r1, [pc, #48]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800809e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080aa:	4904      	ldr	r1, [pc, #16]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3720      	adds	r7, #32
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40023800 	.word	0x40023800

080080c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80080de:	2b02      	cmp	r3, #2
 80080e0:	f000 8098 	beq.w	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80080e4:	e12d      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80080e6:	4b9a      	ldr	r3, [pc, #616]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80080f0:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f8:	d00c      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80080fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080fe:	d802      	bhi.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8008104:	e082      	b.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800810a:	d047      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800810c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008110:	d06f      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8008112:	e07b      	b.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008114:	4b8f      	ldr	r3, [pc, #572]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008116:	617b      	str	r3, [r7, #20]
          break;
 8008118:	e07b      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800811a:	4b8d      	ldr	r3, [pc, #564]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800811c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008128:	d109      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800812a:	4b89      	ldr	r3, [pc, #548]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800812c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008134:	4a87      	ldr	r2, [pc, #540]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008136:	fbb2 f3f3 	udiv	r3, r2, r3
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	e019      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800813e:	4b84      	ldr	r3, [pc, #528]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800814a:	d109      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800814c:	4b80      	ldr	r3, [pc, #512]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008156:	4a80      	ldr	r2, [pc, #512]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008158:	fbb2 f3f3 	udiv	r3, r2, r3
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	e008      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008160:	4b7b      	ldr	r3, [pc, #492]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816a:	4a7c      	ldr	r2, [pc, #496]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008172:	4b77      	ldr	r3, [pc, #476]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008178:	099b      	lsrs	r3, r3, #6
 800817a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008186:	4b72      	ldr	r3, [pc, #456]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818c:	0f1b      	lsrs	r3, r3, #28
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	617b      	str	r3, [r7, #20]
          break;
 800819a:	e03a      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800819c:	4b6c      	ldr	r3, [pc, #432]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081a8:	d108      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081aa:	4b69      	ldr	r3, [pc, #420]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b2:	4a69      	ldr	r2, [pc, #420]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	e007      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081bc:	4b64      	ldr	r3, [pc, #400]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c4:	4a65      	ldr	r2, [pc, #404]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ca:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80081cc:	4b60      	ldr	r3, [pc, #384]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
 80081dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80081de:	4b5c      	ldr	r3, [pc, #368]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	0f1b      	lsrs	r3, r3, #28
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ee:	617b      	str	r3, [r7, #20]
          break;
 80081f0:	e00f      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081f2:	4b57      	ldr	r3, [pc, #348]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081fe:	d102      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8008200:	4b55      	ldr	r3, [pc, #340]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008202:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008204:	e005      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8008206:	4b55      	ldr	r3, [pc, #340]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008208:	617b      	str	r3, [r7, #20]
          break;
 800820a:	e002      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
          break;
 8008210:	bf00      	nop
        }
      }
      break;
 8008212:	e096      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008214:	4b4e      	ldr	r3, [pc, #312]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800821e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008226:	d00c      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8008228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822c:	d802      	bhi.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008232:	e082      	b.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008238:	d047      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800823a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800823e:	d06f      	beq.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008240:	e07b      	b.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008242:	4b44      	ldr	r3, [pc, #272]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008244:	617b      	str	r3, [r7, #20]
          break;
 8008246:	e07b      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008248:	4b41      	ldr	r3, [pc, #260]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800824a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800824e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008256:	d109      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008258:	4b3d      	ldr	r3, [pc, #244]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800825a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800825e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008262:	4a3c      	ldr	r2, [pc, #240]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	e019      	b.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800826c:	4b38      	ldr	r3, [pc, #224]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008278:	d109      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800827a:	4b35      	ldr	r3, [pc, #212]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800827c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008284:	4a34      	ldr	r2, [pc, #208]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	e008      	b.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800828e:	4b30      	ldr	r3, [pc, #192]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008298:	4a30      	ldr	r2, [pc, #192]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800829a:	fbb2 f3f3 	udiv	r3, r2, r3
 800829e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80082a0:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a6:	099b      	lsrs	r3, r3, #6
 80082a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80082b4:	4b26      	ldr	r3, [pc, #152]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ba:	0f1b      	lsrs	r3, r3, #28
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c6:	617b      	str	r3, [r7, #20]
          break;
 80082c8:	e03a      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80082ca:	4b21      	ldr	r3, [pc, #132]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d6:	d108      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082d8:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e0:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	e007      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082ea:	4b19      	ldr	r3, [pc, #100]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f2:	4a1a      	ldr	r2, [pc, #104]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f8:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	099b      	lsrs	r3, r3, #6
 8008300:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	fb02 f303 	mul.w	r3, r2, r3
 800830a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	0f1b      	lsrs	r3, r3, #28
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	617b      	str	r3, [r7, #20]
          break;
 800831e:	e00f      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800832c:	d102      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008330:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008332:	e005      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008336:	617b      	str	r3, [r7, #20]
          break;
 8008338:	e002      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
          break;
 800833e:	bf00      	nop
        }
      }
      break;
 8008340:	bf00      	nop
    }
  }
  return frequency;
 8008342:	697b      	ldr	r3, [r7, #20]
}
 8008344:	4618      	mov	r0, r3
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40023800 	.word	0x40023800
 8008354:	00bb8000 	.word	0x00bb8000
 8008358:	017d7840 	.word	0x017d7840
 800835c:	00f42400 	.word	0x00f42400

08008360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d075      	beq.n	8008464 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008378:	4ba2      	ldr	r3, [pc, #648]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b04      	cmp	r3, #4
 8008382:	d00c      	beq.n	800839e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008384:	4b9f      	ldr	r3, [pc, #636]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800838c:	2b08      	cmp	r3, #8
 800838e:	d112      	bne.n	80083b6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008390:	4b9c      	ldr	r3, [pc, #624]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800839c:	d10b      	bne.n	80083b6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839e:	4b99      	ldr	r3, [pc, #612]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d05b      	beq.n	8008462 <HAL_RCC_OscConfig+0x102>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d157      	bne.n	8008462 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e20b      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083be:	d106      	bne.n	80083ce <HAL_RCC_OscConfig+0x6e>
 80083c0:	4b90      	ldr	r3, [pc, #576]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a8f      	ldr	r2, [pc, #572]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	e01d      	b.n	800840a <HAL_RCC_OscConfig+0xaa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083d6:	d10c      	bne.n	80083f2 <HAL_RCC_OscConfig+0x92>
 80083d8:	4b8a      	ldr	r3, [pc, #552]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a89      	ldr	r2, [pc, #548]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	4b87      	ldr	r3, [pc, #540]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a86      	ldr	r2, [pc, #536]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e00b      	b.n	800840a <HAL_RCC_OscConfig+0xaa>
 80083f2:	4b84      	ldr	r3, [pc, #528]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a83      	ldr	r2, [pc, #524]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80083f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	4b81      	ldr	r3, [pc, #516]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a80      	ldr	r2, [pc, #512]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d013      	beq.n	800843a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008412:	f7fb fd9b 	bl	8003f4c <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008418:	e008      	b.n	800842c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800841a:	f7fb fd97 	bl	8003f4c <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b64      	cmp	r3, #100	; 0x64
 8008426:	d901      	bls.n	800842c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e1d0      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800842c:	4b75      	ldr	r3, [pc, #468]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0f0      	beq.n	800841a <HAL_RCC_OscConfig+0xba>
 8008438:	e014      	b.n	8008464 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843a:	f7fb fd87 	bl	8003f4c <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008442:	f7fb fd83 	bl	8003f4c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b64      	cmp	r3, #100	; 0x64
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e1bc      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008454:	4b6b      	ldr	r3, [pc, #428]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f0      	bne.n	8008442 <HAL_RCC_OscConfig+0xe2>
 8008460:	e000      	b.n	8008464 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008462:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d063      	beq.n	8008538 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008470:	4b64      	ldr	r3, [pc, #400]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 030c 	and.w	r3, r3, #12
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800847c:	4b61      	ldr	r3, [pc, #388]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008484:	2b08      	cmp	r3, #8
 8008486:	d11c      	bne.n	80084c2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008488:	4b5e      	ldr	r3, [pc, #376]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d116      	bne.n	80084c2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008494:	4b5b      	ldr	r3, [pc, #364]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_RCC_OscConfig+0x14c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e190      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ac:	4b55      	ldr	r3, [pc, #340]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4952      	ldr	r1, [pc, #328]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084c0:	e03a      	b.n	8008538 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d020      	beq.n	800850c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084ca:	4b4f      	ldr	r3, [pc, #316]	; (8008608 <HAL_RCC_OscConfig+0x2a8>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fb fd3c 	bl	8003f4c <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084d8:	f7fb fd38 	bl	8003f4c <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e171      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084ea:	4b46      	ldr	r3, [pc, #280]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f0      	beq.n	80084d8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f6:	4b43      	ldr	r3, [pc, #268]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	493f      	ldr	r1, [pc, #252]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	e015      	b.n	8008538 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800850c:	4b3e      	ldr	r3, [pc, #248]	; (8008608 <HAL_RCC_OscConfig+0x2a8>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008512:	f7fb fd1b 	bl	8003f4c <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800851a:	f7fb fd17 	bl	8003f4c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e150      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800852c:	4b35      	ldr	r3, [pc, #212]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f0      	bne.n	800851a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d030      	beq.n	80085a6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d016      	beq.n	800857a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800854c:	4b2f      	ldr	r3, [pc, #188]	; (800860c <HAL_RCC_OscConfig+0x2ac>)
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008552:	f7fb fcfb 	bl	8003f4c <HAL_GetTick>
 8008556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008558:	e008      	b.n	800856c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800855a:	f7fb fcf7 	bl	8003f4c <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e130      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800856c:	4b25      	ldr	r3, [pc, #148]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800856e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0f0      	beq.n	800855a <HAL_RCC_OscConfig+0x1fa>
 8008578:	e015      	b.n	80085a6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <HAL_RCC_OscConfig+0x2ac>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008580:	f7fb fce4 	bl	8003f4c <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008588:	f7fb fce0 	bl	8003f4c <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e119      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800859a:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 800859c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 809f 	beq.w	80086f2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085b8:	4b12      	ldr	r3, [pc, #72]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10f      	bne.n	80085e4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	4a0d      	ldr	r2, [pc, #52]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80085ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d2:	6413      	str	r3, [r2, #64]	; 0x40
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <HAL_RCC_OscConfig+0x2a4>)
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <HAL_RCC_OscConfig+0x2b0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d120      	bne.n	8008632 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <HAL_RCC_OscConfig+0x2b0>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a06      	ldr	r2, [pc, #24]	; (8008610 <HAL_RCC_OscConfig+0x2b0>)
 80085f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085fc:	f7fb fca6 	bl	8003f4c <HAL_GetTick>
 8008600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008602:	e010      	b.n	8008626 <HAL_RCC_OscConfig+0x2c6>
 8008604:	40023800 	.word	0x40023800
 8008608:	42470000 	.word	0x42470000
 800860c:	42470e80 	.word	0x42470e80
 8008610:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008614:	f7fb fc9a 	bl	8003f4c <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b02      	cmp	r3, #2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e0d3      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008626:	4b6c      	ldr	r3, [pc, #432]	; (80087d8 <HAL_RCC_OscConfig+0x478>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f0      	beq.n	8008614 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d106      	bne.n	8008648 <HAL_RCC_OscConfig+0x2e8>
 800863a:	4b68      	ldr	r3, [pc, #416]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	4a67      	ldr	r2, [pc, #412]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	6713      	str	r3, [r2, #112]	; 0x70
 8008646:	e01c      	b.n	8008682 <HAL_RCC_OscConfig+0x322>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b05      	cmp	r3, #5
 800864e:	d10c      	bne.n	800866a <HAL_RCC_OscConfig+0x30a>
 8008650:	4b62      	ldr	r3, [pc, #392]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008654:	4a61      	ldr	r2, [pc, #388]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008656:	f043 0304 	orr.w	r3, r3, #4
 800865a:	6713      	str	r3, [r2, #112]	; 0x70
 800865c:	4b5f      	ldr	r3, [pc, #380]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 800865e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008660:	4a5e      	ldr	r2, [pc, #376]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	6713      	str	r3, [r2, #112]	; 0x70
 8008668:	e00b      	b.n	8008682 <HAL_RCC_OscConfig+0x322>
 800866a:	4b5c      	ldr	r3, [pc, #368]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	4a5b      	ldr	r2, [pc, #364]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	6713      	str	r3, [r2, #112]	; 0x70
 8008676:	4b59      	ldr	r3, [pc, #356]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	4a58      	ldr	r2, [pc, #352]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 800867c:	f023 0304 	bic.w	r3, r3, #4
 8008680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d015      	beq.n	80086b6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868a:	f7fb fc5f 	bl	8003f4c <HAL_GetTick>
 800868e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008690:	e00a      	b.n	80086a8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008692:	f7fb fc5b 	bl	8003f4c <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e092      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086a8:	4b4c      	ldr	r3, [pc, #304]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0ee      	beq.n	8008692 <HAL_RCC_OscConfig+0x332>
 80086b4:	e014      	b.n	80086e0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b6:	f7fb fc49 	bl	8003f4c <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086bc:	e00a      	b.n	80086d4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086be:	f7fb fc45 	bl	8003f4c <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e07c      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086d4:	4b41      	ldr	r3, [pc, #260]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1ee      	bne.n	80086be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e6:	4b3d      	ldr	r3, [pc, #244]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	4a3c      	ldr	r2, [pc, #240]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80086ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d068      	beq.n	80087cc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086fa:	4b38      	ldr	r3, [pc, #224]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b08      	cmp	r3, #8
 8008704:	d060      	beq.n	80087c8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d145      	bne.n	800879a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800870e:	4b34      	ldr	r3, [pc, #208]	; (80087e0 <HAL_RCC_OscConfig+0x480>)
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fb fc1a 	bl	8003f4c <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871c:	f7fb fc16 	bl	8003f4c <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e04f      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800872e:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f0      	bne.n	800871c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69da      	ldr	r2, [r3, #28]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	019b      	lsls	r3, r3, #6
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	3b01      	subs	r3, #1
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	061b      	lsls	r3, r3, #24
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	071b      	lsls	r3, r3, #28
 8008766:	491d      	ldr	r1, [pc, #116]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <HAL_RCC_OscConfig+0x480>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008772:	f7fb fbeb 	bl	8003f4c <HAL_GetTick>
 8008776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008778:	e008      	b.n	800878c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800877a:	f7fb fbe7 	bl	8003f4c <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e020      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800878c:	4b13      	ldr	r3, [pc, #76]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <HAL_RCC_OscConfig+0x41a>
 8008798:	e018      	b.n	80087cc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800879a:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <HAL_RCC_OscConfig+0x480>)
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fb fbd4 	bl	8003f4c <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fb fbd0 	bl	8003f4c <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e009      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <HAL_RCC_OscConfig+0x47c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0x448>
 80087c6:	e001      	b.n	80087cc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40007000 	.word	0x40007000
 80087dc:	40023800 	.word	0x40023800
 80087e0:	42470060 	.word	0x42470060

080087e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e022      	b.n	800883c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7f9 fe29 	bl	8002460 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2203      	movs	r2, #3
 8008812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f814 	bl	8008844 <HAL_SD_InitCard>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e00a      	b.n	800883c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b08e      	sub	sp, #56	; 0x38
 8008848:	af04      	add	r7, sp, #16
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800884c:	2300      	movs	r3, #0
 800884e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800885c:	2300      	movs	r3, #0
 800885e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008860:	2376      	movs	r3, #118	; 0x76
 8008862:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681d      	ldr	r5, [r3, #0]
 8008868:	466c      	mov	r4, sp
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800887c:	4628      	mov	r0, r5
 800887e:	f001 ff4f 	bl	800a720 <SDIO_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e031      	b.n	80088f8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008894:	4b1a      	ldr	r3, [pc, #104]	; (8008900 <HAL_SD_InitCard+0xbc>)
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 ff76 	bl	800a790 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80088a4:	4b16      	ldr	r3, [pc, #88]	; (8008900 <HAL_SD_InitCard+0xbc>)
 80088a6:	2201      	movs	r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb18 	bl	8008ee0 <SD_PowerON>
 80088b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e013      	b.n	80088f8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa37 	bl	8008d44 <SD_InitCard>
 80088d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e000      	b.n	80088f8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3728      	adds	r7, #40	; 0x28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008900:	422580a0 	.word	0x422580a0

08008904 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008912:	0f9b      	lsrs	r3, r3, #30
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800891e:	0e9b      	lsrs	r3, r3, #26
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	b2da      	uxtb	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008930:	0e1b      	lsrs	r3, r3, #24
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	b2da      	uxtb	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	b2da      	uxtb	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008964:	0d1b      	lsrs	r3, r3, #20
 8008966:	b29a      	uxth	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008970:	0c1b      	lsrs	r3, r3, #16
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	b2da      	uxtb	r2, r3
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008982:	0bdb      	lsrs	r3, r3, #15
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	b2da      	uxtb	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008994:	0b9b      	lsrs	r3, r3, #14
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	b2da      	uxtb	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a6:	0b5b      	lsrs	r3, r3, #13
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b8:	0b1b      	lsrs	r3, r3, #12
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2200      	movs	r2, #0
 80089ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d163      	bne.n	8008a9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d8:	009a      	lsls	r2, r3, #2
 80089da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089de:	4013      	ands	r3, r2
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80089e4:	0f92      	lsrs	r2, r2, #30
 80089e6:	431a      	orrs	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f0:	0edb      	lsrs	r3, r3, #27
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a02:	0e1b      	lsrs	r3, r3, #24
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a14:	0d5b      	lsrs	r3, r3, #21
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a26:	0c9b      	lsrs	r3, r3, #18
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a38:	0bdb      	lsrs	r3, r3, #15
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	7e1b      	ldrb	r3, [r3, #24]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008a66:	fb02 f203 	mul.w	r2, r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	7a1b      	ldrb	r3, [r3, #8]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	2201      	movs	r2, #1
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008a88:	0a52      	lsrs	r2, r2, #9
 8008a8a:	fb02 f203 	mul.w	r2, r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a98:	661a      	str	r2, [r3, #96]	; 0x60
 8008a9a:	e031      	b.n	8008b00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d11d      	bne.n	8008ae0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa8:	041b      	lsls	r3, r3, #16
 8008aaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	029a      	lsls	r2, r3, #10
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	661a      	str	r2, [r3, #96]	; 0x60
 8008ade:	e00f      	b.n	8008b00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a58      	ldr	r2, [pc, #352]	; (8008c48 <HAL_SD_GetCardCSD+0x344>)
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e09d      	b.n	8008c3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b04:	0b9b      	lsrs	r3, r3, #14
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b16:	09db      	lsrs	r3, r3, #7
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b38:	0fdb      	lsrs	r3, r3, #31
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b44:	0f5b      	lsrs	r3, r3, #29
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b56:	0e9b      	lsrs	r3, r3, #26
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	0d9b      	lsrs	r3, r3, #22
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7a:	0d5b      	lsrs	r3, r3, #21
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	0c1b      	lsrs	r3, r3, #16
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	0bdb      	lsrs	r3, r3, #15
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbe:	0b9b      	lsrs	r3, r3, #14
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd2:	0b5b      	lsrs	r3, r3, #13
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	0b1b      	lsrs	r3, r3, #12
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfa:	0a9b      	lsrs	r3, r3, #10
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	004005ff 	.word	0x004005ff

08008c4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c4c:	b5b0      	push	{r4, r5, r7, lr}
 8008c4e:	b08e      	sub	sp, #56	; 0x38
 8008c50:	af04      	add	r7, sp, #16
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d02e      	beq.n	8008cc4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6c:	d106      	bne.n	8008c7c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
 8008c7a:	e029      	b.n	8008cd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c82:	d10a      	bne.n	8008c9a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9b9 	bl	8008ffc <SD_WideBus_Enable>
 8008c8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
 8008c98:	e01a      	b.n	8008cd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f9f6 	bl	8009092 <SD_WideBus_Disable>
 8008ca6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb4:	e00c      	b.n	8008cd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8008cc2:	e005      	b.n	8008cd0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e024      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681d      	ldr	r5, [r3, #0]
 8008d12:	466c      	mov	r4, sp
 8008d14:	f107 0318 	add.w	r3, r7, #24
 8008d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d20:	f107 030c 	add.w	r3, r7, #12
 8008d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d26:	4628      	mov	r0, r5
 8008d28:	f001 fcfa 	bl	800a720 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	; 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	004005ff 	.word	0x004005ff

08008d44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d44:	b5b0      	push	{r4, r5, r7, lr}
 8008d46:	b094      	sub	sp, #80	; 0x50
 8008d48:	af04      	add	r7, sp, #16
 8008d4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 fd2a 	bl	800a7ae <SDIO_GetPowerState>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d64:	e0b7      	b.n	8008ed6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d02f      	beq.n	8008dce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fea9 	bl	800aaca <SDMMC_CmdSendCID>
 8008d78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d82:	e0a8      	b.n	8008ed6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fd54 	bl	800a838 <SDIO_GetResponse>
 8008d90:	4602      	mov	r2, r0
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2104      	movs	r1, #4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fd4b 	bl	800a838 <SDIO_GetResponse>
 8008da2:	4602      	mov	r2, r0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2108      	movs	r1, #8
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fd42 	bl	800a838 <SDIO_GetResponse>
 8008db4:	4602      	mov	r2, r0
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	210c      	movs	r1, #12
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 fd39 	bl	800a838 <SDIO_GetResponse>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d00d      	beq.n	8008df2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f107 020e 	add.w	r2, r7, #14
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 feaf 	bl	800ab44 <SDMMC_CmdSetRelAdd>
 8008de6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SD_InitCard+0xae>
    {
      return errorstate;
 8008dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df0:	e071      	b.n	8008ed6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d036      	beq.n	8008e68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008dfa:	89fb      	ldrh	r3, [r7, #14]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f001 fe79 	bl	800ab06 <SDMMC_CmdSendCSD>
 8008e14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	e05a      	b.n	8008ed6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fd06 	bl	800a838 <SDIO_GetResponse>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2104      	movs	r1, #4
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fcfd 	bl	800a838 <SDIO_GetResponse>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2108      	movs	r1, #8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 fcf4 	bl	800a838 <SDIO_GetResponse>
 8008e50:	4602      	mov	r2, r0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	210c      	movs	r1, #12
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fceb 	bl	800a838 <SDIO_GetResponse>
 8008e62:	4602      	mov	r2, r0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fce2 	bl	800a838 <SDIO_GetResponse>
 8008e74:	4603      	mov	r3, r0
 8008e76:	0d1a      	lsrs	r2, r3, #20
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fd3e 	bl	8008904 <HAL_SD_GetCardCSD>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e92:	e020      	b.n	8008ed6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6819      	ldr	r1, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9c:	041b      	lsls	r3, r3, #16
 8008e9e:	f04f 0400 	mov.w	r4, #0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	f001 fd27 	bl	800a8fa <SDMMC_CmdSelDesel>
 8008eac:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <SD_InitCard+0x174>
  {
    return errorstate;
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	e00e      	b.n	8008ed6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681d      	ldr	r5, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	466c      	mov	r4, sp
 8008ec0:	f103 0210 	add.w	r2, r3, #16
 8008ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008eca:	3304      	adds	r3, #4
 8008ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f001 fc26 	bl	800a720 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3740      	adds	r7, #64	; 0x40
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ee0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 fd21 	bl	800a940 <SDMMC_CmdGoIdleState>
 8008efe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	e072      	b.n	8008ff0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fd34 	bl	800a97c <SDMMC_CmdOperCond>
 8008f14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00d      	beq.n	8008f38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fd0a 	bl	800a940 <SDMMC_CmdGoIdleState>
 8008f2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	e05b      	b.n	8008ff0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d137      	bne.n	8008fb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fd34 	bl	800a9ba <SDMMC_CmdAppCommand>
 8008f52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d02d      	beq.n	8008fb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f5e:	e047      	b.n	8008ff0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 fd27 	bl	800a9ba <SDMMC_CmdAppCommand>
 8008f6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <SD_PowerON+0x98>
    {
      return errorstate;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	e03b      	b.n	8008ff0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	491e      	ldr	r1, [pc, #120]	; (8008ff8 <SD_PowerON+0x118>)
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fd3d 	bl	800a9fe <SDMMC_CmdAppOperCommand>
 8008f84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f90:	e02e      	b.n	8008ff0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2100      	movs	r1, #0
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fc4d 	bl	800a838 <SDIO_GetResponse>
 8008f9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	0fdb      	lsrs	r3, r3, #31
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <SD_PowerON+0xcc>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e000      	b.n	8008fae <SD_PowerON+0xce>
 8008fac:	2300      	movs	r3, #0
 8008fae:	613b      	str	r3, [r7, #16]

    count++;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d802      	bhi.n	8008fc6 <SD_PowerON+0xe6>
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0cc      	beq.n	8008f60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d902      	bls.n	8008fd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fd4:	e00c      	b.n	8008ff0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	645a      	str	r2, [r3, #68]	; 0x44
 8008fe6:	e002      	b.n	8008fee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	c1100000 	.word	0xc1100000

08008ffc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	2300      	movs	r3, #0
 800900a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fc10 	bl	800a838 <SDIO_GetResponse>
 8009018:	4603      	mov	r3, r0
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009022:	d102      	bne.n	800902a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009028:	e02f      	b.n	800908a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800902a:	f107 030c 	add.w	r3, r7, #12
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f879 	bl	8009128 <SD_FindSCR>
 8009036:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	e023      	b.n	800908a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01c      	beq.n	8009086 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f001 fcae 	bl	800a9ba <SDMMC_CmdAppCommand>
 800905e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	e00f      	b.n	800908a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2102      	movs	r1, #2
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fce7 	bl	800aa44 <SDMMC_CmdBusWidth>
 8009076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	e003      	b.n	800908a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009082:	2300      	movs	r3, #0
 8009084:	e001      	b.n	800908a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009086:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 fbc5 	bl	800a838 <SDIO_GetResponse>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090b8:	d102      	bne.n	80090c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090be:	e02f      	b.n	8009120 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090c0:	f107 030c 	add.w	r3, r7, #12
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f82e 	bl	8009128 <SD_FindSCR>
 80090cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	e023      	b.n	8009120 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d01c      	beq.n	800911c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ea:	041b      	lsls	r3, r3, #16
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f001 fc63 	bl	800a9ba <SDMMC_CmdAppCommand>
 80090f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	e00f      	b.n	8009120 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fc9c 	bl	800aa44 <SDMMC_CmdBusWidth>
 800910c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	e003      	b.n	8009120 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009118:	2300      	movs	r3, #0
 800911a:	e001      	b.n	8009120 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800911c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b08f      	sub	sp, #60	; 0x3c
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009132:	f7fa ff0b 	bl	8003f4c <HAL_GetTick>
 8009136:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800913c:	2300      	movs	r3, #0
 800913e:	60bb      	str	r3, [r7, #8]
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2108      	movs	r1, #8
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fbb1 	bl	800a8b6 <SDMMC_CmdBlockLength>
 8009154:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <SD_FindSCR+0x38>
  {
    return errorstate;
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	e0a9      	b.n	80092b4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f001 fc24 	bl	800a9ba <SDMMC_CmdAppCommand>
 8009172:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <SD_FindSCR+0x56>
  {
    return errorstate;
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	e09a      	b.n	80092b4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800917e:	f04f 33ff 	mov.w	r3, #4294967295
 8009182:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009184:	2308      	movs	r3, #8
 8009186:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009188:	2330      	movs	r3, #48	; 0x30
 800918a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800918c:	2302      	movs	r3, #2
 800918e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009190:	2300      	movs	r3, #0
 8009192:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009194:	2301      	movs	r3, #1
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f107 0210 	add.w	r2, r7, #16
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 fb5b 	bl	800a85e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f001 fc6b 	bl	800aa88 <SDMMC_CmdSendSCR>
 80091b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d022      	beq.n	8009200 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	e07a      	b.n	80092b4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00e      	beq.n	80091ea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6819      	ldr	r1, [r3, #0]
 80091d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	f107 0208 	add.w	r2, r7, #8
 80091d8:	18d4      	adds	r4, r2, r3
 80091da:	4608      	mov	r0, r1
 80091dc:	f001 facb 	bl	800a776 <SDIO_ReadFIFO>
 80091e0:	4603      	mov	r3, r0
 80091e2:	6023      	str	r3, [r4, #0]
      index++;
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	3301      	adds	r3, #1
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091ea:	f7fa feaf 	bl	8003f4c <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d102      	bne.n	8009200 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091fe:	e059      	b.n	80092b4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009206:	f240 432a 	movw	r3, #1066	; 0x42a
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0d6      	beq.n	80091be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2208      	movs	r2, #8
 8009224:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009226:	2308      	movs	r3, #8
 8009228:	e044      	b.n	80092b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2202      	movs	r2, #2
 800923e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009240:	2302      	movs	r3, #2
 8009242:	e037      	b.n	80092b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2220      	movs	r2, #32
 8009258:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800925a:	2320      	movs	r3, #32
 800925c:	e02a      	b.n	80092b4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f240 523a 	movw	r2, #1338	; 0x53a
 8009266:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	061a      	lsls	r2, r3, #24
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009274:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	0a1b      	lsrs	r3, r3, #8
 800927a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800927e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	0e1b      	lsrs	r3, r3, #24
 8009284:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	601a      	str	r2, [r3, #0]
    scr++;
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	3304      	adds	r3, #4
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	061a      	lsls	r2, r3, #24
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800929c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	0a1b      	lsrs	r3, r3, #8
 80092a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	0e1b      	lsrs	r3, r3, #24
 80092ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	373c      	adds	r7, #60	; 0x3c
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd90      	pop	{r4, r7, pc}

080092bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e034      	b.n	800933c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d106      	bne.n	80092ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7f9 fa18 	bl	800271c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3308      	adds	r3, #8
 80092f4:	4619      	mov	r1, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	f001 f90e 	bl	800a518 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	461a      	mov	r2, r3
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	f001 f976 	bl	800a5f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6858      	ldr	r0, [r3, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	f001 f9c1 	bl	800a6a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6892      	ldr	r2, [r2, #8]
 8009326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	f041 0101 	orr.w	r1, r1, #1
 8009336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e01d      	b.n	8009392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f815 	bl	800939a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 f968 	bl	8009658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 0307 	and.w	r3, r3, #7
 80093d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b06      	cmp	r3, #6
 80093d6:	d007      	beq.n	80093e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0201 	orr.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d122      	bne.n	8009452 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b02      	cmp	r3, #2
 8009418:	d11b      	bne.n	8009452 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f06f 0202 	mvn.w	r2, #2
 8009422:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8ee 	bl	800961a <HAL_TIM_IC_CaptureCallback>
 800943e:	e005      	b.n	800944c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f8e0 	bl	8009606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8f1 	bl	800962e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b04      	cmp	r3, #4
 800945e:	d122      	bne.n	80094a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b04      	cmp	r3, #4
 800946c:	d11b      	bne.n	80094a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f06f 0204 	mvn.w	r2, #4
 8009476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f8c4 	bl	800961a <HAL_TIM_IC_CaptureCallback>
 8009492:	e005      	b.n	80094a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8b6 	bl	8009606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8c7 	bl	800962e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d122      	bne.n	80094fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0308 	and.w	r3, r3, #8
 80094be:	2b08      	cmp	r3, #8
 80094c0:	d11b      	bne.n	80094fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f06f 0208 	mvn.w	r2, #8
 80094ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2204      	movs	r2, #4
 80094d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f89a 	bl	800961a <HAL_TIM_IC_CaptureCallback>
 80094e6:	e005      	b.n	80094f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f88c 	bl	8009606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f89d 	bl	800962e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	f003 0310 	and.w	r3, r3, #16
 8009504:	2b10      	cmp	r3, #16
 8009506:	d122      	bne.n	800954e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b10      	cmp	r3, #16
 8009514:	d11b      	bne.n	800954e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f06f 0210 	mvn.w	r2, #16
 800951e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2208      	movs	r2, #8
 8009524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f870 	bl	800961a <HAL_TIM_IC_CaptureCallback>
 800953a:	e005      	b.n	8009548 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f862 	bl	8009606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f873 	bl	800962e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b01      	cmp	r3, #1
 800955a:	d10e      	bne.n	800957a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b01      	cmp	r3, #1
 8009568:	d107      	bne.n	800957a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f06f 0201 	mvn.w	r2, #1
 8009572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7f8 fb43 	bl	8001c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009584:	2b80      	cmp	r3, #128	; 0x80
 8009586:	d10e      	bne.n	80095a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009592:	2b80      	cmp	r3, #128	; 0x80
 8009594:	d107      	bne.n	80095a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800959e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f903 	bl	80097ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d10e      	bne.n	80095d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d107      	bne.n	80095d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f838 	bl	8009642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d10e      	bne.n	80095fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d107      	bne.n	80095fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f06f 0220 	mvn.w	r2, #32
 80095f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f8cd 	bl	8009798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009622:	bf00      	nop
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009636:	bf00      	nop
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
	...

08009658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a40      	ldr	r2, [pc, #256]	; (800976c <TIM_Base_SetConfig+0x114>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d013      	beq.n	8009698 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009676:	d00f      	beq.n	8009698 <TIM_Base_SetConfig+0x40>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a3d      	ldr	r2, [pc, #244]	; (8009770 <TIM_Base_SetConfig+0x118>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d00b      	beq.n	8009698 <TIM_Base_SetConfig+0x40>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a3c      	ldr	r2, [pc, #240]	; (8009774 <TIM_Base_SetConfig+0x11c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d007      	beq.n	8009698 <TIM_Base_SetConfig+0x40>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a3b      	ldr	r2, [pc, #236]	; (8009778 <TIM_Base_SetConfig+0x120>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d003      	beq.n	8009698 <TIM_Base_SetConfig+0x40>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a3a      	ldr	r2, [pc, #232]	; (800977c <TIM_Base_SetConfig+0x124>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d108      	bne.n	80096aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2f      	ldr	r2, [pc, #188]	; (800976c <TIM_Base_SetConfig+0x114>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d02b      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b8:	d027      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a2c      	ldr	r2, [pc, #176]	; (8009770 <TIM_Base_SetConfig+0x118>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d023      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a2b      	ldr	r2, [pc, #172]	; (8009774 <TIM_Base_SetConfig+0x11c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01f      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <TIM_Base_SetConfig+0x120>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d01b      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a29      	ldr	r2, [pc, #164]	; (800977c <TIM_Base_SetConfig+0x124>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d017      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a28      	ldr	r2, [pc, #160]	; (8009780 <TIM_Base_SetConfig+0x128>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d013      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a27      	ldr	r2, [pc, #156]	; (8009784 <TIM_Base_SetConfig+0x12c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00f      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a26      	ldr	r2, [pc, #152]	; (8009788 <TIM_Base_SetConfig+0x130>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00b      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a25      	ldr	r2, [pc, #148]	; (800978c <TIM_Base_SetConfig+0x134>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d007      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a24      	ldr	r2, [pc, #144]	; (8009790 <TIM_Base_SetConfig+0x138>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d003      	beq.n	800970a <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a23      	ldr	r2, [pc, #140]	; (8009794 <TIM_Base_SetConfig+0x13c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d108      	bne.n	800971c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a0a      	ldr	r2, [pc, #40]	; (800976c <TIM_Base_SetConfig+0x114>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_Base_SetConfig+0xf8>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a0c      	ldr	r2, [pc, #48]	; (800977c <TIM_Base_SetConfig+0x124>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d103      	bne.n	8009758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	691a      	ldr	r2, [r3, #16]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	615a      	str	r2, [r3, #20]
}
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	40010000 	.word	0x40010000
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800
 8009778:	40000c00 	.word	0x40000c00
 800977c:	40010400 	.word	0x40010400
 8009780:	40014000 	.word	0x40014000
 8009784:	40014400 	.word	0x40014400
 8009788:	40014800 	.word	0x40014800
 800978c:	40001800 	.word	0x40001800
 8009790:	40001c00 	.word	0x40001c00
 8009794:	40002000 	.word	0x40002000

08009798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e03f      	b.n	8009852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7f8 fea2 	bl	8002530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2224      	movs	r2, #36	; 0x24
 80097f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 faef 	bl	8009de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691a      	ldr	r2, [r3, #16]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695a      	ldr	r2, [r3, #20]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b20      	cmp	r3, #32
 8009872:	d130      	bne.n	80098d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_UART_Transmit_IT+0x26>
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e029      	b.n	80098d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_UART_Transmit_IT+0x38>
 800988e:	2302      	movs	r3, #2
 8009890:	e022      	b.n	80098d8 <HAL_UART_Transmit_IT+0x7e>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	88fa      	ldrh	r2, [r7, #6]
 80098a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2221      	movs	r2, #33	; 0x21
 80098b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e000      	b.n	80098d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d140      	bne.n	8009980 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_UART_Receive_IT+0x26>
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e039      	b.n	8009982 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_UART_Receive_IT+0x38>
 8009918:	2302      	movs	r3, #2
 800991a:	e032      	b.n	8009982 <HAL_UART_Receive_IT+0x9e>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	88fa      	ldrh	r2, [r7, #6]
 800992e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2222      	movs	r2, #34	; 0x22
 8009940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800995a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0220 	orr.w	r2, r2, #32
 800997a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e000      	b.n	8009982 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009980:	2302      	movs	r3, #2
  }
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d008      	beq.n	80099e2 <HAL_UART_IRQHandler+0x52>
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f982 	bl	8009ce4 <UART_Receive_IT>
      return;
 80099e0:	e0d1      	b.n	8009b86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80b0 	beq.w	8009b4a <HAL_UART_IRQHandler+0x1ba>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_UART_IRQHandler+0x70>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 80a5 	beq.w	8009b4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <HAL_UART_IRQHandler+0x90>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a18:	f043 0201 	orr.w	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_UART_IRQHandler+0xb0>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d005      	beq.n	8009a40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a38:	f043 0202 	orr.w	r2, r3, #2
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <HAL_UART_IRQHandler+0xd0>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a58:	f043 0204 	orr.w	r2, r3, #4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	f003 0308 	and.w	r3, r3, #8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00f      	beq.n	8009a8a <HAL_UART_IRQHandler+0xfa>
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <HAL_UART_IRQHandler+0xee>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a82:	f043 0208 	orr.w	r2, r3, #8
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d078      	beq.n	8009b84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d007      	beq.n	8009aac <HAL_UART_IRQHandler+0x11c>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f91c 	bl	8009ce4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	bf0c      	ite	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2300      	movne	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	f003 0308 	and.w	r3, r3, #8
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <HAL_UART_IRQHandler+0x144>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d031      	beq.n	8009b38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f865 	bl	8009ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	d123      	bne.n	8009b30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	695a      	ldr	r2, [r3, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d013      	beq.n	8009b28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	4a21      	ldr	r2, [pc, #132]	; (8009b8c <HAL_UART_IRQHandler+0x1fc>)
 8009b06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fa ffc1 	bl	8004a94 <HAL_DMA_Abort_IT>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d016      	beq.n	8009b46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b22:	4610      	mov	r0, r2
 8009b24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b26:	e00e      	b.n	8009b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f831 	bl	8009b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2e:	e00a      	b.n	8009b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f82d 	bl	8009b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b36:	e006      	b.n	8009b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f829 	bl	8009b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009b44:	e01e      	b.n	8009b84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b46:	bf00      	nop
    return;
 8009b48:	e01c      	b.n	8009b84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d008      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1d6>
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f852 	bl	8009c08 <UART_Transmit_IT>
    return;
 8009b64:	e00f      	b.n	8009b86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1f6>
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d005      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f89a 	bl	8009cb4 <UART_EndTransmit_IT>
    return;
 8009b80:	bf00      	nop
 8009b82:	e000      	b.n	8009b86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009b84:	bf00      	nop
  }
}
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	08009be1 	.word	0x08009be1

08009b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009bba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695a      	ldr	r2, [r3, #20]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0201 	bic.w	r2, r2, #1
 8009bca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f7ff ffc8 	bl	8009b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b21      	cmp	r3, #33	; 0x21
 8009c1a:	d144      	bne.n	8009ca6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c24:	d11a      	bne.n	8009c5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	1c9a      	adds	r2, r3, #2
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	621a      	str	r2, [r3, #32]
 8009c4e:	e00e      	b.n	8009c6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	621a      	str	r2, [r3, #32]
 8009c5a:	e008      	b.n	8009c6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6211      	str	r1, [r2, #32]
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10f      	bne.n	8009ca2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ca0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e000      	b.n	8009ca8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009ca6:	2302      	movs	r3, #2
  }
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7f7 f871 	bl	8000dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b22      	cmp	r3, #34	; 0x22
 8009cf6:	d171      	bne.n	8009ddc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d00:	d123      	bne.n	8009d4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10e      	bne.n	8009d2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	1c9a      	adds	r2, r3, #2
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8009d2c:	e029      	b.n	8009d82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28
 8009d48:	e01b      	b.n	8009d82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6858      	ldr	r0, [r3, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	1c59      	adds	r1, r3, #1
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	6291      	str	r1, [r2, #40]	; 0x28
 8009d62:	b2c2      	uxtb	r2, r0
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e00c      	b.n	8009d82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	1c58      	adds	r0, r3, #1
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	6288      	str	r0, [r1, #40]	; 0x28
 8009d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d120      	bne.n	8009dd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0220 	bic.w	r2, r2, #32
 8009da4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	695a      	ldr	r2, [r3, #20]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0201 	bic.w	r2, r2, #1
 8009dc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7f6 ffbe 	bl	8000d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e002      	b.n	8009dde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e000      	b.n	8009dde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009ddc:	2302      	movs	r3, #2
  }
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	431a      	orrs	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009e2a:	f023 030c 	bic.w	r3, r3, #12
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	6812      	ldr	r2, [r2, #0]
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	430b      	orrs	r3, r1
 8009e36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699a      	ldr	r2, [r3, #24]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e56:	f040 8199 	bne.w	800a18c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4ac6      	ldr	r2, [pc, #792]	; (800a178 <UART_SetConfig+0x390>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00f      	beq.n	8009e84 <UART_SetConfig+0x9c>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4ac4      	ldr	r2, [pc, #784]	; (800a17c <UART_SetConfig+0x394>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00a      	beq.n	8009e84 <UART_SetConfig+0x9c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4ac3      	ldr	r2, [pc, #780]	; (800a180 <UART_SetConfig+0x398>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d005      	beq.n	8009e84 <UART_SetConfig+0x9c>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4ac1      	ldr	r2, [pc, #772]	; (800a184 <UART_SetConfig+0x39c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	f040 80bd 	bne.w	8009ffe <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e84:	f7fd fe4a 	bl	8007b1c <HAL_RCC_GetPCLK2Freq>
 8009e88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	461d      	mov	r5, r3
 8009e8e:	f04f 0600 	mov.w	r6, #0
 8009e92:	46a8      	mov	r8, r5
 8009e94:	46b1      	mov	r9, r6
 8009e96:	eb18 0308 	adds.w	r3, r8, r8
 8009e9a:	eb49 0409 	adc.w	r4, r9, r9
 8009e9e:	4698      	mov	r8, r3
 8009ea0:	46a1      	mov	r9, r4
 8009ea2:	eb18 0805 	adds.w	r8, r8, r5
 8009ea6:	eb49 0906 	adc.w	r9, r9, r6
 8009eaa:	f04f 0100 	mov.w	r1, #0
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009eb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009eba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ebe:	4688      	mov	r8, r1
 8009ec0:	4691      	mov	r9, r2
 8009ec2:	eb18 0005 	adds.w	r0, r8, r5
 8009ec6:	eb49 0106 	adc.w	r1, r9, r6
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	461d      	mov	r5, r3
 8009ed0:	f04f 0600 	mov.w	r6, #0
 8009ed4:	196b      	adds	r3, r5, r5
 8009ed6:	eb46 0406 	adc.w	r4, r6, r6
 8009eda:	461a      	mov	r2, r3
 8009edc:	4623      	mov	r3, r4
 8009ede:	f7f6 f9a7 	bl	8000230 <__aeabi_uldivmod>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4ba7      	ldr	r3, [pc, #668]	; (800a188 <UART_SetConfig+0x3a0>)
 8009eea:	fba3 2302 	umull	r2, r3, r3, r2
 8009eee:	095b      	lsrs	r3, r3, #5
 8009ef0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f04f 0600 	mov.w	r6, #0
 8009efc:	46a9      	mov	r9, r5
 8009efe:	46b2      	mov	sl, r6
 8009f00:	eb19 0309 	adds.w	r3, r9, r9
 8009f04:	eb4a 040a 	adc.w	r4, sl, sl
 8009f08:	4699      	mov	r9, r3
 8009f0a:	46a2      	mov	sl, r4
 8009f0c:	eb19 0905 	adds.w	r9, r9, r5
 8009f10:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f14:	f04f 0100 	mov.w	r1, #0
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f28:	4689      	mov	r9, r1
 8009f2a:	4692      	mov	sl, r2
 8009f2c:	eb19 0005 	adds.w	r0, r9, r5
 8009f30:	eb4a 0106 	adc.w	r1, sl, r6
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	461d      	mov	r5, r3
 8009f3a:	f04f 0600 	mov.w	r6, #0
 8009f3e:	196b      	adds	r3, r5, r5
 8009f40:	eb46 0406 	adc.w	r4, r6, r6
 8009f44:	461a      	mov	r2, r3
 8009f46:	4623      	mov	r3, r4
 8009f48:	f7f6 f972 	bl	8000230 <__aeabi_uldivmod>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	461a      	mov	r2, r3
 8009f52:	4b8d      	ldr	r3, [pc, #564]	; (800a188 <UART_SetConfig+0x3a0>)
 8009f54:	fba3 1302 	umull	r1, r3, r3, r2
 8009f58:	095b      	lsrs	r3, r3, #5
 8009f5a:	2164      	movs	r1, #100	; 0x64
 8009f5c:	fb01 f303 	mul.w	r3, r1, r3
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	3332      	adds	r3, #50	; 0x32
 8009f66:	4a88      	ldr	r2, [pc, #544]	; (800a188 <UART_SetConfig+0x3a0>)
 8009f68:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6c:	095b      	lsrs	r3, r3, #5
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f74:	4498      	add	r8, r3
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	461d      	mov	r5, r3
 8009f7a:	f04f 0600 	mov.w	r6, #0
 8009f7e:	46a9      	mov	r9, r5
 8009f80:	46b2      	mov	sl, r6
 8009f82:	eb19 0309 	adds.w	r3, r9, r9
 8009f86:	eb4a 040a 	adc.w	r4, sl, sl
 8009f8a:	4699      	mov	r9, r3
 8009f8c:	46a2      	mov	sl, r4
 8009f8e:	eb19 0905 	adds.w	r9, r9, r5
 8009f92:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f96:	f04f 0100 	mov.w	r1, #0
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009faa:	4689      	mov	r9, r1
 8009fac:	4692      	mov	sl, r2
 8009fae:	eb19 0005 	adds.w	r0, r9, r5
 8009fb2:	eb4a 0106 	adc.w	r1, sl, r6
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	461d      	mov	r5, r3
 8009fbc:	f04f 0600 	mov.w	r6, #0
 8009fc0:	196b      	adds	r3, r5, r5
 8009fc2:	eb46 0406 	adc.w	r4, r6, r6
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4623      	mov	r3, r4
 8009fca:	f7f6 f931 	bl	8000230 <__aeabi_uldivmod>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4b6c      	ldr	r3, [pc, #432]	; (800a188 <UART_SetConfig+0x3a0>)
 8009fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8009fda:	095b      	lsrs	r3, r3, #5
 8009fdc:	2164      	movs	r1, #100	; 0x64
 8009fde:	fb01 f303 	mul.w	r3, r1, r3
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	3332      	adds	r3, #50	; 0x32
 8009fe8:	4a67      	ldr	r2, [pc, #412]	; (800a188 <UART_SetConfig+0x3a0>)
 8009fea:	fba2 2303 	umull	r2, r3, r2, r3
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	f003 0207 	and.w	r2, r3, #7
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4442      	add	r2, r8
 8009ffa:	609a      	str	r2, [r3, #8]
 8009ffc:	e27d      	b.n	800a4fa <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ffe:	f7fd fd79 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 800a002:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	461d      	mov	r5, r3
 800a008:	f04f 0600 	mov.w	r6, #0
 800a00c:	46a8      	mov	r8, r5
 800a00e:	46b1      	mov	r9, r6
 800a010:	eb18 0308 	adds.w	r3, r8, r8
 800a014:	eb49 0409 	adc.w	r4, r9, r9
 800a018:	4698      	mov	r8, r3
 800a01a:	46a1      	mov	r9, r4
 800a01c:	eb18 0805 	adds.w	r8, r8, r5
 800a020:	eb49 0906 	adc.w	r9, r9, r6
 800a024:	f04f 0100 	mov.w	r1, #0
 800a028:	f04f 0200 	mov.w	r2, #0
 800a02c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a030:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a034:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a038:	4688      	mov	r8, r1
 800a03a:	4691      	mov	r9, r2
 800a03c:	eb18 0005 	adds.w	r0, r8, r5
 800a040:	eb49 0106 	adc.w	r1, r9, r6
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	461d      	mov	r5, r3
 800a04a:	f04f 0600 	mov.w	r6, #0
 800a04e:	196b      	adds	r3, r5, r5
 800a050:	eb46 0406 	adc.w	r4, r6, r6
 800a054:	461a      	mov	r2, r3
 800a056:	4623      	mov	r3, r4
 800a058:	f7f6 f8ea 	bl	8000230 <__aeabi_uldivmod>
 800a05c:	4603      	mov	r3, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	461a      	mov	r2, r3
 800a062:	4b49      	ldr	r3, [pc, #292]	; (800a188 <UART_SetConfig+0x3a0>)
 800a064:	fba3 2302 	umull	r2, r3, r3, r2
 800a068:	095b      	lsrs	r3, r3, #5
 800a06a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	461d      	mov	r5, r3
 800a072:	f04f 0600 	mov.w	r6, #0
 800a076:	46a9      	mov	r9, r5
 800a078:	46b2      	mov	sl, r6
 800a07a:	eb19 0309 	adds.w	r3, r9, r9
 800a07e:	eb4a 040a 	adc.w	r4, sl, sl
 800a082:	4699      	mov	r9, r3
 800a084:	46a2      	mov	sl, r4
 800a086:	eb19 0905 	adds.w	r9, r9, r5
 800a08a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a08e:	f04f 0100 	mov.w	r1, #0
 800a092:	f04f 0200 	mov.w	r2, #0
 800a096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a09a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a09e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	4692      	mov	sl, r2
 800a0a6:	eb19 0005 	adds.w	r0, r9, r5
 800a0aa:	eb4a 0106 	adc.w	r1, sl, r6
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	461d      	mov	r5, r3
 800a0b4:	f04f 0600 	mov.w	r6, #0
 800a0b8:	196b      	adds	r3, r5, r5
 800a0ba:	eb46 0406 	adc.w	r4, r6, r6
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	f7f6 f8b5 	bl	8000230 <__aeabi_uldivmod>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <UART_SetConfig+0x3a0>)
 800a0ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a0d2:	095b      	lsrs	r3, r3, #5
 800a0d4:	2164      	movs	r1, #100	; 0x64
 800a0d6:	fb01 f303 	mul.w	r3, r1, r3
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	3332      	adds	r3, #50	; 0x32
 800a0e0:	4a29      	ldr	r2, [pc, #164]	; (800a188 <UART_SetConfig+0x3a0>)
 800a0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0ee:	4498      	add	r8, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	461d      	mov	r5, r3
 800a0f4:	f04f 0600 	mov.w	r6, #0
 800a0f8:	46a9      	mov	r9, r5
 800a0fa:	46b2      	mov	sl, r6
 800a0fc:	eb19 0309 	adds.w	r3, r9, r9
 800a100:	eb4a 040a 	adc.w	r4, sl, sl
 800a104:	4699      	mov	r9, r3
 800a106:	46a2      	mov	sl, r4
 800a108:	eb19 0905 	adds.w	r9, r9, r5
 800a10c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a110:	f04f 0100 	mov.w	r1, #0
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a11c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a120:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a124:	4689      	mov	r9, r1
 800a126:	4692      	mov	sl, r2
 800a128:	eb19 0005 	adds.w	r0, r9, r5
 800a12c:	eb4a 0106 	adc.w	r1, sl, r6
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	461d      	mov	r5, r3
 800a136:	f04f 0600 	mov.w	r6, #0
 800a13a:	196b      	adds	r3, r5, r5
 800a13c:	eb46 0406 	adc.w	r4, r6, r6
 800a140:	461a      	mov	r2, r3
 800a142:	4623      	mov	r3, r4
 800a144:	f7f6 f874 	bl	8000230 <__aeabi_uldivmod>
 800a148:	4603      	mov	r3, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <UART_SetConfig+0x3a0>)
 800a150:	fba3 1302 	umull	r1, r3, r3, r2
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	2164      	movs	r1, #100	; 0x64
 800a158:	fb01 f303 	mul.w	r3, r1, r3
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	3332      	adds	r3, #50	; 0x32
 800a162:	4a09      	ldr	r2, [pc, #36]	; (800a188 <UART_SetConfig+0x3a0>)
 800a164:	fba2 2303 	umull	r2, r3, r2, r3
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	f003 0207 	and.w	r2, r3, #7
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4442      	add	r2, r8
 800a174:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a176:	e1c0      	b.n	800a4fa <UART_SetConfig+0x712>
 800a178:	40011000 	.word	0x40011000
 800a17c:	40011400 	.word	0x40011400
 800a180:	40011800 	.word	0x40011800
 800a184:	40011c00 	.word	0x40011c00
 800a188:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4adc      	ldr	r2, [pc, #880]	; (800a504 <UART_SetConfig+0x71c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00f      	beq.n	800a1b6 <UART_SetConfig+0x3ce>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4adb      	ldr	r2, [pc, #876]	; (800a508 <UART_SetConfig+0x720>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00a      	beq.n	800a1b6 <UART_SetConfig+0x3ce>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4ad9      	ldr	r2, [pc, #868]	; (800a50c <UART_SetConfig+0x724>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d005      	beq.n	800a1b6 <UART_SetConfig+0x3ce>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4ad8      	ldr	r2, [pc, #864]	; (800a510 <UART_SetConfig+0x728>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	f040 80d1 	bne.w	800a358 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1b6:	f7fd fcb1 	bl	8007b1c <HAL_RCC_GetPCLK2Freq>
 800a1ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	469a      	mov	sl, r3
 800a1c0:	f04f 0b00 	mov.w	fp, #0
 800a1c4:	46d0      	mov	r8, sl
 800a1c6:	46d9      	mov	r9, fp
 800a1c8:	eb18 0308 	adds.w	r3, r8, r8
 800a1cc:	eb49 0409 	adc.w	r4, r9, r9
 800a1d0:	4698      	mov	r8, r3
 800a1d2:	46a1      	mov	r9, r4
 800a1d4:	eb18 080a 	adds.w	r8, r8, sl
 800a1d8:	eb49 090b 	adc.w	r9, r9, fp
 800a1dc:	f04f 0100 	mov.w	r1, #0
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a1e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a1ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a1f0:	4688      	mov	r8, r1
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	eb1a 0508 	adds.w	r5, sl, r8
 800a1f8:	eb4b 0609 	adc.w	r6, fp, r9
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	4619      	mov	r1, r3
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	f04f 0400 	mov.w	r4, #0
 800a20e:	0094      	lsls	r4, r2, #2
 800a210:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a214:	008b      	lsls	r3, r1, #2
 800a216:	461a      	mov	r2, r3
 800a218:	4623      	mov	r3, r4
 800a21a:	4628      	mov	r0, r5
 800a21c:	4631      	mov	r1, r6
 800a21e:	f7f6 f807 	bl	8000230 <__aeabi_uldivmod>
 800a222:	4603      	mov	r3, r0
 800a224:	460c      	mov	r4, r1
 800a226:	461a      	mov	r2, r3
 800a228:	4bba      	ldr	r3, [pc, #744]	; (800a514 <UART_SetConfig+0x72c>)
 800a22a:	fba3 2302 	umull	r2, r3, r3, r2
 800a22e:	095b      	lsrs	r3, r3, #5
 800a230:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	469b      	mov	fp, r3
 800a238:	f04f 0c00 	mov.w	ip, #0
 800a23c:	46d9      	mov	r9, fp
 800a23e:	46e2      	mov	sl, ip
 800a240:	eb19 0309 	adds.w	r3, r9, r9
 800a244:	eb4a 040a 	adc.w	r4, sl, sl
 800a248:	4699      	mov	r9, r3
 800a24a:	46a2      	mov	sl, r4
 800a24c:	eb19 090b 	adds.w	r9, r9, fp
 800a250:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a254:	f04f 0100 	mov.w	r1, #0
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a260:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a264:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a268:	4689      	mov	r9, r1
 800a26a:	4692      	mov	sl, r2
 800a26c:	eb1b 0509 	adds.w	r5, fp, r9
 800a270:	eb4c 060a 	adc.w	r6, ip, sl
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	4619      	mov	r1, r3
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	f04f 0400 	mov.w	r4, #0
 800a286:	0094      	lsls	r4, r2, #2
 800a288:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a28c:	008b      	lsls	r3, r1, #2
 800a28e:	461a      	mov	r2, r3
 800a290:	4623      	mov	r3, r4
 800a292:	4628      	mov	r0, r5
 800a294:	4631      	mov	r1, r6
 800a296:	f7f5 ffcb 	bl	8000230 <__aeabi_uldivmod>
 800a29a:	4603      	mov	r3, r0
 800a29c:	460c      	mov	r4, r1
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4b9c      	ldr	r3, [pc, #624]	; (800a514 <UART_SetConfig+0x72c>)
 800a2a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a6:	095b      	lsrs	r3, r3, #5
 800a2a8:	2164      	movs	r1, #100	; 0x64
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	3332      	adds	r3, #50	; 0x32
 800a2b4:	4a97      	ldr	r2, [pc, #604]	; (800a514 <UART_SetConfig+0x72c>)
 800a2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2c0:	4498      	add	r8, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	469b      	mov	fp, r3
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	46d9      	mov	r9, fp
 800a2cc:	46e2      	mov	sl, ip
 800a2ce:	eb19 0309 	adds.w	r3, r9, r9
 800a2d2:	eb4a 040a 	adc.w	r4, sl, sl
 800a2d6:	4699      	mov	r9, r3
 800a2d8:	46a2      	mov	sl, r4
 800a2da:	eb19 090b 	adds.w	r9, r9, fp
 800a2de:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a2e2:	f04f 0100 	mov.w	r1, #0
 800a2e6:	f04f 0200 	mov.w	r2, #0
 800a2ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	4692      	mov	sl, r2
 800a2fa:	eb1b 0509 	adds.w	r5, fp, r9
 800a2fe:	eb4c 060a 	adc.w	r6, ip, sl
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	f04f 0400 	mov.w	r4, #0
 800a314:	0094      	lsls	r4, r2, #2
 800a316:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a31a:	008b      	lsls	r3, r1, #2
 800a31c:	461a      	mov	r2, r3
 800a31e:	4623      	mov	r3, r4
 800a320:	4628      	mov	r0, r5
 800a322:	4631      	mov	r1, r6
 800a324:	f7f5 ff84 	bl	8000230 <__aeabi_uldivmod>
 800a328:	4603      	mov	r3, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	461a      	mov	r2, r3
 800a32e:	4b79      	ldr	r3, [pc, #484]	; (800a514 <UART_SetConfig+0x72c>)
 800a330:	fba3 1302 	umull	r1, r3, r3, r2
 800a334:	095b      	lsrs	r3, r3, #5
 800a336:	2164      	movs	r1, #100	; 0x64
 800a338:	fb01 f303 	mul.w	r3, r1, r3
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	3332      	adds	r3, #50	; 0x32
 800a342:	4a74      	ldr	r2, [pc, #464]	; (800a514 <UART_SetConfig+0x72c>)
 800a344:	fba2 2303 	umull	r2, r3, r2, r3
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f003 020f 	and.w	r2, r3, #15
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4442      	add	r2, r8
 800a354:	609a      	str	r2, [r3, #8]
 800a356:	e0d0      	b.n	800a4fa <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a358:	f7fd fbcc 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 800a35c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	469a      	mov	sl, r3
 800a362:	f04f 0b00 	mov.w	fp, #0
 800a366:	46d0      	mov	r8, sl
 800a368:	46d9      	mov	r9, fp
 800a36a:	eb18 0308 	adds.w	r3, r8, r8
 800a36e:	eb49 0409 	adc.w	r4, r9, r9
 800a372:	4698      	mov	r8, r3
 800a374:	46a1      	mov	r9, r4
 800a376:	eb18 080a 	adds.w	r8, r8, sl
 800a37a:	eb49 090b 	adc.w	r9, r9, fp
 800a37e:	f04f 0100 	mov.w	r1, #0
 800a382:	f04f 0200 	mov.w	r2, #0
 800a386:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a38a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a38e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a392:	4688      	mov	r8, r1
 800a394:	4691      	mov	r9, r2
 800a396:	eb1a 0508 	adds.w	r5, sl, r8
 800a39a:	eb4b 0609 	adc.w	r6, fp, r9
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	f04f 0300 	mov.w	r3, #0
 800a3ac:	f04f 0400 	mov.w	r4, #0
 800a3b0:	0094      	lsls	r4, r2, #2
 800a3b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3b6:	008b      	lsls	r3, r1, #2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4623      	mov	r3, r4
 800a3bc:	4628      	mov	r0, r5
 800a3be:	4631      	mov	r1, r6
 800a3c0:	f7f5 ff36 	bl	8000230 <__aeabi_uldivmod>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4b52      	ldr	r3, [pc, #328]	; (800a514 <UART_SetConfig+0x72c>)
 800a3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	469b      	mov	fp, r3
 800a3da:	f04f 0c00 	mov.w	ip, #0
 800a3de:	46d9      	mov	r9, fp
 800a3e0:	46e2      	mov	sl, ip
 800a3e2:	eb19 0309 	adds.w	r3, r9, r9
 800a3e6:	eb4a 040a 	adc.w	r4, sl, sl
 800a3ea:	4699      	mov	r9, r3
 800a3ec:	46a2      	mov	sl, r4
 800a3ee:	eb19 090b 	adds.w	r9, r9, fp
 800a3f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3f6:	f04f 0100 	mov.w	r1, #0
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a402:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a406:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a40a:	4689      	mov	r9, r1
 800a40c:	4692      	mov	sl, r2
 800a40e:	eb1b 0509 	adds.w	r5, fp, r9
 800a412:	eb4c 060a 	adc.w	r6, ip, sl
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	4619      	mov	r1, r3
 800a41c:	f04f 0200 	mov.w	r2, #0
 800a420:	f04f 0300 	mov.w	r3, #0
 800a424:	f04f 0400 	mov.w	r4, #0
 800a428:	0094      	lsls	r4, r2, #2
 800a42a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a42e:	008b      	lsls	r3, r1, #2
 800a430:	461a      	mov	r2, r3
 800a432:	4623      	mov	r3, r4
 800a434:	4628      	mov	r0, r5
 800a436:	4631      	mov	r1, r6
 800a438:	f7f5 fefa 	bl	8000230 <__aeabi_uldivmod>
 800a43c:	4603      	mov	r3, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	461a      	mov	r2, r3
 800a442:	4b34      	ldr	r3, [pc, #208]	; (800a514 <UART_SetConfig+0x72c>)
 800a444:	fba3 1302 	umull	r1, r3, r3, r2
 800a448:	095b      	lsrs	r3, r3, #5
 800a44a:	2164      	movs	r1, #100	; 0x64
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	3332      	adds	r3, #50	; 0x32
 800a456:	4a2f      	ldr	r2, [pc, #188]	; (800a514 <UART_SetConfig+0x72c>)
 800a458:	fba2 2303 	umull	r2, r3, r2, r3
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a462:	4498      	add	r8, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	469b      	mov	fp, r3
 800a468:	f04f 0c00 	mov.w	ip, #0
 800a46c:	46d9      	mov	r9, fp
 800a46e:	46e2      	mov	sl, ip
 800a470:	eb19 0309 	adds.w	r3, r9, r9
 800a474:	eb4a 040a 	adc.w	r4, sl, sl
 800a478:	4699      	mov	r9, r3
 800a47a:	46a2      	mov	sl, r4
 800a47c:	eb19 090b 	adds.w	r9, r9, fp
 800a480:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a484:	f04f 0100 	mov.w	r1, #0
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a498:	4689      	mov	r9, r1
 800a49a:	4692      	mov	sl, r2
 800a49c:	eb1b 0509 	adds.w	r5, fp, r9
 800a4a0:	eb4c 060a 	adc.w	r6, ip, sl
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	f04f 0400 	mov.w	r4, #0
 800a4b6:	0094      	lsls	r4, r2, #2
 800a4b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a4bc:	008b      	lsls	r3, r1, #2
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4623      	mov	r3, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	f7f5 feb3 	bl	8000230 <__aeabi_uldivmod>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4b10      	ldr	r3, [pc, #64]	; (800a514 <UART_SetConfig+0x72c>)
 800a4d2:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	2164      	movs	r1, #100	; 0x64
 800a4da:	fb01 f303 	mul.w	r3, r1, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	3332      	adds	r3, #50	; 0x32
 800a4e4:	4a0b      	ldr	r2, [pc, #44]	; (800a514 <UART_SetConfig+0x72c>)
 800a4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ea:	095b      	lsrs	r3, r3, #5
 800a4ec:	f003 020f 	and.w	r2, r3, #15
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4442      	add	r2, r8
 800a4f6:	609a      	str	r2, [r3, #8]
}
 800a4f8:	e7ff      	b.n	800a4fa <UART_SetConfig+0x712>
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a504:	40011000 	.word	0x40011000
 800a508:	40011400 	.word	0x40011400
 800a50c:	40011800 	.word	0x40011800
 800a510:	40011c00 	.word	0x40011c00
 800a514:	51eb851f 	.word	0x51eb851f

0800a518 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a530:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4b2f      	ldr	r3, [pc, #188]	; (800a5f4 <FSMC_NORSRAM_Init+0xdc>)
 800a536:	4013      	ands	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a542:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a548:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a54e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a554:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a55a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a560:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a566:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a56c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a572:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a578:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a57e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a584:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a58a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	2b08      	cmp	r3, #8
 800a598:	d103      	bne.n	800a5a2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b6:	d10a      	bne.n	800a5ce <FSMC_NORSRAM_Init+0xb6>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d006      	beq.n	800a5ce <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	ffc00480 	.word	0xffc00480

0800a5f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a61a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a626:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a62e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a636:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a640:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	3b02      	subs	r3, #2
 800a648:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a64a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a650:	4313      	orrs	r3, r2
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	4313      	orrs	r3, r2
 800a656:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6979      	ldr	r1, [r7, #20]
 800a660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a66c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a670:	d10e      	bne.n	800a690 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a67a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	3b01      	subs	r3, #1
 800a682:	051b      	lsls	r3, r3, #20
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b8:	d122      	bne.n	800a700 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	4b15      	ldr	r3, [pc, #84]	; (800a71c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a6de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a6e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a6ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6979      	ldr	r1, [r7, #20]
 800a6fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a6fe:	e005      	b.n	800a70c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	cff00000 	.word	0xcff00000

0800a720 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a720:	b084      	sub	sp, #16
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	f107 001c 	add.w	r0, r7, #28
 800a72e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a736:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a738:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a73a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a73e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a742:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a746:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a74a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a75a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	431a      	orrs	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	b004      	add	sp, #16
 800a774:	4770      	bx	lr

0800a776 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2203      	movs	r2, #3
 800a79c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a79e:	2002      	movs	r0, #2
 800a7a0:	f7f9 fbe0 	bl	8003f64 <HAL_Delay>
  
  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a7ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a7f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a804:	f023 030f 	bic.w	r3, r3, #15
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	b2db      	uxtb	r3, r3
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3314      	adds	r3, #20
 800a846:	461a      	mov	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	4413      	add	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
}  
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a884:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a88a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a890:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4313      	orrs	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0

}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8d6:	f107 0308 	add.w	r3, r7, #8
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff74 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e6:	2110      	movs	r1, #16
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f975 	bl	800abd8 <SDMMC_GetCmdResp1>
 800a8ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3720      	adds	r7, #32
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b08a      	sub	sp, #40	; 0x28
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a90a:	2307      	movs	r3, #7
 800a90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a91a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a91c:	f107 0310 	add.w	r3, r7, #16
 800a920:	4619      	mov	r1, r3
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7ff ff51 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a928:	f241 3288 	movw	r2, #5000	; 0x1388
 800a92c:	2107      	movs	r1, #7
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f952 	bl	800abd8 <SDMMC_GetCmdResp1>
 800a934:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3728      	adds	r7, #40	; 0x28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a95c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a95e:	f107 0308 	add.w	r3, r7, #8
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff ff30 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f90c 	bl	800ab88 <SDMMC_GetCmdError>
 800a970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a972:	69fb      	ldr	r3, [r7, #28]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a984:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a98a:	2308      	movs	r3, #8
 800a98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a98e:	2340      	movs	r3, #64	; 0x40
 800a990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a992:	2300      	movs	r3, #0
 800a994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a99a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff ff11 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 faf5 	bl	800af98 <SDMMC_GetCmdResp7>
 800a9ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b088      	sub	sp, #32
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a9c8:	2337      	movs	r3, #55	; 0x37
 800a9ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9da:	f107 0308 	add.w	r3, r7, #8
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fef2 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ea:	2137      	movs	r1, #55	; 0x37
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f8f3 	bl	800abd8 <SDMMC_GetCmdResp1>
 800a9f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b088      	sub	sp, #32
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aa14:	2329      	movs	r3, #41	; 0x29
 800aa16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa26:	f107 0308 	add.w	r3, r7, #8
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff fecc 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa02 	bl	800ae3c <SDMMC_GetCmdResp3>
 800aa38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aa52:	2306      	movs	r3, #6
 800aa54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa64:	f107 0308 	add.w	r3, r7, #8
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fead 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800aa70:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa74:	2106      	movs	r1, #6
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f8ae 	bl	800abd8 <SDMMC_GetCmdResp1>
 800aa7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3720      	adds	r7, #32
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800aa94:	2333      	movs	r3, #51	; 0x33
 800aa96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa98:	2340      	movs	r3, #64	; 0x40
 800aa9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fe8c 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800aab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab6:	2133      	movs	r1, #51	; 0x33
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f88d 	bl	800abd8 <SDMMC_GetCmdResp1>
 800aabe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aac0:	69fb      	ldr	r3, [r7, #28]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b088      	sub	sp, #32
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aad6:	2302      	movs	r3, #2
 800aad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aada:	23c0      	movs	r3, #192	; 0xc0
 800aadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aae8:	f107 0308 	add.w	r3, r7, #8
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fe6b 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f95b 	bl	800adb0 <SDMMC_GetCmdResp2>
 800aafa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafc:	69fb      	ldr	r3, [r7, #28]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b088      	sub	sp, #32
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ab14:	2309      	movs	r3, #9
 800ab16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ab18:	23c0      	movs	r3, #192	; 0xc0
 800ab1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab26:	f107 0308 	add.w	r3, r7, #8
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff fe4c 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f93c 	bl	800adb0 <SDMMC_GetCmdResp2>
 800ab38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ab52:	2303      	movs	r3, #3
 800ab54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fe2d 	bl	800a7ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	2103      	movs	r1, #3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f99b 	bl	800aeb0 <SDMMC_GetCmdResp6>
 800ab7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ab88:	b490      	push	{r4, r7}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab90:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <SDMMC_GetCmdError+0x48>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a0f      	ldr	r2, [pc, #60]	; (800abd4 <SDMMC_GetCmdError+0x4c>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	0a5b      	lsrs	r3, r3, #9
 800ab9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aba4:	4623      	mov	r3, r4
 800aba6:	1e5c      	subs	r4, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d102      	bne.n	800abb2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abb0:	e009      	b.n	800abc6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0f2      	beq.n	800aba4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	22c5      	movs	r2, #197	; 0xc5
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bc90      	pop	{r4, r7}
 800abce:	4770      	bx	lr
 800abd0:	20000024 	.word	0x20000024
 800abd4:	10624dd3 	.word	0x10624dd3

0800abd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	460b      	mov	r3, r1
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800abe6:	4b6f      	ldr	r3, [pc, #444]	; (800ada4 <SDMMC_GetCmdResp1+0x1cc>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a6f      	ldr	r2, [pc, #444]	; (800ada8 <SDMMC_GetCmdResp1+0x1d0>)
 800abec:	fba2 2303 	umull	r2, r3, r2, r3
 800abf0:	0a5b      	lsrs	r3, r3, #9
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800abf8:	4623      	mov	r3, r4
 800abfa:	1e5c      	subs	r4, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac04:	e0c9      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f0      	beq.n	800abf8 <SDMMC_GetCmdResp1+0x20>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1eb      	bne.n	800abf8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d004      	beq.n	800ac36 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2204      	movs	r2, #4
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac32:	2304      	movs	r3, #4
 800ac34:	e0b1      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0a6      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	22c5      	movs	r2, #197	; 0xc5
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fde3 	bl	800a81e <SDIO_GetCommandResponse>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d001      	beq.n	800ac66 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e099      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ac66:	2100      	movs	r1, #0
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff fde5 	bl	800a838 <SDIO_GetResponse>
 800ac6e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	4b4e      	ldr	r3, [pc, #312]	; (800adac <SDMMC_GetCmdResp1+0x1d4>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e08d      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	da02      	bge.n	800ac8a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ac84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac88:	e087      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac94:	2340      	movs	r3, #64	; 0x40
 800ac96:	e080      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aca2:	2380      	movs	r3, #128	; 0x80
 800aca4:	e079      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800acb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb4:	e071      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800acc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc4:	e069      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800acd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd4:	e061      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ace0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ace4:	e059      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800acf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf4:	e051      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad04:	e049      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ad10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad14:	e041      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ad20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad24:	e039      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ad30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad34:	e031      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ad40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ad44:	e029      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ad50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad54:	e021      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ad60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad64:	e019      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ad70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad74:	e011      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ad80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad84:	e009      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f003 0308 	and.w	r3, r3, #8
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ad90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad94:	e001      	b.n	800ad9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd90      	pop	{r4, r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000024 	.word	0x20000024
 800ada8:	10624dd3 	.word	0x10624dd3
 800adac:	fdffe008 	.word	0xfdffe008

0800adb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800adb0:	b490      	push	{r4, r7}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adb8:	4b1e      	ldr	r3, [pc, #120]	; (800ae34 <SDMMC_GetCmdResp2+0x84>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <SDMMC_GetCmdResp2+0x88>)
 800adbe:	fba2 2303 	umull	r2, r3, r2, r3
 800adc2:	0a5b      	lsrs	r3, r3, #9
 800adc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800adcc:	4623      	mov	r3, r4
 800adce:	1e5c      	subs	r4, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800add4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800add8:	e026      	b.n	800ae28 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adde:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0f0      	beq.n	800adcc <SDMMC_GetCmdResp2+0x1c>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1eb      	bne.n	800adcc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2204      	movs	r2, #4
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae06:	2304      	movs	r3, #4
 800ae08:	e00e      	b.n	800ae28 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d004      	beq.n	800ae20 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e003      	b.n	800ae28 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	22c5      	movs	r2, #197	; 0xc5
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc90      	pop	{r4, r7}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20000024 	.word	0x20000024
 800ae38:	10624dd3 	.word	0x10624dd3

0800ae3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ae3c:	b490      	push	{r4, r7}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae44:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <SDMMC_GetCmdResp3+0x6c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a18      	ldr	r2, [pc, #96]	; (800aeac <SDMMC_GetCmdResp3+0x70>)
 800ae4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4e:	0a5b      	lsrs	r3, r3, #9
 800ae50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae58:	4623      	mov	r3, r4
 800ae5a:	1e5c      	subs	r4, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae64:	e01b      	b.n	800ae9e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0f0      	beq.n	800ae58 <SDMMC_GetCmdResp3+0x1c>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1eb      	bne.n	800ae58 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2204      	movs	r2, #4
 800ae90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae92:	2304      	movs	r3, #4
 800ae94:	e003      	b.n	800ae9e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	22c5      	movs	r2, #197	; 0xc5
 800ae9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc90      	pop	{r4, r7}
 800aea6:	4770      	bx	lr
 800aea8:	20000024 	.word	0x20000024
 800aeac:	10624dd3 	.word	0x10624dd3

0800aeb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aebe:	4b34      	ldr	r3, [pc, #208]	; (800af90 <SDMMC_GetCmdResp6+0xe0>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a34      	ldr	r2, [pc, #208]	; (800af94 <SDMMC_GetCmdResp6+0xe4>)
 800aec4:	fba2 2303 	umull	r2, r3, r2, r3
 800aec8:	0a5b      	lsrs	r3, r3, #9
 800aeca:	f241 3288 	movw	r2, #5000	; 0x1388
 800aece:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aed2:	4623      	mov	r3, r4
 800aed4:	1e5c      	subs	r4, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aede:	e052      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0f0      	beq.n	800aed2 <SDMMC_GetCmdResp6+0x22>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1eb      	bne.n	800aed2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	f003 0304 	and.w	r3, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2204      	movs	r2, #4
 800af0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af0c:	2304      	movs	r3, #4
 800af0e:	e03a      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af22:	2301      	movs	r3, #1
 800af24:	e02f      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff fc79 	bl	800a81e <SDIO_GetCommandResponse>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	7afb      	ldrb	r3, [r7, #11]
 800af32:	4293      	cmp	r3, r2
 800af34:	d001      	beq.n	800af3a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af36:	2301      	movs	r3, #1
 800af38:	e025      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	22c5      	movs	r2, #197	; 0xc5
 800af3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800af40:	2100      	movs	r1, #0
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fc78 	bl	800a838 <SDIO_GetResponse>
 800af48:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	0c1b      	lsrs	r3, r3, #16
 800af58:	b29a      	uxth	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800af5e:	2300      	movs	r3, #0
 800af60:	e011      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af70:	e009      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af80:	e001      	b.n	800af86 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af86:	4618      	mov	r0, r3
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd90      	pop	{r4, r7, pc}
 800af8e:	bf00      	nop
 800af90:	20000024 	.word	0x20000024
 800af94:	10624dd3 	.word	0x10624dd3

0800af98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800af98:	b490      	push	{r4, r7}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afa0:	4b21      	ldr	r3, [pc, #132]	; (800b028 <SDMMC_GetCmdResp7+0x90>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a21      	ldr	r2, [pc, #132]	; (800b02c <SDMMC_GetCmdResp7+0x94>)
 800afa6:	fba2 2303 	umull	r2, r3, r2, r3
 800afaa:	0a5b      	lsrs	r3, r3, #9
 800afac:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800afb4:	4623      	mov	r3, r4
 800afb6:	1e5c      	subs	r4, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afc0:	e02c      	b.n	800b01c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0f0      	beq.n	800afb4 <SDMMC_GetCmdResp7+0x1c>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1eb      	bne.n	800afb4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2204      	movs	r2, #4
 800afec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afee:	2304      	movs	r3, #4
 800aff0:	e014      	b.n	800b01c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d004      	beq.n	800b008 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b004:	2301      	movs	r3, #1
 800b006:	e009      	b.n	800b01c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2240      	movs	r2, #64	; 0x40
 800b018:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b01a:	2300      	movs	r3, #0
  
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bc90      	pop	{r4, r7}
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20000024 	.word	0x20000024
 800b02c:	10624dd3 	.word	0x10624dd3

0800b030 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b030:	b084      	sub	sp, #16
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	f107 001c 	add.w	r0, r7, #28
 800b03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	2b01      	cmp	r3, #1
 800b046:	d122      	bne.n	800b08e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b05c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	2b01      	cmp	r3, #1
 800b074:	d105      	bne.n	800b082 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f94a 	bl	800b31c <USB_CoreReset>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
 800b08c:	e01a      	b.n	800b0c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f93e 	bl	800b31c <USB_CoreReset>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	639a      	str	r2, [r3, #56]	; 0x38
 800b0b6:	e005      	b.n	800b0c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d10b      	bne.n	800b0e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f043 0206 	orr.w	r2, r3, #6
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f043 0220 	orr.w	r2, r3, #32
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0ee:	b004      	add	sp, #16
 800b0f0:	4770      	bx	lr

0800b0f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f043 0201 	orr.w	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 0201 	bic.w	r2, r3, #1
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b14e:	78fb      	ldrb	r3, [r7, #3]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d106      	bne.n	800b162 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60da      	str	r2, [r3, #12]
 800b160:	e00b      	b.n	800b17a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60da      	str	r2, [r3, #12]
 800b174:	e001      	b.n	800b17a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e003      	b.n	800b182 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b17a:	2032      	movs	r0, #50	; 0x32
 800b17c:	f7f8 fef2 	bl	8003f64 <HAL_Delay>

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	019b      	lsls	r3, r3, #6
 800b19e:	f043 0220 	orr.w	r2, r3, #32
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <USB_FlushTxFifo+0x48>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d901      	bls.n	800b1b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e006      	b.n	800b1c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f003 0320 	and.w	r3, r3, #32
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d0f0      	beq.n	800b1a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	00030d40 	.word	0x00030d40

0800b1d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2210      	movs	r2, #16
 800b1e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4a09      	ldr	r2, [pc, #36]	; (800b218 <USB_FlushRxFifo+0x40>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d901      	bls.n	800b1fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e006      	b.n	800b20a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	f003 0310 	and.w	r3, r3, #16
 800b204:	2b10      	cmp	r3, #16
 800b206:	d0f0      	beq.n	800b1ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	00030d40 	.word	0x00030d40

0800b21c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b089      	sub	sp, #36	; 0x24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4611      	mov	r1, r2
 800b228:	461a      	mov	r2, r3
 800b22a:	460b      	mov	r3, r1
 800b22c:	71fb      	strb	r3, [r7, #7]
 800b22e:	4613      	mov	r3, r2
 800b230:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b23a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d11a      	bne.n	800b278 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b242:	88bb      	ldrh	r3, [r7, #4]
 800b244:	3303      	adds	r3, #3
 800b246:	089b      	lsrs	r3, r3, #2
 800b248:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b24a:	2300      	movs	r3, #0
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	e00f      	b.n	800b270 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	031a      	lsls	r2, r3, #12
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	4413      	add	r3, r2
 800b258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b25c:	461a      	mov	r2, r3
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	3304      	adds	r3, #4
 800b268:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	3301      	adds	r3, #1
 800b26e:	61bb      	str	r3, [r7, #24]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	429a      	cmp	r2, r3
 800b276:	d3eb      	bcc.n	800b250 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3724      	adds	r7, #36	; 0x24
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b286:	b480      	push	{r7}
 800b288:	b089      	sub	sp, #36	; 0x24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	4613      	mov	r3, r2
 800b292:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	3303      	adds	r3, #3
 800b2a0:	089b      	lsrs	r3, r3, #2
 800b2a2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	e00b      	b.n	800b2c2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	61bb      	str	r3, [r7, #24]
 800b2c2:	69ba      	ldr	r2, [r7, #24]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d3ef      	bcc.n	800b2aa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b2ca:	69fb      	ldr	r3, [r7, #28]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3724      	adds	r7, #36	; 0x24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0301 	and.w	r3, r3, #1
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
	...

0800b31c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3301      	adds	r3, #1
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4a13      	ldr	r2, [pc, #76]	; (800b380 <USB_CoreReset+0x64>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d901      	bls.n	800b33a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e01b      	b.n	800b372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	daf2      	bge.n	800b328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f043 0201 	orr.w	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3301      	adds	r3, #1
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4a09      	ldr	r2, [pc, #36]	; (800b380 <USB_CoreReset+0x64>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d901      	bls.n	800b364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b360:	2303      	movs	r3, #3
 800b362:	e006      	b.n	800b372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d0f0      	beq.n	800b352 <USB_CoreReset+0x36>

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	00030d40 	.word	0x00030d40

0800b384 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b384:	b084      	sub	sp, #16
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	f107 001c 	add.w	r0, r7, #28
 800b392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d10a      	bne.n	800b3e6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3de:	f043 0304 	orr.w	r3, r3, #4
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	e014      	b.n	800b410 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3f4:	f023 0304 	bic.w	r3, r3, #4
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	e009      	b.n	800b410 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b40a:	f023 0304 	bic.w	r3, r3, #4
 800b40e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b410:	2110      	movs	r1, #16
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff feba 	bl	800b18c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff fedd 	bl	800b1d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e015      	b.n	800b450 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b430:	461a      	mov	r2, r3
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b444:	461a      	mov	r2, r3
 800b446:	2300      	movs	r3, #0
 800b448:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	429a      	cmp	r2, r3
 800b456:	d3e5      	bcc.n	800b424 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b458:	2101      	movs	r1, #1
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f8ac 	bl	800b5b8 <USB_DriveVbus>

  HAL_Delay(200U);
 800b460:	20c8      	movs	r0, #200	; 0xc8
 800b462:	f7f8 fd7f 	bl	8003f64 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b486:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a14      	ldr	r2, [pc, #80]	; (800b4dc <USB_HostInit+0x158>)
 800b48c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a13      	ldr	r2, [pc, #76]	; (800b4e0 <USB_HostInit+0x15c>)
 800b492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b496:	e009      	b.n	800b4ac <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2280      	movs	r2, #128	; 0x80
 800b49c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a10      	ldr	r2, [pc, #64]	; (800b4e4 <USB_HostInit+0x160>)
 800b4a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a10      	ldr	r2, [pc, #64]	; (800b4e8 <USB_HostInit+0x164>)
 800b4a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d105      	bne.n	800b4be <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	f043 0210 	orr.w	r2, r3, #16
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	699a      	ldr	r2, [r3, #24]
 800b4c2:	4b0a      	ldr	r3, [pc, #40]	; (800b4ec <USB_HostInit+0x168>)
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4d6:	b004      	add	sp, #16
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	01000200 	.word	0x01000200
 800b4e0:	00e00300 	.word	0x00e00300
 800b4e4:	00600080 	.word	0x00600080
 800b4e8:	004000e0 	.word	0x004000e0
 800b4ec:	a3200008 	.word	0xa3200008

0800b4f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b50e:	f023 0303 	bic.w	r3, r3, #3
 800b512:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	68f9      	ldr	r1, [r7, #12]
 800b524:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b528:	4313      	orrs	r3, r2
 800b52a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d107      	bne.n	800b542 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b538:	461a      	mov	r2, r3
 800b53a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b53e:	6053      	str	r3, [r2, #4]
 800b540:	e009      	b.n	800b556 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d106      	bne.n	800b556 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b54e:	461a      	mov	r2, r3
 800b550:	f241 7370 	movw	r3, #6000	; 0x1770
 800b554:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b584:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b58e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b592:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b594:	2064      	movs	r0, #100	; 0x64
 800b596:	f7f8 fce5 	bl	8003f64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b5a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b5a8:	200a      	movs	r0, #10
 800b5aa:	f7f8 fcdb 	bl	8003f64 <HAL_Delay>

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b5dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <USB_DriveVbus+0x44>
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d106      	bne.n	800b5fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b5f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b606:	d109      	bne.n	800b61c <USB_DriveVbus+0x64>
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d106      	bne.n	800b61c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b61a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b085      	sub	sp, #20
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	0c5b      	lsrs	r3, r3, #17
 800b648:	f003 0303 	and.w	r3, r3, #3
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	b29b      	uxth	r3, r3
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	4608      	mov	r0, r1
 800b686:	4611      	mov	r1, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	4603      	mov	r3, r0
 800b68c:	70fb      	strb	r3, [r7, #3]
 800b68e:	460b      	mov	r3, r1
 800b690:	70bb      	strb	r3, [r7, #2]
 800b692:	4613      	mov	r3, r2
 800b694:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b6b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d87e      	bhi.n	800b7b8 <USB_HC_Init+0x13c>
 800b6ba:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <USB_HC_Init+0x44>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6d1 	.word	0x0800b6d1
 800b6c4:	0800b77b 	.word	0x0800b77b
 800b6c8:	0800b6d1 	.word	0x0800b6d1
 800b6cc:	0800b73d 	.word	0x0800b73d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f240 439d 	movw	r3, #1181	; 0x49d
 800b6e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b6e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	da10      	bge.n	800b70e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	78fa      	ldrb	r2, [r7, #3]
 800b6fc:	0151      	lsls	r1, r2, #5
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	440a      	add	r2, r1
 800b702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b70a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b70c:	e057      	b.n	800b7be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b716:	2b00      	cmp	r3, #0
 800b718:	d051      	beq.n	800b7be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	4413      	add	r3, r2
 800b722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	78fa      	ldrb	r2, [r7, #3]
 800b72a:	0151      	lsls	r1, r2, #5
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	440a      	add	r2, r1
 800b730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b734:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b738:	60d3      	str	r3, [r2, #12]
      break;
 800b73a:	e040      	b.n	800b7be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4413      	add	r3, r2
 800b744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b748:	461a      	mov	r2, r3
 800b74a:	f240 639d 	movw	r3, #1693	; 0x69d
 800b74e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b754:	2b00      	cmp	r3, #0
 800b756:	da34      	bge.n	800b7c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b758:	78fb      	ldrb	r3, [r7, #3]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b776:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b778:	e023      	b.n	800b7c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	015a      	lsls	r2, r3, #5
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b786:	461a      	mov	r2, r3
 800b788:	f240 2325 	movw	r3, #549	; 0x225
 800b78c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b78e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b792:	2b00      	cmp	r3, #0
 800b794:	da17      	bge.n	800b7c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b796:	78fb      	ldrb	r3, [r7, #3]
 800b798:	015a      	lsls	r2, r3, #5
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	0151      	lsls	r1, r2, #5
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	440a      	add	r2, r1
 800b7ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b7b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b7b6:	e006      	b.n	800b7c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b7bc:	e004      	b.n	800b7c8 <USB_HC_Init+0x14c>
      break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <USB_HC_Init+0x14c>
      break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <USB_HC_Init+0x14c>
      break;
 800b7c6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7ce:	699a      	ldr	r2, [r3, #24]
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7dc:	68b9      	ldr	r1, [r7, #8]
 800b7de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b7f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	da03      	bge.n	800b802 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7fe:	613b      	str	r3, [r7, #16]
 800b800:	e001      	b.n	800b806 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d103      	bne.n	800b816 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b80e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	e001      	b.n	800b81a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b81a:	787b      	ldrb	r3, [r7, #1]
 800b81c:	059b      	lsls	r3, r3, #22
 800b81e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b822:	78bb      	ldrb	r3, [r7, #2]
 800b824:	02db      	lsls	r3, r3, #11
 800b826:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b82a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b82c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b830:	049b      	lsls	r3, r3, #18
 800b832:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b836:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b838:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b83a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b83e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	0159      	lsls	r1, r3, #5
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	440b      	add	r3, r1
 800b84c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b850:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b856:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b858:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d10f      	bne.n	800b880 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	4413      	add	r3, r2
 800b868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	0151      	lsls	r1, r2, #5
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	440a      	add	r2, r1
 800b876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b87a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b87e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
}
 800b882:	4618      	mov	r0, r3
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop

0800b890 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08c      	sub	sp, #48	; 0x30
 800b894:	af02      	add	r7, sp, #8
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	4613      	mov	r3, r2
 800b89c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b8a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d028      	beq.n	800b90c <USB_HC_StartXfer+0x7c>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	791b      	ldrb	r3, [r3, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d124      	bne.n	800b90c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b8c2:	79fb      	ldrb	r3, [r7, #7]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10b      	bne.n	800b8e0 <USB_HC_StartXfer+0x50>
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	795b      	ldrb	r3, [r3, #5]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d107      	bne.n	800b8e0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 fa30 	bl	800bd3c <USB_DoPing>
      return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e114      	b.n	800bb0a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d112      	bne.n	800b90c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	0151      	lsls	r1, r2, #5
 800b8f8:	6a3a      	ldr	r2, [r7, #32]
 800b8fa:	440a      	add	r2, r1
 800b8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b900:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b904:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2200      	movs	r2, #0
 800b90a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d018      	beq.n	800b946 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	8912      	ldrh	r2, [r2, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	3b01      	subs	r3, #1
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	8912      	ldrh	r2, [r2, #8]
 800b924:	fbb3 f3f2 	udiv	r3, r3, r2
 800b928:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b92a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b92c:	8b7b      	ldrh	r3, [r7, #26]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d90b      	bls.n	800b94a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b932:	8b7b      	ldrh	r3, [r7, #26]
 800b934:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b936:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	8912      	ldrh	r2, [r2, #8]
 800b93c:	fb02 f203 	mul.w	r2, r2, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	611a      	str	r2, [r3, #16]
 800b944:	e001      	b.n	800b94a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b946:	2301      	movs	r3, #1
 800b948:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	78db      	ldrb	r3, [r3, #3]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d006      	beq.n	800b960 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	8912      	ldrh	r2, [r2, #8]
 800b958:	fb02 f203 	mul.w	r2, r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b96a:	04d9      	lsls	r1, r3, #19
 800b96c:	4b69      	ldr	r3, [pc, #420]	; (800bb14 <USB_HC_StartXfer+0x284>)
 800b96e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b970:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	7a9b      	ldrb	r3, [r3, #10]
 800b976:	075b      	lsls	r3, r3, #29
 800b978:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b97c:	69f9      	ldr	r1, [r7, #28]
 800b97e:	0148      	lsls	r0, r1, #5
 800b980:	6a39      	ldr	r1, [r7, #32]
 800b982:	4401      	add	r1, r0
 800b984:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b988:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b98a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d009      	beq.n	800b9a6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	68d9      	ldr	r1, [r3, #12]
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9a2:	460a      	mov	r2, r1
 800b9a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bf0c      	ite	eq
 800b9b6:	2301      	moveq	r3, #1
 800b9b8:	2300      	movne	r3, #0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69fa      	ldr	r2, [r7, #28]
 800b9ce:	0151      	lsls	r1, r2, #5
 800b9d0:	6a3a      	ldr	r2, [r7, #32]
 800b9d2:	440a      	add	r2, r1
 800b9d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	7e7b      	ldrb	r3, [r7, #25]
 800b9ee:	075b      	lsls	r3, r3, #29
 800b9f0:	69f9      	ldr	r1, [r7, #28]
 800b9f2:	0148      	lsls	r0, r1, #5
 800b9f4:	6a39      	ldr	r1, [r7, #32]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a42      	ldr	r2, [pc, #264]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba10:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba12:	4b41      	ldr	r3, [pc, #260]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba1a:	4a3f      	ldr	r2, [pc, #252]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba1c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	78db      	ldrb	r3, [r3, #3]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d006      	beq.n	800ba34 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ba26:	4b3c      	ldr	r3, [pc, #240]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba2e:	4a3a      	ldr	r2, [pc, #232]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	e005      	b.n	800ba40 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ba34:	4b38      	ldr	r3, [pc, #224]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba3c:	4a36      	ldr	r2, [pc, #216]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba3e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba40:	4b35      	ldr	r3, [pc, #212]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba48:	4a33      	ldr	r2, [pc, #204]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba4a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4b2f      	ldr	r3, [pc, #188]	; (800bb18 <USB_HC_StartXfer+0x288>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e04f      	b.n	800bb0a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	78db      	ldrb	r3, [r3, #3]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d14a      	bne.n	800bb08 <USB_HC_StartXfer+0x278>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d046      	beq.n	800bb08 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	79db      	ldrb	r3, [r3, #7]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d830      	bhi.n	800bae4 <USB_HC_StartXfer+0x254>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <USB_HC_StartXfer+0x1f8>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800ba99 	.word	0x0800ba99
 800ba8c:	0800babd 	.word	0x0800babd
 800ba90:	0800ba99 	.word	0x0800ba99
 800ba94:	0800babd 	.word	0x0800babd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	3303      	adds	r3, #3
 800ba9e:	089b      	lsrs	r3, r3, #2
 800baa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800baa2:	8afa      	ldrh	r2, [r7, #22]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	429a      	cmp	r2, r3
 800baac:	d91c      	bls.n	800bae8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	f043 0220 	orr.w	r2, r3, #32
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	619a      	str	r2, [r3, #24]
        }
        break;
 800baba:	e015      	b.n	800bae8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	3303      	adds	r3, #3
 800bac2:	089b      	lsrs	r3, r3, #2
 800bac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bac6:	8afa      	ldrh	r2, [r7, #22]
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d90a      	bls.n	800baec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	619a      	str	r2, [r3, #24]
        }
        break;
 800bae2:	e003      	b.n	800baec <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bae4:	bf00      	nop
 800bae6:	e002      	b.n	800baee <USB_HC_StartXfer+0x25e>
        break;
 800bae8:	bf00      	nop
 800baea:	e000      	b.n	800baee <USB_HC_StartXfer+0x25e>
        break;
 800baec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	68d9      	ldr	r1, [r3, #12]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	785a      	ldrb	r2, [r3, #1]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	b298      	uxth	r0, r3
 800bafc:	2300      	movs	r3, #0
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	4603      	mov	r3, r0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f7ff fb8a 	bl	800b21c <USB_WritePacket>
  }

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3728      	adds	r7, #40	; 0x28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	1ff80000 	.word	0x1ff80000
 800bb18:	200001c4 	.word	0x200001c4

0800bb1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	b29b      	uxth	r3, r3
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b087      	sub	sp, #28
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800bb4e:	78fb      	ldrb	r3, [r7, #3]
 800bb50:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	0c9b      	lsrs	r3, r3, #18
 800bb66:	f003 0303 	and.w	r3, r3, #3
 800bb6a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <USB_HC_Halt+0x3a>
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d16c      	bne.n	800bc52 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	0151      	lsls	r1, r2, #5
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	440a      	add	r2, r1
 800bb8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb96:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d143      	bne.n	800bc2c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	0151      	lsls	r1, r2, #5
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	440a      	add	r2, r1
 800bbda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbe2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	0151      	lsls	r1, r2, #5
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	440a      	add	r2, r1
 800bbfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	3301      	adds	r3, #1
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc10:	d81d      	bhi.n	800bc4e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc28:	d0ec      	beq.n	800bc04 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc2a:	e080      	b.n	800bd2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	0151      	lsls	r1, r2, #5
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	440a      	add	r2, r1
 800bc42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc4a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc4c:	e06f      	b.n	800bd2e <USB_HC_Halt+0x1f0>
          break;
 800bc4e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc50:	e06d      	b.n	800bd2e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	0151      	lsls	r1, r2, #5
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	440a      	add	r2, r1
 800bc68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc70:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d143      	bne.n	800bd0a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bca0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	015a      	lsls	r2, r3, #5
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	4413      	add	r3, r2
 800bcca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	0151      	lsls	r1, r2, #5
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	440a      	add	r2, r1
 800bcd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bce0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	3301      	adds	r3, #1
 800bce6:	617b      	str	r3, [r7, #20]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcee:	d81d      	bhi.n	800bd2c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd06:	d0ec      	beq.n	800bce2 <USB_HC_Halt+0x1a4>
 800bd08:	e011      	b.n	800bd2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	015a      	lsls	r2, r3, #5
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	0151      	lsls	r1, r2, #5
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	440a      	add	r2, r1
 800bd20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	e000      	b.n	800bd2e <USB_HC_Halt+0x1f0>
          break;
 800bd2c:	bf00      	nop
    }
  }

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bd50:	2301      	movs	r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	04da      	lsls	r2, r3, #19
 800bd58:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <USB_DoPing+0x74>)
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	0151      	lsls	r1, r2, #5
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	440a      	add	r2, r1
 800bd64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	1ff80000 	.word	0x1ff80000

0800bdb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff f9a5 	bl	800b114 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bdca:	2110      	movs	r1, #16
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff f9dd 	bl	800b18c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fa00 	bl	800b1d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	e01f      	b.n	800be1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	015a      	lsls	r2, r3, #5
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4413      	add	r3, r2
 800be0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be12:	461a      	mov	r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	3301      	adds	r3, #1
 800be1c:	613b      	str	r3, [r7, #16]
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	2b0f      	cmp	r3, #15
 800be22:	d9dc      	bls.n	800bdde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]
 800be28:	e034      	b.n	800be94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be5e:	461a      	mov	r2, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	3301      	adds	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be70:	d80c      	bhi.n	800be8c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	015a      	lsls	r2, r3, #5
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be88:	d0ec      	beq.n	800be64 <USB_StopHost+0xb0>
 800be8a:	e000      	b.n	800be8e <USB_StopHost+0xda>
        break;
 800be8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	613b      	str	r3, [r7, #16]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2b0f      	cmp	r3, #15
 800be98:	d9c7      	bls.n	800be2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bea0:	461a      	mov	r2, r3
 800bea2:	f04f 33ff 	mov.w	r3, #4294967295
 800bea6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7ff f91e 	bl	800b0f2 <USB_EnableGlobalInt>

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	b089      	sub	sp, #36	; 0x24
 800bec4:	af04      	add	r7, sp, #16
 800bec6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bec8:	2301      	movs	r3, #1
 800beca:	2202      	movs	r2, #2
 800becc:	2102      	movs	r1, #2
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fcb4 	bl	800c83c <USBH_FindInterface>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	2bff      	cmp	r3, #255	; 0xff
 800bedc:	d002      	beq.n	800bee4 <USBH_CDC_InterfaceInit+0x24>
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d901      	bls.n	800bee8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bee4:	2302      	movs	r3, #2
 800bee6:	e13d      	b.n	800c164 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fc89 	bl	800c804 <USBH_SelectInterface>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d001      	beq.n	800bf00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800befc:	2302      	movs	r3, #2
 800befe:	e131      	b.n	800c164 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bf06:	2050      	movs	r0, #80	; 0x50
 800bf08:	f005 fcac 	bl	8011864 <malloc>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bf20:	2302      	movs	r3, #2
 800bf22:	e11f      	b.n	800c164 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bf24:	2250      	movs	r2, #80	; 0x50
 800bf26:	2100      	movs	r1, #0
 800bf28:	68b8      	ldr	r0, [r7, #8]
 800bf2a:	f005 fcb6 	bl	801189a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	211a      	movs	r1, #26
 800bf34:	fb01 f303 	mul.w	r3, r1, r3
 800bf38:	4413      	add	r3, r2
 800bf3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	b25b      	sxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	da15      	bge.n	800bf72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	211a      	movs	r1, #26
 800bf4c:	fb01 f303 	mul.w	r3, r1, r3
 800bf50:	4413      	add	r3, r2
 800bf52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	211a      	movs	r1, #26
 800bf62:	fb01 f303 	mul.w	r3, r1, r3
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf6c:	881a      	ldrh	r2, [r3, #0]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	785b      	ldrb	r3, [r3, #1]
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f002 f890 	bl	800e09e <USBH_AllocPipe>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	461a      	mov	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	7819      	ldrb	r1, [r3, #0]
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	7858      	ldrb	r0, [r3, #1]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	8952      	ldrh	r2, [r2, #10]
 800bf9e:	9202      	str	r2, [sp, #8]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	9201      	str	r2, [sp, #4]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	4623      	mov	r3, r4
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f002 f848 	bl	800e040 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f005 fba3 	bl	8011704 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	210a      	movs	r1, #10
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fc39 	bl	800c83c <USBH_FindInterface>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	2bff      	cmp	r3, #255	; 0xff
 800bfd2:	d002      	beq.n	800bfda <USBH_CDC_InterfaceInit+0x11a>
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d901      	bls.n	800bfde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e0c2      	b.n	800c164 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	211a      	movs	r1, #26
 800bfe4:	fb01 f303 	mul.w	r3, r1, r3
 800bfe8:	4413      	add	r3, r2
 800bfea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da16      	bge.n	800c024 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	211a      	movs	r1, #26
 800bffc:	fb01 f303 	mul.w	r3, r1, r3
 800c000:	4413      	add	r3, r2
 800c002:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	211a      	movs	r1, #26
 800c012:	fb01 f303 	mul.w	r3, r1, r3
 800c016:	4413      	add	r3, r2
 800c018:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c01c:	881a      	ldrh	r2, [r3, #0]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	835a      	strh	r2, [r3, #26]
 800c022:	e015      	b.n	800c050 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	211a      	movs	r1, #26
 800c02a:	fb01 f303 	mul.w	r3, r1, r3
 800c02e:	4413      	add	r3, r2
 800c030:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c034:	781a      	ldrb	r2, [r3, #0]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	211a      	movs	r1, #26
 800c040:	fb01 f303 	mul.w	r3, r1, r3
 800c044:	4413      	add	r3, r2
 800c046:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c04a:	881a      	ldrh	r2, [r3, #0]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	211a      	movs	r1, #26
 800c056:	fb01 f303 	mul.w	r3, r1, r3
 800c05a:	4413      	add	r3, r2
 800c05c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b25b      	sxtb	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	da16      	bge.n	800c096 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	211a      	movs	r1, #26
 800c06e:	fb01 f303 	mul.w	r3, r1, r3
 800c072:	4413      	add	r3, r2
 800c074:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	211a      	movs	r1, #26
 800c084:	fb01 f303 	mul.w	r3, r1, r3
 800c088:	4413      	add	r3, r2
 800c08a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c08e:	881a      	ldrh	r2, [r3, #0]
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	835a      	strh	r2, [r3, #26]
 800c094:	e015      	b.n	800c0c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	211a      	movs	r1, #26
 800c09c:	fb01 f303 	mul.w	r3, r1, r3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c0a6:	781a      	ldrb	r2, [r3, #0]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	211a      	movs	r1, #26
 800c0b2:	fb01 f303 	mul.w	r3, r1, r3
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c0bc:	881a      	ldrh	r2, [r3, #0]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	7b9b      	ldrb	r3, [r3, #14]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 ffe8 	bl	800e09e <USBH_AllocPipe>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	7bdb      	ldrb	r3, [r3, #15]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f001 ffde 	bl	800e09e <USBH_AllocPipe>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	7b59      	ldrb	r1, [r3, #13]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	7b98      	ldrb	r0, [r3, #14]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	8b12      	ldrh	r2, [r2, #24]
 800c102:	9202      	str	r2, [sp, #8]
 800c104:	2202      	movs	r2, #2
 800c106:	9201      	str	r2, [sp, #4]
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	4623      	mov	r3, r4
 800c10c:	4602      	mov	r2, r0
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f001 ff96 	bl	800e040 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	7b19      	ldrb	r1, [r3, #12]
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	7bd8      	ldrb	r0, [r3, #15]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	8b52      	ldrh	r2, [r2, #26]
 800c12c:	9202      	str	r2, [sp, #8]
 800c12e:	2202      	movs	r2, #2
 800c130:	9201      	str	r2, [sp, #4]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4623      	mov	r3, r4
 800c136:	4602      	mov	r2, r0
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 ff81 	bl	800e040 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	7b5b      	ldrb	r3, [r3, #13]
 800c14a:	2200      	movs	r2, #0
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f005 fad8 	bl	8011704 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	7b1b      	ldrb	r3, [r3, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f005 fad1 	bl	8011704 <USBH_LL_SetToggle>

  return USBH_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd90      	pop	{r4, r7, pc}

0800c16c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00e      	beq.n	800c1a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 ff76 	bl	800e07e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f001 ffa1 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	7b1b      	ldrb	r3, [r3, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00e      	beq.n	800c1ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	7b1b      	ldrb	r3, [r3, #12]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f001 ff63 	bl	800e07e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	7b1b      	ldrb	r3, [r3, #12]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 ff8e 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	7b5b      	ldrb	r3, [r3, #13]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	7b5b      	ldrb	r3, [r3, #13]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f001 ff50 	bl	800e07e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	7b5b      	ldrb	r3, [r3, #13]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 ff7b 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c202:	69db      	ldr	r3, [r3, #28]
 800c204:	4618      	mov	r0, r3
 800c206:	f005 fb35 	bl	8011874 <free>
    phost->pActiveClass->pData = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c210:	2200      	movs	r2, #0
 800c212:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3340      	adds	r3, #64	; 0x40
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f8b1 	bl	800c39e <GetLineCoding>
 800c23c:	4603      	mov	r3, r0
 800c23e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c240:	7afb      	ldrb	r3, [r7, #11]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d105      	bne.n	800c252 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c24c:	2102      	movs	r1, #2
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c252:	7afb      	ldrb	r3, [r7, #11]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c264:	2301      	movs	r3, #1
 800c266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d877      	bhi.n	800c370 <USBH_CDC_Process+0x114>
 800c280:	a201      	add	r2, pc, #4	; (adr r2, 800c288 <USBH_CDC_Process+0x2c>)
 800c282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c286:	bf00      	nop
 800c288:	0800c29d 	.word	0x0800c29d
 800c28c:	0800c2a3 	.word	0x0800c2a3
 800c290:	0800c2d3 	.word	0x0800c2d3
 800c294:	0800c347 	.word	0x0800c347
 800c298:	0800c355 	.word	0x0800c355
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a0:	e06d      	b.n	800c37e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f897 	bl	800c3dc <SetLineCoding>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d104      	bne.n	800c2c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c2c0:	e058      	b.n	800c374 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d055      	beq.n	800c374 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2204      	movs	r2, #4
 800c2cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c2d0:	e050      	b.n	800c374 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	3340      	adds	r3, #64	; 0x40
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f860 	bl	800c39e <GetLineCoding>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d126      	bne.n	800c336 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2fa:	791b      	ldrb	r3, [r3, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d13b      	bne.n	800c378 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c30a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d133      	bne.n	800c378 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c31a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d12b      	bne.n	800c378 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c328:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d124      	bne.n	800c378 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f984 	bl	800c63c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c334:	e020      	b.n	800c378 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d01d      	beq.n	800c378 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2204      	movs	r2, #4
 800c340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c344:	e018      	b.n	800c378 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f867 	bl	800c41a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f8f8 	bl	800c542 <CDC_ProcessReception>
      break;
 800c352:	e014      	b.n	800c37e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c354:	2100      	movs	r1, #0
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f001 f94f 	bl	800d5fa <USBH_ClrFeature>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10a      	bne.n	800c37c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c36e:	e005      	b.n	800c37c <USBH_CDC_Process+0x120>

    default:
      break;
 800c370:	bf00      	nop
 800c372:	e004      	b.n	800c37e <USBH_CDC_Process+0x122>
      break;
 800c374:	bf00      	nop
 800c376:	e002      	b.n	800c37e <USBH_CDC_Process+0x122>
      break;
 800c378:	bf00      	nop
 800c37a:	e000      	b.n	800c37e <USBH_CDC_Process+0x122>
      break;
 800c37c:	bf00      	nop

  }

  return status;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	22a1      	movs	r2, #161	; 0xa1
 800c3ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2221      	movs	r2, #33	; 0x21
 800c3b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2207      	movs	r2, #7
 800c3c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2207      	movs	r2, #7
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 faf4 	bl	800d9ba <USBH_CtlReq>
 800c3d2:	4603      	mov	r3, r0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2221      	movs	r2, #33	; 0x21
 800c3ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2207      	movs	r2, #7
 800c402:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2207      	movs	r2, #7
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f001 fad5 	bl	800d9ba <USBH_CtlReq>
 800c410:	4603      	mov	r3, r0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b086      	sub	sp, #24
 800c41e:	af02      	add	r7, sp, #8
 800c420:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c436:	2b01      	cmp	r3, #1
 800c438:	d002      	beq.n	800c440 <CDC_ProcessTransmission+0x26>
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d025      	beq.n	800c48a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c43e:	e07c      	b.n	800c53a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	8b12      	ldrh	r2, [r2, #24]
 800c448:	4293      	cmp	r3, r2
 800c44a:	d90c      	bls.n	800c466 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	69d9      	ldr	r1, [r3, #28]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	8b1a      	ldrh	r2, [r3, #24]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	7b58      	ldrb	r0, [r3, #13]
 800c458:	2301      	movs	r3, #1
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	4603      	mov	r3, r0
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f001 fdab 	bl	800dfba <USBH_BulkSendData>
 800c464:	e00c      	b.n	800c480 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c46e:	b29a      	uxth	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	7b58      	ldrb	r0, [r3, #13]
 800c474:	2301      	movs	r3, #1
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	4603      	mov	r3, r0
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f001 fd9d 	bl	800dfba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c488:	e057      	b.n	800c53a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	7b5b      	ldrb	r3, [r3, #13]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f005 f90d 	bl	80116b0 <USBH_LL_GetURBState>
 800c496:	4603      	mov	r3, r0
 800c498:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d136      	bne.n	800c50e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	8b12      	ldrh	r2, [r2, #24]
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d90e      	bls.n	800c4ca <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	8b12      	ldrh	r2, [r2, #24]
 800c4b4:	1a9a      	subs	r2, r3, r2
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	8b12      	ldrh	r2, [r2, #24]
 800c4c2:	441a      	add	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	61da      	str	r2, [r3, #28]
 800c4c8:	e002      	b.n	800c4d0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d004      	beq.n	800c4e2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c4e0:	e006      	b.n	800c4f0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f892 	bl	800c614 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c504:	2300      	movs	r3, #0
 800c506:	2200      	movs	r2, #0
 800c508:	f001 fff8 	bl	800e4fc <osMessageQueuePut>
      break;
 800c50c:	e014      	b.n	800c538 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	2b02      	cmp	r3, #2
 800c512:	d111      	bne.n	800c538 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2204      	movs	r2, #4
 800c520:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c530:	2300      	movs	r3, #0
 800c532:	2200      	movs	r2, #0
 800c534:	f001 ffe2 	bl	800e4fc <osMessageQueuePut>
      break;
 800c538:	bf00      	nop
  }
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b086      	sub	sp, #24
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c554:	2300      	movs	r3, #0
 800c556:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d002      	beq.n	800c568 <CDC_ProcessReception+0x26>
 800c562:	2b04      	cmp	r3, #4
 800c564:	d00e      	beq.n	800c584 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c566:	e051      	b.n	800c60c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	6a19      	ldr	r1, [r3, #32]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	8b5a      	ldrh	r2, [r3, #26]
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	7b1b      	ldrb	r3, [r3, #12]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 fd45 	bl	800e004 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2204      	movs	r2, #4
 800c57e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c582:	e043      	b.n	800c60c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	7b1b      	ldrb	r3, [r3, #12]
 800c588:	4619      	mov	r1, r3
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f005 f890 	bl	80116b0 <USBH_LL_GetURBState>
 800c590:	4603      	mov	r3, r0
 800c592:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c594:	7cfb      	ldrb	r3, [r7, #19]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d137      	bne.n	800c60a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	7b1b      	ldrb	r3, [r3, #12]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f004 fff3 	bl	801158c <USBH_LL_GetLastXferSize>
 800c5a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d016      	beq.n	800c5e0 <CDC_ProcessReception+0x9e>
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	8b5b      	ldrh	r3, [r3, #26]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d910      	bls.n	800c5e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1ad2      	subs	r2, r2, r3
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	6a1a      	ldr	r2, [r3, #32]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	441a      	add	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2203      	movs	r2, #3
 800c5da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c5de:	e006      	b.n	800c5ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f81d 	bl	800c628 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2204      	movs	r2, #4
 800c5f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c602:	2300      	movs	r3, #0
 800c604:	2200      	movs	r2, #0
 800c606:	f001 ff79 	bl	800e4fc <osMessageQueuePut>
      break;
 800c60a:	bf00      	nop
  }
}
 800c60c:	bf00      	nop
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c664:	2302      	movs	r3, #2
 800c666:	e044      	b.n	800c6f2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	79fa      	ldrb	r2, [r7, #7]
 800c66c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 f841 	bl	800c708 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2104      	movs	r1, #4
 800c6b8:	2010      	movs	r0, #16
 800c6ba:	f001 fe99 	bl	800e3f0 <osMessageQueueNew>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c6c6:	4b0d      	ldr	r3, [pc, #52]	; (800c6fc <USBH_Init+0xac>)
 800c6c8:	4a0d      	ldr	r2, [pc, #52]	; (800c700 <USBH_Init+0xb0>)
 800c6ca:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <USBH_Init+0xac>)
 800c6ce:	2280      	movs	r2, #128	; 0x80
 800c6d0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <USBH_Init+0xac>)
 800c6d4:	2218      	movs	r2, #24
 800c6d6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c6d8:	4a08      	ldr	r2, [pc, #32]	; (800c6fc <USBH_Init+0xac>)
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	4809      	ldr	r0, [pc, #36]	; (800c704 <USBH_Init+0xb4>)
 800c6de:	f001 fdb3 	bl	800e248 <osThreadNew>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f004 fe9c 	bl	8011428 <USBH_LL_Init>

  return USBH_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20004fd0 	.word	0x20004fd0
 800c700:	08011b44 	.word	0x08011b44
 800c704:	0800d371 	.word	0x0800d371

0800c708 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e009      	b.n	800c72e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	33e0      	adds	r3, #224	; 0xe0
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	2200      	movs	r2, #0
 800c726:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	3301      	adds	r3, #1
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b0e      	cmp	r3, #14
 800c732:	d9f2      	bls.n	800c71a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c734:	2300      	movs	r3, #0
 800c736:	60fb      	str	r3, [r7, #12]
 800c738:	e009      	b.n	800c74e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c744:	2200      	movs	r2, #0
 800c746:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c754:	d3f1      	bcc.n	800c73a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2240      	movs	r2, #64	; 0x40
 800c77a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d016      	beq.n	800c7f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10e      	bne.n	800c7ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7d4:	1c59      	adds	r1, r3, #1
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	33de      	adds	r3, #222	; 0xde
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]
 800c7ea:	e004      	b.n	800c7f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	73fb      	strb	r3, [r7, #15]
 800c7f0:	e001      	b.n	800c7f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c81a:	78fa      	ldrb	r2, [r7, #3]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d204      	bcs.n	800c82a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	78fa      	ldrb	r2, [r7, #3]
 800c824:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c828:	e001      	b.n	800c82e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c82a:	2302      	movs	r3, #2
 800c82c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	461a      	mov	r2, r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	70fb      	strb	r3, [r7, #3]
 800c84e:	460b      	mov	r3, r1
 800c850:	70bb      	strb	r3, [r7, #2]
 800c852:	4613      	mov	r3, r2
 800c854:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c864:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c866:	e025      	b.n	800c8b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	221a      	movs	r2, #26
 800c86c:	fb02 f303 	mul.w	r3, r2, r3
 800c870:	3308      	adds	r3, #8
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4413      	add	r3, r2
 800c876:	3302      	adds	r3, #2
 800c878:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	795b      	ldrb	r3, [r3, #5]
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	429a      	cmp	r2, r3
 800c882:	d002      	beq.n	800c88a <USBH_FindInterface+0x4e>
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	2bff      	cmp	r3, #255	; 0xff
 800c888:	d111      	bne.n	800c8ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c88e:	78ba      	ldrb	r2, [r7, #2]
 800c890:	429a      	cmp	r2, r3
 800c892:	d002      	beq.n	800c89a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c894:	78bb      	ldrb	r3, [r7, #2]
 800c896:	2bff      	cmp	r3, #255	; 0xff
 800c898:	d109      	bne.n	800c8ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c89e:	787a      	ldrb	r2, [r7, #1]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d002      	beq.n	800c8aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8a4:	787b      	ldrb	r3, [r7, #1]
 800c8a6:	2bff      	cmp	r3, #255	; 0xff
 800c8a8:	d101      	bne.n	800c8ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	e006      	b.n	800c8bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d9d6      	bls.n	800c868 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c8ba:	23ff      	movs	r3, #255	; 0xff
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f004 fde5 	bl	80114a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c8d6:	2101      	movs	r1, #1
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f004 fefc 	bl	80116d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b088      	sub	sp, #32
 800c8ec:	af04      	add	r7, sp, #16
 800c8ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b01      	cmp	r3, #1
 800c902:	d102      	bne.n	800c90a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2203      	movs	r2, #3
 800c908:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b0b      	cmp	r3, #11
 800c912:	f200 823c 	bhi.w	800cd8e <USBH_Process+0x4a6>
 800c916:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <USBH_Process+0x34>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c94d 	.word	0x0800c94d
 800c920:	0800c99b 	.word	0x0800c99b
 800c924:	0800ca1f 	.word	0x0800ca1f
 800c928:	0800cd0d 	.word	0x0800cd0d
 800c92c:	0800cd8f 	.word	0x0800cd8f
 800c930:	0800cadf 	.word	0x0800cadf
 800c934:	0800cc97 	.word	0x0800cc97
 800c938:	0800cb31 	.word	0x0800cb31
 800c93c:	0800cb6d 	.word	0x0800cb6d
 800c940:	0800cba7 	.word	0x0800cba7
 800c944:	0800cbef 	.word	0x0800cbef
 800c948:	0800ccf5 	.word	0x0800ccf5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 821c 	beq.w	800cd92 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c960:	20c8      	movs	r0, #200	; 0xc8
 800c962:	f004 ff02 	bl	801176a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f004 fdf5 	bl	8011556 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c990:	2300      	movs	r3, #0
 800c992:	2200      	movs	r2, #0
 800c994:	f001 fdb2 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c998:	e1fb      	b.n	800cd92 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d107      	bne.n	800c9b4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	e025      	b.n	800ca00 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c9ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9be:	d914      	bls.n	800c9ea <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d903      	bls.n	800c9e2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	220d      	movs	r2, #13
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	e00e      	b.n	800ca00 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e00a      	b.n	800ca00 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c9f0:	f103 020a 	add.w	r2, r3, #10
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c9fa:	200a      	movs	r0, #10
 800c9fc:	f004 feb5 	bl	801176a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca14:	2300      	movs	r3, #0
 800ca16:	2200      	movs	r2, #0
 800ca18:	f001 fd70 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800ca1c:	e1c0      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca2e:	2104      	movs	r1, #4
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca34:	2064      	movs	r0, #100	; 0x64
 800ca36:	f004 fe98 	bl	801176a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f004 fd66 	bl	801150c <USBH_LL_GetSpeed>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2205      	movs	r2, #5
 800ca4e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca50:	2100      	movs	r1, #0
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fb23 	bl	800e09e <USBH_AllocPipe>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ca60:	2180      	movs	r1, #128	; 0x80
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f001 fb1b 	bl	800e09e <USBH_AllocPipe>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7919      	ldrb	r1, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca84:	b292      	uxth	r2, r2
 800ca86:	9202      	str	r2, [sp, #8]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	9201      	str	r2, [sp, #4]
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2280      	movs	r2, #128	; 0x80
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f001 fad4 	bl	800e040 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7959      	ldrb	r1, [r3, #5]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800caac:	b292      	uxth	r2, r2
 800caae:	9202      	str	r2, [sp, #8]
 800cab0:	2200      	movs	r2, #0
 800cab2:	9201      	str	r2, [sp, #4]
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	4603      	mov	r3, r0
 800cab8:	2200      	movs	r2, #0
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f001 fac0 	bl	800e040 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cad4:	2300      	movs	r3, #0
 800cad6:	2200      	movs	r2, #0
 800cad8:	f001 fd10 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800cadc:	e160      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f964 	bl	800cdac <USBH_HandleEnum>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b00      	cmp	r3, #0
 800caee:	f040 8152 	bne.w	800cd96 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d103      	bne.n	800cb0c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2208      	movs	r2, #8
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	e002      	b.n	800cb12 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2207      	movs	r2, #7
 800cb10:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2205      	movs	r2, #5
 800cb16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb26:	2300      	movs	r3, #0
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f001 fce7 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cb2e:	e132      	b.n	800cd96 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f000 812f 	beq.w	800cd9a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb42:	2101      	movs	r1, #1
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2208      	movs	r2, #8
 800cb4c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2205      	movs	r2, #5
 800cb52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb62:	2300      	movs	r3, #0
 800cb64:	2200      	movs	r2, #0
 800cb66:	f001 fcc9 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800cb6a:	e116      	b.n	800cd9a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fcf8 	bl	800d56c <USBH_SetCfg>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2209      	movs	r2, #9
 800cb86:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f001 fcac 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800cba4:	e0fc      	b.n	800cda0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fcfb 	bl	800d5b2 <USBH_SetFeature>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	220a      	movs	r2, #10
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	e002      	b.n	800cbd0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	220a      	movs	r2, #10
 800cbce:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f001 fc88 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800cbec:	e0d8      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d03f      	beq.n	800cc78 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]
 800cc04:	e016      	b.n	800cc34 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cc06:	7bfa      	ldrb	r2, [r7, #15]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	32de      	adds	r2, #222	; 0xde
 800cc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc10:	791a      	ldrb	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d108      	bne.n	800cc2e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cc1c:	7bfa      	ldrb	r2, [r7, #15]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	32de      	adds	r2, #222	; 0xde
 800cc22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cc2c:	e005      	b.n	800cc3a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	3301      	adds	r3, #1
 800cc32:	73fb      	strb	r3, [r7, #15]
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0e5      	beq.n	800cc06 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d016      	beq.n	800cc72 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	4798      	blx	r3
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d109      	bne.n	800cc6a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2206      	movs	r2, #6
 800cc5a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc62:	2103      	movs	r1, #3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	4798      	blx	r3
 800cc68:	e006      	b.n	800cc78 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	220d      	movs	r2, #13
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	e002      	b.n	800cc78 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	220d      	movs	r2, #13
 800cc76:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2205      	movs	r2, #5
 800cc7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f001 fc34 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800cc94:	e084      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d017      	beq.n	800ccd0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	4798      	blx	r3
 800ccac:	4603      	mov	r3, r0
 800ccae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d103      	bne.n	800ccc0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	220b      	movs	r2, #11
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	e00a      	b.n	800ccd6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d106      	bne.n	800ccd6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	220d      	movs	r2, #13
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	e002      	b.n	800ccd6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	220d      	movs	r2, #13
 800ccd4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2205      	movs	r2, #5
 800ccda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ccea:	2300      	movs	r3, #0
 800ccec:	2200      	movs	r2, #0
 800ccee:	f001 fc05 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800ccf2:	e055      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d04f      	beq.n	800cd9e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
      }
      break;
 800cd0a:	e048      	b.n	800cd9e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff fcf7 	bl	800c708 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d009      	beq.n	800cd38 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd48:	2105      	movs	r1, #5
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d107      	bne.n	800cd6a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff fdb0 	bl	800c8c8 <USBH_Start>
 800cd68:	e002      	b.n	800cd70 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f004 fb98 	bl	80114a0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd84:	2300      	movs	r3, #0
 800cd86:	2200      	movs	r2, #0
 800cd88:	f001 fbb8 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      break;
 800cd8c:	e008      	b.n	800cda0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd8e:	bf00      	nop
 800cd90:	e006      	b.n	800cda0 <USBH_Process+0x4b8>
      break;
 800cd92:	bf00      	nop
 800cd94:	e004      	b.n	800cda0 <USBH_Process+0x4b8>
      break;
 800cd96:	bf00      	nop
 800cd98:	e002      	b.n	800cda0 <USBH_Process+0x4b8>
    break;
 800cd9a:	bf00      	nop
 800cd9c:	e000      	b.n	800cda0 <USBH_Process+0x4b8>
      break;
 800cd9e:	bf00      	nop
  }
  return USBH_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop

0800cdac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af04      	add	r7, sp, #16
 800cdb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	2b07      	cmp	r3, #7
 800cdc2:	f200 8208 	bhi.w	800d1d6 <USBH_HandleEnum+0x42a>
 800cdc6:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <USBH_HandleEnum+0x20>)
 800cdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdcc:	0800cded 	.word	0x0800cded
 800cdd0:	0800ceab 	.word	0x0800ceab
 800cdd4:	0800cf15 	.word	0x0800cf15
 800cdd8:	0800cfa3 	.word	0x0800cfa3
 800cddc:	0800d00d 	.word	0x0800d00d
 800cde0:	0800d07d 	.word	0x0800d07d
 800cde4:	0800d119 	.word	0x0800d119
 800cde8:	0800d197 	.word	0x0800d197
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cdec:	2108      	movs	r1, #8
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 faec 	bl	800d3cc <USBH_Get_DevDesc>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdf8:	7bbb      	ldrb	r3, [r7, #14]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d130      	bne.n	800ce60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7919      	ldrb	r1, [r3, #4]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce22:	b292      	uxth	r2, r2
 800ce24:	9202      	str	r2, [sp, #8]
 800ce26:	2200      	movs	r2, #0
 800ce28:	9201      	str	r2, [sp, #4]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2280      	movs	r2, #128	; 0x80
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f905 	bl	800e040 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	7959      	ldrb	r1, [r3, #5]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce4a:	b292      	uxth	r2, r2
 800ce4c:	9202      	str	r2, [sp, #8]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	9201      	str	r2, [sp, #4]
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4603      	mov	r3, r0
 800ce56:	2200      	movs	r2, #0
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 f8f1 	bl	800e040 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce5e:	e1bc      	b.n	800d1da <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	f040 81b9 	bne.w	800d1da <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	d903      	bls.n	800ce8a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	220d      	movs	r2, #13
 800ce86:	701a      	strb	r2, [r3, #0]
      break;
 800ce88:	e1a7      	b.n	800d1da <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	795b      	ldrb	r3, [r3, #5]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f001 f925 	bl	800e0e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	791b      	ldrb	r3, [r3, #4]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 f91f 	bl	800e0e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]
      break;
 800cea8:	e197      	b.n	800d1da <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ceaa:	2112      	movs	r1, #18
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fa8d 	bl	800d3cc <USBH_Get_DevDesc>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d103      	bne.n	800cec4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2202      	movs	r2, #2
 800cec0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cec2:	e18c      	b.n	800d1de <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	f040 8189 	bne.w	800d1de <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ced2:	3301      	adds	r3, #1
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d903      	bls.n	800ceee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	220d      	movs	r2, #13
 800ceea:	701a      	strb	r2, [r3, #0]
      break;
 800ceec:	e177      	b.n	800d1de <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	795b      	ldrb	r3, [r3, #5]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f001 f8f3 	bl	800e0e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	791b      	ldrb	r3, [r3, #4]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f001 f8ed 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	701a      	strb	r2, [r3, #0]
      break;
 800cf12:	e164      	b.n	800d1de <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cf14:	2101      	movs	r1, #1
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fb04 	bl	800d524 <USBH_SetAddress>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d132      	bne.n	800cf8c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cf26:	2002      	movs	r0, #2
 800cf28:	f004 fc1f 	bl	801176a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2203      	movs	r2, #3
 800cf38:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	7919      	ldrb	r1, [r3, #4]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf4e:	b292      	uxth	r2, r2
 800cf50:	9202      	str	r2, [sp, #8]
 800cf52:	2200      	movs	r2, #0
 800cf54:	9201      	str	r2, [sp, #4]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2280      	movs	r2, #128	; 0x80
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f001 f86f 	bl	800e040 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	7959      	ldrb	r1, [r3, #5]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf76:	b292      	uxth	r2, r2
 800cf78:	9202      	str	r2, [sp, #8]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	9201      	str	r2, [sp, #4]
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	4603      	mov	r3, r0
 800cf82:	2200      	movs	r2, #0
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f001 f85b 	bl	800e040 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf8a:	e12a      	b.n	800d1e2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	f040 8127 	bne.w	800d1e2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	220d      	movs	r2, #13
 800cf98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	705a      	strb	r2, [r3, #1]
      break;
 800cfa0:	e11f      	b.n	800d1e2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cfa2:	2109      	movs	r1, #9
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fa39 	bl	800d41c <USBH_Get_CfgDesc>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfae:	7bbb      	ldrb	r3, [r7, #14]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d103      	bne.n	800cfbc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2204      	movs	r2, #4
 800cfb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfba:	e114      	b.n	800d1e6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	f040 8111 	bne.w	800d1e6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfca:	3301      	adds	r3, #1
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d903      	bls.n	800cfe6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	220d      	movs	r2, #13
 800cfe2:	701a      	strb	r2, [r3, #0]
      break;
 800cfe4:	e0ff      	b.n	800d1e6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	795b      	ldrb	r3, [r3, #5]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f001 f877 	bl	800e0e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	791b      	ldrb	r3, [r3, #4]
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f001 f871 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
      break;
 800d00a:	e0ec      	b.n	800d1e6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fa01 	bl	800d41c <USBH_Get_CfgDesc>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2205      	movs	r2, #5
 800d028:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d02a:	e0de      	b.n	800d1ea <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	2b03      	cmp	r3, #3
 800d030:	f040 80db 	bne.w	800d1ea <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d03a:	3301      	adds	r3, #1
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d903      	bls.n	800d056 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	220d      	movs	r2, #13
 800d052:	701a      	strb	r2, [r3, #0]
      break;
 800d054:	e0c9      	b.n	800d1ea <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	795b      	ldrb	r3, [r3, #5]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 f83f 	bl	800e0e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	791b      	ldrb	r3, [r3, #4]
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 f839 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
      break;
 800d07a:	e0b6      	b.n	800d1ea <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d082:	2b00      	cmp	r3, #0
 800d084:	d036      	beq.n	800d0f4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d092:	23ff      	movs	r3, #255	; 0xff
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f9e5 	bl	800d464 <USBH_Get_StringDesc>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d111      	bne.n	800d0c8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2206      	movs	r2, #6
 800d0a8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2205      	movs	r2, #5
 800d0ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f001 fa1b 	bl	800e4fc <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d0c6:	e092      	b.n	800d1ee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	f040 808f 	bne.w	800d1ee <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2206      	movs	r2, #6
 800d0d4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2205      	movs	r2, #5
 800d0da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f001 fa05 	bl	800e4fc <osMessageQueuePut>
      break;
 800d0f2:	e07c      	b.n	800d1ee <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2206      	movs	r2, #6
 800d0f8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2205      	movs	r2, #5
 800d0fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d10e:	2300      	movs	r3, #0
 800d110:	2200      	movs	r2, #0
 800d112:	f001 f9f3 	bl	800e4fc <osMessageQueuePut>
      break;
 800d116:	e06a      	b.n	800d1ee <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d027      	beq.n	800d172 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d12e:	23ff      	movs	r3, #255	; 0xff
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f997 	bl	800d464 <USBH_Get_StringDesc>
 800d136:	4603      	mov	r3, r0
 800d138:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d13a:	7bbb      	ldrb	r3, [r7, #14]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d103      	bne.n	800d148 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2207      	movs	r2, #7
 800d144:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d146:	e054      	b.n	800d1f2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d151      	bne.n	800d1f2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2207      	movs	r2, #7
 800d152:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2205      	movs	r2, #5
 800d158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d168:	2300      	movs	r3, #0
 800d16a:	2200      	movs	r2, #0
 800d16c:	f001 f9c6 	bl	800e4fc <osMessageQueuePut>
      break;
 800d170:	e03f      	b.n	800d1f2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2207      	movs	r2, #7
 800d176:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2205      	movs	r2, #5
 800d17c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d18c:	2300      	movs	r3, #0
 800d18e:	2200      	movs	r2, #0
 800d190:	f001 f9b4 	bl	800e4fc <osMessageQueuePut>
      break;
 800d194:	e02d      	b.n	800d1f2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d017      	beq.n	800d1d0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1ac:	23ff      	movs	r3, #255	; 0xff
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f958 	bl	800d464 <USBH_Get_StringDesc>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1b8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d1c2:	e018      	b.n	800d1f6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d115      	bne.n	800d1f6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ce:	e012      	b.n	800d1f6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d4:	e00f      	b.n	800d1f6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d1d6:	bf00      	nop
 800d1d8:	e00e      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1da:	bf00      	nop
 800d1dc:	e00c      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1de:	bf00      	nop
 800d1e0:	e00a      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1e2:	bf00      	nop
 800d1e4:	e008      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1e6:	bf00      	nop
 800d1e8:	e006      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1ea:	bf00      	nop
 800d1ec:	e004      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1ee:	bf00      	nop
 800d1f0:	e002      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1f2:	bf00      	nop
 800d1f4:	e000      	b.n	800d1f8 <USBH_HandleEnum+0x44c>
      break;
 800d1f6:	bf00      	nop
  }
  return Status;
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop

0800d204 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d216:	bf00      	nop
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f804 	bl	800d246 <USBH_HandleSof>
}
 800d23e:	bf00      	nop
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b082      	sub	sp, #8
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b0b      	cmp	r3, #11
 800d256:	d10a      	bne.n	800d26e <USBH_HandleSof+0x28>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d005      	beq.n	800d26e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	4798      	blx	r3
  }
}
 800d26e:	bf00      	nop
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d29a:	2300      	movs	r3, #0
 800d29c:	2200      	movs	r2, #0
 800d29e:	f001 f92d 	bl	800e4fc <osMessageQueuePut>
#endif
#endif

  return;
 800d2a2:	bf00      	nop
}
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b083      	sub	sp, #12
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d2ba:	bf00      	nop
}
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b082      	sub	sp, #8
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f001 f8fd 	bl	800e4fc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f004 f8d2 	bl	80114d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	791b      	ldrb	r3, [r3, #4]
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fed1 	bl	800e0e0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	795b      	ldrb	r3, [r3, #5]
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fecb 	bl	800e0e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d35e:	2300      	movs	r3, #0
 800d360:	2200      	movs	r2, #0
 800d362:	f001 f8cb 	bl	800e4fc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d384:	f04f 33ff 	mov.w	r3, #4294967295
 800d388:	2200      	movs	r2, #0
 800d38a:	f001 f92b 	bl	800e5e4 <osMessageQueueGet>
 800d38e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1f0      	bne.n	800d378 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff faa6 	bl	800c8e8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d39c:	e7ec      	b.n	800d378 <USBH_Process_OS+0x8>

0800d39e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f001 f89d 	bl	800e4fc <osMessageQueuePut>
#endif

  return USBH_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af02      	add	r7, sp, #8
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f864 	bl	800d4ba <USBH_GetDescriptor>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10a      	bne.n	800d412 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d408:	78fa      	ldrb	r2, [r7, #3]
 800d40a:	b292      	uxth	r2, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	f000 f918 	bl	800d642 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d412:	7bfb      	ldrb	r3, [r7, #15]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af02      	add	r7, sp, #8
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	331c      	adds	r3, #28
 800d42c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d42e:	887b      	ldrh	r3, [r7, #2]
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d438:	2100      	movs	r1, #0
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f83d 	bl	800d4ba <USBH_GetDescriptor>
 800d440:	4603      	mov	r3, r0
 800d442:	72fb      	strb	r3, [r7, #11]
 800d444:	7afb      	ldrb	r3, [r7, #11]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d107      	bne.n	800d45a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d450:	887a      	ldrh	r2, [r7, #2]
 800d452:	68f9      	ldr	r1, [r7, #12]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f964 	bl	800d722 <USBH_ParseCfgDesc>
  }

  return status;
 800d45a:	7afb      	ldrb	r3, [r7, #11]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	461a      	mov	r2, r3
 800d470:	460b      	mov	r3, r1
 800d472:	72fb      	strb	r3, [r7, #11]
 800d474:	4613      	mov	r3, r2
 800d476:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d478:	7afb      	ldrb	r3, [r7, #11]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d480:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d488:	893b      	ldrh	r3, [r7, #8]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	460b      	mov	r3, r1
 800d48e:	2100      	movs	r1, #0
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 f812 	bl	800d4ba <USBH_GetDescriptor>
 800d496:	4603      	mov	r3, r0
 800d498:	75fb      	strb	r3, [r7, #23]
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d107      	bne.n	800d4b0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4a6:	893a      	ldrh	r2, [r7, #8]
 800d4a8:	6879      	ldr	r1, [r7, #4]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 fa37 	bl	800d91e <USBH_ParseStringDesc>
  }

  return status;
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	607b      	str	r3, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	72fb      	strb	r3, [r7, #11]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	789b      	ldrb	r3, [r3, #2]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d11c      	bne.n	800d50e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2206      	movs	r2, #6
 800d4e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	893a      	ldrh	r2, [r7, #8]
 800d4ea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d4ec:	893b      	ldrh	r3, [r7, #8]
 800d4ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4f6:	d104      	bne.n	800d502 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f240 4209 	movw	r2, #1033	; 0x409
 800d4fe:	829a      	strh	r2, [r3, #20]
 800d500:	e002      	b.n	800d508 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	8b3a      	ldrh	r2, [r7, #24]
 800d50c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d50e:	8b3b      	ldrh	r3, [r7, #24]
 800d510:	461a      	mov	r2, r3
 800d512:	6879      	ldr	r1, [r7, #4]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 fa50 	bl	800d9ba <USBH_CtlReq>
 800d51a:	4603      	mov	r3, r0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	789b      	ldrb	r3, [r3, #2]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d10f      	bne.n	800d558 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2205      	movs	r2, #5
 800d542:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	b29a      	uxth	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d558:	2200      	movs	r2, #0
 800d55a:	2100      	movs	r1, #0
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa2c 	bl	800d9ba <USBH_CtlReq>
 800d562:	4603      	mov	r3, r0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	789b      	ldrb	r3, [r3, #2]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d10e      	bne.n	800d59e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2209      	movs	r2, #9
 800d58a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	887a      	ldrh	r2, [r7, #2]
 800d590:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa09 	bl	800d9ba <USBH_CtlReq>
 800d5a8:	4603      	mov	r3, r0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	789b      	ldrb	r3, [r3, #2]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d10f      	bne.n	800d5e6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2203      	movs	r2, #3
 800d5d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d5d2:	78fb      	ldrb	r3, [r7, #3]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f9e5 	bl	800d9ba <USBH_CtlReq>
 800d5f0:	4603      	mov	r3, r0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	460b      	mov	r3, r1
 800d604:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	789b      	ldrb	r3, [r3, #2]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d10f      	bne.n	800d62e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2202      	movs	r2, #2
 800d612:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d62e:	2200      	movs	r2, #0
 800d630:	2100      	movs	r1, #0
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f9c1 	bl	800d9ba <USBH_CtlReq>
 800d638:	4603      	mov	r3, r0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d642:	b480      	push	{r7}
 800d644:	b085      	sub	sp, #20
 800d646:	af00      	add	r7, sp, #0
 800d648:	60f8      	str	r0, [r7, #12]
 800d64a:	60b9      	str	r1, [r7, #8]
 800d64c:	4613      	mov	r3, r2
 800d64e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	781a      	ldrb	r2, [r3, #0]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	785a      	ldrb	r2, [r3, #1]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	3302      	adds	r3, #2
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	b29a      	uxth	r2, r3
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	3303      	adds	r3, #3
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	021b      	lsls	r3, r3, #8
 800d672:	b29b      	uxth	r3, r3
 800d674:	4313      	orrs	r3, r2
 800d676:	b29a      	uxth	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	791a      	ldrb	r2, [r3, #4]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	795a      	ldrb	r2, [r3, #5]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	799a      	ldrb	r2, [r3, #6]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	79da      	ldrb	r2, [r3, #7]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d69c:	88fb      	ldrh	r3, [r7, #6]
 800d69e:	2b08      	cmp	r3, #8
 800d6a0:	d939      	bls.n	800d716 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	3309      	adds	r3, #9
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	330a      	adds	r3, #10
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	330b      	adds	r3, #11
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	021b      	lsls	r3, r3, #8
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	330c      	adds	r3, #12
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	330d      	adds	r3, #13
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	021b      	lsls	r3, r3, #8
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	7b9a      	ldrb	r2, [r3, #14]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	7bda      	ldrb	r2, [r3, #15]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	7c1a      	ldrb	r2, [r3, #16]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7c5a      	ldrb	r2, [r3, #17]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	745a      	strb	r2, [r3, #17]
  }
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b08a      	sub	sp, #40	; 0x28
 800d726:	af00      	add	r7, sp, #0
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	60b9      	str	r1, [r7, #8]
 800d72c:	4613      	mov	r3, r2
 800d72e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d73a:	2300      	movs	r3, #0
 800d73c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	781a      	ldrb	r2, [r3, #0]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	785a      	ldrb	r2, [r3, #1]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3302      	adds	r3, #2
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	3303      	adds	r3, #3
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	b29b      	uxth	r3, r3
 800d764:	021b      	lsls	r3, r3, #8
 800d766:	b29b      	uxth	r3, r3
 800d768:	4313      	orrs	r3, r2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	791a      	ldrb	r2, [r3, #4]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	795a      	ldrb	r2, [r3, #5]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	799a      	ldrb	r2, [r3, #6]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	79da      	ldrb	r2, [r3, #7]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	7a1a      	ldrb	r2, [r3, #8]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	2b09      	cmp	r3, #9
 800d79c:	d95f      	bls.n	800d85e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d79e:	2309      	movs	r3, #9
 800d7a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d7a6:	e051      	b.n	800d84c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7a8:	f107 0316 	add.w	r3, r7, #22
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7b0:	f000 f8e8 	bl	800d984 <USBH_GetNextDesc>
 800d7b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	785b      	ldrb	r3, [r3, #1]
 800d7ba:	2b04      	cmp	r3, #4
 800d7bc:	d146      	bne.n	800d84c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d7be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7c2:	221a      	movs	r2, #26
 800d7c4:	fb02 f303 	mul.w	r3, r2, r3
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	3302      	adds	r3, #2
 800d7d0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d7d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7d4:	69f8      	ldr	r0, [r7, #28]
 800d7d6:	f000 f846 	bl	800d866 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d7e4:	e022      	b.n	800d82c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7e6:	f107 0316 	add.w	r3, r7, #22
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7ee:	f000 f8c9 	bl	800d984 <USBH_GetNextDesc>
 800d7f2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	785b      	ldrb	r3, [r3, #1]
 800d7f8:	2b05      	cmp	r3, #5
 800d7fa:	d117      	bne.n	800d82c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d7fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d800:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d804:	3201      	adds	r2, #1
 800d806:	00d2      	lsls	r2, r2, #3
 800d808:	211a      	movs	r1, #26
 800d80a:	fb01 f303 	mul.w	r3, r1, r3
 800d80e:	4413      	add	r3, r2
 800d810:	3308      	adds	r3, #8
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	4413      	add	r3, r2
 800d816:	3304      	adds	r3, #4
 800d818:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d81a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d81c:	69b8      	ldr	r0, [r7, #24]
 800d81e:	f000 f851 	bl	800d8c4 <USBH_ParseEPDesc>
            ep_ix++;
 800d822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d826:	3301      	adds	r3, #1
 800d828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	791b      	ldrb	r3, [r3, #4]
 800d830:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d834:	429a      	cmp	r2, r3
 800d836:	d204      	bcs.n	800d842 <USBH_ParseCfgDesc+0x120>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	885a      	ldrh	r2, [r3, #2]
 800d83c:	8afb      	ldrh	r3, [r7, #22]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d8d1      	bhi.n	800d7e6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d846:	3301      	adds	r3, #1
 800d848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d84c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d850:	2b01      	cmp	r3, #1
 800d852:	d804      	bhi.n	800d85e <USBH_ParseCfgDesc+0x13c>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	885a      	ldrh	r2, [r3, #2]
 800d858:	8afb      	ldrh	r3, [r7, #22]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d8a4      	bhi.n	800d7a8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d85e:	bf00      	nop
 800d860:	3728      	adds	r7, #40	; 0x28
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	781a      	ldrb	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	785a      	ldrb	r2, [r3, #1]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	789a      	ldrb	r2, [r3, #2]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	78da      	ldrb	r2, [r3, #3]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	791a      	ldrb	r2, [r3, #4]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	795a      	ldrb	r2, [r3, #5]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	799a      	ldrb	r2, [r3, #6]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	79da      	ldrb	r2, [r3, #7]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	7a1a      	ldrb	r2, [r3, #8]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	721a      	strb	r2, [r3, #8]
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	781a      	ldrb	r2, [r3, #0]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	785a      	ldrb	r2, [r3, #1]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	789a      	ldrb	r2, [r3, #2]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	78da      	ldrb	r2, [r3, #3]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	3305      	adds	r3, #5
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	021b      	lsls	r3, r3, #8
 800d900:	b29b      	uxth	r3, r3
 800d902:	4313      	orrs	r3, r2
 800d904:	b29a      	uxth	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	799a      	ldrb	r2, [r3, #6]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	719a      	strb	r2, [r3, #6]
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d91e:	b480      	push	{r7}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	4613      	mov	r3, r2
 800d92a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	3301      	adds	r3, #1
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b03      	cmp	r3, #3
 800d934:	d120      	bne.n	800d978 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	1e9a      	subs	r2, r3, #2
 800d93c:	88fb      	ldrh	r3, [r7, #6]
 800d93e:	4293      	cmp	r3, r2
 800d940:	bf28      	it	cs
 800d942:	4613      	movcs	r3, r2
 800d944:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3302      	adds	r3, #2
 800d94a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d94c:	2300      	movs	r3, #0
 800d94e:	82fb      	strh	r3, [r7, #22]
 800d950:	e00b      	b.n	800d96a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d952:	8afb      	ldrh	r3, [r7, #22]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	4413      	add	r3, r2
 800d958:	781a      	ldrb	r2, [r3, #0]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	3301      	adds	r3, #1
 800d962:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d964:	8afb      	ldrh	r3, [r7, #22]
 800d966:	3302      	adds	r3, #2
 800d968:	82fb      	strh	r3, [r7, #22]
 800d96a:	8afa      	ldrh	r2, [r7, #22]
 800d96c:	8abb      	ldrh	r3, [r7, #20]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d3ef      	bcc.n	800d952 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
  }
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	881a      	ldrh	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	b29b      	uxth	r3, r3
 800d998:	4413      	add	r3, r2
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b086      	sub	sp, #24
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	789b      	ldrb	r3, [r3, #2]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d002      	beq.n	800d9da <USBH_CtlReq+0x20>
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d01d      	beq.n	800da14 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d9d8:	e043      	b.n	800da62 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	88fa      	ldrh	r2, [r7, #6]
 800d9e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2203      	movs	r2, #3
 800d9fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da0a:	2300      	movs	r3, #0
 800da0c:	2200      	movs	r2, #0
 800da0e:	f000 fd75 	bl	800e4fc <osMessageQueuePut>
      break;
 800da12:	e026      	b.n	800da62 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f000 f829 	bl	800da6c <USBH_HandleControl>
 800da1a:	4603      	mov	r3, r0
 800da1c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <USBH_CtlReq+0x70>
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	2b03      	cmp	r3, #3
 800da28:	d106      	bne.n	800da38 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2201      	movs	r2, #1
 800da2e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	761a      	strb	r2, [r3, #24]
 800da36:	e005      	b.n	800da44 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800da38:	7dfb      	ldrb	r3, [r7, #23]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d102      	bne.n	800da44 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2201      	movs	r2, #1
 800da42:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2203      	movs	r2, #3
 800da48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da58:	2300      	movs	r3, #0
 800da5a:	2200      	movs	r2, #0
 800da5c:	f000 fd4e 	bl	800e4fc <osMessageQueuePut>
      break;
 800da60:	bf00      	nop
  }
  return status;
 800da62:	7dfb      	ldrb	r3, [r7, #23]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af02      	add	r7, sp, #8
 800da72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800da74:	2301      	movs	r3, #1
 800da76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da78:	2300      	movs	r3, #0
 800da7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	7e1b      	ldrb	r3, [r3, #24]
 800da80:	3b01      	subs	r3, #1
 800da82:	2b0a      	cmp	r3, #10
 800da84:	f200 822b 	bhi.w	800dede <USBH_HandleControl+0x472>
 800da88:	a201      	add	r2, pc, #4	; (adr r2, 800da90 <USBH_HandleControl+0x24>)
 800da8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8e:	bf00      	nop
 800da90:	0800dabd 	.word	0x0800dabd
 800da94:	0800dad7 	.word	0x0800dad7
 800da98:	0800db79 	.word	0x0800db79
 800da9c:	0800db9f 	.word	0x0800db9f
 800daa0:	0800dc2b 	.word	0x0800dc2b
 800daa4:	0800dc57 	.word	0x0800dc57
 800daa8:	0800dd19 	.word	0x0800dd19
 800daac:	0800dd3b 	.word	0x0800dd3b
 800dab0:	0800ddcd 	.word	0x0800ddcd
 800dab4:	0800ddf5 	.word	0x0800ddf5
 800dab8:	0800de87 	.word	0x0800de87
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f103 0110 	add.w	r1, r3, #16
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	795b      	ldrb	r3, [r3, #5]
 800dac6:	461a      	mov	r2, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fa19 	bl	800df00 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2202      	movs	r2, #2
 800dad2:	761a      	strb	r2, [r3, #24]
      break;
 800dad4:	e20e      	b.n	800def4 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	795b      	ldrb	r3, [r3, #5]
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f003 fde7 	bl	80116b0 <USBH_LL_GetURBState>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dae6:	7bbb      	ldrb	r3, [r7, #14]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d12c      	bne.n	800db46 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	7c1b      	ldrb	r3, [r3, #16]
 800daf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800daf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	8adb      	ldrh	r3, [r3, #22]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00a      	beq.n	800db14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dafe:	7b7b      	ldrb	r3, [r7, #13]
 800db00:	2b80      	cmp	r3, #128	; 0x80
 800db02:	d103      	bne.n	800db0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2203      	movs	r2, #3
 800db08:	761a      	strb	r2, [r3, #24]
 800db0a:	e00d      	b.n	800db28 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2205      	movs	r2, #5
 800db10:	761a      	strb	r2, [r3, #24]
 800db12:	e009      	b.n	800db28 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800db14:	7b7b      	ldrb	r3, [r7, #13]
 800db16:	2b80      	cmp	r3, #128	; 0x80
 800db18:	d103      	bne.n	800db22 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2209      	movs	r2, #9
 800db1e:	761a      	strb	r2, [r3, #24]
 800db20:	e002      	b.n	800db28 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2207      	movs	r2, #7
 800db26:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2203      	movs	r2, #3
 800db2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db3c:	2300      	movs	r3, #0
 800db3e:	2200      	movs	r2, #0
 800db40:	f000 fcdc 	bl	800e4fc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db44:	e1cd      	b.n	800dee2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db46:	7bbb      	ldrb	r3, [r7, #14]
 800db48:	2b04      	cmp	r3, #4
 800db4a:	d003      	beq.n	800db54 <USBH_HandleControl+0xe8>
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	f040 81c7 	bne.w	800dee2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	220b      	movs	r2, #11
 800db58:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2203      	movs	r2, #3
 800db5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db6e:	2300      	movs	r3, #0
 800db70:	2200      	movs	r2, #0
 800db72:	f000 fcc3 	bl	800e4fc <osMessageQueuePut>
      break;
 800db76:	e1b4      	b.n	800dee2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db7e:	b29a      	uxth	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6899      	ldr	r1, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	899a      	ldrh	r2, [r3, #12]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	791b      	ldrb	r3, [r3, #4]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f9f4 	bl	800df7e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2204      	movs	r2, #4
 800db9a:	761a      	strb	r2, [r3, #24]
      break;
 800db9c:	e1aa      	b.n	800def4 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	791b      	ldrb	r3, [r3, #4]
 800dba2:	4619      	mov	r1, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f003 fd83 	bl	80116b0 <USBH_LL_GetURBState>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d110      	bne.n	800dbd6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2209      	movs	r2, #9
 800dbb8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2203      	movs	r2, #3
 800dbbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f000 fc93 	bl	800e4fc <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dbd6:	7bbb      	ldrb	r3, [r7, #14]
 800dbd8:	2b05      	cmp	r3, #5
 800dbda:	d110      	bne.n	800dbfe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f000 fc80 	bl	800e4fc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dbfc:	e173      	b.n	800dee6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
 800dc00:	2b04      	cmp	r3, #4
 800dc02:	f040 8170 	bne.w	800dee6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	220b      	movs	r2, #11
 800dc0a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2203      	movs	r2, #3
 800dc10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc20:	2300      	movs	r3, #0
 800dc22:	2200      	movs	r2, #0
 800dc24:	f000 fc6a 	bl	800e4fc <osMessageQueuePut>
      break;
 800dc28:	e15d      	b.n	800dee6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6899      	ldr	r1, [r3, #8]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	899a      	ldrh	r2, [r3, #12]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	7958      	ldrb	r0, [r3, #5]
 800dc36:	2301      	movs	r3, #1
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f979 	bl	800df34 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2206      	movs	r2, #6
 800dc52:	761a      	strb	r2, [r3, #24]
      break;
 800dc54:	e14e      	b.n	800def4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	795b      	ldrb	r3, [r3, #5]
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f003 fd27 	bl	80116b0 <USBH_LL_GetURBState>
 800dc62:	4603      	mov	r3, r0
 800dc64:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d111      	bne.n	800dc90 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2207      	movs	r2, #7
 800dc70:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2203      	movs	r2, #3
 800dc76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc86:	2300      	movs	r3, #0
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f000 fc37 	bl	800e4fc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dc8e:	e12c      	b.n	800deea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800dc90:	7bbb      	ldrb	r3, [r7, #14]
 800dc92:	2b05      	cmp	r3, #5
 800dc94:	d113      	bne.n	800dcbe <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	220c      	movs	r2, #12
 800dc9a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dc9c:	2303      	movs	r3, #3
 800dc9e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2203      	movs	r2, #3
 800dca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f000 fc20 	bl	800e4fc <osMessageQueuePut>
      break;
 800dcbc:	e115      	b.n	800deea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dcbe:	7bbb      	ldrb	r3, [r7, #14]
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d111      	bne.n	800dce8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2205      	movs	r2, #5
 800dcc8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2203      	movs	r2, #3
 800dcce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcde:	2300      	movs	r3, #0
 800dce0:	2200      	movs	r2, #0
 800dce2:	f000 fc0b 	bl	800e4fc <osMessageQueuePut>
      break;
 800dce6:	e100      	b.n	800deea <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800dce8:	7bbb      	ldrb	r3, [r7, #14]
 800dcea:	2b04      	cmp	r3, #4
 800dcec:	f040 80fd 	bne.w	800deea <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	220b      	movs	r2, #11
 800dcf4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dcf6:	2302      	movs	r3, #2
 800dcf8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2203      	movs	r2, #3
 800dcfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd0e:	2300      	movs	r3, #0
 800dd10:	2200      	movs	r2, #0
 800dd12:	f000 fbf3 	bl	800e4fc <osMessageQueuePut>
      break;
 800dd16:	e0e8      	b.n	800deea <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	791b      	ldrb	r3, [r3, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2100      	movs	r1, #0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f92c 	bl	800df7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2208      	movs	r2, #8
 800dd36:	761a      	strb	r2, [r3, #24]

      break;
 800dd38:	e0dc      	b.n	800def4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	791b      	ldrb	r3, [r3, #4]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f003 fcb5 	bl	80116b0 <USBH_LL_GetURBState>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d113      	bne.n	800dd78 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	220d      	movs	r2, #13
 800dd54:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2203      	movs	r2, #3
 800dd5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd6e:	2300      	movs	r3, #0
 800dd70:	2200      	movs	r2, #0
 800dd72:	f000 fbc3 	bl	800e4fc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dd76:	e0ba      	b.n	800deee <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800dd78:	7bbb      	ldrb	r3, [r7, #14]
 800dd7a:	2b04      	cmp	r3, #4
 800dd7c:	d111      	bne.n	800dda2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	220b      	movs	r2, #11
 800dd82:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2203      	movs	r2, #3
 800dd88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd98:	2300      	movs	r3, #0
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f000 fbae 	bl	800e4fc <osMessageQueuePut>
      break;
 800dda0:	e0a5      	b.n	800deee <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	f040 80a2 	bne.w	800deee <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2203      	movs	r2, #3
 800ddb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f000 fb99 	bl	800e4fc <osMessageQueuePut>
      break;
 800ddca:	e090      	b.n	800deee <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	795a      	ldrb	r2, [r3, #5]
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	2100      	movs	r1, #0
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f8aa 	bl	800df34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	220a      	movs	r2, #10
 800ddf0:	761a      	strb	r2, [r3, #24]
      break;
 800ddf2:	e07f      	b.n	800def4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	795b      	ldrb	r3, [r3, #5]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f003 fc58 	bl	80116b0 <USBH_LL_GetURBState>
 800de00:	4603      	mov	r3, r0
 800de02:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800de04:	7bbb      	ldrb	r3, [r7, #14]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d113      	bne.n	800de32 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	220d      	movs	r2, #13
 800de12:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2203      	movs	r2, #3
 800de18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de28:	2300      	movs	r3, #0
 800de2a:	2200      	movs	r2, #0
 800de2c:	f000 fb66 	bl	800e4fc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800de30:	e05f      	b.n	800def2 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	2b02      	cmp	r3, #2
 800de36:	d111      	bne.n	800de5c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2209      	movs	r2, #9
 800de3c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2203      	movs	r2, #3
 800de42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	f000 fb51 	bl	800e4fc <osMessageQueuePut>
      break;
 800de5a:	e04a      	b.n	800def2 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b04      	cmp	r3, #4
 800de60:	d147      	bne.n	800def2 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	220b      	movs	r2, #11
 800de66:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de7c:	2300      	movs	r3, #0
 800de7e:	2200      	movs	r2, #0
 800de80:	f000 fb3c 	bl	800e4fc <osMessageQueuePut>
      break;
 800de84:	e035      	b.n	800def2 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	7e5b      	ldrb	r3, [r3, #25]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	765a      	strb	r2, [r3, #25]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7e5b      	ldrb	r3, [r3, #25]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d806      	bhi.n	800dea8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dea6:	e025      	b.n	800def4 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deae:	2106      	movs	r1, #6
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	795b      	ldrb	r3, [r3, #5]
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f90d 	bl	800e0e0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	791b      	ldrb	r3, [r3, #4]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f907 	bl	800e0e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ded8:	2302      	movs	r3, #2
 800deda:	73fb      	strb	r3, [r7, #15]
      break;
 800dedc:	e00a      	b.n	800def4 <USBH_HandleControl+0x488>

    default:
      break;
 800dede:	bf00      	nop
 800dee0:	e008      	b.n	800def4 <USBH_HandleControl+0x488>
      break;
 800dee2:	bf00      	nop
 800dee4:	e006      	b.n	800def4 <USBH_HandleControl+0x488>
      break;
 800dee6:	bf00      	nop
 800dee8:	e004      	b.n	800def4 <USBH_HandleControl+0x488>
      break;
 800deea:	bf00      	nop
 800deec:	e002      	b.n	800def4 <USBH_HandleControl+0x488>
      break;
 800deee:	bf00      	nop
 800def0:	e000      	b.n	800def4 <USBH_HandleControl+0x488>
      break;
 800def2:	bf00      	nop
  }

  return status;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop

0800df00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af04      	add	r7, sp, #16
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df0e:	79f9      	ldrb	r1, [r7, #7]
 800df10:	2300      	movs	r3, #0
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	2308      	movs	r3, #8
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	2300      	movs	r3, #0
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	2200      	movs	r2, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f003 fb92 	bl	801164e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af04      	add	r7, sp, #16
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4611      	mov	r1, r2
 800df40:	461a      	mov	r2, r3
 800df42:	460b      	mov	r3, r1
 800df44:	80fb      	strh	r3, [r7, #6]
 800df46:	4613      	mov	r3, r2
 800df48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df58:	7979      	ldrb	r1, [r7, #5]
 800df5a:	7e3b      	ldrb	r3, [r7, #24]
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	9302      	str	r3, [sp, #8]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	2301      	movs	r3, #1
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	2300      	movs	r3, #0
 800df6c:	2200      	movs	r2, #0
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f003 fb6d 	bl	801164e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b088      	sub	sp, #32
 800df82:	af04      	add	r7, sp, #16
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	4611      	mov	r1, r2
 800df8a:	461a      	mov	r2, r3
 800df8c:	460b      	mov	r3, r1
 800df8e:	80fb      	strh	r3, [r7, #6]
 800df90:	4613      	mov	r3, r2
 800df92:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df94:	7979      	ldrb	r1, [r7, #5]
 800df96:	2300      	movs	r3, #0
 800df98:	9303      	str	r3, [sp, #12]
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	9302      	str	r3, [sp, #8]
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f003 fb4f 	bl	801164e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dfb0:	2300      	movs	r3, #0

}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b088      	sub	sp, #32
 800dfbe:	af04      	add	r7, sp, #16
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	460b      	mov	r3, r1
 800dfca:	80fb      	strh	r3, [r7, #6]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dfde:	7979      	ldrb	r1, [r7, #5]
 800dfe0:	7e3b      	ldrb	r3, [r7, #24]
 800dfe2:	9303      	str	r3, [sp, #12]
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	9302      	str	r3, [sp, #8]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	2301      	movs	r3, #1
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	2302      	movs	r3, #2
 800dff2:	2200      	movs	r2, #0
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f003 fb2a 	bl	801164e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	af04      	add	r7, sp, #16
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	4611      	mov	r1, r2
 800e010:	461a      	mov	r2, r3
 800e012:	460b      	mov	r3, r1
 800e014:	80fb      	strh	r3, [r7, #6]
 800e016:	4613      	mov	r3, r2
 800e018:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e01a:	7979      	ldrb	r1, [r7, #5]
 800e01c:	2300      	movs	r3, #0
 800e01e:	9303      	str	r3, [sp, #12]
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	9302      	str	r3, [sp, #8]
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	2301      	movs	r3, #1
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	2302      	movs	r3, #2
 800e02e:	2201      	movs	r2, #1
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f003 fb0c 	bl	801164e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af04      	add	r7, sp, #16
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4608      	mov	r0, r1
 800e04a:	4611      	mov	r1, r2
 800e04c:	461a      	mov	r2, r3
 800e04e:	4603      	mov	r3, r0
 800e050:	70fb      	strb	r3, [r7, #3]
 800e052:	460b      	mov	r3, r1
 800e054:	70bb      	strb	r3, [r7, #2]
 800e056:	4613      	mov	r3, r2
 800e058:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e05a:	7878      	ldrb	r0, [r7, #1]
 800e05c:	78ba      	ldrb	r2, [r7, #2]
 800e05e:	78f9      	ldrb	r1, [r7, #3]
 800e060:	8b3b      	ldrh	r3, [r7, #24]
 800e062:	9302      	str	r3, [sp, #8]
 800e064:	7d3b      	ldrb	r3, [r7, #20]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	7c3b      	ldrb	r3, [r7, #16]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	4603      	mov	r3, r0
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f003 fa9f 	bl	80115b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b082      	sub	sp, #8
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	460b      	mov	r3, r1
 800e088:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e08a:	78fb      	ldrb	r3, [r7, #3]
 800e08c:	4619      	mov	r1, r3
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f003 fabe 	bl	8011610 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b084      	sub	sp, #16
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f836 	bl	800e11c <USBH_GetFreePipe>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d00a      	beq.n	800e0d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e0be:	78fa      	ldrb	r2, [r7, #3]
 800e0c0:	89fb      	ldrh	r3, [r7, #14]
 800e0c2:	f003 030f 	and.w	r3, r3, #15
 800e0c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	33e0      	adds	r3, #224	; 0xe0
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	440b      	add	r3, r1
 800e0d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e0d4:	89fb      	ldrh	r3, [r7, #14]
 800e0d6:	b2db      	uxtb	r3, r3
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e0ec:	78fb      	ldrb	r3, [r7, #3]
 800e0ee:	2b0a      	cmp	r3, #10
 800e0f0:	d80d      	bhi.n	800e10e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e0f2:	78fb      	ldrb	r3, [r7, #3]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	33e0      	adds	r3, #224	; 0xe0
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	33e0      	adds	r3, #224	; 0xe0
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	440b      	add	r3, r1
 800e10c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e128:	2300      	movs	r3, #0
 800e12a:	73fb      	strb	r3, [r7, #15]
 800e12c:	e00f      	b.n	800e14e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	33e0      	adds	r3, #224	; 0xe0
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e142:	7bfb      	ldrb	r3, [r7, #15]
 800e144:	b29b      	uxth	r3, r3
 800e146:	e007      	b.n	800e158 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	3301      	adds	r3, #1
 800e14c:	73fb      	strb	r3, [r7, #15]
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	2b0a      	cmp	r3, #10
 800e152:	d9ec      	bls.n	800e12e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e154:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e168:	bf00      	nop
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
	...

0800e174 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e17a:	f3ef 8305 	mrs	r3, IPSR
 800e17e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e180:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10f      	bne.n	800e1a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e186:	f3ef 8310 	mrs	r3, PRIMASK
 800e18a:	607b      	str	r3, [r7, #4]
  return(result);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d105      	bne.n	800e19e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e192:	f3ef 8311 	mrs	r3, BASEPRI
 800e196:	603b      	str	r3, [r7, #0]
  return(result);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d007      	beq.n	800e1ae <osKernelInitialize+0x3a>
 800e19e:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <osKernelInitialize+0x64>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d103      	bne.n	800e1ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e1a6:	f06f 0305 	mvn.w	r3, #5
 800e1aa:	60fb      	str	r3, [r7, #12]
 800e1ac:	e00c      	b.n	800e1c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e1ae:	4b0a      	ldr	r3, [pc, #40]	; (800e1d8 <osKernelInitialize+0x64>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d105      	bne.n	800e1c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <osKernelInitialize+0x64>)
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	e002      	b.n	800e1c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	200001c8 	.word	0x200001c8

0800e1dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1e2:	f3ef 8305 	mrs	r3, IPSR
 800e1e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10f      	bne.n	800e20e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f2:	607b      	str	r3, [r7, #4]
  return(result);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1fa:	f3ef 8311 	mrs	r3, BASEPRI
 800e1fe:	603b      	str	r3, [r7, #0]
  return(result);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <osKernelStart+0x3a>
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <osKernelStart+0x68>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b02      	cmp	r3, #2
 800e20c:	d103      	bne.n	800e216 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e20e:	f06f 0305 	mvn.w	r3, #5
 800e212:	60fb      	str	r3, [r7, #12]
 800e214:	e010      	b.n	800e238 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e216:	4b0b      	ldr	r3, [pc, #44]	; (800e244 <osKernelStart+0x68>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d109      	bne.n	800e232 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e21e:	f7ff ffa1 	bl	800e164 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e222:	4b08      	ldr	r3, [pc, #32]	; (800e244 <osKernelStart+0x68>)
 800e224:	2202      	movs	r2, #2
 800e226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e228:	f001 fa9a 	bl	800f760 <vTaskStartScheduler>
      stat = osOK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	e002      	b.n	800e238 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e232:	f04f 33ff 	mov.w	r3, #4294967295
 800e236:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e238:	68fb      	ldr	r3, [r7, #12]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	200001c8 	.word	0x200001c8

0800e248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b090      	sub	sp, #64	; 0x40
 800e24c:	af04      	add	r7, sp, #16
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e254:	2300      	movs	r3, #0
 800e256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e258:	f3ef 8305 	mrs	r3, IPSR
 800e25c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e25e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e260:	2b00      	cmp	r3, #0
 800e262:	f040 808f 	bne.w	800e384 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e266:	f3ef 8310 	mrs	r3, PRIMASK
 800e26a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d105      	bne.n	800e27e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e272:	f3ef 8311 	mrs	r3, BASEPRI
 800e276:	617b      	str	r3, [r7, #20]
  return(result);
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <osThreadNew+0x3e>
 800e27e:	4b44      	ldr	r3, [pc, #272]	; (800e390 <osThreadNew+0x148>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d07e      	beq.n	800e384 <osThreadNew+0x13c>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d07b      	beq.n	800e384 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e28c:	2380      	movs	r3, #128	; 0x80
 800e28e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e290:	2318      	movs	r3, #24
 800e292:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e294:	2300      	movs	r3, #0
 800e296:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e298:	f04f 33ff 	mov.w	r3, #4294967295
 800e29c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d045      	beq.n	800e330 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d002      	beq.n	800e2b2 <osThreadNew+0x6a>
        name = attr->name;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	699b      	ldr	r3, [r3, #24]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	699b      	ldr	r3, [r3, #24]
 800e2be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d008      	beq.n	800e2d8 <osThreadNew+0x90>
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	2b38      	cmp	r3, #56	; 0x38
 800e2ca:	d805      	bhi.n	800e2d8 <osThreadNew+0x90>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d001      	beq.n	800e2dc <osThreadNew+0x94>
        return (NULL);
 800e2d8:	2300      	movs	r3, #0
 800e2da:	e054      	b.n	800e386 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	089b      	lsrs	r3, r3, #2
 800e2ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00e      	beq.n	800e312 <osThreadNew+0xca>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	2b5b      	cmp	r3, #91	; 0x5b
 800e2fa:	d90a      	bls.n	800e312 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e300:	2b00      	cmp	r3, #0
 800e302:	d006      	beq.n	800e312 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	695b      	ldr	r3, [r3, #20]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <osThreadNew+0xca>
        mem = 1;
 800e30c:	2301      	movs	r3, #1
 800e30e:	623b      	str	r3, [r7, #32]
 800e310:	e010      	b.n	800e334 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10c      	bne.n	800e334 <osThreadNew+0xec>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d108      	bne.n	800e334 <osThreadNew+0xec>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d104      	bne.n	800e334 <osThreadNew+0xec>
          mem = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	623b      	str	r3, [r7, #32]
 800e32e:	e001      	b.n	800e334 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e330:	2300      	movs	r3, #0
 800e332:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d110      	bne.n	800e35c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e342:	9202      	str	r2, [sp, #8]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e34e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f001 f833 	bl	800f3bc <xTaskCreateStatic>
 800e356:	4603      	mov	r3, r0
 800e358:	613b      	str	r3, [r7, #16]
 800e35a:	e013      	b.n	800e384 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e35c:	6a3b      	ldr	r3, [r7, #32]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d110      	bne.n	800e384 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	b29a      	uxth	r2, r3
 800e366:	f107 0310 	add.w	r3, r7, #16
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f001 f87b 	bl	800f470 <xTaskCreate>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d001      	beq.n	800e384 <osThreadNew+0x13c>
          hTask = NULL;
 800e380:	2300      	movs	r3, #0
 800e382:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e384:	693b      	ldr	r3, [r7, #16]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3730      	adds	r7, #48	; 0x30
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200001c8 	.word	0x200001c8

0800e394 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e39c:	f3ef 8305 	mrs	r3, IPSR
 800e3a0:	613b      	str	r3, [r7, #16]
  return(result);
 800e3a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10f      	bne.n	800e3c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e3ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d105      	bne.n	800e3c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e3b4:	f3ef 8311 	mrs	r3, BASEPRI
 800e3b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d007      	beq.n	800e3d0 <osDelay+0x3c>
 800e3c0:	4b0a      	ldr	r3, [pc, #40]	; (800e3ec <osDelay+0x58>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d103      	bne.n	800e3d0 <osDelay+0x3c>
    stat = osErrorISR;
 800e3c8:	f06f 0305 	mvn.w	r3, #5
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	e007      	b.n	800e3e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f001 f98c 	bl	800f6f8 <vTaskDelay>
    }
  }

  return (stat);
 800e3e0:	697b      	ldr	r3, [r7, #20]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3718      	adds	r7, #24
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	200001c8 	.word	0x200001c8

0800e3f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b08c      	sub	sp, #48	; 0x30
 800e3f4:	af02      	add	r7, sp, #8
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e400:	f3ef 8305 	mrs	r3, IPSR
 800e404:	61bb      	str	r3, [r7, #24]
  return(result);
 800e406:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d170      	bne.n	800e4ee <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e40c:	f3ef 8310 	mrs	r3, PRIMASK
 800e410:	617b      	str	r3, [r7, #20]
  return(result);
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d105      	bne.n	800e424 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e418:	f3ef 8311 	mrs	r3, BASEPRI
 800e41c:	613b      	str	r3, [r7, #16]
  return(result);
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d003      	beq.n	800e42c <osMessageQueueNew+0x3c>
 800e424:	4b34      	ldr	r3, [pc, #208]	; (800e4f8 <osMessageQueueNew+0x108>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d060      	beq.n	800e4ee <osMessageQueueNew+0xfe>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d05d      	beq.n	800e4ee <osMessageQueueNew+0xfe>
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d05a      	beq.n	800e4ee <osMessageQueueNew+0xfe>
    mem = -1;
 800e438:	f04f 33ff 	mov.w	r3, #4294967295
 800e43c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d029      	beq.n	800e498 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d012      	beq.n	800e472 <osMessageQueueNew+0x82>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	2b4f      	cmp	r3, #79	; 0x4f
 800e452:	d90e      	bls.n	800e472 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00a      	beq.n	800e472 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695a      	ldr	r2, [r3, #20]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	68b9      	ldr	r1, [r7, #8]
 800e464:	fb01 f303 	mul.w	r3, r1, r3
 800e468:	429a      	cmp	r2, r3
 800e46a:	d302      	bcc.n	800e472 <osMessageQueueNew+0x82>
        mem = 1;
 800e46c:	2301      	movs	r3, #1
 800e46e:	623b      	str	r3, [r7, #32]
 800e470:	e014      	b.n	800e49c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d110      	bne.n	800e49c <osMessageQueueNew+0xac>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10c      	bne.n	800e49c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e486:	2b00      	cmp	r3, #0
 800e488:	d108      	bne.n	800e49c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d104      	bne.n	800e49c <osMessageQueueNew+0xac>
          mem = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	623b      	str	r3, [r7, #32]
 800e496:	e001      	b.n	800e49c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	2b01      	cmp	r3, #1
 800e4a0:	d10c      	bne.n	800e4bc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6899      	ldr	r1, [r3, #8]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 fa58 	bl	800e968 <xQueueGenericCreateStatic>
 800e4b8:	6278      	str	r0, [r7, #36]	; 0x24
 800e4ba:	e008      	b.n	800e4ce <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d105      	bne.n	800e4ce <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	68b9      	ldr	r1, [r7, #8]
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f000 fac1 	bl	800ea4e <xQueueGenericCreate>
 800e4cc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00c      	beq.n	800e4ee <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	61fb      	str	r3, [r7, #28]
 800e4e0:	e001      	b.n	800e4e6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e4e6:	69f9      	ldr	r1, [r7, #28]
 800e4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4ea:	f000 ff0b 	bl	800f304 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3728      	adds	r7, #40	; 0x28
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	200001c8 	.word	0x200001c8

0800e4fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08a      	sub	sp, #40	; 0x28
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	603b      	str	r3, [r7, #0]
 800e508:	4613      	mov	r3, r2
 800e50a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e510:	2300      	movs	r3, #0
 800e512:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e514:	f3ef 8305 	mrs	r3, IPSR
 800e518:	61fb      	str	r3, [r7, #28]
  return(result);
 800e51a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10f      	bne.n	800e540 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e520:	f3ef 8310 	mrs	r3, PRIMASK
 800e524:	61bb      	str	r3, [r7, #24]
  return(result);
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d105      	bne.n	800e538 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e52c:	f3ef 8311 	mrs	r3, BASEPRI
 800e530:	617b      	str	r3, [r7, #20]
  return(result);
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d02c      	beq.n	800e592 <osMessageQueuePut+0x96>
 800e538:	4b28      	ldr	r3, [pc, #160]	; (800e5dc <osMessageQueuePut+0xe0>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d128      	bne.n	800e592 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d005      	beq.n	800e552 <osMessageQueuePut+0x56>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <osMessageQueuePut+0x56>
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e552:	f06f 0303 	mvn.w	r3, #3
 800e556:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e558:	e039      	b.n	800e5ce <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e55a:	2300      	movs	r3, #0
 800e55c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e55e:	f107 0210 	add.w	r2, r7, #16
 800e562:	2300      	movs	r3, #0
 800e564:	68b9      	ldr	r1, [r7, #8]
 800e566:	6a38      	ldr	r0, [r7, #32]
 800e568:	f000 fbce 	bl	800ed08 <xQueueGenericSendFromISR>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d003      	beq.n	800e57a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e572:	f06f 0302 	mvn.w	r3, #2
 800e576:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e578:	e029      	b.n	800e5ce <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d026      	beq.n	800e5ce <osMessageQueuePut+0xd2>
 800e580:	4b17      	ldr	r3, [pc, #92]	; (800e5e0 <osMessageQueuePut+0xe4>)
 800e582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e590:	e01d      	b.n	800e5ce <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <osMessageQueuePut+0xa2>
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d103      	bne.n	800e5a6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e59e:	f06f 0303 	mvn.w	r3, #3
 800e5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5a4:	e014      	b.n	800e5d0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	68b9      	ldr	r1, [r7, #8]
 800e5ac:	6a38      	ldr	r0, [r7, #32]
 800e5ae:	f000 fab1 	bl	800eb14 <xQueueGenericSend>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d00b      	beq.n	800e5d0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e5be:	f06f 0301 	mvn.w	r3, #1
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5c4:	e004      	b.n	800e5d0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e5c6:	f06f 0302 	mvn.w	r3, #2
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e5cc:	e000      	b.n	800e5d0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e5ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3728      	adds	r7, #40	; 0x28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	200001c8 	.word	0x200001c8
 800e5e0:	e000ed04 	.word	0xe000ed04

0800e5e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08a      	sub	sp, #40	; 0x28
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5fa:	f3ef 8305 	mrs	r3, IPSR
 800e5fe:	61fb      	str	r3, [r7, #28]
  return(result);
 800e600:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10f      	bne.n	800e626 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e606:	f3ef 8310 	mrs	r3, PRIMASK
 800e60a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d105      	bne.n	800e61e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e612:	f3ef 8311 	mrs	r3, BASEPRI
 800e616:	617b      	str	r3, [r7, #20]
  return(result);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d02c      	beq.n	800e678 <osMessageQueueGet+0x94>
 800e61e:	4b28      	ldr	r3, [pc, #160]	; (800e6c0 <osMessageQueueGet+0xdc>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b02      	cmp	r3, #2
 800e624:	d128      	bne.n	800e678 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d005      	beq.n	800e638 <osMessageQueueGet+0x54>
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <osMessageQueueGet+0x54>
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d003      	beq.n	800e640 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e638:	f06f 0303 	mvn.w	r3, #3
 800e63c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e63e:	e038      	b.n	800e6b2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e640:	2300      	movs	r3, #0
 800e642:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e644:	f107 0310 	add.w	r3, r7, #16
 800e648:	461a      	mov	r2, r3
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	6a38      	ldr	r0, [r7, #32]
 800e64e:	f000 fccb 	bl	800efe8 <xQueueReceiveFromISR>
 800e652:	4603      	mov	r3, r0
 800e654:	2b01      	cmp	r3, #1
 800e656:	d003      	beq.n	800e660 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e658:	f06f 0302 	mvn.w	r3, #2
 800e65c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e65e:	e028      	b.n	800e6b2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d025      	beq.n	800e6b2 <osMessageQueueGet+0xce>
 800e666:	4b17      	ldr	r3, [pc, #92]	; (800e6c4 <osMessageQueueGet+0xe0>)
 800e668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e676:	e01c      	b.n	800e6b2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <osMessageQueueGet+0xa0>
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e684:	f06f 0303 	mvn.w	r3, #3
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
 800e68a:	e013      	b.n	800e6b4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	6a38      	ldr	r0, [r7, #32]
 800e692:	f000 fbcd 	bl	800ee30 <xQueueReceive>
 800e696:	4603      	mov	r3, r0
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d00b      	beq.n	800e6b4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d003      	beq.n	800e6aa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e6a2:	f06f 0301 	mvn.w	r3, #1
 800e6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e6a8:	e004      	b.n	800e6b4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e6aa:	f06f 0302 	mvn.w	r3, #2
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e6b0:	e000      	b.n	800e6b4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3728      	adds	r7, #40	; 0x28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	200001c8 	.word	0x200001c8
 800e6c4:	e000ed04 	.word	0xe000ed04

0800e6c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4a07      	ldr	r2, [pc, #28]	; (800e6f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800e6d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	4a06      	ldr	r2, [pc, #24]	; (800e6f8 <vApplicationGetIdleTaskMemory+0x30>)
 800e6de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2280      	movs	r2, #128	; 0x80
 800e6e4:	601a      	str	r2, [r3, #0]
}
 800e6e6:	bf00      	nop
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	200001cc 	.word	0x200001cc
 800e6f8:	20000228 	.word	0x20000228

0800e6fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4a07      	ldr	r2, [pc, #28]	; (800e728 <vApplicationGetTimerTaskMemory+0x2c>)
 800e70c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	4a06      	ldr	r2, [pc, #24]	; (800e72c <vApplicationGetTimerTaskMemory+0x30>)
 800e712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e71a:	601a      	str	r2, [r3, #0]
}
 800e71c:	bf00      	nop
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000428 	.word	0x20000428
 800e72c:	20000484 	.word	0x20000484

0800e730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f103 0208 	add.w	r2, r3, #8
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f04f 32ff 	mov.w	r2, #4294967295
 800e748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f103 0208 	add.w	r2, r3, #8
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f103 0208 	add.w	r2, r3, #8
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e77e:	bf00      	nop
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e78a:	b480      	push	{r7}
 800e78c:	b085      	sub	sp, #20
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	689a      	ldr	r2, [r3, #8]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	601a      	str	r2, [r3, #0]
}
 800e7c6:	bf00      	nop
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b085      	sub	sp, #20
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e8:	d103      	bne.n	800e7f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	60fb      	str	r3, [r7, #12]
 800e7f0:	e00c      	b.n	800e80c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	e002      	b.n	800e800 <vListInsert+0x2e>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d2f6      	bcs.n	800e7fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	683a      	ldr	r2, [r7, #0]
 800e826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	601a      	str	r2, [r3, #0]
}
 800e838:	bf00      	nop
 800e83a:	3714      	adds	r7, #20
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	6892      	ldr	r2, [r2, #8]
 800e85a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	6852      	ldr	r2, [r2, #4]
 800e864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d103      	bne.n	800e878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689a      	ldr	r2, [r3, #8]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	1e5a      	subs	r2, r3, #1
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d109      	bne.n	800e8c0 <xQueueGenericReset+0x28>
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	60bb      	str	r3, [r7, #8]
 800e8be:	e7fe      	b.n	800e8be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e8c0:	f002 f9b4 	bl	8010c2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8cc:	68f9      	ldr	r1, [r7, #12]
 800e8ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8d0:	fb01 f303 	mul.w	r3, r1, r3
 800e8d4:	441a      	add	r2, r3
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	68f9      	ldr	r1, [r7, #12]
 800e8f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8f6:	fb01 f303 	mul.w	r3, r1, r3
 800e8fa:	441a      	add	r2, r3
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	22ff      	movs	r2, #255	; 0xff
 800e904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	22ff      	movs	r2, #255	; 0xff
 800e90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d114      	bne.n	800e940 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d01a      	beq.n	800e954 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3310      	adds	r3, #16
 800e922:	4618      	mov	r0, r3
 800e924:	f001 f99c 	bl	800fc60 <xTaskRemoveFromEventList>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d012      	beq.n	800e954 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <xQueueGenericReset+0xcc>)
 800e930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	e009      	b.n	800e954 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	3310      	adds	r3, #16
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fef3 	bl	800e730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3324      	adds	r3, #36	; 0x24
 800e94e:	4618      	mov	r0, r3
 800e950:	f7ff feee 	bl	800e730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e954:	f002 f998 	bl	8010c88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e958:	2301      	movs	r3, #1
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	e000ed04 	.word	0xe000ed04

0800e968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08e      	sub	sp, #56	; 0x38
 800e96c:	af02      	add	r7, sp, #8
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d109      	bne.n	800e990 <xQueueGenericCreateStatic+0x28>
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e98e:	e7fe      	b.n	800e98e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <xQueueGenericCreateStatic+0x42>
 800e996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e9a8:	e7fe      	b.n	800e9a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <xQueueGenericCreateStatic+0x4e>
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <xQueueGenericCreateStatic+0x52>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e000      	b.n	800e9bc <xQueueGenericCreateStatic+0x54>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d109      	bne.n	800e9d4 <xQueueGenericCreateStatic+0x6c>
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	623b      	str	r3, [r7, #32]
 800e9d2:	e7fe      	b.n	800e9d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d102      	bne.n	800e9e0 <xQueueGenericCreateStatic+0x78>
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <xQueueGenericCreateStatic+0x7c>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e000      	b.n	800e9e6 <xQueueGenericCreateStatic+0x7e>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <xQueueGenericCreateStatic+0x96>
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	61fb      	str	r3, [r7, #28]
 800e9fc:	e7fe      	b.n	800e9fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9fe:	2350      	movs	r3, #80	; 0x50
 800ea00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2b50      	cmp	r3, #80	; 0x50
 800ea06:	d009      	beq.n	800ea1c <xQueueGenericCreateStatic+0xb4>
 800ea08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0c:	f383 8811 	msr	BASEPRI, r3
 800ea10:	f3bf 8f6f 	isb	sy
 800ea14:	f3bf 8f4f 	dsb	sy
 800ea18:	61bb      	str	r3, [r7, #24]
 800ea1a:	e7fe      	b.n	800ea1a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00d      	beq.n	800ea44 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 f844 	bl	800eacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3730      	adds	r7, #48	; 0x30
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b08a      	sub	sp, #40	; 0x28
 800ea52:	af02      	add	r7, sp, #8
 800ea54:	60f8      	str	r0, [r7, #12]
 800ea56:	60b9      	str	r1, [r7, #8]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d109      	bne.n	800ea76 <xQueueGenericCreate+0x28>
 800ea62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	613b      	str	r3, [r7, #16]
 800ea74:	e7fe      	b.n	800ea74 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d102      	bne.n	800ea82 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	61fb      	str	r3, [r7, #28]
 800ea80:	e004      	b.n	800ea8c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	fb02 f303 	mul.w	r3, r2, r3
 800ea8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	3350      	adds	r3, #80	; 0x50
 800ea90:	4618      	mov	r0, r3
 800ea92:	f002 f9e5 	bl	8010e60 <pvPortMalloc>
 800ea96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d011      	beq.n	800eac2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	3350      	adds	r3, #80	; 0x50
 800eaa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eab0:	79fa      	ldrb	r2, [r7, #7]
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	4613      	mov	r3, r2
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	68b9      	ldr	r1, [r7, #8]
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 f805 	bl	800eacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eac2:	69bb      	ldr	r3, [r7, #24]
	}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3720      	adds	r7, #32
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d103      	bne.n	800eae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	69ba      	ldr	r2, [r7, #24]
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	e002      	b.n	800eaee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eafa:	2101      	movs	r1, #1
 800eafc:	69b8      	ldr	r0, [r7, #24]
 800eafe:	f7ff fecb 	bl	800e898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	78fa      	ldrb	r2, [r7, #3]
 800eb06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
	...

0800eb14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08e      	sub	sp, #56	; 0x38
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb22:	2300      	movs	r3, #0
 800eb24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d109      	bne.n	800eb44 <xQueueGenericSend+0x30>
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb42:	e7fe      	b.n	800eb42 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d103      	bne.n	800eb52 <xQueueGenericSend+0x3e>
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <xQueueGenericSend+0x42>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <xQueueGenericSend+0x44>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d109      	bne.n	800eb70 <xQueueGenericSend+0x5c>
 800eb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6e:	e7fe      	b.n	800eb6e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d103      	bne.n	800eb7e <xQueueGenericSend+0x6a>
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d101      	bne.n	800eb82 <xQueueGenericSend+0x6e>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e000      	b.n	800eb84 <xQueueGenericSend+0x70>
 800eb82:	2300      	movs	r3, #0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d109      	bne.n	800eb9c <xQueueGenericSend+0x88>
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	623b      	str	r3, [r7, #32]
 800eb9a:	e7fe      	b.n	800eb9a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb9c:	f001 fa26 	bl	800ffec <xTaskGetSchedulerState>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d102      	bne.n	800ebac <xQueueGenericSend+0x98>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <xQueueGenericSend+0x9c>
 800ebac:	2301      	movs	r3, #1
 800ebae:	e000      	b.n	800ebb2 <xQueueGenericSend+0x9e>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d109      	bne.n	800ebca <xQueueGenericSend+0xb6>
 800ebb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	61fb      	str	r3, [r7, #28]
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebca:	f002 f82f 	bl	8010c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d302      	bcc.n	800ebe0 <xQueueGenericSend+0xcc>
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d129      	bne.n	800ec34 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	68b9      	ldr	r1, [r7, #8]
 800ebe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebe6:	f000 fa7c 	bl	800f0e2 <prvCopyDataToQueue>
 800ebea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d010      	beq.n	800ec16 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	3324      	adds	r3, #36	; 0x24
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f001 f831 	bl	800fc60 <xTaskRemoveFromEventList>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d013      	beq.n	800ec2c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec04:	4b3f      	ldr	r3, [pc, #252]	; (800ed04 <xQueueGenericSend+0x1f0>)
 800ec06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec0a:	601a      	str	r2, [r3, #0]
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	e00a      	b.n	800ec2c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d007      	beq.n	800ec2c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec1c:	4b39      	ldr	r3, [pc, #228]	; (800ed04 <xQueueGenericSend+0x1f0>)
 800ec1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec22:	601a      	str	r2, [r3, #0]
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec2c:	f002 f82c 	bl	8010c88 <vPortExitCritical>
				return pdPASS;
 800ec30:	2301      	movs	r3, #1
 800ec32:	e063      	b.n	800ecfc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d103      	bne.n	800ec42 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec3a:	f002 f825 	bl	8010c88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e05c      	b.n	800ecfc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d106      	bne.n	800ec56 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec48:	f107 0314 	add.w	r3, r7, #20
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f001 f869 	bl	800fd24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec52:	2301      	movs	r3, #1
 800ec54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec56:	f002 f817 	bl	8010c88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec5a:	f000 fde5 	bl	800f828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec5e:	f001 ffe5 	bl	8010c2c <vPortEnterCritical>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec68:	b25b      	sxtb	r3, r3
 800ec6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6e:	d103      	bne.n	800ec78 <xQueueGenericSend+0x164>
 800ec70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec7e:	b25b      	sxtb	r3, r3
 800ec80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec84:	d103      	bne.n	800ec8e <xQueueGenericSend+0x17a>
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec8e:	f001 fffb 	bl	8010c88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec92:	1d3a      	adds	r2, r7, #4
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	4611      	mov	r1, r2
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f001 f858 	bl	800fd50 <xTaskCheckForTimeOut>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d124      	bne.n	800ecf0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eca8:	f000 fb13 	bl	800f2d2 <prvIsQueueFull>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d018      	beq.n	800ece4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	4611      	mov	r1, r2
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 ff82 	bl	800fbc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ecc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecc2:	f000 fa9e 	bl	800f202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecc6:	f000 fdbd 	bl	800f844 <xTaskResumeAll>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f47f af7c 	bne.w	800ebca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ecd2:	4b0c      	ldr	r3, [pc, #48]	; (800ed04 <xQueueGenericSend+0x1f0>)
 800ecd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	e772      	b.n	800ebca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ece4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ece6:	f000 fa8c 	bl	800f202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecea:	f000 fdab 	bl	800f844 <xTaskResumeAll>
 800ecee:	e76c      	b.n	800ebca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ecf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf2:	f000 fa86 	bl	800f202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecf6:	f000 fda5 	bl	800f844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ecfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3738      	adds	r7, #56	; 0x38
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08e      	sub	sp, #56	; 0x38
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d109      	bne.n	800ed34 <xQueueGenericSendFromISR+0x2c>
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	627b      	str	r3, [r7, #36]	; 0x24
 800ed32:	e7fe      	b.n	800ed32 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d103      	bne.n	800ed42 <xQueueGenericSendFromISR+0x3a>
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <xQueueGenericSendFromISR+0x3e>
 800ed42:	2301      	movs	r3, #1
 800ed44:	e000      	b.n	800ed48 <xQueueGenericSendFromISR+0x40>
 800ed46:	2300      	movs	r3, #0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d109      	bne.n	800ed60 <xQueueGenericSendFromISR+0x58>
 800ed4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	623b      	str	r3, [r7, #32]
 800ed5e:	e7fe      	b.n	800ed5e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d103      	bne.n	800ed6e <xQueueGenericSendFromISR+0x66>
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d101      	bne.n	800ed72 <xQueueGenericSendFromISR+0x6a>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e000      	b.n	800ed74 <xQueueGenericSendFromISR+0x6c>
 800ed72:	2300      	movs	r3, #0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d109      	bne.n	800ed8c <xQueueGenericSendFromISR+0x84>
 800ed78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	61fb      	str	r3, [r7, #28]
 800ed8a:	e7fe      	b.n	800ed8a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed8c:	f002 f82a 	bl	8010de4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed90:	f3ef 8211 	mrs	r2, BASEPRI
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	61ba      	str	r2, [r7, #24]
 800eda6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eda8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d302      	bcc.n	800edbe <xQueueGenericSendFromISR+0xb6>
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d12c      	bne.n	800ee18 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edce:	f000 f988 	bl	800f0e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edd2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800edd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edda:	d112      	bne.n	800ee02 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d016      	beq.n	800ee12 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	3324      	adds	r3, #36	; 0x24
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 ff39 	bl	800fc60 <xTaskRemoveFromEventList>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00e      	beq.n	800ee12 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00b      	beq.n	800ee12 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2201      	movs	r2, #1
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	e007      	b.n	800ee12 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee06:	3301      	adds	r3, #1
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	b25a      	sxtb	r2, r3
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee12:	2301      	movs	r3, #1
 800ee14:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ee16:	e001      	b.n	800ee1c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3738      	adds	r7, #56	; 0x38
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08c      	sub	sp, #48	; 0x30
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d109      	bne.n	800ee5e <xQueueReceive+0x2e>
	__asm volatile
 800ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	623b      	str	r3, [r7, #32]
 800ee5c:	e7fe      	b.n	800ee5c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d103      	bne.n	800ee6c <xQueueReceive+0x3c>
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <xQueueReceive+0x40>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e000      	b.n	800ee72 <xQueueReceive+0x42>
 800ee70:	2300      	movs	r3, #0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d109      	bne.n	800ee8a <xQueueReceive+0x5a>
 800ee76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7a:	f383 8811 	msr	BASEPRI, r3
 800ee7e:	f3bf 8f6f 	isb	sy
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e7fe      	b.n	800ee88 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee8a:	f001 f8af 	bl	800ffec <xTaskGetSchedulerState>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d102      	bne.n	800ee9a <xQueueReceive+0x6a>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <xQueueReceive+0x6e>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e000      	b.n	800eea0 <xQueueReceive+0x70>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d109      	bne.n	800eeb8 <xQueueReceive+0x88>
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	e7fe      	b.n	800eeb6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eeb8:	f001 feb8 	bl	8010c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01f      	beq.n	800ef08 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eec8:	68b9      	ldr	r1, [r7, #8]
 800eeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eecc:	f000 f973 	bl	800f1b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed2:	1e5a      	subs	r2, r3, #1
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00f      	beq.n	800ef00 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	3310      	adds	r3, #16
 800eee4:	4618      	mov	r0, r3
 800eee6:	f000 febb 	bl	800fc60 <xTaskRemoveFromEventList>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d007      	beq.n	800ef00 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eef0:	4b3c      	ldr	r3, [pc, #240]	; (800efe4 <xQueueReceive+0x1b4>)
 800eef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef00:	f001 fec2 	bl	8010c88 <vPortExitCritical>
				return pdPASS;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e069      	b.n	800efdc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d103      	bne.n	800ef16 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef0e:	f001 febb 	bl	8010c88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef12:	2300      	movs	r3, #0
 800ef14:	e062      	b.n	800efdc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d106      	bne.n	800ef2a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef1c:	f107 0310 	add.w	r3, r7, #16
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 feff 	bl	800fd24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef26:	2301      	movs	r3, #1
 800ef28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef2a:	f001 fead 	bl	8010c88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef2e:	f000 fc7b 	bl	800f828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef32:	f001 fe7b 	bl	8010c2c <vPortEnterCritical>
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef3c:	b25b      	sxtb	r3, r3
 800ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef42:	d103      	bne.n	800ef4c <xQueueReceive+0x11c>
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef52:	b25b      	sxtb	r3, r3
 800ef54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef58:	d103      	bne.n	800ef62 <xQueueReceive+0x132>
 800ef5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef62:	f001 fe91 	bl	8010c88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef66:	1d3a      	adds	r2, r7, #4
 800ef68:	f107 0310 	add.w	r3, r7, #16
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 feee 	bl	800fd50 <xTaskCheckForTimeOut>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d123      	bne.n	800efc2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef7c:	f000 f993 	bl	800f2a6 <prvIsQueueEmpty>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d017      	beq.n	800efb6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef88:	3324      	adds	r3, #36	; 0x24
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f000 fe18 	bl	800fbc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef96:	f000 f934 	bl	800f202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef9a:	f000 fc53 	bl	800f844 <xTaskResumeAll>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d189      	bne.n	800eeb8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800efa4:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <xQueueReceive+0x1b4>)
 800efa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	e780      	b.n	800eeb8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800efb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb8:	f000 f923 	bl	800f202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efbc:	f000 fc42 	bl	800f844 <xTaskResumeAll>
 800efc0:	e77a      	b.n	800eeb8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800efc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efc4:	f000 f91d 	bl	800f202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efc8:	f000 fc3c 	bl	800f844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efce:	f000 f96a 	bl	800f2a6 <prvIsQueueEmpty>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f43f af6f 	beq.w	800eeb8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3730      	adds	r7, #48	; 0x30
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	e000ed04 	.word	0xe000ed04

0800efe8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08e      	sub	sp, #56	; 0x38
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	2b00      	cmp	r3, #0
 800effc:	d109      	bne.n	800f012 <xQueueReceiveFromISR+0x2a>
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	623b      	str	r3, [r7, #32]
 800f010:	e7fe      	b.n	800f010 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d103      	bne.n	800f020 <xQueueReceiveFromISR+0x38>
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <xQueueReceiveFromISR+0x3c>
 800f020:	2301      	movs	r3, #1
 800f022:	e000      	b.n	800f026 <xQueueReceiveFromISR+0x3e>
 800f024:	2300      	movs	r3, #0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d109      	bne.n	800f03e <xQueueReceiveFromISR+0x56>
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	61fb      	str	r3, [r7, #28]
 800f03c:	e7fe      	b.n	800f03c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f03e:	f001 fed1 	bl	8010de4 <vPortValidateInterruptPriority>
	__asm volatile
 800f042:	f3ef 8211 	mrs	r2, BASEPRI
 800f046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f3bf 8f4f 	dsb	sy
 800f056:	61ba      	str	r2, [r7, #24]
 800f058:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f05a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f05c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	2b00      	cmp	r3, #0
 800f068:	d02f      	beq.n	800f0ca <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f078:	f000 f89d 	bl	800f1b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07e:	1e5a      	subs	r2, r3, #1
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08c:	d112      	bne.n	800f0b4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d016      	beq.n	800f0c4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	3310      	adds	r3, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fde0 	bl	800fc60 <xTaskRemoveFromEventList>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00e      	beq.n	800f0c4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00b      	beq.n	800f0c4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	e007      	b.n	800f0c4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	b25a      	sxtb	r2, r3
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f0c8:	e001      	b.n	800f0ce <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3738      	adds	r7, #56	; 0x38
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b086      	sub	sp, #24
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	60f8      	str	r0, [r7, #12]
 800f0ea:	60b9      	str	r1, [r7, #8]
 800f0ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d10d      	bne.n	800f11c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d14d      	bne.n	800f1a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 ff8b 	bl	8010028 <xTaskPriorityDisinherit>
 800f112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	609a      	str	r2, [r3, #8]
 800f11a:	e043      	b.n	800f1a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d119      	bne.n	800f156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6858      	ldr	r0, [r3, #4]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f12a:	461a      	mov	r2, r3
 800f12c:	68b9      	ldr	r1, [r7, #8]
 800f12e:	f002 fba9 	bl	8011884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	685a      	ldr	r2, [r3, #4]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13a:	441a      	add	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d32b      	bcc.n	800f1a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	605a      	str	r2, [r3, #4]
 800f154:	e026      	b.n	800f1a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	68d8      	ldr	r0, [r3, #12]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f15e:	461a      	mov	r2, r3
 800f160:	68b9      	ldr	r1, [r7, #8]
 800f162:	f002 fb8f 	bl	8011884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	68da      	ldr	r2, [r3, #12]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	425b      	negs	r3, r3
 800f170:	441a      	add	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68da      	ldr	r2, [r3, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d207      	bcs.n	800f192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	689a      	ldr	r2, [r3, #8]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18a:	425b      	negs	r3, r3
 800f18c:	441a      	add	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b02      	cmp	r3, #2
 800f196:	d105      	bne.n	800f1a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	1c5a      	adds	r2, r3, #1
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f1ac:	697b      	ldr	r3, [r7, #20]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d018      	beq.n	800f1fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68da      	ldr	r2, [r3, #12]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d0:	441a      	add	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68da      	ldr	r2, [r3, #12]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d303      	bcc.n	800f1ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68d9      	ldr	r1, [r3, #12]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	6838      	ldr	r0, [r7, #0]
 800f1f6:	f002 fb45 	bl	8011884 <memcpy>
	}
}
 800f1fa:	bf00      	nop
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f20a:	f001 fd0f 	bl	8010c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f216:	e011      	b.n	800f23c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d012      	beq.n	800f246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	3324      	adds	r3, #36	; 0x24
 800f224:	4618      	mov	r0, r3
 800f226:	f000 fd1b 	bl	800fc60 <xTaskRemoveFromEventList>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f230:	f000 fdee 	bl	800fe10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f234:	7bfb      	ldrb	r3, [r7, #15]
 800f236:	3b01      	subs	r3, #1
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f240:	2b00      	cmp	r3, #0
 800f242:	dce9      	bgt.n	800f218 <prvUnlockQueue+0x16>
 800f244:	e000      	b.n	800f248 <prvUnlockQueue+0x46>
					break;
 800f246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	22ff      	movs	r2, #255	; 0xff
 800f24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f250:	f001 fd1a 	bl	8010c88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f254:	f001 fcea 	bl	8010c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f25e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f260:	e011      	b.n	800f286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d012      	beq.n	800f290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3310      	adds	r3, #16
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fcf6 	bl	800fc60 <xTaskRemoveFromEventList>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f27a:	f000 fdc9 	bl	800fe10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	3b01      	subs	r3, #1
 800f282:	b2db      	uxtb	r3, r3
 800f284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	dce9      	bgt.n	800f262 <prvUnlockQueue+0x60>
 800f28e:	e000      	b.n	800f292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	22ff      	movs	r2, #255	; 0xff
 800f296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f29a:	f001 fcf5 	bl	8010c88 <vPortExitCritical>
}
 800f29e:	bf00      	nop
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2ae:	f001 fcbd 	bl	8010c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d102      	bne.n	800f2c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	e001      	b.n	800f2c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2c4:	f001 fce0 	bl	8010c88 <vPortExitCritical>

	return xReturn;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b084      	sub	sp, #16
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2da:	f001 fca7 	bl	8010c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d102      	bne.n	800f2f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	60fb      	str	r3, [r7, #12]
 800f2ee:	e001      	b.n	800f2f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2f4:	f001 fcc8 	bl	8010c88 <vPortExitCritical>

	return xReturn;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
	...

0800f304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f30e:	2300      	movs	r3, #0
 800f310:	60fb      	str	r3, [r7, #12]
 800f312:	e014      	b.n	800f33e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f314:	4a0e      	ldr	r2, [pc, #56]	; (800f350 <vQueueAddToRegistry+0x4c>)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10b      	bne.n	800f338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f320:	490b      	ldr	r1, [pc, #44]	; (800f350 <vQueueAddToRegistry+0x4c>)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f32a:	4a09      	ldr	r2, [pc, #36]	; (800f350 <vQueueAddToRegistry+0x4c>)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	4413      	add	r3, r2
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f336:	e005      	b.n	800f344 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	3301      	adds	r3, #1
 800f33c:	60fb      	str	r3, [r7, #12]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b07      	cmp	r3, #7
 800f342:	d9e7      	bls.n	800f314 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	20004ff4 	.word	0x20004ff4

0800f354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f364:	f001 fc62 	bl	8010c2c <vPortEnterCritical>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f36e:	b25b      	sxtb	r3, r3
 800f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f374:	d103      	bne.n	800f37e <vQueueWaitForMessageRestricted+0x2a>
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f384:	b25b      	sxtb	r3, r3
 800f386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38a:	d103      	bne.n	800f394 <vQueueWaitForMessageRestricted+0x40>
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f394:	f001 fc78 	bl	8010c88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d106      	bne.n	800f3ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	3324      	adds	r3, #36	; 0x24
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fc2f 	bl	800fc0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f3ae:	6978      	ldr	r0, [r7, #20]
 800f3b0:	f7ff ff27 	bl	800f202 <prvUnlockQueue>
	}
 800f3b4:	bf00      	nop
 800f3b6:	3718      	adds	r7, #24
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08e      	sub	sp, #56	; 0x38
 800f3c0:	af04      	add	r7, sp, #16
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
 800f3c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d109      	bne.n	800f3e4 <xTaskCreateStatic+0x28>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	623b      	str	r3, [r7, #32]
 800f3e2:	e7fe      	b.n	800f3e2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <xTaskCreateStatic+0x42>
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	61fb      	str	r3, [r7, #28]
 800f3fc:	e7fe      	b.n	800f3fc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f3fe:	235c      	movs	r3, #92	; 0x5c
 800f400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	2b5c      	cmp	r3, #92	; 0x5c
 800f406:	d009      	beq.n	800f41c <xTaskCreateStatic+0x60>
 800f408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40c:	f383 8811 	msr	BASEPRI, r3
 800f410:	f3bf 8f6f 	isb	sy
 800f414:	f3bf 8f4f 	dsb	sy
 800f418:	61bb      	str	r3, [r7, #24]
 800f41a:	e7fe      	b.n	800f41a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f41c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01e      	beq.n	800f462 <xTaskCreateStatic+0xa6>
 800f424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01b      	beq.n	800f462 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f432:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	2202      	movs	r2, #2
 800f438:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f43c:	2300      	movs	r3, #0
 800f43e:	9303      	str	r3, [sp, #12]
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	9302      	str	r3, [sp, #8]
 800f444:	f107 0314 	add.w	r3, r7, #20
 800f448:	9301      	str	r3, [sp, #4]
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f000 f850 	bl	800f4fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f45c:	f000 f8dc 	bl	800f618 <prvAddNewTaskToReadyList>
 800f460:	e001      	b.n	800f466 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f462:	2300      	movs	r3, #0
 800f464:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f466:	697b      	ldr	r3, [r7, #20]
	}
 800f468:	4618      	mov	r0, r3
 800f46a:	3728      	adds	r7, #40	; 0x28
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08c      	sub	sp, #48	; 0x30
 800f474:	af04      	add	r7, sp, #16
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	603b      	str	r3, [r7, #0]
 800f47c:	4613      	mov	r3, r2
 800f47e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f480:	88fb      	ldrh	r3, [r7, #6]
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4618      	mov	r0, r3
 800f486:	f001 fceb 	bl	8010e60 <pvPortMalloc>
 800f48a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00e      	beq.n	800f4b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f492:	205c      	movs	r0, #92	; 0x5c
 800f494:	f001 fce4 	bl	8010e60 <pvPortMalloc>
 800f498:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d003      	beq.n	800f4a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	631a      	str	r2, [r3, #48]	; 0x30
 800f4a6:	e005      	b.n	800f4b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f4a8:	6978      	ldr	r0, [r7, #20]
 800f4aa:	f001 fd9b 	bl	8010fe4 <vPortFree>
 800f4ae:	e001      	b.n	800f4b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d017      	beq.n	800f4ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f4c2:	88fa      	ldrh	r2, [r7, #6]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	9303      	str	r3, [sp, #12]
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	9301      	str	r3, [sp, #4]
 800f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	68b9      	ldr	r1, [r7, #8]
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 f80e 	bl	800f4fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4de:	69f8      	ldr	r0, [r7, #28]
 800f4e0:	f000 f89a 	bl	800f618 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	61bb      	str	r3, [r7, #24]
 800f4e8:	e002      	b.n	800f4f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f4f0:	69bb      	ldr	r3, [r7, #24]
	}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3720      	adds	r7, #32
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b088      	sub	sp, #32
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	60f8      	str	r0, [r7, #12]
 800f502:	60b9      	str	r1, [r7, #8]
 800f504:	607a      	str	r2, [r7, #4]
 800f506:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	461a      	mov	r2, r3
 800f512:	21a5      	movs	r1, #165	; 0xa5
 800f514:	f002 f9c1 	bl	801189a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f522:	3b01      	subs	r3, #1
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	f003 0307 	and.w	r3, r3, #7
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d009      	beq.n	800f550 <prvInitialiseNewTask+0x56>
 800f53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	e7fe      	b.n	800f54e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d01f      	beq.n	800f596 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f556:	2300      	movs	r3, #0
 800f558:	61fb      	str	r3, [r7, #28]
 800f55a:	e012      	b.n	800f582 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	4413      	add	r3, r2
 800f562:	7819      	ldrb	r1, [r3, #0]
 800f564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	4413      	add	r3, r2
 800f56a:	3334      	adds	r3, #52	; 0x34
 800f56c:	460a      	mov	r2, r1
 800f56e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	4413      	add	r3, r2
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d006      	beq.n	800f58a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	3301      	adds	r3, #1
 800f580:	61fb      	str	r3, [r7, #28]
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	2b0f      	cmp	r3, #15
 800f586:	d9e9      	bls.n	800f55c <prvInitialiseNewTask+0x62>
 800f588:	e000      	b.n	800f58c <prvInitialiseNewTask+0x92>
			{
				break;
 800f58a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f594:	e003      	b.n	800f59e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a0:	2b37      	cmp	r3, #55	; 0x37
 800f5a2:	d901      	bls.n	800f5a8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f5a4:	2337      	movs	r3, #55	; 0x37
 800f5a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5bc:	3304      	adds	r3, #4
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7ff f8d6 	bl	800e770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	3318      	adds	r3, #24
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff f8d1 	bl	800e770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	68f9      	ldr	r1, [r7, #12]
 800f5f6:	69b8      	ldr	r0, [r7, #24]
 800f5f8:	f001 f9f4 	bl	80109e4 <pxPortInitialiseStack>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f604:	2b00      	cmp	r3, #0
 800f606:	d002      	beq.n	800f60e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f60c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f60e:	bf00      	nop
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f620:	f001 fb04 	bl	8010c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f624:	4b2d      	ldr	r3, [pc, #180]	; (800f6dc <prvAddNewTaskToReadyList+0xc4>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	4a2c      	ldr	r2, [pc, #176]	; (800f6dc <prvAddNewTaskToReadyList+0xc4>)
 800f62c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f62e:	4b2c      	ldr	r3, [pc, #176]	; (800f6e0 <prvAddNewTaskToReadyList+0xc8>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d109      	bne.n	800f64a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f636:	4a2a      	ldr	r2, [pc, #168]	; (800f6e0 <prvAddNewTaskToReadyList+0xc8>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f63c:	4b27      	ldr	r3, [pc, #156]	; (800f6dc <prvAddNewTaskToReadyList+0xc4>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d110      	bne.n	800f666 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f644:	f000 fc08 	bl	800fe58 <prvInitialiseTaskLists>
 800f648:	e00d      	b.n	800f666 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f64a:	4b26      	ldr	r3, [pc, #152]	; (800f6e4 <prvAddNewTaskToReadyList+0xcc>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d109      	bne.n	800f666 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f652:	4b23      	ldr	r3, [pc, #140]	; (800f6e0 <prvAddNewTaskToReadyList+0xc8>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d802      	bhi.n	800f666 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f660:	4a1f      	ldr	r2, [pc, #124]	; (800f6e0 <prvAddNewTaskToReadyList+0xc8>)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f666:	4b20      	ldr	r3, [pc, #128]	; (800f6e8 <prvAddNewTaskToReadyList+0xd0>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3301      	adds	r3, #1
 800f66c:	4a1e      	ldr	r2, [pc, #120]	; (800f6e8 <prvAddNewTaskToReadyList+0xd0>)
 800f66e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f670:	4b1d      	ldr	r3, [pc, #116]	; (800f6e8 <prvAddNewTaskToReadyList+0xd0>)
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67c:	4b1b      	ldr	r3, [pc, #108]	; (800f6ec <prvAddNewTaskToReadyList+0xd4>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d903      	bls.n	800f68c <prvAddNewTaskToReadyList+0x74>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f688:	4a18      	ldr	r2, [pc, #96]	; (800f6ec <prvAddNewTaskToReadyList+0xd4>)
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f690:	4613      	mov	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4a15      	ldr	r2, [pc, #84]	; (800f6f0 <prvAddNewTaskToReadyList+0xd8>)
 800f69a:	441a      	add	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3304      	adds	r3, #4
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	f7ff f871 	bl	800e78a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f6a8:	f001 faee 	bl	8010c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f6ac:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <prvAddNewTaskToReadyList+0xcc>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00e      	beq.n	800f6d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <prvAddNewTaskToReadyList+0xc8>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d207      	bcs.n	800f6d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <prvAddNewTaskToReadyList+0xdc>)
 800f6c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6d2:	bf00      	nop
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20000d58 	.word	0x20000d58
 800f6e0:	20000884 	.word	0x20000884
 800f6e4:	20000d64 	.word	0x20000d64
 800f6e8:	20000d74 	.word	0x20000d74
 800f6ec:	20000d60 	.word	0x20000d60
 800f6f0:	20000888 	.word	0x20000888
 800f6f4:	e000ed04 	.word	0xe000ed04

0800f6f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f700:	2300      	movs	r3, #0
 800f702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d016      	beq.n	800f738 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f70a:	4b13      	ldr	r3, [pc, #76]	; (800f758 <vTaskDelay+0x60>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d009      	beq.n	800f726 <vTaskDelay+0x2e>
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60bb      	str	r3, [r7, #8]
 800f724:	e7fe      	b.n	800f724 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f726:	f000 f87f 	bl	800f828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f72a:	2100      	movs	r1, #0
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fdbf 	bl	80102b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f732:	f000 f887 	bl	800f844 <xTaskResumeAll>
 800f736:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d107      	bne.n	800f74e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f73e:	4b07      	ldr	r3, [pc, #28]	; (800f75c <vTaskDelay+0x64>)
 800f740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f744:	601a      	str	r2, [r3, #0]
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f74e:	bf00      	nop
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20000d80 	.word	0x20000d80
 800f75c:	e000ed04 	.word	0xe000ed04

0800f760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	; 0x28
 800f764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f766:	2300      	movs	r3, #0
 800f768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f76e:	463a      	mov	r2, r7
 800f770:	1d39      	adds	r1, r7, #4
 800f772:	f107 0308 	add.w	r3, r7, #8
 800f776:	4618      	mov	r0, r3
 800f778:	f7fe ffa6 	bl	800e6c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f77c:	6839      	ldr	r1, [r7, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	9202      	str	r2, [sp, #8]
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	2300      	movs	r3, #0
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	2300      	movs	r3, #0
 800f78c:	460a      	mov	r2, r1
 800f78e:	4920      	ldr	r1, [pc, #128]	; (800f810 <vTaskStartScheduler+0xb0>)
 800f790:	4820      	ldr	r0, [pc, #128]	; (800f814 <vTaskStartScheduler+0xb4>)
 800f792:	f7ff fe13 	bl	800f3bc <xTaskCreateStatic>
 800f796:	4602      	mov	r2, r0
 800f798:	4b1f      	ldr	r3, [pc, #124]	; (800f818 <vTaskStartScheduler+0xb8>)
 800f79a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f79c:	4b1e      	ldr	r3, [pc, #120]	; (800f818 <vTaskStartScheduler+0xb8>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	e001      	b.n	800f7ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d102      	bne.n	800f7ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f7b4:	f000 fdd0 	bl	8010358 <xTimerCreateTimerTask>
 800f7b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d115      	bne.n	800f7ec <vTaskStartScheduler+0x8c>
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f7d2:	4b12      	ldr	r3, [pc, #72]	; (800f81c <vTaskStartScheduler+0xbc>)
 800f7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7da:	4b11      	ldr	r3, [pc, #68]	; (800f820 <vTaskStartScheduler+0xc0>)
 800f7dc:	2201      	movs	r2, #1
 800f7de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7e0:	4b10      	ldr	r3, [pc, #64]	; (800f824 <vTaskStartScheduler+0xc4>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7e6:	f001 f983 	bl	8010af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7ea:	e00d      	b.n	800f808 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	d109      	bne.n	800f808 <vTaskStartScheduler+0xa8>
 800f7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	60fb      	str	r3, [r7, #12]
 800f806:	e7fe      	b.n	800f806 <vTaskStartScheduler+0xa6>
}
 800f808:	bf00      	nop
 800f80a:	3718      	adds	r7, #24
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08011b50 	.word	0x08011b50
 800f814:	0800fe29 	.word	0x0800fe29
 800f818:	20000d7c 	.word	0x20000d7c
 800f81c:	20000d78 	.word	0x20000d78
 800f820:	20000d64 	.word	0x20000d64
 800f824:	20000d5c 	.word	0x20000d5c

0800f828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f82c:	4b04      	ldr	r3, [pc, #16]	; (800f840 <vTaskSuspendAll+0x18>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3301      	adds	r3, #1
 800f832:	4a03      	ldr	r2, [pc, #12]	; (800f840 <vTaskSuspendAll+0x18>)
 800f834:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f836:	bf00      	nop
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	20000d80 	.word	0x20000d80

0800f844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f84a:	2300      	movs	r3, #0
 800f84c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f84e:	2300      	movs	r3, #0
 800f850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f852:	4b41      	ldr	r3, [pc, #260]	; (800f958 <xTaskResumeAll+0x114>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d109      	bne.n	800f86e <xTaskResumeAll+0x2a>
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	603b      	str	r3, [r7, #0]
 800f86c:	e7fe      	b.n	800f86c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f86e:	f001 f9dd 	bl	8010c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f872:	4b39      	ldr	r3, [pc, #228]	; (800f958 <xTaskResumeAll+0x114>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	3b01      	subs	r3, #1
 800f878:	4a37      	ldr	r2, [pc, #220]	; (800f958 <xTaskResumeAll+0x114>)
 800f87a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f87c:	4b36      	ldr	r3, [pc, #216]	; (800f958 <xTaskResumeAll+0x114>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d162      	bne.n	800f94a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f884:	4b35      	ldr	r3, [pc, #212]	; (800f95c <xTaskResumeAll+0x118>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d05e      	beq.n	800f94a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f88c:	e02f      	b.n	800f8ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f88e:	4b34      	ldr	r3, [pc, #208]	; (800f960 <xTaskResumeAll+0x11c>)
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3318      	adds	r3, #24
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fe ffd2 	bl	800e844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	3304      	adds	r3, #4
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fe ffcd 	bl	800e844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ae:	4b2d      	ldr	r3, [pc, #180]	; (800f964 <xTaskResumeAll+0x120>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d903      	bls.n	800f8be <xTaskResumeAll+0x7a>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ba:	4a2a      	ldr	r2, [pc, #168]	; (800f964 <xTaskResumeAll+0x120>)
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4413      	add	r3, r2
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	4a27      	ldr	r2, [pc, #156]	; (800f968 <xTaskResumeAll+0x124>)
 800f8cc:	441a      	add	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3304      	adds	r3, #4
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	4610      	mov	r0, r2
 800f8d6:	f7fe ff58 	bl	800e78a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8de:	4b23      	ldr	r3, [pc, #140]	; (800f96c <xTaskResumeAll+0x128>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d302      	bcc.n	800f8ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f8e8:	4b21      	ldr	r3, [pc, #132]	; (800f970 <xTaskResumeAll+0x12c>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8ee:	4b1c      	ldr	r3, [pc, #112]	; (800f960 <xTaskResumeAll+0x11c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1cb      	bne.n	800f88e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f8fc:	f000 fb46 	bl	800ff8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f900:	4b1c      	ldr	r3, [pc, #112]	; (800f974 <xTaskResumeAll+0x130>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d010      	beq.n	800f92e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f90c:	f000 f846 	bl	800f99c <xTaskIncrementTick>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d002      	beq.n	800f91c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f916:	4b16      	ldr	r3, [pc, #88]	; (800f970 <xTaskResumeAll+0x12c>)
 800f918:	2201      	movs	r2, #1
 800f91a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	3b01      	subs	r3, #1
 800f920:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1f1      	bne.n	800f90c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f928:	4b12      	ldr	r3, [pc, #72]	; (800f974 <xTaskResumeAll+0x130>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f92e:	4b10      	ldr	r3, [pc, #64]	; (800f970 <xTaskResumeAll+0x12c>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d009      	beq.n	800f94a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f936:	2301      	movs	r3, #1
 800f938:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f93a:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <xTaskResumeAll+0x134>)
 800f93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f94a:	f001 f99d 	bl	8010c88 <vPortExitCritical>

	return xAlreadyYielded;
 800f94e:	68bb      	ldr	r3, [r7, #8]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20000d80 	.word	0x20000d80
 800f95c:	20000d58 	.word	0x20000d58
 800f960:	20000d18 	.word	0x20000d18
 800f964:	20000d60 	.word	0x20000d60
 800f968:	20000888 	.word	0x20000888
 800f96c:	20000884 	.word	0x20000884
 800f970:	20000d6c 	.word	0x20000d6c
 800f974:	20000d68 	.word	0x20000d68
 800f978:	e000ed04 	.word	0xe000ed04

0800f97c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f982:	4b05      	ldr	r3, [pc, #20]	; (800f998 <xTaskGetTickCount+0x1c>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f988:	687b      	ldr	r3, [r7, #4]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20000d5c 	.word	0x20000d5c

0800f99c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b086      	sub	sp, #24
 800f9a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9a6:	4b4e      	ldr	r3, [pc, #312]	; (800fae0 <xTaskIncrementTick+0x144>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f040 8088 	bne.w	800fac0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f9b0:	4b4c      	ldr	r3, [pc, #304]	; (800fae4 <xTaskIncrementTick+0x148>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f9b8:	4a4a      	ldr	r2, [pc, #296]	; (800fae4 <xTaskIncrementTick+0x148>)
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d11f      	bne.n	800fa04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f9c4:	4b48      	ldr	r3, [pc, #288]	; (800fae8 <xTaskIncrementTick+0x14c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d009      	beq.n	800f9e2 <xTaskIncrementTick+0x46>
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	603b      	str	r3, [r7, #0]
 800f9e0:	e7fe      	b.n	800f9e0 <xTaskIncrementTick+0x44>
 800f9e2:	4b41      	ldr	r3, [pc, #260]	; (800fae8 <xTaskIncrementTick+0x14c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	4b40      	ldr	r3, [pc, #256]	; (800faec <xTaskIncrementTick+0x150>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a3e      	ldr	r2, [pc, #248]	; (800fae8 <xTaskIncrementTick+0x14c>)
 800f9ee:	6013      	str	r3, [r2, #0]
 800f9f0:	4a3e      	ldr	r2, [pc, #248]	; (800faec <xTaskIncrementTick+0x150>)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	4b3e      	ldr	r3, [pc, #248]	; (800faf0 <xTaskIncrementTick+0x154>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	4a3c      	ldr	r2, [pc, #240]	; (800faf0 <xTaskIncrementTick+0x154>)
 800f9fe:	6013      	str	r3, [r2, #0]
 800fa00:	f000 fac4 	bl	800ff8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa04:	4b3b      	ldr	r3, [pc, #236]	; (800faf4 <xTaskIncrementTick+0x158>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d349      	bcc.n	800faa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa0e:	4b36      	ldr	r3, [pc, #216]	; (800fae8 <xTaskIncrementTick+0x14c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d104      	bne.n	800fa22 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa18:	4b36      	ldr	r3, [pc, #216]	; (800faf4 <xTaskIncrementTick+0x158>)
 800fa1a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa1e:	601a      	str	r2, [r3, #0]
					break;
 800fa20:	e03f      	b.n	800faa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa22:	4b31      	ldr	r3, [pc, #196]	; (800fae8 <xTaskIncrementTick+0x14c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fa32:	693a      	ldr	r2, [r7, #16]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d203      	bcs.n	800fa42 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fa3a:	4a2e      	ldr	r2, [pc, #184]	; (800faf4 <xTaskIncrementTick+0x158>)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa40:	e02f      	b.n	800faa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fe fefc 	bl	800e844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d004      	beq.n	800fa5e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	3318      	adds	r3, #24
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fe fef3 	bl	800e844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa62:	4b25      	ldr	r3, [pc, #148]	; (800faf8 <xTaskIncrementTick+0x15c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d903      	bls.n	800fa72 <xTaskIncrementTick+0xd6>
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa6e:	4a22      	ldr	r2, [pc, #136]	; (800faf8 <xTaskIncrementTick+0x15c>)
 800fa70:	6013      	str	r3, [r2, #0]
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa76:	4613      	mov	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4a1f      	ldr	r2, [pc, #124]	; (800fafc <xTaskIncrementTick+0x160>)
 800fa80:	441a      	add	r2, r3
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	3304      	adds	r3, #4
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7fe fe7e 	bl	800e78a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa92:	4b1b      	ldr	r3, [pc, #108]	; (800fb00 <xTaskIncrementTick+0x164>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d3b8      	bcc.n	800fa0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800faa0:	e7b5      	b.n	800fa0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800faa2:	4b17      	ldr	r3, [pc, #92]	; (800fb00 <xTaskIncrementTick+0x164>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa8:	4914      	ldr	r1, [pc, #80]	; (800fafc <xTaskIncrementTick+0x160>)
 800faaa:	4613      	mov	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	440b      	add	r3, r1
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d907      	bls.n	800faca <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800faba:	2301      	movs	r3, #1
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e004      	b.n	800faca <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fac0:	4b10      	ldr	r3, [pc, #64]	; (800fb04 <xTaskIncrementTick+0x168>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3301      	adds	r3, #1
 800fac6:	4a0f      	ldr	r2, [pc, #60]	; (800fb04 <xTaskIncrementTick+0x168>)
 800fac8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800faca:	4b0f      	ldr	r3, [pc, #60]	; (800fb08 <xTaskIncrementTick+0x16c>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800fad2:	2301      	movs	r3, #1
 800fad4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fad6:	697b      	ldr	r3, [r7, #20]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	20000d80 	.word	0x20000d80
 800fae4:	20000d5c 	.word	0x20000d5c
 800fae8:	20000d10 	.word	0x20000d10
 800faec:	20000d14 	.word	0x20000d14
 800faf0:	20000d70 	.word	0x20000d70
 800faf4:	20000d78 	.word	0x20000d78
 800faf8:	20000d60 	.word	0x20000d60
 800fafc:	20000888 	.word	0x20000888
 800fb00:	20000884 	.word	0x20000884
 800fb04:	20000d68 	.word	0x20000d68
 800fb08:	20000d6c 	.word	0x20000d6c

0800fb0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb12:	4b27      	ldr	r3, [pc, #156]	; (800fbb0 <vTaskSwitchContext+0xa4>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d003      	beq.n	800fb22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fb1a:	4b26      	ldr	r3, [pc, #152]	; (800fbb4 <vTaskSwitchContext+0xa8>)
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fb20:	e040      	b.n	800fba4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800fb22:	4b24      	ldr	r3, [pc, #144]	; (800fbb4 <vTaskSwitchContext+0xa8>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb28:	4b23      	ldr	r3, [pc, #140]	; (800fbb8 <vTaskSwitchContext+0xac>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	60fb      	str	r3, [r7, #12]
 800fb2e:	e00f      	b.n	800fb50 <vTaskSwitchContext+0x44>
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d109      	bne.n	800fb4a <vTaskSwitchContext+0x3e>
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	607b      	str	r3, [r7, #4]
 800fb48:	e7fe      	b.n	800fb48 <vTaskSwitchContext+0x3c>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	491a      	ldr	r1, [pc, #104]	; (800fbbc <vTaskSwitchContext+0xb0>)
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	4613      	mov	r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	440b      	add	r3, r1
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d0e5      	beq.n	800fb30 <vTaskSwitchContext+0x24>
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	4613      	mov	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4a13      	ldr	r2, [pc, #76]	; (800fbbc <vTaskSwitchContext+0xb0>)
 800fb70:	4413      	add	r3, r2
 800fb72:	60bb      	str	r3, [r7, #8]
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	605a      	str	r2, [r3, #4]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	3308      	adds	r3, #8
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d104      	bne.n	800fb94 <vTaskSwitchContext+0x88>
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	605a      	str	r2, [r3, #4]
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	4a09      	ldr	r2, [pc, #36]	; (800fbc0 <vTaskSwitchContext+0xb4>)
 800fb9c:	6013      	str	r3, [r2, #0]
 800fb9e:	4a06      	ldr	r2, [pc, #24]	; (800fbb8 <vTaskSwitchContext+0xac>)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6013      	str	r3, [r2, #0]
}
 800fba4:	bf00      	nop
 800fba6:	3714      	adds	r7, #20
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr
 800fbb0:	20000d80 	.word	0x20000d80
 800fbb4:	20000d6c 	.word	0x20000d6c
 800fbb8:	20000d60 	.word	0x20000d60
 800fbbc:	20000888 	.word	0x20000888
 800fbc0:	20000884 	.word	0x20000884

0800fbc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d109      	bne.n	800fbe8 <vTaskPlaceOnEventList+0x24>
 800fbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	e7fe      	b.n	800fbe6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbe8:	4b07      	ldr	r3, [pc, #28]	; (800fc08 <vTaskPlaceOnEventList+0x44>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3318      	adds	r3, #24
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7fe fdee 	bl	800e7d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbf6:	2101      	movs	r1, #1
 800fbf8:	6838      	ldr	r0, [r7, #0]
 800fbfa:	f000 fb59 	bl	80102b0 <prvAddCurrentTaskToDelayedList>
}
 800fbfe:	bf00      	nop
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20000884 	.word	0x20000884

0800fc0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d109      	bne.n	800fc32 <vTaskPlaceOnEventListRestricted+0x26>
 800fc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	617b      	str	r3, [r7, #20]
 800fc30:	e7fe      	b.n	800fc30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc32:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <vTaskPlaceOnEventListRestricted+0x50>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	3318      	adds	r3, #24
 800fc38:	4619      	mov	r1, r3
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7fe fda5 	bl	800e78a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800fc46:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	68b8      	ldr	r0, [r7, #8]
 800fc50:	f000 fb2e 	bl	80102b0 <prvAddCurrentTaskToDelayedList>
	}
 800fc54:	bf00      	nop
 800fc56:	3718      	adds	r7, #24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	20000884 	.word	0x20000884

0800fc60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d109      	bne.n	800fc8a <xTaskRemoveFromEventList+0x2a>
 800fc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7a:	f383 8811 	msr	BASEPRI, r3
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	f3bf 8f4f 	dsb	sy
 800fc86:	60fb      	str	r3, [r7, #12]
 800fc88:	e7fe      	b.n	800fc88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	3318      	adds	r3, #24
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fdd8 	bl	800e844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc94:	4b1d      	ldr	r3, [pc, #116]	; (800fd0c <xTaskRemoveFromEventList+0xac>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d11d      	bne.n	800fcd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	3304      	adds	r3, #4
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe fdcf 	bl	800e844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcaa:	4b19      	ldr	r3, [pc, #100]	; (800fd10 <xTaskRemoveFromEventList+0xb0>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d903      	bls.n	800fcba <xTaskRemoveFromEventList+0x5a>
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb6:	4a16      	ldr	r2, [pc, #88]	; (800fd10 <xTaskRemoveFromEventList+0xb0>)
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	4a13      	ldr	r2, [pc, #76]	; (800fd14 <xTaskRemoveFromEventList+0xb4>)
 800fcc8:	441a      	add	r2, r3
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	3304      	adds	r3, #4
 800fcce:	4619      	mov	r1, r3
 800fcd0:	4610      	mov	r0, r2
 800fcd2:	f7fe fd5a 	bl	800e78a <vListInsertEnd>
 800fcd6:	e005      	b.n	800fce4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	3318      	adds	r3, #24
 800fcdc:	4619      	mov	r1, r3
 800fcde:	480e      	ldr	r0, [pc, #56]	; (800fd18 <xTaskRemoveFromEventList+0xb8>)
 800fce0:	f7fe fd53 	bl	800e78a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce8:	4b0c      	ldr	r3, [pc, #48]	; (800fd1c <xTaskRemoveFromEventList+0xbc>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d905      	bls.n	800fcfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fcf6:	4b0a      	ldr	r3, [pc, #40]	; (800fd20 <xTaskRemoveFromEventList+0xc0>)
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	e001      	b.n	800fd02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fd02:	697b      	ldr	r3, [r7, #20]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	20000d80 	.word	0x20000d80
 800fd10:	20000d60 	.word	0x20000d60
 800fd14:	20000888 	.word	0x20000888
 800fd18:	20000d18 	.word	0x20000d18
 800fd1c:	20000884 	.word	0x20000884
 800fd20:	20000d6c 	.word	0x20000d6c

0800fd24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd2c:	4b06      	ldr	r3, [pc, #24]	; (800fd48 <vTaskInternalSetTimeOutState+0x24>)
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <vTaskInternalSetTimeOutState+0x28>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	605a      	str	r2, [r3, #4]
}
 800fd3c:	bf00      	nop
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	20000d70 	.word	0x20000d70
 800fd4c:	20000d5c 	.word	0x20000d5c

0800fd50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b088      	sub	sp, #32
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d109      	bne.n	800fd74 <xTaskCheckForTimeOut+0x24>
 800fd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
 800fd72:	e7fe      	b.n	800fd72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d109      	bne.n	800fd8e <xTaskCheckForTimeOut+0x3e>
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	e7fe      	b.n	800fd8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800fd8e:	f000 ff4d 	bl	8010c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd92:	4b1d      	ldr	r3, [pc, #116]	; (800fe08 <xTaskCheckForTimeOut+0xb8>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	69ba      	ldr	r2, [r7, #24]
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdaa:	d102      	bne.n	800fdb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	61fb      	str	r3, [r7, #28]
 800fdb0:	e023      	b.n	800fdfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	4b15      	ldr	r3, [pc, #84]	; (800fe0c <xTaskCheckForTimeOut+0xbc>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d007      	beq.n	800fdce <xTaskCheckForTimeOut+0x7e>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	69ba      	ldr	r2, [r7, #24]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d302      	bcc.n	800fdce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	61fb      	str	r3, [r7, #28]
 800fdcc:	e015      	b.n	800fdfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d20b      	bcs.n	800fdf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	1ad2      	subs	r2, r2, r3
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7ff ff9d 	bl	800fd24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fdea:	2300      	movs	r3, #0
 800fdec:	61fb      	str	r3, [r7, #28]
 800fdee:	e004      	b.n	800fdfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fdfa:	f000 ff45 	bl	8010c88 <vPortExitCritical>

	return xReturn;
 800fdfe:	69fb      	ldr	r3, [r7, #28]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3720      	adds	r7, #32
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	20000d5c 	.word	0x20000d5c
 800fe0c:	20000d70 	.word	0x20000d70

0800fe10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe10:	b480      	push	{r7}
 800fe12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe14:	4b03      	ldr	r3, [pc, #12]	; (800fe24 <vTaskMissedYield+0x14>)
 800fe16:	2201      	movs	r2, #1
 800fe18:	601a      	str	r2, [r3, #0]
}
 800fe1a:	bf00      	nop
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	20000d6c 	.word	0x20000d6c

0800fe28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe30:	f000 f852 	bl	800fed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe34:	4b06      	ldr	r3, [pc, #24]	; (800fe50 <prvIdleTask+0x28>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d9f9      	bls.n	800fe30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe3c:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <prvIdleTask+0x2c>)
 800fe3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	f3bf 8f4f 	dsb	sy
 800fe48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe4c:	e7f0      	b.n	800fe30 <prvIdleTask+0x8>
 800fe4e:	bf00      	nop
 800fe50:	20000888 	.word	0x20000888
 800fe54:	e000ed04 	.word	0xe000ed04

0800fe58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe5e:	2300      	movs	r3, #0
 800fe60:	607b      	str	r3, [r7, #4]
 800fe62:	e00c      	b.n	800fe7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4a12      	ldr	r2, [pc, #72]	; (800feb8 <prvInitialiseTaskLists+0x60>)
 800fe70:	4413      	add	r3, r2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fc5c 	bl	800e730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	607b      	str	r3, [r7, #4]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2b37      	cmp	r3, #55	; 0x37
 800fe82:	d9ef      	bls.n	800fe64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe84:	480d      	ldr	r0, [pc, #52]	; (800febc <prvInitialiseTaskLists+0x64>)
 800fe86:	f7fe fc53 	bl	800e730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe8a:	480d      	ldr	r0, [pc, #52]	; (800fec0 <prvInitialiseTaskLists+0x68>)
 800fe8c:	f7fe fc50 	bl	800e730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe90:	480c      	ldr	r0, [pc, #48]	; (800fec4 <prvInitialiseTaskLists+0x6c>)
 800fe92:	f7fe fc4d 	bl	800e730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe96:	480c      	ldr	r0, [pc, #48]	; (800fec8 <prvInitialiseTaskLists+0x70>)
 800fe98:	f7fe fc4a 	bl	800e730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe9c:	480b      	ldr	r0, [pc, #44]	; (800fecc <prvInitialiseTaskLists+0x74>)
 800fe9e:	f7fe fc47 	bl	800e730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fea2:	4b0b      	ldr	r3, [pc, #44]	; (800fed0 <prvInitialiseTaskLists+0x78>)
 800fea4:	4a05      	ldr	r2, [pc, #20]	; (800febc <prvInitialiseTaskLists+0x64>)
 800fea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fea8:	4b0a      	ldr	r3, [pc, #40]	; (800fed4 <prvInitialiseTaskLists+0x7c>)
 800feaa:	4a05      	ldr	r2, [pc, #20]	; (800fec0 <prvInitialiseTaskLists+0x68>)
 800feac:	601a      	str	r2, [r3, #0]
}
 800feae:	bf00      	nop
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	20000888 	.word	0x20000888
 800febc:	20000ce8 	.word	0x20000ce8
 800fec0:	20000cfc 	.word	0x20000cfc
 800fec4:	20000d18 	.word	0x20000d18
 800fec8:	20000d2c 	.word	0x20000d2c
 800fecc:	20000d44 	.word	0x20000d44
 800fed0:	20000d10 	.word	0x20000d10
 800fed4:	20000d14 	.word	0x20000d14

0800fed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fede:	e019      	b.n	800ff14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fee0:	f000 fea4 	bl	8010c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee4:	4b0f      	ldr	r3, [pc, #60]	; (800ff24 <prvCheckTasksWaitingTermination+0x4c>)
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	3304      	adds	r3, #4
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7fe fca7 	bl	800e844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fef6:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <prvCheckTasksWaitingTermination+0x50>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3b01      	subs	r3, #1
 800fefc:	4a0a      	ldr	r2, [pc, #40]	; (800ff28 <prvCheckTasksWaitingTermination+0x50>)
 800fefe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff00:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <prvCheckTasksWaitingTermination+0x54>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	4a09      	ldr	r2, [pc, #36]	; (800ff2c <prvCheckTasksWaitingTermination+0x54>)
 800ff08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff0a:	f000 febd 	bl	8010c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f80e 	bl	800ff30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff14:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <prvCheckTasksWaitingTermination+0x54>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1e1      	bne.n	800fee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff1c:	bf00      	nop
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20000d2c 	.word	0x20000d2c
 800ff28:	20000d58 	.word	0x20000d58
 800ff2c:	20000d40 	.word	0x20000d40

0800ff30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d108      	bne.n	800ff54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 f84c 	bl	8010fe4 <vPortFree>
				vPortFree( pxTCB );
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f001 f849 	bl	8010fe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff52:	e017      	b.n	800ff84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d103      	bne.n	800ff66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f001 f840 	bl	8010fe4 <vPortFree>
	}
 800ff64:	e00e      	b.n	800ff84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d009      	beq.n	800ff84 <prvDeleteTCB+0x54>
 800ff70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	60fb      	str	r3, [r7, #12]
 800ff82:	e7fe      	b.n	800ff82 <prvDeleteTCB+0x52>
	}
 800ff84:	bf00      	nop
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff92:	4b0c      	ldr	r3, [pc, #48]	; (800ffc4 <prvResetNextTaskUnblockTime+0x38>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d104      	bne.n	800ffa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff9c:	4b0a      	ldr	r3, [pc, #40]	; (800ffc8 <prvResetNextTaskUnblockTime+0x3c>)
 800ff9e:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ffa4:	e008      	b.n	800ffb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffa6:	4b07      	ldr	r3, [pc, #28]	; (800ffc4 <prvResetNextTaskUnblockTime+0x38>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	4a04      	ldr	r2, [pc, #16]	; (800ffc8 <prvResetNextTaskUnblockTime+0x3c>)
 800ffb6:	6013      	str	r3, [r2, #0]
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	20000d10 	.word	0x20000d10
 800ffc8:	20000d78 	.word	0x20000d78

0800ffcc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ffd2:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <xTaskGetCurrentTaskHandle+0x1c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ffd8:	687b      	ldr	r3, [r7, #4]
	}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	20000884 	.word	0x20000884

0800ffec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fff2:	4b0b      	ldr	r3, [pc, #44]	; (8010020 <xTaskGetSchedulerState+0x34>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d102      	bne.n	8010000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fffa:	2301      	movs	r3, #1
 800fffc:	607b      	str	r3, [r7, #4]
 800fffe:	e008      	b.n	8010012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010000:	4b08      	ldr	r3, [pc, #32]	; (8010024 <xTaskGetSchedulerState+0x38>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d102      	bne.n	801000e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010008:	2302      	movs	r3, #2
 801000a:	607b      	str	r3, [r7, #4]
 801000c:	e001      	b.n	8010012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801000e:	2300      	movs	r3, #0
 8010010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010012:	687b      	ldr	r3, [r7, #4]
	}
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	20000d64 	.word	0x20000d64
 8010024:	20000d80 	.word	0x20000d80

08010028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010028:	b580      	push	{r7, lr}
 801002a:	b086      	sub	sp, #24
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010034:	2300      	movs	r3, #0
 8010036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d054      	beq.n	80100e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801003e:	4b2d      	ldr	r3, [pc, #180]	; (80100f4 <xTaskPriorityDisinherit+0xcc>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	429a      	cmp	r2, r3
 8010046:	d009      	beq.n	801005c <xTaskPriorityDisinherit+0x34>
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	60fb      	str	r3, [r7, #12]
 801005a:	e7fe      	b.n	801005a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010060:	2b00      	cmp	r3, #0
 8010062:	d109      	bne.n	8010078 <xTaskPriorityDisinherit+0x50>
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	60bb      	str	r3, [r7, #8]
 8010076:	e7fe      	b.n	8010076 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007c:	1e5a      	subs	r2, r3, #1
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801008a:	429a      	cmp	r2, r3
 801008c:	d02c      	beq.n	80100e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010092:	2b00      	cmp	r3, #0
 8010094:	d128      	bne.n	80100e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	3304      	adds	r3, #4
 801009a:	4618      	mov	r0, r3
 801009c:	f7fe fbd2 	bl	800e844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b8:	4b0f      	ldr	r3, [pc, #60]	; (80100f8 <xTaskPriorityDisinherit+0xd0>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d903      	bls.n	80100c8 <xTaskPriorityDisinherit+0xa0>
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c4:	4a0c      	ldr	r2, [pc, #48]	; (80100f8 <xTaskPriorityDisinherit+0xd0>)
 80100c6:	6013      	str	r3, [r2, #0]
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4a09      	ldr	r2, [pc, #36]	; (80100fc <xTaskPriorityDisinherit+0xd4>)
 80100d6:	441a      	add	r2, r3
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	3304      	adds	r3, #4
 80100dc:	4619      	mov	r1, r3
 80100de:	4610      	mov	r0, r2
 80100e0:	f7fe fb53 	bl	800e78a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100e4:	2301      	movs	r3, #1
 80100e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100e8:	697b      	ldr	r3, [r7, #20]
	}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3718      	adds	r7, #24
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	20000884 	.word	0x20000884
 80100f8:	20000d60 	.word	0x20000d60
 80100fc:	20000888 	.word	0x20000888

08010100 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801010a:	f000 fd8f 	bl	8010c2c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <ulTaskNotifyTake+0x88>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010114:	2b00      	cmp	r3, #0
 8010116:	d113      	bne.n	8010140 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010118:	4b1b      	ldr	r3, [pc, #108]	; (8010188 <ulTaskNotifyTake+0x88>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00b      	beq.n	8010140 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010128:	2101      	movs	r1, #1
 801012a:	6838      	ldr	r0, [r7, #0]
 801012c:	f000 f8c0 	bl	80102b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010130:	4b16      	ldr	r3, [pc, #88]	; (801018c <ulTaskNotifyTake+0x8c>)
 8010132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010136:	601a      	str	r2, [r3, #0]
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010140:	f000 fda2 	bl	8010c88 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010144:	f000 fd72 	bl	8010c2c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010148:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <ulTaskNotifyTake+0x88>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00c      	beq.n	8010170 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d004      	beq.n	8010166 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801015c:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <ulTaskNotifyTake+0x88>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2200      	movs	r2, #0
 8010162:	655a      	str	r2, [r3, #84]	; 0x54
 8010164:	e004      	b.n	8010170 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010166:	4b08      	ldr	r3, [pc, #32]	; (8010188 <ulTaskNotifyTake+0x88>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	3a01      	subs	r2, #1
 801016e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <ulTaskNotifyTake+0x88>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801017a:	f000 fd85 	bl	8010c88 <vPortExitCritical>

		return ulReturn;
 801017e:	68fb      	ldr	r3, [r7, #12]
	}
 8010180:	4618      	mov	r0, r3
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20000884 	.word	0x20000884
 801018c:	e000ed04 	.word	0xe000ed04

08010190 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010190:	b580      	push	{r7, lr}
 8010192:	b08a      	sub	sp, #40	; 0x28
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d109      	bne.n	80101b4 <vTaskNotifyGiveFromISR+0x24>
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	61bb      	str	r3, [r7, #24]
 80101b2:	e7fe      	b.n	80101b2 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101b4:	f000 fe16 	bl	8010de4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80101bc:	f3ef 8211 	mrs	r2, BASEPRI
 80101c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	617a      	str	r2, [r7, #20]
 80101d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80101d4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101d6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80101de:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80101e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e2:	2202      	movs	r2, #2
 80101e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f0:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80101f2:	7ffb      	ldrb	r3, [r7, #31]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d145      	bne.n	8010284 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d009      	beq.n	8010214 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	60fb      	str	r3, [r7, #12]
 8010212:	e7fe      	b.n	8010212 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010214:	4b20      	ldr	r3, [pc, #128]	; (8010298 <vTaskNotifyGiveFromISR+0x108>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d11d      	bne.n	8010258 <vTaskNotifyGiveFromISR+0xc8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	3304      	adds	r3, #4
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe fb0f 	bl	800e844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022a:	4b1c      	ldr	r3, [pc, #112]	; (801029c <vTaskNotifyGiveFromISR+0x10c>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d903      	bls.n	801023a <vTaskNotifyGiveFromISR+0xaa>
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010236:	4a19      	ldr	r2, [pc, #100]	; (801029c <vTaskNotifyGiveFromISR+0x10c>)
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801023e:	4613      	mov	r3, r2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4413      	add	r3, r2
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	4a16      	ldr	r2, [pc, #88]	; (80102a0 <vTaskNotifyGiveFromISR+0x110>)
 8010248:	441a      	add	r2, r3
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	3304      	adds	r3, #4
 801024e:	4619      	mov	r1, r3
 8010250:	4610      	mov	r0, r2
 8010252:	f7fe fa9a 	bl	800e78a <vListInsertEnd>
 8010256:	e005      	b.n	8010264 <vTaskNotifyGiveFromISR+0xd4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	3318      	adds	r3, #24
 801025c:	4619      	mov	r1, r3
 801025e:	4811      	ldr	r0, [pc, #68]	; (80102a4 <vTaskNotifyGiveFromISR+0x114>)
 8010260:	f7fe fa93 	bl	800e78a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010268:	4b0f      	ldr	r3, [pc, #60]	; (80102a8 <vTaskNotifyGiveFromISR+0x118>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026e:	429a      	cmp	r2, r3
 8010270:	d908      	bls.n	8010284 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2201      	movs	r2, #1
 801027c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801027e:	4b0b      	ldr	r3, [pc, #44]	; (80102ac <vTaskNotifyGiveFromISR+0x11c>)
 8010280:	2201      	movs	r2, #1
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801028e:	bf00      	nop
 8010290:	3728      	adds	r7, #40	; 0x28
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	20000d80 	.word	0x20000d80
 801029c:	20000d60 	.word	0x20000d60
 80102a0:	20000888 	.word	0x20000888
 80102a4:	20000d18 	.word	0x20000d18
 80102a8:	20000884 	.word	0x20000884
 80102ac:	20000d6c 	.word	0x20000d6c

080102b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102ba:	4b21      	ldr	r3, [pc, #132]	; (8010340 <prvAddCurrentTaskToDelayedList+0x90>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102c0:	4b20      	ldr	r3, [pc, #128]	; (8010344 <prvAddCurrentTaskToDelayedList+0x94>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3304      	adds	r3, #4
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe fabc 	bl	800e844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d2:	d10a      	bne.n	80102ea <prvAddCurrentTaskToDelayedList+0x3a>
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d007      	beq.n	80102ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102da:	4b1a      	ldr	r3, [pc, #104]	; (8010344 <prvAddCurrentTaskToDelayedList+0x94>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3304      	adds	r3, #4
 80102e0:	4619      	mov	r1, r3
 80102e2:	4819      	ldr	r0, [pc, #100]	; (8010348 <prvAddCurrentTaskToDelayedList+0x98>)
 80102e4:	f7fe fa51 	bl	800e78a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102e8:	e026      	b.n	8010338 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4413      	add	r3, r2
 80102f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102f2:	4b14      	ldr	r3, [pc, #80]	; (8010344 <prvAddCurrentTaskToDelayedList+0x94>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68ba      	ldr	r2, [r7, #8]
 80102f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d209      	bcs.n	8010316 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010302:	4b12      	ldr	r3, [pc, #72]	; (801034c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	4b0f      	ldr	r3, [pc, #60]	; (8010344 <prvAddCurrentTaskToDelayedList+0x94>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3304      	adds	r3, #4
 801030c:	4619      	mov	r1, r3
 801030e:	4610      	mov	r0, r2
 8010310:	f7fe fa5f 	bl	800e7d2 <vListInsert>
}
 8010314:	e010      	b.n	8010338 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010316:	4b0e      	ldr	r3, [pc, #56]	; (8010350 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <prvAddCurrentTaskToDelayedList+0x94>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	3304      	adds	r3, #4
 8010320:	4619      	mov	r1, r3
 8010322:	4610      	mov	r0, r2
 8010324:	f7fe fa55 	bl	800e7d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010328:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <prvAddCurrentTaskToDelayedList+0xa4>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	429a      	cmp	r2, r3
 8010330:	d202      	bcs.n	8010338 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010332:	4a08      	ldr	r2, [pc, #32]	; (8010354 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	6013      	str	r3, [r2, #0]
}
 8010338:	bf00      	nop
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	20000d5c 	.word	0x20000d5c
 8010344:	20000884 	.word	0x20000884
 8010348:	20000d44 	.word	0x20000d44
 801034c:	20000d14 	.word	0x20000d14
 8010350:	20000d10 	.word	0x20000d10
 8010354:	20000d78 	.word	0x20000d78

08010358 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b08a      	sub	sp, #40	; 0x28
 801035c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801035e:	2300      	movs	r3, #0
 8010360:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010362:	f000 faff 	bl	8010964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010366:	4b1c      	ldr	r3, [pc, #112]	; (80103d8 <xTimerCreateTimerTask+0x80>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d021      	beq.n	80103b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801036e:	2300      	movs	r3, #0
 8010370:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010372:	2300      	movs	r3, #0
 8010374:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010376:	1d3a      	adds	r2, r7, #4
 8010378:	f107 0108 	add.w	r1, r7, #8
 801037c:	f107 030c 	add.w	r3, r7, #12
 8010380:	4618      	mov	r0, r3
 8010382:	f7fe f9bb 	bl	800e6fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010386:	6879      	ldr	r1, [r7, #4]
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	9202      	str	r2, [sp, #8]
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	2302      	movs	r3, #2
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	2300      	movs	r3, #0
 8010396:	460a      	mov	r2, r1
 8010398:	4910      	ldr	r1, [pc, #64]	; (80103dc <xTimerCreateTimerTask+0x84>)
 801039a:	4811      	ldr	r0, [pc, #68]	; (80103e0 <xTimerCreateTimerTask+0x88>)
 801039c:	f7ff f80e 	bl	800f3bc <xTaskCreateStatic>
 80103a0:	4602      	mov	r2, r0
 80103a2:	4b10      	ldr	r3, [pc, #64]	; (80103e4 <xTimerCreateTimerTask+0x8c>)
 80103a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103a6:	4b0f      	ldr	r3, [pc, #60]	; (80103e4 <xTimerCreateTimerTask+0x8c>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d001      	beq.n	80103b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103ae:	2301      	movs	r3, #1
 80103b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <xTimerCreateTimerTask+0x74>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	e7fe      	b.n	80103ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80103cc:	697b      	ldr	r3, [r7, #20]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20000db4 	.word	0x20000db4
 80103dc:	08011b58 	.word	0x08011b58
 80103e0:	08010519 	.word	0x08010519
 80103e4:	20000db8 	.word	0x20000db8

080103e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08a      	sub	sp, #40	; 0x28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
 80103f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d109      	bne.n	8010414 <xTimerGenericCommand+0x2c>
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	623b      	str	r3, [r7, #32]
 8010412:	e7fe      	b.n	8010412 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010414:	4b19      	ldr	r3, [pc, #100]	; (801047c <xTimerGenericCommand+0x94>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d02a      	beq.n	8010472 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	2b05      	cmp	r3, #5
 801042c:	dc18      	bgt.n	8010460 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801042e:	f7ff fddd 	bl	800ffec <xTaskGetSchedulerState>
 8010432:	4603      	mov	r3, r0
 8010434:	2b02      	cmp	r3, #2
 8010436:	d109      	bne.n	801044c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010438:	4b10      	ldr	r3, [pc, #64]	; (801047c <xTimerGenericCommand+0x94>)
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	f107 0110 	add.w	r1, r7, #16
 8010440:	2300      	movs	r3, #0
 8010442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010444:	f7fe fb66 	bl	800eb14 <xQueueGenericSend>
 8010448:	6278      	str	r0, [r7, #36]	; 0x24
 801044a:	e012      	b.n	8010472 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801044c:	4b0b      	ldr	r3, [pc, #44]	; (801047c <xTimerGenericCommand+0x94>)
 801044e:	6818      	ldr	r0, [r3, #0]
 8010450:	f107 0110 	add.w	r1, r7, #16
 8010454:	2300      	movs	r3, #0
 8010456:	2200      	movs	r2, #0
 8010458:	f7fe fb5c 	bl	800eb14 <xQueueGenericSend>
 801045c:	6278      	str	r0, [r7, #36]	; 0x24
 801045e:	e008      	b.n	8010472 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010460:	4b06      	ldr	r3, [pc, #24]	; (801047c <xTimerGenericCommand+0x94>)
 8010462:	6818      	ldr	r0, [r3, #0]
 8010464:	f107 0110 	add.w	r1, r7, #16
 8010468:	2300      	movs	r3, #0
 801046a:	683a      	ldr	r2, [r7, #0]
 801046c:	f7fe fc4c 	bl	800ed08 <xQueueGenericSendFromISR>
 8010470:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010474:	4618      	mov	r0, r3
 8010476:	3728      	adds	r7, #40	; 0x28
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	20000db4 	.word	0x20000db4

08010480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af02      	add	r7, sp, #8
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801048a:	4b22      	ldr	r3, [pc, #136]	; (8010514 <prvProcessExpiredTimer+0x94>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	3304      	adds	r3, #4
 8010498:	4618      	mov	r0, r3
 801049a:	f7fe f9d3 	bl	800e844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104a4:	f003 0304 	and.w	r3, r3, #4
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d021      	beq.n	80104f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	699a      	ldr	r2, [r3, #24]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	18d1      	adds	r1, r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	683a      	ldr	r2, [r7, #0]
 80104b8:	6978      	ldr	r0, [r7, #20]
 80104ba:	f000 f8d1 	bl	8010660 <prvInsertTimerInActiveList>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d01e      	beq.n	8010502 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104c4:	2300      	movs	r3, #0
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	2300      	movs	r3, #0
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	2100      	movs	r1, #0
 80104ce:	6978      	ldr	r0, [r7, #20]
 80104d0:	f7ff ff8a 	bl	80103e8 <xTimerGenericCommand>
 80104d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d112      	bne.n	8010502 <prvProcessExpiredTimer+0x82>
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	e7fe      	b.n	80104ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104f6:	f023 0301 	bic.w	r3, r3, #1
 80104fa:	b2da      	uxtb	r2, r3
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	6a1b      	ldr	r3, [r3, #32]
 8010506:	6978      	ldr	r0, [r7, #20]
 8010508:	4798      	blx	r3
}
 801050a:	bf00      	nop
 801050c:	3718      	adds	r7, #24
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	20000dac 	.word	0x20000dac

08010518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010520:	f107 0308 	add.w	r3, r7, #8
 8010524:	4618      	mov	r0, r3
 8010526:	f000 f857 	bl	80105d8 <prvGetNextExpireTime>
 801052a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	4619      	mov	r1, r3
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f000 f803 	bl	801053c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010536:	f000 f8d5 	bl	80106e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801053a:	e7f1      	b.n	8010520 <prvTimerTask+0x8>

0801053c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010546:	f7ff f96f 	bl	800f828 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801054a:	f107 0308 	add.w	r3, r7, #8
 801054e:	4618      	mov	r0, r3
 8010550:	f000 f866 	bl	8010620 <prvSampleTimeNow>
 8010554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d130      	bne.n	80105be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10a      	bne.n	8010578 <prvProcessTimerOrBlockTask+0x3c>
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	429a      	cmp	r2, r3
 8010568:	d806      	bhi.n	8010578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801056a:	f7ff f96b 	bl	800f844 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ff85 	bl	8010480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010576:	e024      	b.n	80105c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d008      	beq.n	8010590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801057e:	4b13      	ldr	r3, [pc, #76]	; (80105cc <prvProcessTimerOrBlockTask+0x90>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <prvProcessTimerOrBlockTask+0x50>
 8010588:	2301      	movs	r3, #1
 801058a:	e000      	b.n	801058e <prvProcessTimerOrBlockTask+0x52>
 801058c:	2300      	movs	r3, #0
 801058e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010590:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <prvProcessTimerOrBlockTask+0x94>)
 8010592:	6818      	ldr	r0, [r3, #0]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	4619      	mov	r1, r3
 801059e:	f7fe fed9 	bl	800f354 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80105a2:	f7ff f94f 	bl	800f844 <xTaskResumeAll>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d10a      	bne.n	80105c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80105ac:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <prvProcessTimerOrBlockTask+0x98>)
 80105ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b2:	601a      	str	r2, [r3, #0]
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	f3bf 8f6f 	isb	sy
}
 80105bc:	e001      	b.n	80105c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80105be:	f7ff f941 	bl	800f844 <xTaskResumeAll>
}
 80105c2:	bf00      	nop
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	20000db0 	.word	0x20000db0
 80105d0:	20000db4 	.word	0x20000db4
 80105d4:	e000ed04 	.word	0xe000ed04

080105d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80105d8:	b480      	push	{r7}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80105e0:	4b0e      	ldr	r3, [pc, #56]	; (801061c <prvGetNextExpireTime+0x44>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d101      	bne.n	80105ee <prvGetNextExpireTime+0x16>
 80105ea:	2201      	movs	r2, #1
 80105ec:	e000      	b.n	80105f0 <prvGetNextExpireTime+0x18>
 80105ee:	2200      	movs	r2, #0
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d105      	bne.n	8010608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105fc:	4b07      	ldr	r3, [pc, #28]	; (801061c <prvGetNextExpireTime+0x44>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	60fb      	str	r3, [r7, #12]
 8010606:	e001      	b.n	801060c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010608:	2300      	movs	r3, #0
 801060a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801060c:	68fb      	ldr	r3, [r7, #12]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3714      	adds	r7, #20
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	20000dac 	.word	0x20000dac

08010620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010628:	f7ff f9a8 	bl	800f97c <xTaskGetTickCount>
 801062c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801062e:	4b0b      	ldr	r3, [pc, #44]	; (801065c <prvSampleTimeNow+0x3c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	429a      	cmp	r2, r3
 8010636:	d205      	bcs.n	8010644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010638:	f000 f930 	bl	801089c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2201      	movs	r2, #1
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	e002      	b.n	801064a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801064a:	4a04      	ldr	r2, [pc, #16]	; (801065c <prvSampleTimeNow+0x3c>)
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010650:	68fb      	ldr	r3, [r7, #12]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	20000dbc 	.word	0x20000dbc

08010660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
 801066c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801066e:	2300      	movs	r3, #0
 8010670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	68ba      	ldr	r2, [r7, #8]
 8010676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	429a      	cmp	r2, r3
 8010684:	d812      	bhi.n	80106ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	1ad2      	subs	r2, r2, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	699b      	ldr	r3, [r3, #24]
 8010690:	429a      	cmp	r2, r3
 8010692:	d302      	bcc.n	801069a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010694:	2301      	movs	r3, #1
 8010696:	617b      	str	r3, [r7, #20]
 8010698:	e01b      	b.n	80106d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801069a:	4b10      	ldr	r3, [pc, #64]	; (80106dc <prvInsertTimerInActiveList+0x7c>)
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	3304      	adds	r3, #4
 80106a2:	4619      	mov	r1, r3
 80106a4:	4610      	mov	r0, r2
 80106a6:	f7fe f894 	bl	800e7d2 <vListInsert>
 80106aa:	e012      	b.n	80106d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d206      	bcs.n	80106c2 <prvInsertTimerInActiveList+0x62>
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d302      	bcc.n	80106c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80106bc:	2301      	movs	r3, #1
 80106be:	617b      	str	r3, [r7, #20]
 80106c0:	e007      	b.n	80106d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106c2:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <prvInsertTimerInActiveList+0x80>)
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	3304      	adds	r3, #4
 80106ca:	4619      	mov	r1, r3
 80106cc:	4610      	mov	r0, r2
 80106ce:	f7fe f880 	bl	800e7d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80106d2:	697b      	ldr	r3, [r7, #20]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	20000db0 	.word	0x20000db0
 80106e0:	20000dac 	.word	0x20000dac

080106e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08e      	sub	sp, #56	; 0x38
 80106e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106ea:	e0c6      	b.n	801087a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	da17      	bge.n	8010722 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80106f2:	1d3b      	adds	r3, r7, #4
 80106f4:	3304      	adds	r3, #4
 80106f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d109      	bne.n	8010712 <prvProcessReceivedCommands+0x2e>
 80106fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	61fb      	str	r3, [r7, #28]
 8010710:	e7fe      	b.n	8010710 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010718:	6850      	ldr	r0, [r2, #4]
 801071a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801071c:	6892      	ldr	r2, [r2, #8]
 801071e:	4611      	mov	r1, r2
 8010720:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	f2c0 80a7 	blt.w	8010878 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010730:	695b      	ldr	r3, [r3, #20]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d004      	beq.n	8010740 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010738:	3304      	adds	r3, #4
 801073a:	4618      	mov	r0, r3
 801073c:	f7fe f882 	bl	800e844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010740:	463b      	mov	r3, r7
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff ff6c 	bl	8010620 <prvSampleTimeNow>
 8010748:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b09      	cmp	r3, #9
 801074e:	f200 8094 	bhi.w	801087a <prvProcessReceivedCommands+0x196>
 8010752:	a201      	add	r2, pc, #4	; (adr r2, 8010758 <prvProcessReceivedCommands+0x74>)
 8010754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010758:	08010781 	.word	0x08010781
 801075c:	08010781 	.word	0x08010781
 8010760:	08010781 	.word	0x08010781
 8010764:	080107f3 	.word	0x080107f3
 8010768:	08010807 	.word	0x08010807
 801076c:	0801084f 	.word	0x0801084f
 8010770:	08010781 	.word	0x08010781
 8010774:	08010781 	.word	0x08010781
 8010778:	080107f3 	.word	0x080107f3
 801077c:	08010807 	.word	0x08010807
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010786:	f043 0301 	orr.w	r3, r3, #1
 801078a:	b2da      	uxtb	r2, r3
 801078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	18d1      	adds	r1, r2, r3
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801079e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107a0:	f7ff ff5e 	bl	8010660 <prvInsertTimerInActiveList>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d067      	beq.n	801087a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ac:	6a1b      	ldr	r3, [r3, #32]
 80107ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107b8:	f003 0304 	and.w	r3, r3, #4
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d05c      	beq.n	801087a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	441a      	add	r2, r3
 80107c8:	2300      	movs	r3, #0
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	2300      	movs	r3, #0
 80107ce:	2100      	movs	r1, #0
 80107d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d2:	f7ff fe09 	bl	80103e8 <xTimerGenericCommand>
 80107d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80107d8:	6a3b      	ldr	r3, [r7, #32]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d14d      	bne.n	801087a <prvProcessReceivedCommands+0x196>
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	61bb      	str	r3, [r7, #24]
 80107f0:	e7fe      	b.n	80107f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107f8:	f023 0301 	bic.w	r3, r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010804:	e039      	b.n	801087a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801080c:	f043 0301 	orr.w	r3, r3, #1
 8010810:	b2da      	uxtb	r2, r3
 8010812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d109      	bne.n	801083a <prvProcessReceivedCommands+0x156>
 8010826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082a:	f383 8811 	msr	BASEPRI, r3
 801082e:	f3bf 8f6f 	isb	sy
 8010832:	f3bf 8f4f 	dsb	sy
 8010836:	617b      	str	r3, [r7, #20]
 8010838:	e7fe      	b.n	8010838 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	699a      	ldr	r2, [r3, #24]
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	18d1      	adds	r1, r2, r3
 8010842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010848:	f7ff ff0a 	bl	8010660 <prvInsertTimerInActiveList>
					break;
 801084c:	e015      	b.n	801087a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010854:	f003 0302 	and.w	r3, r3, #2
 8010858:	2b00      	cmp	r3, #0
 801085a:	d103      	bne.n	8010864 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801085c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801085e:	f000 fbc1 	bl	8010fe4 <vPortFree>
 8010862:	e00a      	b.n	801087a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801086a:	f023 0301 	bic.w	r3, r3, #1
 801086e:	b2da      	uxtb	r2, r3
 8010870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010876:	e000      	b.n	801087a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801087a:	4b07      	ldr	r3, [pc, #28]	; (8010898 <prvProcessReceivedCommands+0x1b4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	1d39      	adds	r1, r7, #4
 8010880:	2200      	movs	r2, #0
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fad4 	bl	800ee30 <xQueueReceive>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	f47f af2e 	bne.w	80106ec <prvProcessReceivedCommands+0x8>
	}
}
 8010890:	bf00      	nop
 8010892:	3730      	adds	r7, #48	; 0x30
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	20000db4 	.word	0x20000db4

0801089c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b088      	sub	sp, #32
 80108a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108a2:	e047      	b.n	8010934 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108a4:	4b2d      	ldr	r3, [pc, #180]	; (801095c <prvSwitchTimerLists+0xc0>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108ae:	4b2b      	ldr	r3, [pc, #172]	; (801095c <prvSwitchTimerLists+0xc0>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3304      	adds	r3, #4
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fd ffc1 	bl	800e844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108d0:	f003 0304 	and.w	r3, r3, #4
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d02d      	beq.n	8010934 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	699b      	ldr	r3, [r3, #24]
 80108dc:	693a      	ldr	r2, [r7, #16]
 80108de:	4413      	add	r3, r2
 80108e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d90e      	bls.n	8010908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	68ba      	ldr	r2, [r7, #8]
 80108ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80108f6:	4b19      	ldr	r3, [pc, #100]	; (801095c <prvSwitchTimerLists+0xc0>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	3304      	adds	r3, #4
 80108fe:	4619      	mov	r1, r3
 8010900:	4610      	mov	r0, r2
 8010902:	f7fd ff66 	bl	800e7d2 <vListInsert>
 8010906:	e015      	b.n	8010934 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010908:	2300      	movs	r3, #0
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	2300      	movs	r3, #0
 801090e:	693a      	ldr	r2, [r7, #16]
 8010910:	2100      	movs	r1, #0
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f7ff fd68 	bl	80103e8 <xTimerGenericCommand>
 8010918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d109      	bne.n	8010934 <prvSwitchTimerLists+0x98>
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	603b      	str	r3, [r7, #0]
 8010932:	e7fe      	b.n	8010932 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010934:	4b09      	ldr	r3, [pc, #36]	; (801095c <prvSwitchTimerLists+0xc0>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1b2      	bne.n	80108a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801093e:	4b07      	ldr	r3, [pc, #28]	; (801095c <prvSwitchTimerLists+0xc0>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010944:	4b06      	ldr	r3, [pc, #24]	; (8010960 <prvSwitchTimerLists+0xc4>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a04      	ldr	r2, [pc, #16]	; (801095c <prvSwitchTimerLists+0xc0>)
 801094a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801094c:	4a04      	ldr	r2, [pc, #16]	; (8010960 <prvSwitchTimerLists+0xc4>)
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	6013      	str	r3, [r2, #0]
}
 8010952:	bf00      	nop
 8010954:	3718      	adds	r7, #24
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20000dac 	.word	0x20000dac
 8010960:	20000db0 	.word	0x20000db0

08010964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801096a:	f000 f95f 	bl	8010c2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801096e:	4b15      	ldr	r3, [pc, #84]	; (80109c4 <prvCheckForValidListAndQueue+0x60>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d120      	bne.n	80109b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010976:	4814      	ldr	r0, [pc, #80]	; (80109c8 <prvCheckForValidListAndQueue+0x64>)
 8010978:	f7fd feda 	bl	800e730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801097c:	4813      	ldr	r0, [pc, #76]	; (80109cc <prvCheckForValidListAndQueue+0x68>)
 801097e:	f7fd fed7 	bl	800e730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010982:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <prvCheckForValidListAndQueue+0x6c>)
 8010984:	4a10      	ldr	r2, [pc, #64]	; (80109c8 <prvCheckForValidListAndQueue+0x64>)
 8010986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010988:	4b12      	ldr	r3, [pc, #72]	; (80109d4 <prvCheckForValidListAndQueue+0x70>)
 801098a:	4a10      	ldr	r2, [pc, #64]	; (80109cc <prvCheckForValidListAndQueue+0x68>)
 801098c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801098e:	2300      	movs	r3, #0
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	4b11      	ldr	r3, [pc, #68]	; (80109d8 <prvCheckForValidListAndQueue+0x74>)
 8010994:	4a11      	ldr	r2, [pc, #68]	; (80109dc <prvCheckForValidListAndQueue+0x78>)
 8010996:	2110      	movs	r1, #16
 8010998:	200a      	movs	r0, #10
 801099a:	f7fd ffe5 	bl	800e968 <xQueueGenericCreateStatic>
 801099e:	4602      	mov	r2, r0
 80109a0:	4b08      	ldr	r3, [pc, #32]	; (80109c4 <prvCheckForValidListAndQueue+0x60>)
 80109a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80109a4:	4b07      	ldr	r3, [pc, #28]	; (80109c4 <prvCheckForValidListAndQueue+0x60>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d005      	beq.n	80109b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80109ac:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <prvCheckForValidListAndQueue+0x60>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	490b      	ldr	r1, [pc, #44]	; (80109e0 <prvCheckForValidListAndQueue+0x7c>)
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fe fca6 	bl	800f304 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80109b8:	f000 f966 	bl	8010c88 <vPortExitCritical>
}
 80109bc:	bf00      	nop
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20000db4 	.word	0x20000db4
 80109c8:	20000d84 	.word	0x20000d84
 80109cc:	20000d98 	.word	0x20000d98
 80109d0:	20000dac 	.word	0x20000dac
 80109d4:	20000db0 	.word	0x20000db0
 80109d8:	20000e60 	.word	0x20000e60
 80109dc:	20000dc0 	.word	0x20000dc0
 80109e0:	08011b60 	.word	0x08011b60

080109e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	3b04      	subs	r3, #4
 80109f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80109fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3b04      	subs	r3, #4
 8010a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	f023 0201 	bic.w	r2, r3, #1
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	3b04      	subs	r3, #4
 8010a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010a14:	4a0c      	ldr	r2, [pc, #48]	; (8010a48 <pxPortInitialiseStack+0x64>)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3b14      	subs	r3, #20
 8010a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3b04      	subs	r3, #4
 8010a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f06f 0202 	mvn.w	r2, #2
 8010a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	3b20      	subs	r3, #32
 8010a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3714      	adds	r7, #20
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr
 8010a48:	08010a4d 	.word	0x08010a4d

08010a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a56:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <prvTaskExitError+0x50>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5e:	d009      	beq.n	8010a74 <prvTaskExitError+0x28>
 8010a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a64:	f383 8811 	msr	BASEPRI, r3
 8010a68:	f3bf 8f6f 	isb	sy
 8010a6c:	f3bf 8f4f 	dsb	sy
 8010a70:	60fb      	str	r3, [r7, #12]
 8010a72:	e7fe      	b.n	8010a72 <prvTaskExitError+0x26>
 8010a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a78:	f383 8811 	msr	BASEPRI, r3
 8010a7c:	f3bf 8f6f 	isb	sy
 8010a80:	f3bf 8f4f 	dsb	sy
 8010a84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a86:	bf00      	nop
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d0fc      	beq.n	8010a88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a8e:	bf00      	nop
 8010a90:	3714      	adds	r7, #20
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	200000b0 	.word	0x200000b0

08010aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010aa0:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <pxCurrentTCBConst2>)
 8010aa2:	6819      	ldr	r1, [r3, #0]
 8010aa4:	6808      	ldr	r0, [r1, #0]
 8010aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aaa:	f380 8809 	msr	PSP, r0
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f04f 0000 	mov.w	r0, #0
 8010ab6:	f380 8811 	msr	BASEPRI, r0
 8010aba:	4770      	bx	lr
 8010abc:	f3af 8000 	nop.w

08010ac0 <pxCurrentTCBConst2>:
 8010ac0:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ac4:	bf00      	nop
 8010ac6:	bf00      	nop

08010ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ac8:	4808      	ldr	r0, [pc, #32]	; (8010aec <prvPortStartFirstTask+0x24>)
 8010aca:	6800      	ldr	r0, [r0, #0]
 8010acc:	6800      	ldr	r0, [r0, #0]
 8010ace:	f380 8808 	msr	MSP, r0
 8010ad2:	f04f 0000 	mov.w	r0, #0
 8010ad6:	f380 8814 	msr	CONTROL, r0
 8010ada:	b662      	cpsie	i
 8010adc:	b661      	cpsie	f
 8010ade:	f3bf 8f4f 	dsb	sy
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	df00      	svc	0
 8010ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010aea:	bf00      	nop
 8010aec:	e000ed08 	.word	0xe000ed08

08010af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010af6:	4b44      	ldr	r3, [pc, #272]	; (8010c08 <xPortStartScheduler+0x118>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a44      	ldr	r2, [pc, #272]	; (8010c0c <xPortStartScheduler+0x11c>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d109      	bne.n	8010b14 <xPortStartScheduler+0x24>
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	613b      	str	r3, [r7, #16]
 8010b12:	e7fe      	b.n	8010b12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010b14:	4b3c      	ldr	r3, [pc, #240]	; (8010c08 <xPortStartScheduler+0x118>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a3d      	ldr	r2, [pc, #244]	; (8010c10 <xPortStartScheduler+0x120>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d109      	bne.n	8010b32 <xPortStartScheduler+0x42>
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	60fb      	str	r3, [r7, #12]
 8010b30:	e7fe      	b.n	8010b30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010b32:	4b38      	ldr	r3, [pc, #224]	; (8010c14 <xPortStartScheduler+0x124>)
 8010b34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	22ff      	movs	r2, #255	; 0xff
 8010b42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	b2db      	uxtb	r3, r3
 8010b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	4b30      	ldr	r3, [pc, #192]	; (8010c18 <xPortStartScheduler+0x128>)
 8010b58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010b5a:	4b30      	ldr	r3, [pc, #192]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010b5c:	2207      	movs	r2, #7
 8010b5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b60:	e009      	b.n	8010b76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010b62:	4b2e      	ldr	r3, [pc, #184]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	3b01      	subs	r3, #1
 8010b68:	4a2c      	ldr	r2, [pc, #176]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b76:	78fb      	ldrb	r3, [r7, #3]
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b7e:	2b80      	cmp	r3, #128	; 0x80
 8010b80:	d0ef      	beq.n	8010b62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b82:	4b26      	ldr	r3, [pc, #152]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f1c3 0307 	rsb	r3, r3, #7
 8010b8a:	2b04      	cmp	r3, #4
 8010b8c:	d009      	beq.n	8010ba2 <xPortStartScheduler+0xb2>
 8010b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	60bb      	str	r3, [r7, #8]
 8010ba0:	e7fe      	b.n	8010ba0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ba2:	4b1e      	ldr	r3, [pc, #120]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	021b      	lsls	r3, r3, #8
 8010ba8:	4a1c      	ldr	r2, [pc, #112]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010bac:	4b1b      	ldr	r3, [pc, #108]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010bb4:	4a19      	ldr	r2, [pc, #100]	; (8010c1c <xPortStartScheduler+0x12c>)
 8010bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010bc0:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <xPortStartScheduler+0x130>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a16      	ldr	r2, [pc, #88]	; (8010c20 <xPortStartScheduler+0x130>)
 8010bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010bcc:	4b14      	ldr	r3, [pc, #80]	; (8010c20 <xPortStartScheduler+0x130>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a13      	ldr	r2, [pc, #76]	; (8010c20 <xPortStartScheduler+0x130>)
 8010bd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010bd8:	f000 f8d6 	bl	8010d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010bdc:	4b11      	ldr	r3, [pc, #68]	; (8010c24 <xPortStartScheduler+0x134>)
 8010bde:	2200      	movs	r2, #0
 8010be0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010be2:	f000 f8f5 	bl	8010dd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010be6:	4b10      	ldr	r3, [pc, #64]	; (8010c28 <xPortStartScheduler+0x138>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a0f      	ldr	r2, [pc, #60]	; (8010c28 <xPortStartScheduler+0x138>)
 8010bec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010bf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010bf2:	f7ff ff69 	bl	8010ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010bf6:	f7fe ff89 	bl	800fb0c <vTaskSwitchContext>
	prvTaskExitError();
 8010bfa:	f7ff ff27 	bl	8010a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	e000ed00 	.word	0xe000ed00
 8010c0c:	410fc271 	.word	0x410fc271
 8010c10:	410fc270 	.word	0x410fc270
 8010c14:	e000e400 	.word	0xe000e400
 8010c18:	20000eb0 	.word	0x20000eb0
 8010c1c:	20000eb4 	.word	0x20000eb4
 8010c20:	e000ed20 	.word	0xe000ed20
 8010c24:	200000b0 	.word	0x200000b0
 8010c28:	e000ef34 	.word	0xe000ef34

08010c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b083      	sub	sp, #12
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010c44:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <vPortEnterCritical+0x54>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	4a0d      	ldr	r2, [pc, #52]	; (8010c80 <vPortEnterCritical+0x54>)
 8010c4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010c4e:	4b0c      	ldr	r3, [pc, #48]	; (8010c80 <vPortEnterCritical+0x54>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d10e      	bne.n	8010c74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010c56:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <vPortEnterCritical+0x58>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d009      	beq.n	8010c74 <vPortEnterCritical+0x48>
 8010c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	603b      	str	r3, [r7, #0]
 8010c72:	e7fe      	b.n	8010c72 <vPortEnterCritical+0x46>
	}
}
 8010c74:	bf00      	nop
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr
 8010c80:	200000b0 	.word	0x200000b0
 8010c84:	e000ed04 	.word	0xe000ed04

08010c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c8e:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <vPortExitCritical+0x4c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d109      	bne.n	8010caa <vPortExitCritical+0x22>
 8010c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	e7fe      	b.n	8010ca8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010caa:	4b0a      	ldr	r3, [pc, #40]	; (8010cd4 <vPortExitCritical+0x4c>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	4a08      	ldr	r2, [pc, #32]	; (8010cd4 <vPortExitCritical+0x4c>)
 8010cb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010cb4:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <vPortExitCritical+0x4c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d104      	bne.n	8010cc6 <vPortExitCritical+0x3e>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010cc6:	bf00      	nop
 8010cc8:	370c      	adds	r7, #12
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	200000b0 	.word	0x200000b0
	...

08010ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ce0:	f3ef 8009 	mrs	r0, PSP
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	4b15      	ldr	r3, [pc, #84]	; (8010d40 <pxCurrentTCBConst>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	f01e 0f10 	tst.w	lr, #16
 8010cf0:	bf08      	it	eq
 8010cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010d04:	f380 8811 	msr	BASEPRI, r0
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f7fe fefc 	bl	800fb0c <vTaskSwitchContext>
 8010d14:	f04f 0000 	mov.w	r0, #0
 8010d18:	f380 8811 	msr	BASEPRI, r0
 8010d1c:	bc09      	pop	{r0, r3}
 8010d1e:	6819      	ldr	r1, [r3, #0]
 8010d20:	6808      	ldr	r0, [r1, #0]
 8010d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d26:	f01e 0f10 	tst.w	lr, #16
 8010d2a:	bf08      	it	eq
 8010d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010d30:	f380 8809 	msr	PSP, r0
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	f3af 8000 	nop.w

08010d40 <pxCurrentTCBConst>:
 8010d40:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010d44:	bf00      	nop
 8010d46:	bf00      	nop

08010d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d60:	f7fe fe1c 	bl	800f99c <xTaskIncrementTick>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d003      	beq.n	8010d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d6a:	4b06      	ldr	r3, [pc, #24]	; (8010d84 <SysTick_Handler+0x3c>)
 8010d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	2300      	movs	r3, #0
 8010d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	e000ed04 	.word	0xe000ed04

08010d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d8c:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <vPortSetupTimerInterrupt+0x34>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d92:	4b0b      	ldr	r3, [pc, #44]	; (8010dc0 <vPortSetupTimerInterrupt+0x38>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <vPortSetupTimerInterrupt+0x3c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a0a      	ldr	r2, [pc, #40]	; (8010dc8 <vPortSetupTimerInterrupt+0x40>)
 8010d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010da2:	099b      	lsrs	r3, r3, #6
 8010da4:	4a09      	ldr	r2, [pc, #36]	; (8010dcc <vPortSetupTimerInterrupt+0x44>)
 8010da6:	3b01      	subs	r3, #1
 8010da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010daa:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <vPortSetupTimerInterrupt+0x34>)
 8010dac:	2207      	movs	r2, #7
 8010dae:	601a      	str	r2, [r3, #0]
}
 8010db0:	bf00      	nop
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	e000e010 	.word	0xe000e010
 8010dc0:	e000e018 	.word	0xe000e018
 8010dc4:	20000024 	.word	0x20000024
 8010dc8:	10624dd3 	.word	0x10624dd3
 8010dcc:	e000e014 	.word	0xe000e014

08010dd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010dd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010de0 <vPortEnableVFP+0x10>
 8010dd4:	6801      	ldr	r1, [r0, #0]
 8010dd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010dda:	6001      	str	r1, [r0, #0]
 8010ddc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010dde:	bf00      	nop
 8010de0:	e000ed88 	.word	0xe000ed88

08010de4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010dea:	f3ef 8305 	mrs	r3, IPSR
 8010dee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2b0f      	cmp	r3, #15
 8010df4:	d913      	bls.n	8010e1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010df6:	4a16      	ldr	r2, [pc, #88]	; (8010e50 <vPortValidateInterruptPriority+0x6c>)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010e00:	4b14      	ldr	r3, [pc, #80]	; (8010e54 <vPortValidateInterruptPriority+0x70>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	7afa      	ldrb	r2, [r7, #11]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d209      	bcs.n	8010e1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	607b      	str	r3, [r7, #4]
 8010e1c:	e7fe      	b.n	8010e1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010e1e:	4b0e      	ldr	r3, [pc, #56]	; (8010e58 <vPortValidateInterruptPriority+0x74>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010e26:	4b0d      	ldr	r3, [pc, #52]	; (8010e5c <vPortValidateInterruptPriority+0x78>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d909      	bls.n	8010e42 <vPortValidateInterruptPriority+0x5e>
 8010e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	603b      	str	r3, [r7, #0]
 8010e40:	e7fe      	b.n	8010e40 <vPortValidateInterruptPriority+0x5c>
	}
 8010e42:	bf00      	nop
 8010e44:	3714      	adds	r7, #20
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	e000e3f0 	.word	0xe000e3f0
 8010e54:	20000eb0 	.word	0x20000eb0
 8010e58:	e000ed0c 	.word	0xe000ed0c
 8010e5c:	20000eb4 	.word	0x20000eb4

08010e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b08a      	sub	sp, #40	; 0x28
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e6c:	f7fe fcdc 	bl	800f828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e70:	4b57      	ldr	r3, [pc, #348]	; (8010fd0 <pvPortMalloc+0x170>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d101      	bne.n	8010e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e78:	f000 f90c 	bl	8011094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e7c:	4b55      	ldr	r3, [pc, #340]	; (8010fd4 <pvPortMalloc+0x174>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4013      	ands	r3, r2
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f040 808c 	bne.w	8010fa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d01c      	beq.n	8010eca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010e90:	2208      	movs	r2, #8
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4413      	add	r3, r2
 8010e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f003 0307 	and.w	r3, r3, #7
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d013      	beq.n	8010eca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f023 0307 	bic.w	r3, r3, #7
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f003 0307 	and.w	r3, r3, #7
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d009      	beq.n	8010eca <pvPortMalloc+0x6a>
 8010eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	617b      	str	r3, [r7, #20]
 8010ec8:	e7fe      	b.n	8010ec8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d068      	beq.n	8010fa2 <pvPortMalloc+0x142>
 8010ed0:	4b41      	ldr	r3, [pc, #260]	; (8010fd8 <pvPortMalloc+0x178>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d863      	bhi.n	8010fa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010eda:	4b40      	ldr	r3, [pc, #256]	; (8010fdc <pvPortMalloc+0x17c>)
 8010edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010ede:	4b3f      	ldr	r3, [pc, #252]	; (8010fdc <pvPortMalloc+0x17c>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ee4:	e004      	b.n	8010ef0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d903      	bls.n	8010f02 <pvPortMalloc+0xa2>
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1f1      	bne.n	8010ee6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010f02:	4b33      	ldr	r3, [pc, #204]	; (8010fd0 <pvPortMalloc+0x170>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d04a      	beq.n	8010fa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2208      	movs	r2, #8
 8010f12:	4413      	add	r3, r2
 8010f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	1ad2      	subs	r2, r2, r3
 8010f26:	2308      	movs	r3, #8
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d91e      	bls.n	8010f6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4413      	add	r3, r2
 8010f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	f003 0307 	and.w	r3, r3, #7
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d009      	beq.n	8010f54 <pvPortMalloc+0xf4>
 8010f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f44:	f383 8811 	msr	BASEPRI, r3
 8010f48:	f3bf 8f6f 	isb	sy
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	613b      	str	r3, [r7, #16]
 8010f52:	e7fe      	b.n	8010f52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	685a      	ldr	r2, [r3, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	1ad2      	subs	r2, r2, r3
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f66:	69b8      	ldr	r0, [r7, #24]
 8010f68:	f000 f8f6 	bl	8011158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f6c:	4b1a      	ldr	r3, [pc, #104]	; (8010fd8 <pvPortMalloc+0x178>)
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	4a18      	ldr	r2, [pc, #96]	; (8010fd8 <pvPortMalloc+0x178>)
 8010f78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f7a:	4b17      	ldr	r3, [pc, #92]	; (8010fd8 <pvPortMalloc+0x178>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	4b18      	ldr	r3, [pc, #96]	; (8010fe0 <pvPortMalloc+0x180>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d203      	bcs.n	8010f8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f86:	4b14      	ldr	r3, [pc, #80]	; (8010fd8 <pvPortMalloc+0x178>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a15      	ldr	r2, [pc, #84]	; (8010fe0 <pvPortMalloc+0x180>)
 8010f8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	4b10      	ldr	r3, [pc, #64]	; (8010fd4 <pvPortMalloc+0x174>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	431a      	orrs	r2, r3
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010fa2:	f7fe fc4f 	bl	800f844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	f003 0307 	and.w	r3, r3, #7
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d009      	beq.n	8010fc4 <pvPortMalloc+0x164>
 8010fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb4:	f383 8811 	msr	BASEPRI, r3
 8010fb8:	f3bf 8f6f 	isb	sy
 8010fbc:	f3bf 8f4f 	dsb	sy
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	e7fe      	b.n	8010fc2 <pvPortMalloc+0x162>
	return pvReturn;
 8010fc4:	69fb      	ldr	r3, [r7, #28]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3728      	adds	r7, #40	; 0x28
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	20004ac0 	.word	0x20004ac0
 8010fd4:	20004acc 	.word	0x20004acc
 8010fd8:	20004ac4 	.word	0x20004ac4
 8010fdc:	20004ab8 	.word	0x20004ab8
 8010fe0:	20004ac8 	.word	0x20004ac8

08010fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d046      	beq.n	8011084 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ff6:	2308      	movs	r3, #8
 8010ff8:	425b      	negs	r3, r3
 8010ffa:	697a      	ldr	r2, [r7, #20]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	4b20      	ldr	r3, [pc, #128]	; (801108c <vPortFree+0xa8>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4013      	ands	r3, r2
 801100e:	2b00      	cmp	r3, #0
 8011010:	d109      	bne.n	8011026 <vPortFree+0x42>
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	60fb      	str	r3, [r7, #12]
 8011024:	e7fe      	b.n	8011024 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d009      	beq.n	8011042 <vPortFree+0x5e>
 801102e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011032:	f383 8811 	msr	BASEPRI, r3
 8011036:	f3bf 8f6f 	isb	sy
 801103a:	f3bf 8f4f 	dsb	sy
 801103e:	60bb      	str	r3, [r7, #8]
 8011040:	e7fe      	b.n	8011040 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	685a      	ldr	r2, [r3, #4]
 8011046:	4b11      	ldr	r3, [pc, #68]	; (801108c <vPortFree+0xa8>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4013      	ands	r3, r2
 801104c:	2b00      	cmp	r3, #0
 801104e:	d019      	beq.n	8011084 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d115      	bne.n	8011084 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	685a      	ldr	r2, [r3, #4]
 801105c:	4b0b      	ldr	r3, [pc, #44]	; (801108c <vPortFree+0xa8>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	43db      	mvns	r3, r3
 8011062:	401a      	ands	r2, r3
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011068:	f7fe fbde 	bl	800f828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	685a      	ldr	r2, [r3, #4]
 8011070:	4b07      	ldr	r3, [pc, #28]	; (8011090 <vPortFree+0xac>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4413      	add	r3, r2
 8011076:	4a06      	ldr	r2, [pc, #24]	; (8011090 <vPortFree+0xac>)
 8011078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801107a:	6938      	ldr	r0, [r7, #16]
 801107c:	f000 f86c 	bl	8011158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011080:	f7fe fbe0 	bl	800f844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011084:	bf00      	nop
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	20004acc 	.word	0x20004acc
 8011090:	20004ac4 	.word	0x20004ac4

08011094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801109a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801109e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80110a0:	4b27      	ldr	r3, [pc, #156]	; (8011140 <prvHeapInit+0xac>)
 80110a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f003 0307 	and.w	r3, r3, #7
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d00c      	beq.n	80110c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3307      	adds	r3, #7
 80110b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f023 0307 	bic.w	r3, r3, #7
 80110ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	4a1f      	ldr	r2, [pc, #124]	; (8011140 <prvHeapInit+0xac>)
 80110c4:	4413      	add	r3, r2
 80110c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80110cc:	4a1d      	ldr	r2, [pc, #116]	; (8011144 <prvHeapInit+0xb0>)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110d2:	4b1c      	ldr	r3, [pc, #112]	; (8011144 <prvHeapInit+0xb0>)
 80110d4:	2200      	movs	r2, #0
 80110d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	4413      	add	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110e0:	2208      	movs	r2, #8
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	1a9b      	subs	r3, r3, r2
 80110e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f023 0307 	bic.w	r3, r3, #7
 80110ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	4a15      	ldr	r2, [pc, #84]	; (8011148 <prvHeapInit+0xb4>)
 80110f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110f6:	4b14      	ldr	r3, [pc, #80]	; (8011148 <prvHeapInit+0xb4>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2200      	movs	r2, #0
 80110fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110fe:	4b12      	ldr	r3, [pc, #72]	; (8011148 <prvHeapInit+0xb4>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2200      	movs	r2, #0
 8011104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	1ad2      	subs	r2, r2, r3
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011114:	4b0c      	ldr	r3, [pc, #48]	; (8011148 <prvHeapInit+0xb4>)
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	4a0a      	ldr	r2, [pc, #40]	; (801114c <prvHeapInit+0xb8>)
 8011122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	4a09      	ldr	r2, [pc, #36]	; (8011150 <prvHeapInit+0xbc>)
 801112a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801112c:	4b09      	ldr	r3, [pc, #36]	; (8011154 <prvHeapInit+0xc0>)
 801112e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011132:	601a      	str	r2, [r3, #0]
}
 8011134:	bf00      	nop
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	20000eb8 	.word	0x20000eb8
 8011144:	20004ab8 	.word	0x20004ab8
 8011148:	20004ac0 	.word	0x20004ac0
 801114c:	20004ac8 	.word	0x20004ac8
 8011150:	20004ac4 	.word	0x20004ac4
 8011154:	20004acc 	.word	0x20004acc

08011158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011158:	b480      	push	{r7}
 801115a:	b085      	sub	sp, #20
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011160:	4b28      	ldr	r3, [pc, #160]	; (8011204 <prvInsertBlockIntoFreeList+0xac>)
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	e002      	b.n	801116c <prvInsertBlockIntoFreeList+0x14>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	429a      	cmp	r2, r3
 8011174:	d8f7      	bhi.n	8011166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	68ba      	ldr	r2, [r7, #8]
 8011180:	4413      	add	r3, r2
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	429a      	cmp	r2, r3
 8011186:	d108      	bne.n	801119a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	685a      	ldr	r2, [r3, #4]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	441a      	add	r2, r3
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	441a      	add	r2, r3
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d118      	bne.n	80111e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	4b15      	ldr	r3, [pc, #84]	; (8011208 <prvInsertBlockIntoFreeList+0xb0>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d00d      	beq.n	80111d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	441a      	add	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	e008      	b.n	80111e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111d6:	4b0c      	ldr	r3, [pc, #48]	; (8011208 <prvInsertBlockIntoFreeList+0xb0>)
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	e003      	b.n	80111e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d002      	beq.n	80111f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111f6:	bf00      	nop
 80111f8:	3714      	adds	r7, #20
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	20004ab8 	.word	0x20004ab8
 8011208:	20004ac0 	.word	0x20004ac0

0801120c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011210:	2201      	movs	r2, #1
 8011212:	490e      	ldr	r1, [pc, #56]	; (801124c <MX_USB_HOST_Init+0x40>)
 8011214:	480e      	ldr	r0, [pc, #56]	; (8011250 <MX_USB_HOST_Init+0x44>)
 8011216:	f7fb fa1b 	bl	800c650 <USBH_Init>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011220:	f7f0 fd00 	bl	8001c24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011224:	490b      	ldr	r1, [pc, #44]	; (8011254 <MX_USB_HOST_Init+0x48>)
 8011226:	480a      	ldr	r0, [pc, #40]	; (8011250 <MX_USB_HOST_Init+0x44>)
 8011228:	f7fb fac2 	bl	800c7b0 <USBH_RegisterClass>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011232:	f7f0 fcf7 	bl	8001c24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011236:	4806      	ldr	r0, [pc, #24]	; (8011250 <MX_USB_HOST_Init+0x44>)
 8011238:	f7fb fb46 	bl	800c8c8 <USBH_Start>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011242:	f7f0 fcef 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011246:	bf00      	nop
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	08011259 	.word	0x08011259
 8011250:	20005034 	.word	0x20005034
 8011254:	20000090 	.word	0x20000090

08011258 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	460b      	mov	r3, r1
 8011262:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011264:	78fb      	ldrb	r3, [r7, #3]
 8011266:	3b01      	subs	r3, #1
 8011268:	2b04      	cmp	r3, #4
 801126a:	d819      	bhi.n	80112a0 <USBH_UserProcess+0x48>
 801126c:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <USBH_UserProcess+0x1c>)
 801126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011272:	bf00      	nop
 8011274:	080112a1 	.word	0x080112a1
 8011278:	08011291 	.word	0x08011291
 801127c:	080112a1 	.word	0x080112a1
 8011280:	08011299 	.word	0x08011299
 8011284:	08011289 	.word	0x08011289
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011288:	4b09      	ldr	r3, [pc, #36]	; (80112b0 <USBH_UserProcess+0x58>)
 801128a:	2203      	movs	r2, #3
 801128c:	701a      	strb	r2, [r3, #0]
  break;
 801128e:	e008      	b.n	80112a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <USBH_UserProcess+0x58>)
 8011292:	2202      	movs	r2, #2
 8011294:	701a      	strb	r2, [r3, #0]
  break;
 8011296:	e004      	b.n	80112a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011298:	4b05      	ldr	r3, [pc, #20]	; (80112b0 <USBH_UserProcess+0x58>)
 801129a:	2201      	movs	r2, #1
 801129c:	701a      	strb	r2, [r3, #0]
  break;
 801129e:	e000      	b.n	80112a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80112a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80112a2:	bf00      	nop
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	20004ad0 	.word	0x20004ad0

080112b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b08a      	sub	sp, #40	; 0x28
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112bc:	f107 0314 	add.w	r3, r7, #20
 80112c0:	2200      	movs	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]
 80112c4:	605a      	str	r2, [r3, #4]
 80112c6:	609a      	str	r2, [r3, #8]
 80112c8:	60da      	str	r2, [r3, #12]
 80112ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80112d4:	d147      	bne.n	8011366 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80112d6:	2300      	movs	r3, #0
 80112d8:	613b      	str	r3, [r7, #16]
 80112da:	4b25      	ldr	r3, [pc, #148]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 80112dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112de:	4a24      	ldr	r2, [pc, #144]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 80112e0:	f043 0301 	orr.w	r3, r3, #1
 80112e4:	6313      	str	r3, [r2, #48]	; 0x30
 80112e6:	4b22      	ldr	r3, [pc, #136]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 80112e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	613b      	str	r3, [r7, #16]
 80112f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80112f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80112f8:	2300      	movs	r3, #0
 80112fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112fc:	2300      	movs	r3, #0
 80112fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011300:	f107 0314 	add.w	r3, r7, #20
 8011304:	4619      	mov	r1, r3
 8011306:	481b      	ldr	r0, [pc, #108]	; (8011374 <HAL_HCD_MspInit+0xc0>)
 8011308:	f7f3 fcc0 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801130c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011312:	2302      	movs	r3, #2
 8011314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011316:	2300      	movs	r3, #0
 8011318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801131a:	2303      	movs	r3, #3
 801131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801131e:	230a      	movs	r3, #10
 8011320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011322:	f107 0314 	add.w	r3, r7, #20
 8011326:	4619      	mov	r1, r3
 8011328:	4812      	ldr	r0, [pc, #72]	; (8011374 <HAL_HCD_MspInit+0xc0>)
 801132a:	f7f3 fcaf 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801132e:	4b10      	ldr	r3, [pc, #64]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 8011330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011332:	4a0f      	ldr	r2, [pc, #60]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 8011334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011338:	6353      	str	r3, [r2, #52]	; 0x34
 801133a:	2300      	movs	r3, #0
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	4b0c      	ldr	r3, [pc, #48]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 8011340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011342:	4a0b      	ldr	r2, [pc, #44]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 8011344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011348:	6453      	str	r3, [r2, #68]	; 0x44
 801134a:	4b09      	ldr	r3, [pc, #36]	; (8011370 <HAL_HCD_MspInit+0xbc>)
 801134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011352:	60fb      	str	r3, [r7, #12]
 8011354:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011356:	2200      	movs	r2, #0
 8011358:	2100      	movs	r1, #0
 801135a:	2043      	movs	r0, #67	; 0x43
 801135c:	f7f3 f94e 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011360:	2043      	movs	r0, #67	; 0x43
 8011362:	f7f3 f967 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011366:	bf00      	nop
 8011368:	3728      	adds	r7, #40	; 0x28
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	40023800 	.word	0x40023800
 8011374:	40020000 	.word	0x40020000

08011378 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011386:	4618      	mov	r0, r3
 8011388:	f7fb ff4b 	bl	800d222 <USBH_LL_IncTimer>
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fb ff8f 	bl	800d2c6 <USBH_LL_Connect>
}
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fb ffa4 	bl	800d30c <USBH_LL_Disconnect>
}
 80113c4:	bf00      	nop
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	460b      	mov	r3, r1
 80113d6:	70fb      	strb	r3, [r7, #3]
 80113d8:	4613      	mov	r3, r2
 80113da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fb ffdb 	bl	800d39e <USBH_LL_NotifyURBChange>
#endif
}
 80113e8:	bf00      	nop
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fb ff39 	bl	800d276 <USBH_LL_PortEnabled>
}
 8011404:	bf00      	nop
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801141a:	4618      	mov	r0, r3
 801141c:	f7fb ff45 	bl	800d2aa <USBH_LL_PortDisabled>
}
 8011420:	bf00      	nop
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011436:	2b01      	cmp	r3, #1
 8011438:	d12a      	bne.n	8011490 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801143a:	4a18      	ldr	r2, [pc, #96]	; (801149c <USBH_LL_Init+0x74>)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4a15      	ldr	r2, [pc, #84]	; (801149c <USBH_LL_Init+0x74>)
 8011446:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801144a:	4b14      	ldr	r3, [pc, #80]	; (801149c <USBH_LL_Init+0x74>)
 801144c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011450:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8011452:	4b12      	ldr	r3, [pc, #72]	; (801149c <USBH_LL_Init+0x74>)
 8011454:	220c      	movs	r2, #12
 8011456:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011458:	4b10      	ldr	r3, [pc, #64]	; (801149c <USBH_LL_Init+0x74>)
 801145a:	2201      	movs	r2, #1
 801145c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801145e:	4b0f      	ldr	r3, [pc, #60]	; (801149c <USBH_LL_Init+0x74>)
 8011460:	2200      	movs	r2, #0
 8011462:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011464:	4b0d      	ldr	r3, [pc, #52]	; (801149c <USBH_LL_Init+0x74>)
 8011466:	2202      	movs	r2, #2
 8011468:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801146a:	4b0c      	ldr	r3, [pc, #48]	; (801149c <USBH_LL_Init+0x74>)
 801146c:	2200      	movs	r2, #0
 801146e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011470:	480a      	ldr	r0, [pc, #40]	; (801149c <USBH_LL_Init+0x74>)
 8011472:	f7f3 fe0c 	bl	800508e <HAL_HCD_Init>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d001      	beq.n	8011480 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801147c:	f7f0 fbd2 	bl	8001c24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011480:	4806      	ldr	r0, [pc, #24]	; (801149c <USBH_LL_Init+0x74>)
 8011482:	f7f4 fa0f 	bl	80058a4 <HAL_HCD_GetCurrentFrame>
 8011486:	4603      	mov	r3, r0
 8011488:	4619      	mov	r1, r3
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7fb feba 	bl	800d204 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	20005418 	.word	0x20005418

080114a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114ac:	2300      	movs	r3, #0
 80114ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7f4 f97c 	bl	80057b4 <HAL_HCD_Start>
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 f95c 	bl	8011780 <USBH_Get_USB_Status>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b084      	sub	sp, #16
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f4 f984 	bl	80057fa <HAL_HCD_Stop>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114f6:	7bfb      	ldrb	r3, [r7, #15]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f000 f941 	bl	8011780 <USBH_Get_USB_Status>
 80114fe:	4603      	mov	r3, r0
 8011500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011502:	7bbb      	ldrb	r3, [r7, #14]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011514:	2301      	movs	r3, #1
 8011516:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801151e:	4618      	mov	r0, r3
 8011520:	f7f4 f9ce 	bl	80058c0 <HAL_HCD_GetCurrentSpeed>
 8011524:	4603      	mov	r3, r0
 8011526:	2b01      	cmp	r3, #1
 8011528:	d007      	beq.n	801153a <USBH_LL_GetSpeed+0x2e>
 801152a:	2b01      	cmp	r3, #1
 801152c:	d302      	bcc.n	8011534 <USBH_LL_GetSpeed+0x28>
 801152e:	2b02      	cmp	r3, #2
 8011530:	d006      	beq.n	8011540 <USBH_LL_GetSpeed+0x34>
 8011532:	e008      	b.n	8011546 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011534:	2300      	movs	r3, #0
 8011536:	73fb      	strb	r3, [r7, #15]
    break;
 8011538:	e008      	b.n	801154c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801153a:	2301      	movs	r3, #1
 801153c:	73fb      	strb	r3, [r7, #15]
    break;
 801153e:	e005      	b.n	801154c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011540:	2302      	movs	r3, #2
 8011542:	73fb      	strb	r3, [r7, #15]
    break;
 8011544:	e002      	b.n	801154c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011546:	2301      	movs	r3, #1
 8011548:	73fb      	strb	r3, [r7, #15]
    break;
 801154a:	bf00      	nop
  }
  return  speed;
 801154c:	7bfb      	ldrb	r3, [r7, #15]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801155e:	2300      	movs	r3, #0
 8011560:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011562:	2300      	movs	r3, #0
 8011564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801156c:	4618      	mov	r0, r3
 801156e:	f7f4 f961 	bl	8005834 <HAL_HCD_ResetPort>
 8011572:	4603      	mov	r3, r0
 8011574:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011576:	7bfb      	ldrb	r3, [r7, #15]
 8011578:	4618      	mov	r0, r3
 801157a:	f000 f901 	bl	8011780 <USBH_Get_USB_Status>
 801157e:	4603      	mov	r3, r0
 8011580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011582:	7bbb      	ldrb	r3, [r7, #14]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801159e:	78fa      	ldrb	r2, [r7, #3]
 80115a0:	4611      	mov	r1, r2
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7f4 f969 	bl	800587a <HAL_HCD_HC_GetXferCount>
 80115a8:	4603      	mov	r3, r0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80115b2:	b590      	push	{r4, r7, lr}
 80115b4:	b089      	sub	sp, #36	; 0x24
 80115b6:	af04      	add	r7, sp, #16
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	4608      	mov	r0, r1
 80115bc:	4611      	mov	r1, r2
 80115be:	461a      	mov	r2, r3
 80115c0:	4603      	mov	r3, r0
 80115c2:	70fb      	strb	r3, [r7, #3]
 80115c4:	460b      	mov	r3, r1
 80115c6:	70bb      	strb	r3, [r7, #2]
 80115c8:	4613      	mov	r3, r2
 80115ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115d0:	2300      	movs	r3, #0
 80115d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80115da:	787c      	ldrb	r4, [r7, #1]
 80115dc:	78ba      	ldrb	r2, [r7, #2]
 80115de:	78f9      	ldrb	r1, [r7, #3]
 80115e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80115e2:	9302      	str	r3, [sp, #8]
 80115e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80115e8:	9301      	str	r3, [sp, #4]
 80115ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	4623      	mov	r3, r4
 80115f2:	f7f3 fdae 	bl	8005152 <HAL_HCD_HC_Init>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f000 f8bf 	bl	8011780 <USBH_Get_USB_Status>
 8011602:	4603      	mov	r3, r0
 8011604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011606:	7bbb      	ldrb	r3, [r7, #14]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3714      	adds	r7, #20
 801160c:	46bd      	mov	sp, r7
 801160e:	bd90      	pop	{r4, r7, pc}

08011610 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801161c:	2300      	movs	r3, #0
 801161e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011620:	2300      	movs	r3, #0
 8011622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801162a:	78fa      	ldrb	r2, [r7, #3]
 801162c:	4611      	mov	r1, r2
 801162e:	4618      	mov	r0, r3
 8011630:	f7f3 fe27 	bl	8005282 <HAL_HCD_HC_Halt>
 8011634:	4603      	mov	r3, r0
 8011636:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011638:	7bfb      	ldrb	r3, [r7, #15]
 801163a:	4618      	mov	r0, r3
 801163c:	f000 f8a0 	bl	8011780 <USBH_Get_USB_Status>
 8011640:	4603      	mov	r3, r0
 8011642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011644:	7bbb      	ldrb	r3, [r7, #14]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801164e:	b590      	push	{r4, r7, lr}
 8011650:	b089      	sub	sp, #36	; 0x24
 8011652:	af04      	add	r7, sp, #16
 8011654:	6078      	str	r0, [r7, #4]
 8011656:	4608      	mov	r0, r1
 8011658:	4611      	mov	r1, r2
 801165a:	461a      	mov	r2, r3
 801165c:	4603      	mov	r3, r0
 801165e:	70fb      	strb	r3, [r7, #3]
 8011660:	460b      	mov	r3, r1
 8011662:	70bb      	strb	r3, [r7, #2]
 8011664:	4613      	mov	r3, r2
 8011666:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011668:	2300      	movs	r3, #0
 801166a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801166c:	2300      	movs	r3, #0
 801166e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011676:	787c      	ldrb	r4, [r7, #1]
 8011678:	78ba      	ldrb	r2, [r7, #2]
 801167a:	78f9      	ldrb	r1, [r7, #3]
 801167c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011680:	9303      	str	r3, [sp, #12]
 8011682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011684:	9302      	str	r3, [sp, #8]
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	9301      	str	r3, [sp, #4]
 801168a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	4623      	mov	r3, r4
 8011692:	f7f3 fe19 	bl	80052c8 <HAL_HCD_HC_SubmitRequest>
 8011696:	4603      	mov	r3, r0
 8011698:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801169a:	7bfb      	ldrb	r3, [r7, #15]
 801169c:	4618      	mov	r0, r3
 801169e:	f000 f86f 	bl	8011780 <USBH_Get_USB_Status>
 80116a2:	4603      	mov	r3, r0
 80116a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd90      	pop	{r4, r7, pc}

080116b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	460b      	mov	r3, r1
 80116ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116c2:	78fa      	ldrb	r2, [r7, #3]
 80116c4:	4611      	mov	r1, r2
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f4 f8c2 	bl	8005850 <HAL_HCD_HC_GetURBState>
 80116cc:	4603      	mov	r3, r0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b082      	sub	sp, #8
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	460b      	mov	r3, r1
 80116e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d103      	bne.n	80116f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80116ec:	78fb      	ldrb	r3, [r7, #3]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 f872 	bl	80117d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80116f4:	20c8      	movs	r0, #200	; 0xc8
 80116f6:	f7f2 fc35 	bl	8003f64 <HAL_Delay>
  return USBH_OK;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	70fb      	strb	r3, [r7, #3]
 8011710:	4613      	mov	r3, r2
 8011712:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801171a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801171c:	78fa      	ldrb	r2, [r7, #3]
 801171e:	68f9      	ldr	r1, [r7, #12]
 8011720:	4613      	mov	r3, r2
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	4413      	add	r3, r2
 8011726:	00db      	lsls	r3, r3, #3
 8011728:	440b      	add	r3, r1
 801172a:	333b      	adds	r3, #59	; 0x3b
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00a      	beq.n	8011748 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011732:	78fa      	ldrb	r2, [r7, #3]
 8011734:	68f9      	ldr	r1, [r7, #12]
 8011736:	4613      	mov	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	00db      	lsls	r3, r3, #3
 801173e:	440b      	add	r3, r1
 8011740:	3350      	adds	r3, #80	; 0x50
 8011742:	78ba      	ldrb	r2, [r7, #2]
 8011744:	701a      	strb	r2, [r3, #0]
 8011746:	e009      	b.n	801175c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011748:	78fa      	ldrb	r2, [r7, #3]
 801174a:	68f9      	ldr	r1, [r7, #12]
 801174c:	4613      	mov	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4413      	add	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	440b      	add	r3, r1
 8011756:	3351      	adds	r3, #81	; 0x51
 8011758:	78ba      	ldrb	r2, [r7, #2]
 801175a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3714      	adds	r7, #20
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b082      	sub	sp, #8
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7f2 fbf6 	bl	8003f64 <HAL_Delay>
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801178a:	2300      	movs	r3, #0
 801178c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801178e:	79fb      	ldrb	r3, [r7, #7]
 8011790:	2b03      	cmp	r3, #3
 8011792:	d817      	bhi.n	80117c4 <USBH_Get_USB_Status+0x44>
 8011794:	a201      	add	r2, pc, #4	; (adr r2, 801179c <USBH_Get_USB_Status+0x1c>)
 8011796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801179a:	bf00      	nop
 801179c:	080117ad 	.word	0x080117ad
 80117a0:	080117b3 	.word	0x080117b3
 80117a4:	080117b9 	.word	0x080117b9
 80117a8:	080117bf 	.word	0x080117bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	73fb      	strb	r3, [r7, #15]
    break;
 80117b0:	e00b      	b.n	80117ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80117b2:	2302      	movs	r3, #2
 80117b4:	73fb      	strb	r3, [r7, #15]
    break;
 80117b6:	e008      	b.n	80117ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80117b8:	2301      	movs	r3, #1
 80117ba:	73fb      	strb	r3, [r7, #15]
    break;
 80117bc:	e005      	b.n	80117ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80117be:	2302      	movs	r3, #2
 80117c0:	73fb      	strb	r3, [r7, #15]
    break;
 80117c2:	e002      	b.n	80117ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80117c4:	2302      	movs	r3, #2
 80117c6:	73fb      	strb	r3, [r7, #15]
    break;
 80117c8:	bf00      	nop
  }
  return usb_status;
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3714      	adds	r7, #20
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80117e6:	79fb      	ldrb	r3, [r7, #7]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d102      	bne.n	80117f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80117ec:	2301      	movs	r3, #1
 80117ee:	73fb      	strb	r3, [r7, #15]
 80117f0:	e001      	b.n	80117f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80117f2:	2300      	movs	r3, #0
 80117f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 80117f6:	7bfb      	ldrb	r3, [r7, #15]
 80117f8:	461a      	mov	r2, r3
 80117fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80117fe:	4803      	ldr	r0, [pc, #12]	; (801180c <MX_DriverVbusFS+0x34>)
 8011800:	f7f3 fbee 	bl	8004fe0 <HAL_GPIO_WritePin>
}
 8011804:	bf00      	nop
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	40021800 	.word	0x40021800

08011810 <__errno>:
 8011810:	4b01      	ldr	r3, [pc, #4]	; (8011818 <__errno+0x8>)
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	200000b4 	.word	0x200000b4

0801181c <__libc_init_array>:
 801181c:	b570      	push	{r4, r5, r6, lr}
 801181e:	4e0d      	ldr	r6, [pc, #52]	; (8011854 <__libc_init_array+0x38>)
 8011820:	4c0d      	ldr	r4, [pc, #52]	; (8011858 <__libc_init_array+0x3c>)
 8011822:	1ba4      	subs	r4, r4, r6
 8011824:	10a4      	asrs	r4, r4, #2
 8011826:	2500      	movs	r5, #0
 8011828:	42a5      	cmp	r5, r4
 801182a:	d109      	bne.n	8011840 <__libc_init_array+0x24>
 801182c:	4e0b      	ldr	r6, [pc, #44]	; (801185c <__libc_init_array+0x40>)
 801182e:	4c0c      	ldr	r4, [pc, #48]	; (8011860 <__libc_init_array+0x44>)
 8011830:	f000 f92a 	bl	8011a88 <_init>
 8011834:	1ba4      	subs	r4, r4, r6
 8011836:	10a4      	asrs	r4, r4, #2
 8011838:	2500      	movs	r5, #0
 801183a:	42a5      	cmp	r5, r4
 801183c:	d105      	bne.n	801184a <__libc_init_array+0x2e>
 801183e:	bd70      	pop	{r4, r5, r6, pc}
 8011840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011844:	4798      	blx	r3
 8011846:	3501      	adds	r5, #1
 8011848:	e7ee      	b.n	8011828 <__libc_init_array+0xc>
 801184a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801184e:	4798      	blx	r3
 8011850:	3501      	adds	r5, #1
 8011852:	e7f2      	b.n	801183a <__libc_init_array+0x1e>
 8011854:	08015760 	.word	0x08015760
 8011858:	08015760 	.word	0x08015760
 801185c:	08015760 	.word	0x08015760
 8011860:	08015764 	.word	0x08015764

08011864 <malloc>:
 8011864:	4b02      	ldr	r3, [pc, #8]	; (8011870 <malloc+0xc>)
 8011866:	4601      	mov	r1, r0
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	f000 b86d 	b.w	8011948 <_malloc_r>
 801186e:	bf00      	nop
 8011870:	200000b4 	.word	0x200000b4

08011874 <free>:
 8011874:	4b02      	ldr	r3, [pc, #8]	; (8011880 <free+0xc>)
 8011876:	4601      	mov	r1, r0
 8011878:	6818      	ldr	r0, [r3, #0]
 801187a:	f000 b817 	b.w	80118ac <_free_r>
 801187e:	bf00      	nop
 8011880:	200000b4 	.word	0x200000b4

08011884 <memcpy>:
 8011884:	b510      	push	{r4, lr}
 8011886:	1e43      	subs	r3, r0, #1
 8011888:	440a      	add	r2, r1
 801188a:	4291      	cmp	r1, r2
 801188c:	d100      	bne.n	8011890 <memcpy+0xc>
 801188e:	bd10      	pop	{r4, pc}
 8011890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011898:	e7f7      	b.n	801188a <memcpy+0x6>

0801189a <memset>:
 801189a:	4402      	add	r2, r0
 801189c:	4603      	mov	r3, r0
 801189e:	4293      	cmp	r3, r2
 80118a0:	d100      	bne.n	80118a4 <memset+0xa>
 80118a2:	4770      	bx	lr
 80118a4:	f803 1b01 	strb.w	r1, [r3], #1
 80118a8:	e7f9      	b.n	801189e <memset+0x4>
	...

080118ac <_free_r>:
 80118ac:	b538      	push	{r3, r4, r5, lr}
 80118ae:	4605      	mov	r5, r0
 80118b0:	2900      	cmp	r1, #0
 80118b2:	d045      	beq.n	8011940 <_free_r+0x94>
 80118b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118b8:	1f0c      	subs	r4, r1, #4
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	bfb8      	it	lt
 80118be:	18e4      	addlt	r4, r4, r3
 80118c0:	f000 f8e0 	bl	8011a84 <__malloc_lock>
 80118c4:	4a1f      	ldr	r2, [pc, #124]	; (8011944 <_free_r+0x98>)
 80118c6:	6813      	ldr	r3, [r2, #0]
 80118c8:	4610      	mov	r0, r2
 80118ca:	b933      	cbnz	r3, 80118da <_free_r+0x2e>
 80118cc:	6063      	str	r3, [r4, #4]
 80118ce:	6014      	str	r4, [r2, #0]
 80118d0:	4628      	mov	r0, r5
 80118d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118d6:	f000 b8d6 	b.w	8011a86 <__malloc_unlock>
 80118da:	42a3      	cmp	r3, r4
 80118dc:	d90c      	bls.n	80118f8 <_free_r+0x4c>
 80118de:	6821      	ldr	r1, [r4, #0]
 80118e0:	1862      	adds	r2, r4, r1
 80118e2:	4293      	cmp	r3, r2
 80118e4:	bf04      	itt	eq
 80118e6:	681a      	ldreq	r2, [r3, #0]
 80118e8:	685b      	ldreq	r3, [r3, #4]
 80118ea:	6063      	str	r3, [r4, #4]
 80118ec:	bf04      	itt	eq
 80118ee:	1852      	addeq	r2, r2, r1
 80118f0:	6022      	streq	r2, [r4, #0]
 80118f2:	6004      	str	r4, [r0, #0]
 80118f4:	e7ec      	b.n	80118d0 <_free_r+0x24>
 80118f6:	4613      	mov	r3, r2
 80118f8:	685a      	ldr	r2, [r3, #4]
 80118fa:	b10a      	cbz	r2, 8011900 <_free_r+0x54>
 80118fc:	42a2      	cmp	r2, r4
 80118fe:	d9fa      	bls.n	80118f6 <_free_r+0x4a>
 8011900:	6819      	ldr	r1, [r3, #0]
 8011902:	1858      	adds	r0, r3, r1
 8011904:	42a0      	cmp	r0, r4
 8011906:	d10b      	bne.n	8011920 <_free_r+0x74>
 8011908:	6820      	ldr	r0, [r4, #0]
 801190a:	4401      	add	r1, r0
 801190c:	1858      	adds	r0, r3, r1
 801190e:	4282      	cmp	r2, r0
 8011910:	6019      	str	r1, [r3, #0]
 8011912:	d1dd      	bne.n	80118d0 <_free_r+0x24>
 8011914:	6810      	ldr	r0, [r2, #0]
 8011916:	6852      	ldr	r2, [r2, #4]
 8011918:	605a      	str	r2, [r3, #4]
 801191a:	4401      	add	r1, r0
 801191c:	6019      	str	r1, [r3, #0]
 801191e:	e7d7      	b.n	80118d0 <_free_r+0x24>
 8011920:	d902      	bls.n	8011928 <_free_r+0x7c>
 8011922:	230c      	movs	r3, #12
 8011924:	602b      	str	r3, [r5, #0]
 8011926:	e7d3      	b.n	80118d0 <_free_r+0x24>
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	1821      	adds	r1, r4, r0
 801192c:	428a      	cmp	r2, r1
 801192e:	bf04      	itt	eq
 8011930:	6811      	ldreq	r1, [r2, #0]
 8011932:	6852      	ldreq	r2, [r2, #4]
 8011934:	6062      	str	r2, [r4, #4]
 8011936:	bf04      	itt	eq
 8011938:	1809      	addeq	r1, r1, r0
 801193a:	6021      	streq	r1, [r4, #0]
 801193c:	605c      	str	r4, [r3, #4]
 801193e:	e7c7      	b.n	80118d0 <_free_r+0x24>
 8011940:	bd38      	pop	{r3, r4, r5, pc}
 8011942:	bf00      	nop
 8011944:	20004ad4 	.word	0x20004ad4

08011948 <_malloc_r>:
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	1ccd      	adds	r5, r1, #3
 801194c:	f025 0503 	bic.w	r5, r5, #3
 8011950:	3508      	adds	r5, #8
 8011952:	2d0c      	cmp	r5, #12
 8011954:	bf38      	it	cc
 8011956:	250c      	movcc	r5, #12
 8011958:	2d00      	cmp	r5, #0
 801195a:	4606      	mov	r6, r0
 801195c:	db01      	blt.n	8011962 <_malloc_r+0x1a>
 801195e:	42a9      	cmp	r1, r5
 8011960:	d903      	bls.n	801196a <_malloc_r+0x22>
 8011962:	230c      	movs	r3, #12
 8011964:	6033      	str	r3, [r6, #0]
 8011966:	2000      	movs	r0, #0
 8011968:	bd70      	pop	{r4, r5, r6, pc}
 801196a:	f000 f88b 	bl	8011a84 <__malloc_lock>
 801196e:	4a21      	ldr	r2, [pc, #132]	; (80119f4 <_malloc_r+0xac>)
 8011970:	6814      	ldr	r4, [r2, #0]
 8011972:	4621      	mov	r1, r4
 8011974:	b991      	cbnz	r1, 801199c <_malloc_r+0x54>
 8011976:	4c20      	ldr	r4, [pc, #128]	; (80119f8 <_malloc_r+0xb0>)
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	b91b      	cbnz	r3, 8011984 <_malloc_r+0x3c>
 801197c:	4630      	mov	r0, r6
 801197e:	f000 f871 	bl	8011a64 <_sbrk_r>
 8011982:	6020      	str	r0, [r4, #0]
 8011984:	4629      	mov	r1, r5
 8011986:	4630      	mov	r0, r6
 8011988:	f000 f86c 	bl	8011a64 <_sbrk_r>
 801198c:	1c43      	adds	r3, r0, #1
 801198e:	d124      	bne.n	80119da <_malloc_r+0x92>
 8011990:	230c      	movs	r3, #12
 8011992:	6033      	str	r3, [r6, #0]
 8011994:	4630      	mov	r0, r6
 8011996:	f000 f876 	bl	8011a86 <__malloc_unlock>
 801199a:	e7e4      	b.n	8011966 <_malloc_r+0x1e>
 801199c:	680b      	ldr	r3, [r1, #0]
 801199e:	1b5b      	subs	r3, r3, r5
 80119a0:	d418      	bmi.n	80119d4 <_malloc_r+0x8c>
 80119a2:	2b0b      	cmp	r3, #11
 80119a4:	d90f      	bls.n	80119c6 <_malloc_r+0x7e>
 80119a6:	600b      	str	r3, [r1, #0]
 80119a8:	50cd      	str	r5, [r1, r3]
 80119aa:	18cc      	adds	r4, r1, r3
 80119ac:	4630      	mov	r0, r6
 80119ae:	f000 f86a 	bl	8011a86 <__malloc_unlock>
 80119b2:	f104 000b 	add.w	r0, r4, #11
 80119b6:	1d23      	adds	r3, r4, #4
 80119b8:	f020 0007 	bic.w	r0, r0, #7
 80119bc:	1ac3      	subs	r3, r0, r3
 80119be:	d0d3      	beq.n	8011968 <_malloc_r+0x20>
 80119c0:	425a      	negs	r2, r3
 80119c2:	50e2      	str	r2, [r4, r3]
 80119c4:	e7d0      	b.n	8011968 <_malloc_r+0x20>
 80119c6:	428c      	cmp	r4, r1
 80119c8:	684b      	ldr	r3, [r1, #4]
 80119ca:	bf16      	itet	ne
 80119cc:	6063      	strne	r3, [r4, #4]
 80119ce:	6013      	streq	r3, [r2, #0]
 80119d0:	460c      	movne	r4, r1
 80119d2:	e7eb      	b.n	80119ac <_malloc_r+0x64>
 80119d4:	460c      	mov	r4, r1
 80119d6:	6849      	ldr	r1, [r1, #4]
 80119d8:	e7cc      	b.n	8011974 <_malloc_r+0x2c>
 80119da:	1cc4      	adds	r4, r0, #3
 80119dc:	f024 0403 	bic.w	r4, r4, #3
 80119e0:	42a0      	cmp	r0, r4
 80119e2:	d005      	beq.n	80119f0 <_malloc_r+0xa8>
 80119e4:	1a21      	subs	r1, r4, r0
 80119e6:	4630      	mov	r0, r6
 80119e8:	f000 f83c 	bl	8011a64 <_sbrk_r>
 80119ec:	3001      	adds	r0, #1
 80119ee:	d0cf      	beq.n	8011990 <_malloc_r+0x48>
 80119f0:	6025      	str	r5, [r4, #0]
 80119f2:	e7db      	b.n	80119ac <_malloc_r+0x64>
 80119f4:	20004ad4 	.word	0x20004ad4
 80119f8:	20004ad8 	.word	0x20004ad8

080119fc <rand>:
 80119fc:	b538      	push	{r3, r4, r5, lr}
 80119fe:	4b13      	ldr	r3, [pc, #76]	; (8011a4c <rand+0x50>)
 8011a00:	681c      	ldr	r4, [r3, #0]
 8011a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a04:	b97b      	cbnz	r3, 8011a26 <rand+0x2a>
 8011a06:	2018      	movs	r0, #24
 8011a08:	f7ff ff2c 	bl	8011864 <malloc>
 8011a0c:	4a10      	ldr	r2, [pc, #64]	; (8011a50 <rand+0x54>)
 8011a0e:	4b11      	ldr	r3, [pc, #68]	; (8011a54 <rand+0x58>)
 8011a10:	63a0      	str	r0, [r4, #56]	; 0x38
 8011a12:	e9c0 2300 	strd	r2, r3, [r0]
 8011a16:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <rand+0x5c>)
 8011a18:	6083      	str	r3, [r0, #8]
 8011a1a:	230b      	movs	r3, #11
 8011a1c:	8183      	strh	r3, [r0, #12]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	2300      	movs	r3, #0
 8011a22:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011a28:	480c      	ldr	r0, [pc, #48]	; (8011a5c <rand+0x60>)
 8011a2a:	690a      	ldr	r2, [r1, #16]
 8011a2c:	694b      	ldr	r3, [r1, #20]
 8011a2e:	4c0c      	ldr	r4, [pc, #48]	; (8011a60 <rand+0x64>)
 8011a30:	4350      	muls	r0, r2
 8011a32:	fb04 0003 	mla	r0, r4, r3, r0
 8011a36:	fba2 2304 	umull	r2, r3, r2, r4
 8011a3a:	4403      	add	r3, r0
 8011a3c:	1c54      	adds	r4, r2, #1
 8011a3e:	f143 0500 	adc.w	r5, r3, #0
 8011a42:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8011a46:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	200000b4 	.word	0x200000b4
 8011a50:	abcd330e 	.word	0xabcd330e
 8011a54:	e66d1234 	.word	0xe66d1234
 8011a58:	0005deec 	.word	0x0005deec
 8011a5c:	5851f42d 	.word	0x5851f42d
 8011a60:	4c957f2d 	.word	0x4c957f2d

08011a64 <_sbrk_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4c06      	ldr	r4, [pc, #24]	; (8011a80 <_sbrk_r+0x1c>)
 8011a68:	2300      	movs	r3, #0
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	6023      	str	r3, [r4, #0]
 8011a70:	f7f0 ffa0 	bl	80029b4 <_sbrk>
 8011a74:	1c43      	adds	r3, r0, #1
 8011a76:	d102      	bne.n	8011a7e <_sbrk_r+0x1a>
 8011a78:	6823      	ldr	r3, [r4, #0]
 8011a7a:	b103      	cbz	r3, 8011a7e <_sbrk_r+0x1a>
 8011a7c:	602b      	str	r3, [r5, #0]
 8011a7e:	bd38      	pop	{r3, r4, r5, pc}
 8011a80:	200056dc 	.word	0x200056dc

08011a84 <__malloc_lock>:
 8011a84:	4770      	bx	lr

08011a86 <__malloc_unlock>:
 8011a86:	4770      	bx	lr

08011a88 <_init>:
 8011a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8a:	bf00      	nop
 8011a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a8e:	bc08      	pop	{r3}
 8011a90:	469e      	mov	lr, r3
 8011a92:	4770      	bx	lr

08011a94 <_fini>:
 8011a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a96:	bf00      	nop
 8011a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a9a:	bc08      	pop	{r3}
 8011a9c:	469e      	mov	lr, r3
 8011a9e:	4770      	bx	lr
